(get-info :version)
; (:version "4.8.6")
; Started: 2024-05-26 13:27:17
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Nand_gate<TYPE> TYPE)
(declare-const class_Read<TYPE> TYPE)
(declare-const class_Write_a<TYPE> TYPE)
(declare-const class_Write_b<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Read_m: Ref]
(declare-fun $FVF.domain_Read_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Read_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Read_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Read_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Read_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Read_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Write_a_m: Ref]
(declare-fun $FVF.domain_Write_a_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Write_a_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Write_a_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Write_a_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Write_a_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Write_a_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Write_b_m: Ref]
(declare-fun $FVF.domain_Write_b_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Write_b_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Write_b_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Write_b_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Write_b_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Write_b_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Read_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Read_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_a_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_a_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_b_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_b_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Main<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Nand_gate<TYPE> class_Read<TYPE> class_Write_a<TYPE> class_Write_b<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Nand_gate<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Read<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Write_a<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Write_b<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Read_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Read_m vs) ($FVF.domain_Read_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Read_m vs))
            (= ($FVF.lookup_Read_m vs x) ($FVF.lookup_Read_m ws x)))
          :pattern (($FVF.lookup_Read_m vs x) ($FVF.lookup_Read_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Read_m pm r))
    :pattern ($FVF.perm_Read_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Read_m f r) true)
    :pattern ($FVF.loc_Read_m f r))))
; /field_value_functions_axioms.smt2 [Write_a_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Write_a_m vs) ($FVF.domain_Write_a_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Write_a_m vs))
            (= ($FVF.lookup_Write_a_m vs x) ($FVF.lookup_Write_a_m ws x)))
          :pattern (($FVF.lookup_Write_a_m vs x) ($FVF.lookup_Write_a_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Write_a_m pm r))
    :pattern ($FVF.perm_Write_a_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Write_a_m f r) true)
    :pattern ($FVF.loc_Write_a_m f r))))
; /field_value_functions_axioms.smt2 [Write_b_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Write_b_m vs) ($FVF.domain_Write_b_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Write_b_m vs))
            (= ($FVF.lookup_Write_b_m vs x) ($FVF.lookup_Write_b_m ws x)))
          :pattern (($FVF.lookup_Write_b_m vs x) ($FVF.lookup_Write_b_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Write_b_m pm r))
    :pattern ($FVF.perm_Write_b_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Write_b_m f r) true)
    :pattern ($FVF.loc_Write_b_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@0@00 vals@1@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (let ((result@2@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))) (implies
    (and (not (= diz@0@00 $Ref.null)) (= (Seq_length vals@1@00) 3))
    (and
      (and
        (and
          (or
            (< (Seq_index vals@1@00 0) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 0)))
          (or
            (< (Seq_index vals@1@00 1) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 1))))
        (or
          (< (Seq_index vals@1@00 2) (- 0 1))
          (<= result@2@00 (Seq_index vals@1@00 2))))
      (and
        (implies
          (and
            (and
              (< (Seq_index vals@1@00 0) (- 0 1))
              (< (Seq_index vals@1@00 1) (- 0 1)))
            (< (Seq_index vals@1@00 2) (- 0 1)))
          (= result@2@00 0))
        (implies
          (or
            (or
              (<= (- 0 1) (Seq_index vals@1@00 0))
              (<= (- 0 1) (Seq_index vals@1@00 1)))
            (<= (- 0 1) (Seq_index vals@1@00 2)))
          (or
            (or
              (and
                (<= (- 0 1) (Seq_index vals@1@00 0))
                (= result@2@00 (Seq_index vals@1@00 0)))
              (and
                (<= (- 0 1) (Seq_index vals@1@00 1))
                (= result@2@00 (Seq_index vals@1@00 1))))
            (and
              (<= (- 0 1) (Seq_index vals@1@00 2))
              (= result@2@00 (Seq_index vals@1@00 2)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00)
    (instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@3@00 u@4@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (let ((result@5@00 (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))) (=
    result@5@00
    (or (= t@3@00 u@4@00) (= (directSuperclass<TYPE> t@3@00) u@4@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (= (new_frac%limited s@$ x@6@00) (new_frac s@$ x@6@00))
  :pattern ((new_frac s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (new_frac%stateless x@6@00)
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (let ((result@7@00 (new_frac%limited s@$ x@6@00))) (implies
    (and (< $Perm.No x@6@00) (<= x@6@00 $Perm.Write))
    (= (frac_val<Perm> result@7@00) x@6@00)))
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@8@00) (new_zfrac s@$ x@8@00))
  :pattern ((new_zfrac s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (new_zfrac%stateless x@8@00)
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (let ((result@9@00 (new_zfrac%limited s@$ x@8@00))) (implies
    (and (<= $Perm.No x@8@00) (<= x@8@00 $Perm.Write))
    (= (zfrac_val<Perm> result@9@00) x@8@00)))
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Main___contract_unsatisfiable__Main_EncodedGlobalVariables ----------
(declare-const diz@0@01 $Ref)
(declare-const globals@1@01 $Ref)
(declare-const diz@2@01 $Ref)
(declare-const globals@3@01 $Ref)
(push) ; 1
(declare-const $t@4@01 $Snap)
(assert (= $t@4@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@2@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@5@01 $Snap)
(assert (= $t@5@01 ($Snap.combine ($Snap.first $t@5@01) ($Snap.second $t@5@01))))
(assert (= ($Snap.first $t@5@01) $Snap.unit))
(assert (= ($Snap.second $t@5@01) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Main_Main_EncodedGlobalVariables ----------
(declare-const globals@6@01 $Ref)
(declare-const sys__result@7@01 $Ref)
(declare-const globals@8@01 $Ref)
(declare-const sys__result@9@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@9@01 $Ref.null)))
(assert (= ($Snap.second $t@10@01) $Snap.unit))
; [eval] type_of(sys__result) == class_Main()
; [eval] type_of(sys__result)
; [eval] class_Main()
(assert (= (type_of<TYPE> sys__result@9@01) (as class_Main<TYPE>  TYPE)))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_11__9: Ref
(declare-const __flatten_11__9@11@01 $Ref)
; [exec]
; var __flatten_9__8: Ref
(declare-const __flatten_9__8@12@01 $Ref)
; [exec]
; var __flatten_7__7: Ref
(declare-const __flatten_7__7@13@01 $Ref)
; [exec]
; var __flatten_5__6: Ref
(declare-const __flatten_5__6@14@01 $Ref)
; [exec]
; var __flatten_4__5: Seq[Int]
(declare-const __flatten_4__5@15@01 Seq<Int>)
; [exec]
; var __flatten_3__4: Seq[Int]
(declare-const __flatten_3__4@16@01 Seq<Int>)
; [exec]
; var __flatten_2__3: Seq[Int]
(declare-const __flatten_2__3@17@01 Seq<Int>)
; [exec]
; var __flatten_1__2: Seq[Int]
(declare-const __flatten_1__2@18@01 Seq<Int>)
; [exec]
; var diz__1: Ref
(declare-const diz__1@19@01 $Ref)
; [exec]
; diz__1 := new(Main_process_state, Main_event_state, Main_nand, Main_nand_write_a, Main_nand_write_b, Main_nand_read)
(declare-const diz__1@20@01 $Ref)
(assert (not (= diz__1@20@01 $Ref.null)))
(declare-const Main_process_state@21@01 Seq<Int>)
(declare-const Main_event_state@22@01 Seq<Int>)
(declare-const Main_nand@23@01 $Ref)
(declare-const Main_nand_write_a@24@01 $Ref)
(declare-const Main_nand_write_b@25@01 $Ref)
(declare-const Main_nand_read@26@01 $Ref)
(assert (not (= diz__1@20@01 __flatten_7__7@13@01)))
(assert (not (= diz__1@20@01 __flatten_9__8@12@01)))
(assert (not (= diz__1@20@01 diz__1@19@01)))
(assert (not (= diz__1@20@01 __flatten_5__6@14@01)))
(assert (not (= diz__1@20@01 __flatten_11__9@11@01)))
(assert (not (= diz__1@20@01 sys__result@9@01)))
(assert (not (= diz__1@20@01 globals@8@01)))
; [exec]
; inhale type_of(diz__1) == class_Main()
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 $Snap.unit))
; [eval] type_of(diz__1) == class_Main()
; [eval] type_of(diz__1)
; [eval] class_Main()
(assert (= (type_of<TYPE> diz__1@20@01) (as class_Main<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_2__3 := Seq(-1, -1, -1)
; [eval] Seq(-1, -1, -1)
; [eval] -1
; [eval] -1
; [eval] -1
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append (Seq_singleton (- 0 1)) (Seq_singleton (- 0 1)))
      (Seq_singleton (- 0 1))))
  3))
(declare-const __flatten_2__3@28@01 Seq<Int>)
(assert (Seq_equal
  __flatten_2__3@28@01
  (Seq_append
    (Seq_append (Seq_singleton (- 0 1)) (Seq_singleton (- 0 1)))
    (Seq_singleton (- 0 1)))))
; [exec]
; __flatten_1__2 := __flatten_2__3
; [exec]
; diz__1.Main_process_state := __flatten_1__2
; [exec]
; __flatten_4__5 := Seq(-3, -3, -3)
; [eval] Seq(-3, -3, -3)
; [eval] -3
; [eval] -3
; [eval] -3
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append (Seq_singleton (- 0 3)) (Seq_singleton (- 0 3)))
      (Seq_singleton (- 0 3))))
  3))
(declare-const __flatten_4__5@29@01 Seq<Int>)
(assert (Seq_equal
  __flatten_4__5@29@01
  (Seq_append
    (Seq_append (Seq_singleton (- 0 3)) (Seq_singleton (- 0 3)))
    (Seq_singleton (- 0 3)))))
; [exec]
; __flatten_3__4 := __flatten_4__5
; [exec]
; diz__1.Main_event_state := __flatten_3__4
; [exec]
; __flatten_5__6 := Nand_gate_Nand_gate_EncodedGlobalVariables_Main(globals, diz__1)
(declare-const sys__result@30@01 $Ref)
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 ($Snap.combine ($Snap.first $t@31@01) ($Snap.second $t@31@01))))
(assert (= ($Snap.first $t@31@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@30@01 $Ref.null)))
(assert (=
  ($Snap.second $t@31@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@31@01))
    ($Snap.second ($Snap.second $t@31@01)))))
(assert (= ($Snap.first ($Snap.second $t@31@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Nand_gate()
; [eval] type_of(sys__result)
; [eval] class_Nand_gate()
(assert (= (type_of<TYPE> sys__result@30@01) (as class_Nand_gate<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@31@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@31@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@31@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@31@01))))
  diz__1@20@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_A == true
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))
  true))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_B == false
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))
  false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_out == false
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))))
  false))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; diz__1.Main_nand := __flatten_5__6
; [exec]
; __flatten_7__7 := Write_a_Write_a_EncodedGlobalVariables_Main(globals, diz__1)
(declare-const sys__result@32@01 $Ref)
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 ($Snap.combine ($Snap.first $t@33@01) ($Snap.second $t@33@01))))
(assert (= ($Snap.first $t@33@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@32@01 $Ref.null)))
(assert (=
  ($Snap.second $t@33@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.second ($Snap.second $t@33@01)))))
(assert (= ($Snap.first ($Snap.second $t@33@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Write_a()
; [eval] type_of(sys__result)
; [eval] class_Write_a()
(assert (= (type_of<TYPE> sys__result@32@01) (as class_Write_a<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@33@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@33@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  $Snap.unit))
; [eval] sys__result.Write_a_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  diz__1@20@01))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; diz__1.Main_nand_write_a := __flatten_7__7
; [exec]
; __flatten_9__8 := Write_b_Write_b_EncodedGlobalVariables_Main(globals, diz__1)
(declare-const sys__result@34@01 $Ref)
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 ($Snap.combine ($Snap.first $t@35@01) ($Snap.second $t@35@01))))
(assert (= ($Snap.first $t@35@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@34@01 $Ref.null)))
(assert (=
  ($Snap.second $t@35@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@35@01))
    ($Snap.second ($Snap.second $t@35@01)))))
(assert (= ($Snap.first ($Snap.second $t@35@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Write_b()
; [eval] type_of(sys__result)
; [eval] class_Write_b()
(assert (= (type_of<TYPE> sys__result@34@01) (as class_Write_b<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@35@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@35@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@35@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@35@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@01)))))
  $Snap.unit))
; [eval] sys__result.Write_b_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@35@01)))))
  diz__1@20@01))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; diz__1.Main_nand_write_b := __flatten_9__8
; [exec]
; __flatten_11__9 := Read_Read_EncodedGlobalVariables_Main(globals, diz__1)
(declare-const sys__result@36@01 $Ref)
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 ($Snap.combine ($Snap.first $t@37@01) ($Snap.second $t@37@01))))
(assert (= ($Snap.first $t@37@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@36@01 $Ref.null)))
(assert (=
  ($Snap.second $t@37@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@37@01))
    ($Snap.second ($Snap.second $t@37@01)))))
(assert (= ($Snap.first ($Snap.second $t@37@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Read()
; [eval] type_of(sys__result)
; [eval] class_Read()
(assert (= (type_of<TYPE> sys__result@36@01) (as class_Read<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@37@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@37@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@37@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))
  $Snap.unit))
; [eval] sys__result.Read_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))
  diz__1@20@01))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; diz__1.Main_nand_read := __flatten_11__9
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz__1, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(set-option :timeout 0)
(push) ; 3
(assert (not (= (Seq_length __flatten_2__3@28@01) 3)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               336
;  :arith-add-rows          20
;  :arith-assert-diseq      6
;  :arith-assert-lower      27
;  :arith-assert-upper      15
;  :arith-bound-prop        4
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   37
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            16
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             462
;  :mk-clause               112
;  :num-allocs              3569391
;  :num-checks              12
;  :propagations            73
;  :quant-instantiations    46
;  :rlimit-count            107777)
(assert (= (Seq_length __flatten_2__3@28@01) 3))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(push) ; 3
(assert (not (= (Seq_length __flatten_4__5@29@01) 3)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               337
;  :arith-add-rows          20
;  :arith-assert-diseq      6
;  :arith-assert-lower      28
;  :arith-assert-upper      16
;  :arith-bound-prop        4
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   37
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            16
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             468
;  :mk-clause               112
;  :num-allocs              3569391
;  :num-checks              13
;  :propagations            73
;  :quant-instantiations    46
;  :rlimit-count            107902)
(assert (= (Seq_length __flatten_4__5@29@01) 3))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@38@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@38@01 | live]
; [else-branch: 0 | !(0 <= i@38@01) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@38@01]
(assert (<= 0 i@38@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@38@01)]
(assert (not (<= 0 i@38@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@38@01 < |__flatten_2__3@28@01| && 0 <= i@38@01 | live]
; [else-branch: 1 | !(i@38@01 < |__flatten_2__3@28@01| && 0 <= i@38@01) | live]
(push) ; 5
; [then-branch: 1 | i@38@01 < |__flatten_2__3@28@01| && 0 <= i@38@01]
(assert (and (< i@38@01 (Seq_length __flatten_2__3@28@01)) (<= 0 i@38@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 6
(assert (not (>= i@38@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               338
;  :arith-add-rows          20
;  :arith-assert-diseq      6
;  :arith-assert-lower      30
;  :arith-assert-upper      18
;  :arith-bound-prop        4
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   37
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            16
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             473
;  :mk-clause               112
;  :num-allocs              3569391
;  :num-checks              14
;  :propagations            73
;  :quant-instantiations    46
;  :rlimit-count            108089)
; [eval] -1
(push) ; 6
; [then-branch: 2 | __flatten_2__3@28@01[i@38@01] == -1 | live]
; [else-branch: 2 | __flatten_2__3@28@01[i@38@01] != -1 | live]
(push) ; 7
; [then-branch: 2 | __flatten_2__3@28@01[i@38@01] == -1]
(assert (= (Seq_index __flatten_2__3@28@01 i@38@01) (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | __flatten_2__3@28@01[i@38@01] != -1]
(assert (not (= (Seq_index __flatten_2__3@28@01 i@38@01) (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@38@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               339
;  :arith-add-rows          22
;  :arith-assert-diseq      6
;  :arith-assert-lower      30
;  :arith-assert-upper      18
;  :arith-bound-prop        4
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   37
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            16
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             478
;  :mk-clause               116
;  :num-allocs              3569391
;  :num-checks              15
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            108256)
(push) ; 8
; [then-branch: 3 | 0 <= __flatten_2__3@28@01[i@38@01] | live]
; [else-branch: 3 | !(0 <= __flatten_2__3@28@01[i@38@01]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= __flatten_2__3@28@01[i@38@01]]
(assert (<= 0 (Seq_index __flatten_2__3@28@01 i@38@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@38@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               339
;  :arith-add-rows          22
;  :arith-assert-diseq      7
;  :arith-assert-lower      33
;  :arith-assert-upper      18
;  :arith-bound-prop        4
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   37
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            16
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             481
;  :mk-clause               117
;  :num-allocs              3569391
;  :num-checks              16
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            108330)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= __flatten_2__3@28@01[i@38@01])]
(assert (not (<= 0 (Seq_index __flatten_2__3@28@01 i@38@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@38@01 < |__flatten_2__3@28@01| && 0 <= i@38@01)]
(assert (not (and (< i@38@01 (Seq_length __flatten_2__3@28@01)) (<= 0 i@38@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 3
(assert (not (forall ((i@38@01 Int)) (!
  (implies
    (and (< i@38@01 (Seq_length __flatten_2__3@28@01)) (<= 0 i@38@01))
    (or
      (= (Seq_index __flatten_2__3@28@01 i@38@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_2__3@28@01 i@38@01)
          (Seq_length __flatten_4__5@29@01))
        (<= 0 (Seq_index __flatten_2__3@28@01 i@38@01)))))
  :pattern ((Seq_index __flatten_2__3@28@01 i@38@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      14
;  :arith-assert-lower      54
;  :arith-assert-upper      28
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             591
;  :mk-clause               227
;  :num-allocs              3569391
;  :num-checks              17
;  :propagations            100
;  :quant-instantiations    58
;  :rlimit-count            110084
;  :time                    0.00)
(assert (forall ((i@38@01 Int)) (!
  (implies
    (and (< i@38@01 (Seq_length __flatten_2__3@28@01)) (<= 0 i@38@01))
    (or
      (= (Seq_index __flatten_2__3@28@01 i@38@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_2__3@28@01 i@38@01)
          (Seq_length __flatten_4__5@29@01))
        (<= 0 (Seq_index __flatten_2__3@28@01 i@38@01)))))
  :pattern ((Seq_index __flatten_2__3@28@01 i@38@01))
  :qid |prog.l<no position>|)))
(declare-const $k@39@01 $Perm)
(assert ($Perm.isReadVar $k@39@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@39@01 $Perm.No) (< $Perm.No $k@39@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      29
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             596
;  :mk-clause               229
;  :num-allocs              3569391
;  :num-checks              18
;  :propagations            101
;  :quant-instantiations    58
;  :rlimit-count            110554)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      29
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             596
;  :mk-clause               229
;  :num-allocs              3569391
;  :num-checks              19
;  :propagations            101
;  :quant-instantiations    58
;  :rlimit-count            110567)
(assert (< $k@39@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@39@01)))
(assert (<= (- $Perm.Write $k@39@01) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@39@01)) (not (= diz__1@20@01 $Ref.null))))
; [eval] diz.Main_nand != null
(declare-const $k@40@01 $Perm)
(assert ($Perm.isReadVar $k@40@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@40@01 $Perm.No) (< $Perm.No $k@40@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      31
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             601
;  :mk-clause               231
;  :num-allocs              3569391
;  :num-checks              20
;  :propagations            102
;  :quant-instantiations    58
;  :rlimit-count            110856)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      31
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             601
;  :mk-clause               231
;  :num-allocs              3569391
;  :num-checks              21
;  :propagations            102
;  :quant-instantiations    58
;  :rlimit-count            110869
;  :time                    0.01)
(assert (< $k@40@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@40@01)))
(assert (<= (- $Perm.Write $k@40@01) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@40@01)) (not (= diz__1@20@01 $Ref.null))))
; [eval] diz.Main_nand_write_a != null
(declare-const $k@41@01 $Perm)
(assert ($Perm.isReadVar $k@41@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@41@01 $Perm.No) (< $Perm.No $k@41@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      17
;  :arith-assert-lower      60
;  :arith-assert-upper      33
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             606
;  :mk-clause               233
;  :num-allocs              3569391
;  :num-checks              22
;  :propagations            103
;  :quant-instantiations    58
;  :rlimit-count            111157)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      17
;  :arith-assert-lower      60
;  :arith-assert-upper      33
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             606
;  :mk-clause               233
;  :num-allocs              3569391
;  :num-checks              23
;  :propagations            103
;  :quant-instantiations    58
;  :rlimit-count            111170
;  :time                    0.01)
(assert (< $k@41@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@41@01)))
(assert (<= (- $Perm.Write $k@41@01) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@41@01)) (not (= diz__1@20@01 $Ref.null))))
; [eval] diz.Main_nand_write_b != null
(declare-const $k@42@01 $Perm)
(assert ($Perm.isReadVar $k@42@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@42@01 $Perm.No) (< $Perm.No $k@42@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      18
;  :arith-assert-lower      62
;  :arith-assert-upper      35
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             611
;  :mk-clause               235
;  :num-allocs              3569391
;  :num-checks              24
;  :propagations            104
;  :quant-instantiations    58
;  :rlimit-count            111458)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      18
;  :arith-assert-lower      62
;  :arith-assert-upper      35
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             611
;  :mk-clause               235
;  :num-allocs              3569391
;  :num-checks              25
;  :propagations            104
;  :quant-instantiations    58
;  :rlimit-count            111471)
(assert (< $k@42@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@42@01)))
(assert (<= (- $Perm.Write $k@42@01) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@42@01)) (not (= diz__1@20@01 $Ref.null))))
; [eval] diz.Main_nand_read != null
(declare-const $k@43@01 $Perm)
(assert ($Perm.isReadVar $k@43@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@43@01 $Perm.No) (< $Perm.No $k@43@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      19
;  :arith-assert-lower      64
;  :arith-assert-upper      37
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             616
;  :mk-clause               237
;  :num-allocs              3569391
;  :num-checks              26
;  :propagations            105
;  :quant-instantiations    58
;  :rlimit-count            111760)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-add-rows          80
;  :arith-assert-diseq      19
;  :arith-assert-lower      64
;  :arith-assert-upper      37
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   47
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            21
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             616
;  :mk-clause               237
;  :num-allocs              3569391
;  :num-checks              27
;  :propagations            105
;  :quant-instantiations    58
;  :rlimit-count            111773)
(assert (< $k@43@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@43@01)))
(assert (<= (- $Perm.Write $k@43@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@43@01))
  (not (= sys__result@30@01 $Ref.null))))
; [eval] diz.Main_nand.Nand_gate_m == diz
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($SortWrappers.Seq<Int>To$Snap __flatten_2__3@28@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.Seq<Int>To$Snap __flatten_4__5@29@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap sys__result@30@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@01))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01)))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@01))))))
                          ($Snap.combine
                            ($SortWrappers.$RefTo$Snap sys__result@32@01)
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
                                ($Snap.combine
                                  ($SortWrappers.$RefTo$Snap sys__result@34@01)
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@35@01)))))
                                      ($Snap.combine
                                        ($SortWrappers.$RefTo$Snap sys__result@36@01)
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second $t@31@01)))
                                            $Snap.unit)))))))))))))))))))))) diz__1@20@01 globals@8@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz__1, globals), write)
; [exec]
; sys__result := diz__1
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Main()
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Main()
; [eval] type_of(sys__result)
; [eval] class_Main()
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Main___contract_unsatisfiable__main_EncodedGlobalVariables ----------
(declare-const diz@44@01 $Ref)
(declare-const globals@45@01 $Ref)
(declare-const diz@46@01 $Ref)
(declare-const globals@47@01 $Ref)
(push) ; 1
(declare-const $t@48@01 $Snap)
(assert (= $t@48@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@46@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 ($Snap.combine ($Snap.first $t@49@01) ($Snap.second $t@49@01))))
(assert (= ($Snap.first $t@49@01) $Snap.unit))
(assert (= ($Snap.second $t@49@01) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Main_main_EncodedGlobalVariables ----------
(declare-const diz@50@01 $Ref)
(declare-const globals@51@01 $Ref)
(declare-const diz@52@01 $Ref)
(declare-const globals@53@01 $Ref)
(push) ; 1
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@52@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var min_advance__12: Int
(declare-const min_advance__12@55@01 Int)
; [exec]
; var __flatten_19__10: Seq[Int]
(declare-const __flatten_19__10@56@01 Seq<Int>)
; [exec]
; var __flatten_20__11: Seq[Int]
(declare-const __flatten_20__11@57@01 Seq<Int>)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@58@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@58@01 ($Snap.combine ($Snap.first $t@58@01) ($Snap.second $t@58@01))))
(assert (= ($Snap.first $t@58@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@58@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    ($Snap.second ($Snap.second $t@58@01)))))
(assert (= ($Snap.first ($Snap.second $t@58@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@58@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@58@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@58@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@59@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@59@01 | live]
; [else-branch: 4 | !(0 <= i@59@01) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@59@01]
(assert (<= 0 i@59@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@59@01)]
(assert (not (<= 0 i@59@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@59@01 < |First:(Second:(Second:(Second:($t@58@01))))| && 0 <= i@59@01 | live]
; [else-branch: 5 | !(i@59@01 < |First:(Second:(Second:(Second:($t@58@01))))| && 0 <= i@59@01) | live]
(push) ; 5
; [then-branch: 5 | i@59@01 < |First:(Second:(Second:(Second:($t@58@01))))| && 0 <= i@59@01]
(assert (and
  (<
    i@59@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
  (<= 0 i@59@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@59@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               485
;  :arith-add-rows          82
;  :arith-assert-diseq      21
;  :arith-assert-lower      71
;  :arith-assert-upper      40
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              236
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             655
;  :mk-clause               243
;  :num-allocs              3569391
;  :num-checks              35
;  :propagations            107
;  :quant-instantiations    64
;  :rlimit-count            115243)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@58@01))))[i@59@01] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@58@01))))[i@59@01] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@58@01))))[i@59@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
    i@59@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@58@01))))[i@59@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
      i@59@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@59@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               485
;  :arith-add-rows          82
;  :arith-assert-diseq      21
;  :arith-assert-lower      71
;  :arith-assert-upper      40
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              236
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             656
;  :mk-clause               243
;  :num-allocs              3569391
;  :num-checks              36
;  :propagations            107
;  :quant-instantiations    64
;  :rlimit-count            115418)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@58@01))))[i@59@01] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@58@01))))[i@59@01]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@58@01))))[i@59@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
    i@59@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@59@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               485
;  :arith-add-rows          82
;  :arith-assert-diseq      22
;  :arith-assert-lower      74
;  :arith-assert-upper      40
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              236
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             659
;  :mk-clause               244
;  :num-allocs              3569391
;  :num-checks              37
;  :propagations            107
;  :quant-instantiations    64
;  :rlimit-count            115541)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@58@01))))[i@59@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
      i@59@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@59@01 < |First:(Second:(Second:(Second:($t@58@01))))| && 0 <= i@59@01)]
(assert (not
  (and
    (<
      i@59@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
    (<= 0 i@59@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@59@01 Int)) (!
  (implies
    (and
      (<
        i@59@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
      (<= 0 i@59@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
          i@59@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
            i@59@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
            i@59@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
    i@59@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))
(declare-const $k@60@01 $Perm)
(assert ($Perm.isReadVar $k@60@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@60@01 $Perm.No) (< $Perm.No $k@60@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      76
;  :arith-assert-upper      41
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             665
;  :mk-clause               246
;  :num-allocs              3569391
;  :num-checks              38
;  :propagations            108
;  :quant-instantiations    64
;  :rlimit-count            116309)
(assert (<= $Perm.No $k@60@01))
(assert (<= $k@60@01 $Perm.Write))
(assert (implies (< $Perm.No $k@60@01) (not (= diz@52@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               496
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      76
;  :arith-assert-upper      42
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             668
;  :mk-clause               246
;  :num-allocs              3569391
;  :num-checks              39
;  :propagations            108
;  :quant-instantiations    64
;  :rlimit-count            116632)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               502
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      76
;  :arith-assert-upper      42
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             671
;  :mk-clause               246
;  :num-allocs              3569391
;  :num-checks              40
;  :propagations            108
;  :quant-instantiations    65
;  :rlimit-count            116988)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               507
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      76
;  :arith-assert-upper      42
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             672
;  :mk-clause               246
;  :num-allocs              3569391
;  :num-checks              41
;  :propagations            108
;  :quant-instantiations    65
;  :rlimit-count            117245)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               512
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      76
;  :arith-assert-upper      42
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             673
;  :mk-clause               246
;  :num-allocs              3569391
;  :num-checks              42
;  :propagations            108
;  :quant-instantiations    65
;  :rlimit-count            117512
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))
(declare-const $k@61@01 $Perm)
(assert ($Perm.isReadVar $k@61@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@61@01 $Perm.No) (< $Perm.No $k@61@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               517
;  :arith-add-rows          82
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      43
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             678
;  :mk-clause               248
;  :num-allocs              3569391
;  :num-checks              43
;  :propagations            109
;  :quant-instantiations    65
;  :rlimit-count            117933)
(assert (<= $Perm.No $k@61@01))
(assert (<= $k@61@01 $Perm.Write))
(assert (implies (< $Perm.No $k@61@01) (not (= diz@52@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               523
;  :arith-add-rows          82
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      44
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             681
;  :mk-clause               248
;  :num-allocs              3569391
;  :num-checks              44
;  :propagations            109
;  :quant-instantiations    65
;  :rlimit-count            118306)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               529
;  :arith-add-rows          82
;  :arith-assert-diseq      24
;  :arith-assert-lower      78
;  :arith-assert-upper      44
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             684
;  :mk-clause               248
;  :num-allocs              3569391
;  :num-checks              45
;  :propagations            109
;  :quant-instantiations    66
;  :rlimit-count            118716)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))))
(declare-const $k@62@01 $Perm)
(assert ($Perm.isReadVar $k@62@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@62@01 $Perm.No) (< $Perm.No $k@62@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               534
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      45
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             689
;  :mk-clause               250
;  :num-allocs              3569391
;  :num-checks              46
;  :propagations            110
;  :quant-instantiations    66
;  :rlimit-count            119167)
(assert (<= $Perm.No $k@62@01))
(assert (<= $k@62@01 $Perm.Write))
(assert (implies (< $Perm.No $k@62@01) (not (= diz@52@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@62@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               540
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      46
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             692
;  :mk-clause               250
;  :num-allocs              3569391
;  :num-checks              47
;  :propagations            110
;  :quant-instantiations    66
;  :rlimit-count            119570)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@62@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               546
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      80
;  :arith-assert-upper      46
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             695
;  :mk-clause               250
;  :num-allocs              3569391
;  :num-checks              48
;  :propagations            110
;  :quant-instantiations    67
;  :rlimit-count            120006
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))))))
(declare-const $k@63@01 $Perm)
(assert ($Perm.isReadVar $k@63@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@63@01 $Perm.No) (< $Perm.No $k@63@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               551
;  :arith-add-rows          82
;  :arith-assert-diseq      26
;  :arith-assert-lower      82
;  :arith-assert-upper      47
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             700
;  :mk-clause               252
;  :num-allocs              3569391
;  :num-checks              49
;  :propagations            111
;  :quant-instantiations    67
;  :rlimit-count            120487)
(assert (<= $Perm.No $k@63@01))
(assert (<= $k@63@01 $Perm.Write))
(assert (implies (< $Perm.No $k@63@01) (not (= diz@52@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@63@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               557
;  :arith-add-rows          82
;  :arith-assert-diseq      26
;  :arith-assert-lower      82
;  :arith-assert-upper      48
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               37
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             703
;  :mk-clause               252
;  :num-allocs              3569391
;  :num-checks              50
;  :propagations            111
;  :quant-instantiations    67
;  :rlimit-count            120920)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-add-rows          82
;  :arith-assert-diseq      26
;  :arith-assert-lower      82
;  :arith-assert-upper      48
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             706
;  :mk-clause               252
;  :num-allocs              3569391
;  :num-checks              51
;  :propagations            111
;  :quant-instantiations    68
;  :rlimit-count            121386)
(declare-const $k@64@01 $Perm)
(assert ($Perm.isReadVar $k@64@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@64@01 $Perm.No) (< $Perm.No $k@64@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-add-rows          82
;  :arith-assert-diseq      27
;  :arith-assert-lower      84
;  :arith-assert-upper      49
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             710
;  :mk-clause               254
;  :num-allocs              3569391
;  :num-checks              52
;  :propagations            112
;  :quant-instantiations    68
;  :rlimit-count            121584)
(assert (<= $Perm.No $k@64@01))
(assert (<= $k@64@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@64@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               564
;  :arith-add-rows          82
;  :arith-assert-diseq      27
;  :arith-assert-lower      84
;  :arith-assert-upper      50
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             712
;  :mk-clause               254
;  :num-allocs              3569391
;  :num-checks              53
;  :propagations            112
;  :quant-instantiations    68
;  :rlimit-count            121950)
(push) ; 3
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               564
;  :arith-add-rows          82
;  :arith-assert-diseq      27
;  :arith-assert-lower      84
;  :arith-assert-upper      50
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               41
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   58
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              237
;  :final-checks            28
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             712
;  :mk-clause               254
;  :num-allocs              3569391
;  :num-checks              54
;  :propagations            112
;  :quant-instantiations    68
;  :rlimit-count            121998)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))))))))))
  diz@52@01))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@58@01 diz@52@01 globals@53@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@65@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Write_a_forkOperator_EncodedGlobalVariables(diz.Main_nand_write_a, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               634
;  :arith-add-rows          82
;  :arith-assert-diseq      27
;  :arith-assert-lower      84
;  :arith-assert-upper      50
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   64
;  :datatype-splits         48
;  :decisions               86
;  :del-clause              253
;  :final-checks            31
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             727
;  :mk-clause               254
;  :num-allocs              3569391
;  :num-checks              57
;  :propagations            112
;  :quant-instantiations    69
;  :rlimit-count            123298
;  :time                    0.01)
; [eval] diz != null
(declare-const $k@66@01 $Perm)
(assert ($Perm.isReadVar $k@66@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@66@01 $Perm.No) (< $Perm.No $k@66@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               634
;  :arith-add-rows          82
;  :arith-assert-diseq      28
;  :arith-assert-lower      86
;  :arith-assert-upper      51
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   64
;  :datatype-splits         48
;  :decisions               86
;  :del-clause              253
;  :final-checks            31
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             731
;  :mk-clause               256
;  :num-allocs              3569391
;  :num-checks              58
;  :propagations            113
;  :quant-instantiations    69
;  :rlimit-count            123497)
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(declare-const $k@67@01 $Perm)
(assert ($Perm.isReadVar $k@67@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@67@01 $Perm.No) (< $Perm.No $k@67@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               770
;  :arith-add-rows          82
;  :arith-assert-diseq      29
;  :arith-assert-lower      88
;  :arith-assert-upper      52
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   72
;  :datatype-splits         48
;  :decisions               134
;  :del-clause              255
;  :final-checks            35
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             735
;  :mk-clause               258
;  :num-allocs              3569391
;  :num-checks              63
;  :propagations            114
;  :quant-instantiations    69
;  :rlimit-count            125488)
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Main_immediate_wakeup_EncodedGlobalVariables ----------
(declare-const diz@68@01 $Ref)
(declare-const globals@69@01 $Ref)
(declare-const diz@70@01 $Ref)
(declare-const globals@71@01 $Ref)
(push) ; 1
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 ($Snap.combine ($Snap.first $t@72@01) ($Snap.second $t@72@01))))
(assert (= ($Snap.first $t@72@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@70@01 $Ref.null)))
(assert (=
  ($Snap.second $t@72@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@72@01))
    ($Snap.second ($Snap.second $t@72@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@72@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@72@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@72@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01)))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@73@01 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 8 | 0 <= i@73@01 | live]
; [else-branch: 8 | !(0 <= i@73@01) | live]
(push) ; 4
; [then-branch: 8 | 0 <= i@73@01]
(assert (<= 0 i@73@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(0 <= i@73@01)]
(assert (not (<= 0 i@73@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 9 | i@73@01 < |First:(Second:(Second:($t@72@01)))| && 0 <= i@73@01 | live]
; [else-branch: 9 | !(i@73@01 < |First:(Second:(Second:($t@72@01)))| && 0 <= i@73@01) | live]
(push) ; 4
; [then-branch: 9 | i@73@01 < |First:(Second:(Second:($t@72@01)))| && 0 <= i@73@01]
(assert (and
  (<
    i@73@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))
  (<= 0 i@73@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@73@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               911
;  :arith-add-rows          82
;  :arith-assert-diseq      31
;  :arith-assert-lower      95
;  :arith-assert-upper      55
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   78
;  :datatype-splits         48
;  :decisions               170
;  :del-clause              257
;  :final-checks            38
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             764
;  :mk-clause               264
;  :num-allocs              3569391
;  :num-checks              67
;  :propagations            116
;  :quant-instantiations    75
;  :rlimit-count            127996)
; [eval] -1
(push) ; 5
; [then-branch: 10 | First:(Second:(Second:($t@72@01)))[i@73@01] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:($t@72@01)))[i@73@01] != -1 | live]
(push) ; 6
; [then-branch: 10 | First:(Second:(Second:($t@72@01)))[i@73@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    i@73@01)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 10 | First:(Second:(Second:($t@72@01)))[i@73@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      i@73@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 7
(assert (not (>= i@73@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               911
;  :arith-add-rows          82
;  :arith-assert-diseq      31
;  :arith-assert-lower      95
;  :arith-assert-upper      55
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   78
;  :datatype-splits         48
;  :decisions               170
;  :del-clause              257
;  :final-checks            38
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             765
;  :mk-clause               264
;  :num-allocs              3569391
;  :num-checks              68
;  :propagations            116
;  :quant-instantiations    75
;  :rlimit-count            128159)
(push) ; 7
; [then-branch: 11 | 0 <= First:(Second:(Second:($t@72@01)))[i@73@01] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:($t@72@01)))[i@73@01]) | live]
(push) ; 8
; [then-branch: 11 | 0 <= First:(Second:(Second:($t@72@01)))[i@73@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    i@73@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@73@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               911
;  :arith-add-rows          82
;  :arith-assert-diseq      32
;  :arith-assert-lower      98
;  :arith-assert-upper      55
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   78
;  :datatype-splits         48
;  :decisions               170
;  :del-clause              257
;  :final-checks            38
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             768
;  :mk-clause               265
;  :num-allocs              3569391
;  :num-checks              69
;  :propagations            116
;  :quant-instantiations    75
;  :rlimit-count            128273)
; [eval] |diz.Main_event_state|
(pop) ; 8
(push) ; 8
; [else-branch: 11 | !(0 <= First:(Second:(Second:($t@72@01)))[i@73@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      i@73@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(i@73@01 < |First:(Second:(Second:($t@72@01)))| && 0 <= i@73@01)]
(assert (not
  (and
    (<
      i@73@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))
    (<= 0 i@73@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@73@01 Int)) (!
  (implies
    (and
      (<
        i@73@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))
      (<= 0 i@73@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          i@73@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
            i@73@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
            i@73@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    i@73@01))
  :qid |prog.l<no position>|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 ($Snap.combine ($Snap.first $t@74@01) ($Snap.second $t@74@01))))
(assert (=
  ($Snap.second $t@74@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@74@01))
    ($Snap.second ($Snap.second $t@74@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@74@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@74@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@74@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@74@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@75@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 12 | 0 <= i@75@01 | live]
; [else-branch: 12 | !(0 <= i@75@01) | live]
(push) ; 5
; [then-branch: 12 | 0 <= i@75@01]
(assert (<= 0 i@75@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 12 | !(0 <= i@75@01)]
(assert (not (<= 0 i@75@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 13 | i@75@01 < |First:(Second:($t@74@01))| && 0 <= i@75@01 | live]
; [else-branch: 13 | !(i@75@01 < |First:(Second:($t@74@01))| && 0 <= i@75@01) | live]
(push) ; 5
; [then-branch: 13 | i@75@01 < |First:(Second:($t@74@01))| && 0 <= i@75@01]
(assert (and
  (<
    i@75@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))
  (<= 0 i@75@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@75@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               956
;  :arith-add-rows          82
;  :arith-assert-diseq      32
;  :arith-assert-lower      103
;  :arith-assert-upper      58
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 160
;  :datatype-occurs-check   80
;  :datatype-splits         51
;  :decisions               173
;  :del-clause              264
;  :final-checks            40
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             793
;  :mk-clause               265
;  :num-allocs              3569391
;  :num-checks              71
;  :propagations            116
;  :quant-instantiations    79
;  :rlimit-count            129985)
; [eval] -1
(push) ; 6
; [then-branch: 14 | First:(Second:($t@74@01))[i@75@01] == -1 | live]
; [else-branch: 14 | First:(Second:($t@74@01))[i@75@01] != -1 | live]
(push) ; 7
; [then-branch: 14 | First:(Second:($t@74@01))[i@75@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
    i@75@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | First:(Second:($t@74@01))[i@75@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
      i@75@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@75@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               956
;  :arith-add-rows          82
;  :arith-assert-diseq      32
;  :arith-assert-lower      103
;  :arith-assert-upper      58
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 160
;  :datatype-occurs-check   80
;  :datatype-splits         51
;  :decisions               173
;  :del-clause              264
;  :final-checks            40
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             794
;  :mk-clause               265
;  :num-allocs              3569391
;  :num-checks              72
;  :propagations            116
;  :quant-instantiations    79
;  :rlimit-count            130136)
(push) ; 8
; [then-branch: 15 | 0 <= First:(Second:($t@74@01))[i@75@01] | live]
; [else-branch: 15 | !(0 <= First:(Second:($t@74@01))[i@75@01]) | live]
(push) ; 9
; [then-branch: 15 | 0 <= First:(Second:($t@74@01))[i@75@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
    i@75@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@75@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               956
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      106
;  :arith-assert-upper      58
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 160
;  :datatype-occurs-check   80
;  :datatype-splits         51
;  :decisions               173
;  :del-clause              264
;  :final-checks            40
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             797
;  :mk-clause               266
;  :num-allocs              3569391
;  :num-checks              73
;  :propagations            116
;  :quant-instantiations    79
;  :rlimit-count            130240)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 15 | !(0 <= First:(Second:($t@74@01))[i@75@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
      i@75@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 13 | !(i@75@01 < |First:(Second:($t@74@01))| && 0 <= i@75@01)]
(assert (not
  (and
    (<
      i@75@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))
    (<= 0 i@75@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@75@01 Int)) (!
  (implies
    (and
      (<
        i@75@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))
      (<= 0 i@75@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
          i@75@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
            i@75@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
            i@75@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
    i@75@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               974
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      107
;  :arith-assert-upper      59
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 160
;  :datatype-occurs-check   80
;  :datatype-splits         51
;  :decisions               173
;  :del-clause              265
;  :final-checks            40
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             817
;  :mk-clause               277
;  :num-allocs              3569391
;  :num-checks              74
;  :propagations            120
;  :quant-instantiations    81
;  :rlimit-count            131301)
(push) ; 3
; [then-branch: 16 | 0 <= First:(Second:(Second:($t@72@01)))[0] | live]
; [else-branch: 16 | !(0 <= First:(Second:(Second:($t@72@01)))[0]) | live]
(push) ; 4
; [then-branch: 16 | 0 <= First:(Second:(Second:($t@72@01)))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               974
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      108
;  :arith-assert-upper      59
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 160
;  :datatype-occurs-check   80
;  :datatype-splits         51
;  :decisions               173
;  :del-clause              265
;  :final-checks            40
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             823
;  :mk-clause               283
;  :num-allocs              3569391
;  :num-checks              75
;  :propagations            120
;  :quant-instantiations    82
;  :rlimit-count            131464)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               974
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      108
;  :arith-assert-upper      59
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 160
;  :datatype-occurs-check   80
;  :datatype-splits         51
;  :decisions               173
;  :del-clause              265
;  :final-checks            40
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             823
;  :mk-clause               283
;  :num-allocs              3569391
;  :num-checks              76
;  :propagations            120
;  :quant-instantiations    82
;  :rlimit-count            131473)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               975
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      109
;  :arith-assert-upper      60
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 160
;  :datatype-occurs-check   80
;  :datatype-splits         51
;  :decisions               173
;  :del-clause              265
;  :final-checks            40
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             823
;  :mk-clause               283
;  :num-allocs              3569391
;  :num-checks              77
;  :propagations            124
;  :quant-instantiations    82
;  :rlimit-count            131581)
(pop) ; 4
(push) ; 4
; [else-branch: 16 | !(0 <= First:(Second:(Second:($t@72@01)))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1008
;  :arith-add-rows          82
;  :arith-assert-diseq      37
;  :arith-assert-lower      122
;  :arith-assert-upper      68
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 166
;  :datatype-occurs-check   84
;  :datatype-splits         54
;  :decisions               180
;  :del-clause              311
;  :final-checks            43
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             860
;  :mk-clause               323
;  :num-allocs              3569391
;  :num-checks              78
;  :propagations            138
;  :quant-instantiations    86
;  :rlimit-count            132456)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1039
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      137
;  :arith-assert-upper      74
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 172
;  :datatype-occurs-check   88
;  :datatype-splits         57
;  :decisions               189
;  :del-clause              361
;  :final-checks            45
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             896
;  :mk-clause               373
;  :num-allocs              3569391
;  :num-checks              79
;  :propagations            157
;  :quant-instantiations    90
;  :rlimit-count            133267)
; [then-branch: 17 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[0]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[0] | live]
; [else-branch: 17 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[0]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[0]) | live]
(push) ; 4
; [then-branch: 17 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[0]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[0]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1040
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      138
;  :arith-assert-upper      74
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 172
;  :datatype-occurs-check   88
;  :datatype-splits         57
;  :decisions               189
;  :del-clause              361
;  :final-checks            45
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             903
;  :mk-clause               379
;  :num-allocs              3569391
;  :num-checks              80
;  :propagations            157
;  :quant-instantiations    91
;  :rlimit-count            133470)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 17 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[0]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1046
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      138
;  :arith-assert-upper      74
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 172
;  :datatype-occurs-check   88
;  :datatype-splits         57
;  :decisions               189
;  :del-clause              367
;  :final-checks            45
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             908
;  :mk-clause               380
;  :num-allocs              3569391
;  :num-checks              81
;  :propagations            157
;  :quant-instantiations    91
;  :rlimit-count            133963)
(push) ; 3
; [then-branch: 18 | 0 <= First:(Second:(Second:($t@72@01)))[1] | live]
; [else-branch: 18 | !(0 <= First:(Second:(Second:($t@72@01)))[1]) | live]
(push) ; 4
; [then-branch: 18 | 0 <= First:(Second:(Second:($t@72@01)))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1046
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      139
;  :arith-assert-upper      74
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 172
;  :datatype-occurs-check   88
;  :datatype-splits         57
;  :decisions               189
;  :del-clause              367
;  :final-checks            45
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             914
;  :mk-clause               386
;  :num-allocs              3569391
;  :num-checks              82
;  :propagations            157
;  :quant-instantiations    92
;  :rlimit-count            134126)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1046
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      139
;  :arith-assert-upper      74
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 172
;  :datatype-occurs-check   88
;  :datatype-splits         57
;  :decisions               189
;  :del-clause              367
;  :final-checks            45
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             914
;  :mk-clause               386
;  :num-allocs              3569391
;  :num-checks              83
;  :propagations            157
;  :quant-instantiations    92
;  :rlimit-count            134135)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1047
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      140
;  :arith-assert-upper      75
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               46
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 172
;  :datatype-occurs-check   88
;  :datatype-splits         57
;  :decisions               189
;  :del-clause              367
;  :final-checks            45
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             914
;  :mk-clause               386
;  :num-allocs              3569391
;  :num-checks              84
;  :propagations            161
;  :quant-instantiations    92
;  :rlimit-count            134243)
(pop) ; 4
(push) ; 4
; [else-branch: 18 | !(0 <= First:(Second:(Second:($t@72@01)))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1093
;  :arith-add-rows          82
;  :arith-assert-diseq      46
;  :arith-assert-lower      149
;  :arith-assert-upper      81
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 182
;  :datatype-occurs-check   94
;  :datatype-splits         62
;  :decisions               202
;  :del-clause              388
;  :final-checks            49
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             948
;  :mk-clause               401
;  :num-allocs              3569391
;  :num-checks              85
;  :propagations            165
;  :quant-instantiations    95
;  :rlimit-count            135130)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1122
;  :arith-add-rows          82
;  :arith-assert-diseq      49
;  :arith-assert-lower      153
;  :arith-assert-upper      84
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 188
;  :datatype-occurs-check   98
;  :datatype-splits         65
;  :decisions               212
;  :del-clause              414
;  :final-checks            51
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             967
;  :mk-clause               427
;  :num-allocs              3569391
;  :num-checks              86
;  :propagations            172
;  :quant-instantiations    97
;  :rlimit-count            135894)
; [then-branch: 19 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[1]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[1] | live]
; [else-branch: 19 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[1]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[1]) | live]
(push) ; 4
; [then-branch: 19 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[1]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[1]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1123
;  :arith-add-rows          82
;  :arith-assert-diseq      49
;  :arith-assert-lower      154
;  :arith-assert-upper      84
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 188
;  :datatype-occurs-check   98
;  :datatype-splits         65
;  :decisions               212
;  :del-clause              414
;  :final-checks            51
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             974
;  :mk-clause               433
;  :num-allocs              3569391
;  :num-checks              87
;  :propagations            172
;  :quant-instantiations    98
;  :rlimit-count            136098)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 19 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[1]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 ==> diz.Main_process_state[2] == -1
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1129
;  :arith-add-rows          82
;  :arith-assert-diseq      49
;  :arith-assert-lower      154
;  :arith-assert-upper      84
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 188
;  :datatype-occurs-check   98
;  :datatype-splits         65
;  :decisions               212
;  :del-clause              420
;  :final-checks            51
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             979
;  :mk-clause               434
;  :num-allocs              3569391
;  :num-checks              88
;  :propagations            172
;  :quant-instantiations    98
;  :rlimit-count            136605)
(push) ; 3
; [then-branch: 20 | 0 <= First:(Second:(Second:($t@72@01)))[2] | live]
; [else-branch: 20 | !(0 <= First:(Second:(Second:($t@72@01)))[2]) | live]
(push) ; 4
; [then-branch: 20 | 0 <= First:(Second:(Second:($t@72@01)))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1129
;  :arith-add-rows          82
;  :arith-assert-diseq      49
;  :arith-assert-lower      155
;  :arith-assert-upper      84
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 188
;  :datatype-occurs-check   98
;  :datatype-splits         65
;  :decisions               212
;  :del-clause              420
;  :final-checks            51
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             985
;  :mk-clause               440
;  :num-allocs              3569391
;  :num-checks              89
;  :propagations            172
;  :quant-instantiations    99
;  :rlimit-count            136767)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1129
;  :arith-add-rows          82
;  :arith-assert-diseq      49
;  :arith-assert-lower      155
;  :arith-assert-upper      84
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 188
;  :datatype-occurs-check   98
;  :datatype-splits         65
;  :decisions               212
;  :del-clause              420
;  :final-checks            51
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             985
;  :mk-clause               440
;  :num-allocs              3569391
;  :num-checks              90
;  :propagations            172
;  :quant-instantiations    99
;  :rlimit-count            136776)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1130
;  :arith-add-rows          82
;  :arith-assert-diseq      49
;  :arith-assert-lower      156
;  :arith-assert-upper      85
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 188
;  :datatype-occurs-check   98
;  :datatype-splits         65
;  :decisions               212
;  :del-clause              420
;  :final-checks            51
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             985
;  :mk-clause               440
;  :num-allocs              3569391
;  :num-checks              91
;  :propagations            176
;  :quant-instantiations    99
;  :rlimit-count            136883)
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !(0 <= First:(Second:(Second:($t@72@01)))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1177
;  :arith-add-rows          82
;  :arith-assert-diseq      53
;  :arith-assert-lower      166
;  :arith-assert-upper      94
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 198
;  :datatype-occurs-check   104
;  :datatype-splits         70
;  :decisions               225
;  :del-clause              458
;  :final-checks            55
;  :interface-eqs           6
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1028
;  :mk-clause               472
;  :num-allocs              3569391
;  :num-checks              92
;  :propagations            186
;  :quant-instantiations    103
;  :rlimit-count            137822)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1208
;  :arith-add-rows          82
;  :arith-assert-diseq      53
;  :arith-assert-lower      169
;  :arith-assert-upper      99
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 204
;  :datatype-occurs-check   108
;  :datatype-splits         73
;  :decisions               234
;  :del-clause              467
;  :final-checks            57
;  :interface-eqs           6
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1046
;  :mk-clause               481
;  :num-allocs              3569391
;  :num-checks              93
;  :propagations            189
;  :quant-instantiations    105
;  :rlimit-count            138534)
; [then-branch: 21 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[2]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[2] | live]
; [else-branch: 21 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[2]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[2]) | live]
(push) ; 4
; [then-branch: 21 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[2]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[2]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      2))))
; [eval] diz.Main_process_state[2] == -1
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1209
;  :arith-add-rows          82
;  :arith-assert-diseq      53
;  :arith-assert-lower      170
;  :arith-assert-upper      99
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 204
;  :datatype-occurs-check   108
;  :datatype-splits         73
;  :decisions               234
;  :del-clause              467
;  :final-checks            57
;  :interface-eqs           6
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1053
;  :mk-clause               487
;  :num-allocs              3569391
;  :num-checks              94
;  :propagations            189
;  :quant-instantiations    106
;  :rlimit-count            138737)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 21 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[2]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[2])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
      2)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1215
;  :arith-add-rows          82
;  :arith-assert-diseq      53
;  :arith-assert-lower      170
;  :arith-assert-upper      99
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 204
;  :datatype-occurs-check   108
;  :datatype-splits         73
;  :decisions               234
;  :del-clause              473
;  :final-checks            57
;  :interface-eqs           6
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1058
;  :mk-clause               488
;  :num-allocs              3569391
;  :num-checks              95
;  :propagations            189
;  :quant-instantiations    106
;  :rlimit-count            139254)
(push) ; 3
; [then-branch: 22 | 0 <= First:(Second:(Second:($t@72@01)))[0] | live]
; [else-branch: 22 | !(0 <= First:(Second:(Second:($t@72@01)))[0]) | live]
(push) ; 4
; [then-branch: 22 | 0 <= First:(Second:(Second:($t@72@01)))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1215
;  :arith-add-rows          82
;  :arith-assert-diseq      53
;  :arith-assert-lower      171
;  :arith-assert-upper      99
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 204
;  :datatype-occurs-check   108
;  :datatype-splits         73
;  :decisions               234
;  :del-clause              473
;  :final-checks            57
;  :interface-eqs           6
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1063
;  :mk-clause               494
;  :num-allocs              3569391
;  :num-checks              96
;  :propagations            189
;  :quant-instantiations    107
;  :rlimit-count            139393)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1215
;  :arith-add-rows          82
;  :arith-assert-diseq      53
;  :arith-assert-lower      171
;  :arith-assert-upper      99
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 204
;  :datatype-occurs-check   108
;  :datatype-splits         73
;  :decisions               234
;  :del-clause              473
;  :final-checks            57
;  :interface-eqs           6
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1063
;  :mk-clause               494
;  :num-allocs              3569391
;  :num-checks              97
;  :propagations            189
;  :quant-instantiations    107
;  :rlimit-count            139402)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1216
;  :arith-add-rows          82
;  :arith-assert-diseq      53
;  :arith-assert-lower      172
;  :arith-assert-upper      100
;  :arith-bound-prop        9
;  :arith-conflicts         9
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               52
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 204
;  :datatype-occurs-check   108
;  :datatype-splits         73
;  :decisions               234
;  :del-clause              473
;  :final-checks            57
;  :interface-eqs           6
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1063
;  :mk-clause               494
;  :num-allocs              3569391
;  :num-checks              98
;  :propagations            193
;  :quant-instantiations    107
;  :rlimit-count            139510)
(pop) ; 4
(push) ; 4
; [else-branch: 22 | !(0 <= First:(Second:(Second:($t@72@01)))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1268
;  :arith-add-rows          85
;  :arith-assert-diseq      62
;  :arith-assert-lower      191
;  :arith-assert-upper      108
;  :arith-bound-prop        14
;  :arith-conflicts         9
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         23
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 214
;  :datatype-occurs-check   114
;  :datatype-splits         78
;  :decisions               253
;  :del-clause              559
;  :final-checks            62
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1124
;  :mk-clause               574
;  :num-allocs              3569391
;  :num-checks              99
;  :propagations            216
;  :quant-instantiations    111
;  :rlimit-count            140584
;  :time                    0.01)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          85
;  :arith-assert-diseq      66
;  :arith-assert-lower      203
;  :arith-assert-upper      115
;  :arith-bound-prop        14
;  :arith-conflicts         9
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 224
;  :datatype-occurs-check   120
;  :datatype-splits         83
;  :decisions               267
;  :del-clause              595
;  :final-checks            66
;  :interface-eqs           9
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1168
;  :mk-clause               610
;  :num-allocs              3569391
;  :num-checks              100
;  :propagations            227
;  :quant-instantiations    115
;  :rlimit-count            141493)
; [then-branch: 23 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[0]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[0]) | live]
; [else-branch: 23 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[0]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[0] | live]
(push) ; 4
; [then-branch: 23 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[0]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          85
;  :arith-assert-diseq      66
;  :arith-assert-lower      203
;  :arith-assert-upper      115
;  :arith-bound-prop        14
;  :arith-conflicts         9
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 224
;  :datatype-occurs-check   120
;  :datatype-splits         83
;  :decisions               267
;  :del-clause              595
;  :final-checks            66
;  :interface-eqs           9
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1168
;  :mk-clause               611
;  :num-allocs              3569391
;  :num-checks              101
;  :propagations            227
;  :quant-instantiations    115
;  :rlimit-count            141682)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          85
;  :arith-assert-diseq      66
;  :arith-assert-lower      203
;  :arith-assert-upper      115
;  :arith-bound-prop        14
;  :arith-conflicts         9
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 224
;  :datatype-occurs-check   120
;  :datatype-splits         83
;  :decisions               267
;  :del-clause              595
;  :final-checks            66
;  :interface-eqs           9
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1168
;  :mk-clause               611
;  :num-allocs              3569391
;  :num-checks              102
;  :propagations            227
;  :quant-instantiations    115
;  :rlimit-count            141697)
(pop) ; 4
(push) ; 4
; [else-branch: 23 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[0]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[0]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
            0))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1322
;  :arith-add-rows          85
;  :arith-assert-diseq      66
;  :arith-assert-lower      203
;  :arith-assert-upper      115
;  :arith-bound-prop        14
;  :arith-conflicts         9
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 224
;  :datatype-occurs-check   120
;  :datatype-splits         83
;  :decisions               267
;  :del-clause              596
;  :final-checks            66
;  :interface-eqs           9
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1172
;  :mk-clause               615
;  :num-allocs              3569391
;  :num-checks              103
;  :propagations            227
;  :quant-instantiations    115
;  :rlimit-count            142210)
(push) ; 3
; [then-branch: 24 | 0 <= First:(Second:(Second:($t@72@01)))[1] | live]
; [else-branch: 24 | !(0 <= First:(Second:(Second:($t@72@01)))[1]) | live]
(push) ; 4
; [then-branch: 24 | 0 <= First:(Second:(Second:($t@72@01)))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1322
;  :arith-add-rows          85
;  :arith-assert-diseq      66
;  :arith-assert-lower      204
;  :arith-assert-upper      115
;  :arith-bound-prop        14
;  :arith-conflicts         9
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 224
;  :datatype-occurs-check   120
;  :datatype-splits         83
;  :decisions               267
;  :del-clause              596
;  :final-checks            66
;  :interface-eqs           9
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1177
;  :mk-clause               621
;  :num-allocs              3569391
;  :num-checks              104
;  :propagations            227
;  :quant-instantiations    116
;  :rlimit-count            142327)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1322
;  :arith-add-rows          85
;  :arith-assert-diseq      66
;  :arith-assert-lower      204
;  :arith-assert-upper      115
;  :arith-bound-prop        14
;  :arith-conflicts         9
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 224
;  :datatype-occurs-check   120
;  :datatype-splits         83
;  :decisions               267
;  :del-clause              596
;  :final-checks            66
;  :interface-eqs           9
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1177
;  :mk-clause               621
;  :num-allocs              3569391
;  :num-checks              105
;  :propagations            227
;  :quant-instantiations    116
;  :rlimit-count            142336)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1323
;  :arith-add-rows          85
;  :arith-assert-diseq      66
;  :arith-assert-lower      205
;  :arith-assert-upper      116
;  :arith-bound-prop        14
;  :arith-conflicts         10
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 224
;  :datatype-occurs-check   120
;  :datatype-splits         83
;  :decisions               267
;  :del-clause              596
;  :final-checks            66
;  :interface-eqs           9
;  :max-generation          4
;  :max-memory              4.04
;  :memory                  4.04
;  :minimized-lits          2
;  :mk-bool-var             1177
;  :mk-clause               621
;  :num-allocs              3569391
;  :num-checks              106
;  :propagations            231
;  :quant-instantiations    116
;  :rlimit-count            142444)
(pop) ; 4
(push) ; 4
; [else-branch: 24 | !(0 <= First:(Second:(Second:($t@72@01)))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1366
;  :arith-add-rows          85
;  :arith-assert-diseq      69
;  :arith-assert-lower      212
;  :arith-assert-upper      122
;  :arith-bound-prop        14
;  :arith-conflicts         10
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         24
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 234
;  :datatype-occurs-check   126
;  :datatype-splits         88
;  :decisions               281
;  :del-clause              628
;  :final-checks            70
;  :interface-eqs           10
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1206
;  :mk-clause               647
;  :num-allocs              3712926
;  :num-checks              107
;  :propagations            241
;  :quant-instantiations    119
;  :rlimit-count            143299
;  :time                    0.01)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1421
;  :arith-add-rows          85
;  :arith-assert-diseq      76
;  :arith-assert-lower      228
;  :arith-assert-upper      133
;  :arith-bound-prop        14
;  :arith-conflicts         10
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         25
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 244
;  :datatype-occurs-check   132
;  :datatype-splits         93
;  :decisions               296
;  :del-clause              665
;  :final-checks            75
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1255
;  :mk-clause               684
;  :num-allocs              3712926
;  :num-checks              108
;  :propagations            257
;  :quant-instantiations    124
;  :rlimit-count            144306)
; [then-branch: 25 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[1]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[1]) | live]
; [else-branch: 25 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[1]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[1] | live]
(push) ; 4
; [then-branch: 25 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[1]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1421
;  :arith-add-rows          85
;  :arith-assert-diseq      76
;  :arith-assert-lower      228
;  :arith-assert-upper      133
;  :arith-bound-prop        14
;  :arith-conflicts         10
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         25
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 244
;  :datatype-occurs-check   132
;  :datatype-splits         93
;  :decisions               296
;  :del-clause              665
;  :final-checks            75
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1255
;  :mk-clause               685
;  :num-allocs              3712926
;  :num-checks              109
;  :propagations            257
;  :quant-instantiations    124
;  :rlimit-count            144495)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1421
;  :arith-add-rows          85
;  :arith-assert-diseq      76
;  :arith-assert-lower      228
;  :arith-assert-upper      133
;  :arith-bound-prop        14
;  :arith-conflicts         10
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         25
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 244
;  :datatype-occurs-check   132
;  :datatype-splits         93
;  :decisions               296
;  :del-clause              665
;  :final-checks            75
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1255
;  :mk-clause               685
;  :num-allocs              3712926
;  :num-checks              110
;  :propagations            257
;  :quant-instantiations    124
;  :rlimit-count            144510)
(pop) ; 4
(push) ; 4
; [else-branch: 25 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[1]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[1]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
            1))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@01))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0) ==> diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] !(0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1423
;  :arith-add-rows          85
;  :arith-assert-diseq      76
;  :arith-assert-lower      228
;  :arith-assert-upper      133
;  :arith-bound-prop        14
;  :arith-conflicts         10
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         25
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 244
;  :datatype-occurs-check   132
;  :datatype-splits         93
;  :decisions               296
;  :del-clause              666
;  :final-checks            75
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1258
;  :mk-clause               689
;  :num-allocs              3712926
;  :num-checks              111
;  :propagations            257
;  :quant-instantiations    124
;  :rlimit-count            144939)
(push) ; 3
; [then-branch: 26 | 0 <= First:(Second:(Second:($t@72@01)))[2] | live]
; [else-branch: 26 | !(0 <= First:(Second:(Second:($t@72@01)))[2]) | live]
(push) ; 4
; [then-branch: 26 | 0 <= First:(Second:(Second:($t@72@01)))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1423
;  :arith-add-rows          85
;  :arith-assert-diseq      76
;  :arith-assert-lower      229
;  :arith-assert-upper      133
;  :arith-bound-prop        14
;  :arith-conflicts         10
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         25
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 244
;  :datatype-occurs-check   132
;  :datatype-splits         93
;  :decisions               296
;  :del-clause              666
;  :final-checks            75
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1263
;  :mk-clause               695
;  :num-allocs              3712926
;  :num-checks              112
;  :propagations            257
;  :quant-instantiations    125
;  :rlimit-count            145055)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1423
;  :arith-add-rows          85
;  :arith-assert-diseq      76
;  :arith-assert-lower      229
;  :arith-assert-upper      133
;  :arith-bound-prop        14
;  :arith-conflicts         10
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         25
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 244
;  :datatype-occurs-check   132
;  :datatype-splits         93
;  :decisions               296
;  :del-clause              666
;  :final-checks            75
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1263
;  :mk-clause               695
;  :num-allocs              3712926
;  :num-checks              113
;  :propagations            257
;  :quant-instantiations    125
;  :rlimit-count            145064)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1424
;  :arith-add-rows          85
;  :arith-assert-diseq      76
;  :arith-assert-lower      230
;  :arith-assert-upper      134
;  :arith-bound-prop        14
;  :arith-conflicts         11
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         25
;  :arith-offset-eqs        9
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               61
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 244
;  :datatype-occurs-check   132
;  :datatype-splits         93
;  :decisions               296
;  :del-clause              666
;  :final-checks            75
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1263
;  :mk-clause               695
;  :num-allocs              3712926
;  :num-checks              114
;  :propagations            261
;  :quant-instantiations    125
;  :rlimit-count            145172)
(pop) ; 4
(push) ; 4
; [else-branch: 26 | !(0 <= First:(Second:(Second:($t@72@01)))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1482
;  :arith-add-rows          85
;  :arith-assert-diseq      83
;  :arith-assert-lower      241
;  :arith-assert-upper      154
;  :arith-bound-prop        16
;  :arith-conflicts         11
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         27
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               64
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 253
;  :datatype-occurs-check   138
;  :datatype-splits         98
;  :decisions               313
;  :del-clause              737
;  :final-checks            80
;  :interface-eqs           14
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1335
;  :mk-clause               760
;  :num-allocs              3712926
;  :num-checks              115
;  :propagations            287
;  :quant-instantiations    132
;  :rlimit-count            146272)
(push) ; 4
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1562
;  :arith-add-rows          85
;  :arith-assert-diseq      95
;  :arith-assert-lower      268
;  :arith-assert-upper      174
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 264
;  :datatype-occurs-check   146
;  :datatype-splits         104
;  :decisions               331
;  :del-clause              861
;  :final-checks            86
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1438
;  :mk-clause               884
;  :num-allocs              3712926
;  :num-checks              116
;  :propagations            336
;  :quant-instantiations    143
;  :rlimit-count            147528)
; [then-branch: 27 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[2]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[2]) | live]
; [else-branch: 27 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[2]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[2] | live]
(push) ; 4
; [then-branch: 27 | !(First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[2]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[2])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2)))))
; [eval] diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1562
;  :arith-add-rows          85
;  :arith-assert-diseq      95
;  :arith-assert-lower      268
;  :arith-assert-upper      174
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 264
;  :datatype-occurs-check   146
;  :datatype-splits         104
;  :decisions               331
;  :del-clause              861
;  :final-checks            86
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1438
;  :mk-clause               885
;  :num-allocs              3712926
;  :num-checks              117
;  :propagations            336
;  :quant-instantiations    143
;  :rlimit-count            147717)
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1562
;  :arith-add-rows          85
;  :arith-assert-diseq      95
;  :arith-assert-lower      268
;  :arith-assert-upper      174
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 264
;  :datatype-occurs-check   146
;  :datatype-splits         104
;  :decisions               331
;  :del-clause              861
;  :final-checks            86
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1438
;  :mk-clause               885
;  :num-allocs              3712926
;  :num-checks              118
;  :propagations            336
;  :quant-instantiations    143
;  :rlimit-count            147732)
(pop) ; 4
(push) ; 4
; [else-branch: 27 | First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:($t@72@01)))[2]] == 0 && 0 <= First:(Second:(Second:($t@72@01)))[2]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
            2))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
          2))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@01)))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@72@01))))
      2))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Main_reset_events_no_delta_EncodedGlobalVariables ----------
(declare-const diz@76@01 $Ref)
(declare-const globals@77@01 $Ref)
(declare-const diz@78@01 $Ref)
(declare-const globals@79@01 $Ref)
(push) ; 1
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 ($Snap.combine ($Snap.first $t@80@01) ($Snap.second $t@80@01))))
(assert (= ($Snap.first $t@80@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@78@01 $Ref.null)))
(assert (=
  ($Snap.second $t@80@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@80@01))
    ($Snap.second ($Snap.second $t@80@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@80@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@80@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@80@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01)))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@81@01 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 28 | 0 <= i@81@01 | live]
; [else-branch: 28 | !(0 <= i@81@01) | live]
(push) ; 4
; [then-branch: 28 | 0 <= i@81@01]
(assert (<= 0 i@81@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 4
(push) ; 4
; [else-branch: 28 | !(0 <= i@81@01)]
(assert (not (<= 0 i@81@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 29 | i@81@01 < |First:(Second:(Second:($t@80@01)))| && 0 <= i@81@01 | live]
; [else-branch: 29 | !(i@81@01 < |First:(Second:(Second:($t@80@01)))| && 0 <= i@81@01) | live]
(push) ; 4
; [then-branch: 29 | i@81@01 < |First:(Second:(Second:($t@80@01)))| && 0 <= i@81@01]
(assert (and
  (<
    i@81@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))))
  (<= 0 i@81@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 5
(assert (not (>= i@81@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1601
;  :arith-add-rows          85
;  :arith-assert-diseq      97
;  :arith-assert-lower      275
;  :arith-assert-upper      177
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 264
;  :datatype-occurs-check   146
;  :datatype-splits         104
;  :decisions               331
;  :del-clause              884
;  :final-checks            86
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1467
;  :mk-clause               891
;  :num-allocs              3712926
;  :num-checks              119
;  :propagations            338
;  :quant-instantiations    149
;  :rlimit-count            148966)
; [eval] -1
(push) ; 5
; [then-branch: 30 | First:(Second:(Second:($t@80@01)))[i@81@01] == -1 | live]
; [else-branch: 30 | First:(Second:(Second:($t@80@01)))[i@81@01] != -1 | live]
(push) ; 6
; [then-branch: 30 | First:(Second:(Second:($t@80@01)))[i@81@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))
    i@81@01)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 30 | First:(Second:(Second:($t@80@01)))[i@81@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))
      i@81@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 7
(assert (not (>= i@81@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1601
;  :arith-add-rows          85
;  :arith-assert-diseq      97
;  :arith-assert-lower      275
;  :arith-assert-upper      177
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 264
;  :datatype-occurs-check   146
;  :datatype-splits         104
;  :decisions               331
;  :del-clause              884
;  :final-checks            86
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1468
;  :mk-clause               891
;  :num-allocs              3712926
;  :num-checks              120
;  :propagations            338
;  :quant-instantiations    149
;  :rlimit-count            149129)
(push) ; 7
; [then-branch: 31 | 0 <= First:(Second:(Second:($t@80@01)))[i@81@01] | live]
; [else-branch: 31 | !(0 <= First:(Second:(Second:($t@80@01)))[i@81@01]) | live]
(push) ; 8
; [then-branch: 31 | 0 <= First:(Second:(Second:($t@80@01)))[i@81@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))
    i@81@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@81@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1601
;  :arith-add-rows          85
;  :arith-assert-diseq      98
;  :arith-assert-lower      278
;  :arith-assert-upper      177
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 264
;  :datatype-occurs-check   146
;  :datatype-splits         104
;  :decisions               331
;  :del-clause              884
;  :final-checks            86
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1471
;  :mk-clause               892
;  :num-allocs              3712926
;  :num-checks              121
;  :propagations            338
;  :quant-instantiations    149
;  :rlimit-count            149243)
; [eval] |diz.Main_event_state|
(pop) ; 8
(push) ; 8
; [else-branch: 31 | !(0 <= First:(Second:(Second:($t@80@01)))[i@81@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))
      i@81@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 29 | !(i@81@01 < |First:(Second:(Second:($t@80@01)))| && 0 <= i@81@01)]
(assert (not
  (and
    (<
      i@81@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))))
    (<= 0 i@81@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@81@01 Int)) (!
  (implies
    (and
      (<
        i@81@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))))
      (<= 0 i@81@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))
          i@81@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))
            i@81@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))
            i@81@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))
    i@81@01))
  :qid |prog.l<no position>|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 ($Snap.combine ($Snap.first $t@82@01) ($Snap.second $t@82@01))))
(assert (=
  ($Snap.second $t@82@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@82@01))
    ($Snap.second ($Snap.second $t@82@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@82@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@82@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@82@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@82@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@83@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 32 | 0 <= i@83@01 | live]
; [else-branch: 32 | !(0 <= i@83@01) | live]
(push) ; 5
; [then-branch: 32 | 0 <= i@83@01]
(assert (<= 0 i@83@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 32 | !(0 <= i@83@01)]
(assert (not (<= 0 i@83@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 33 | i@83@01 < |First:(Second:($t@82@01))| && 0 <= i@83@01 | live]
; [else-branch: 33 | !(i@83@01 < |First:(Second:($t@82@01))| && 0 <= i@83@01) | live]
(push) ; 5
; [then-branch: 33 | i@83@01 < |First:(Second:($t@82@01))| && 0 <= i@83@01]
(assert (and
  (<
    i@83@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))))
  (<= 0 i@83@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@83@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1646
;  :arith-add-rows          85
;  :arith-assert-diseq      98
;  :arith-assert-lower      283
;  :arith-assert-upper      180
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   148
;  :datatype-splits         107
;  :decisions               334
;  :del-clause              891
;  :final-checks            88
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1496
;  :mk-clause               892
;  :num-allocs              3712926
;  :num-checks              123
;  :propagations            338
;  :quant-instantiations    153
;  :rlimit-count            150956)
; [eval] -1
(push) ; 6
; [then-branch: 34 | First:(Second:($t@82@01))[i@83@01] == -1 | live]
; [else-branch: 34 | First:(Second:($t@82@01))[i@83@01] != -1 | live]
(push) ; 7
; [then-branch: 34 | First:(Second:($t@82@01))[i@83@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
    i@83@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 34 | First:(Second:($t@82@01))[i@83@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
      i@83@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@83@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1646
;  :arith-add-rows          85
;  :arith-assert-diseq      98
;  :arith-assert-lower      283
;  :arith-assert-upper      180
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   148
;  :datatype-splits         107
;  :decisions               334
;  :del-clause              891
;  :final-checks            88
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1497
;  :mk-clause               892
;  :num-allocs              3712926
;  :num-checks              124
;  :propagations            338
;  :quant-instantiations    153
;  :rlimit-count            151107)
(push) ; 8
; [then-branch: 35 | 0 <= First:(Second:($t@82@01))[i@83@01] | live]
; [else-branch: 35 | !(0 <= First:(Second:($t@82@01))[i@83@01]) | live]
(push) ; 9
; [then-branch: 35 | 0 <= First:(Second:($t@82@01))[i@83@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
    i@83@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@83@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1646
;  :arith-add-rows          85
;  :arith-assert-diseq      99
;  :arith-assert-lower      286
;  :arith-assert-upper      180
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   148
;  :datatype-splits         107
;  :decisions               334
;  :del-clause              891
;  :final-checks            88
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1500
;  :mk-clause               893
;  :num-allocs              3712926
;  :num-checks              125
;  :propagations            338
;  :quant-instantiations    153
;  :rlimit-count            151210)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(0 <= First:(Second:($t@82@01))[i@83@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
      i@83@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 33 | !(i@83@01 < |First:(Second:($t@82@01))| && 0 <= i@83@01)]
(assert (not
  (and
    (<
      i@83@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))))
    (<= 0 i@83@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@83@01 Int)) (!
  (implies
    (and
      (<
        i@83@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))))
      (<= 0 i@83@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
          i@83@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
            i@83@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
            i@83@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
    i@83@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@01)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@80@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          85
;  :arith-assert-diseq      99
;  :arith-assert-lower      287
;  :arith-assert-upper      181
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 267
;  :datatype-occurs-check   148
;  :datatype-splits         107
;  :decisions               334
;  :del-clause              892
;  :final-checks            88
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1520
;  :mk-clause               903
;  :num-allocs              3712926
;  :num-checks              126
;  :propagations            342
;  :quant-instantiations    155
;  :rlimit-count            152237)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      0)
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1691
;  :arith-add-rows          85
;  :arith-assert-diseq      101
;  :arith-assert-lower      293
;  :arith-assert-upper      185
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 273
;  :datatype-occurs-check   152
;  :datatype-splits         110
;  :decisions               340
;  :del-clause              913
;  :final-checks            90
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1540
;  :mk-clause               924
;  :num-allocs              3712926
;  :num-checks              127
;  :propagations            349
;  :quant-instantiations    157
;  :rlimit-count            152862)
(push) ; 4
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    0)
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1720
;  :arith-add-rows          85
;  :arith-assert-diseq      103
;  :arith-assert-lower      296
;  :arith-assert-upper      190
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 279
;  :datatype-occurs-check   156
;  :datatype-splits         113
;  :decisions               347
;  :del-clause              940
;  :final-checks            92
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1561
;  :mk-clause               951
;  :num-allocs              3712926
;  :num-checks              128
;  :propagations            358
;  :quant-instantiations    159
;  :rlimit-count            153487)
; [then-branch: 36 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[0] == 0 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[0] != 0 | live]
(push) ; 4
; [then-branch: 36 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    0)
  0))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1721
;  :arith-add-rows          85
;  :arith-assert-diseq      103
;  :arith-assert-lower      296
;  :arith-assert-upper      190
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 279
;  :datatype-occurs-check   156
;  :datatype-splits         113
;  :decisions               347
;  :del-clause              940
;  :final-checks            92
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1562
;  :mk-clause               951
;  :num-allocs              3712926
;  :num-checks              129
;  :propagations            358
;  :quant-instantiations    159
;  :rlimit-count            153623)
; [eval] -2
(pop) ; 4
(push) ; 4
; [else-branch: 36 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      0)
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1727
;  :arith-add-rows          85
;  :arith-assert-diseq      103
;  :arith-assert-lower      296
;  :arith-assert-upper      190
;  :arith-bound-prop        18
;  :arith-conflicts         11
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 279
;  :datatype-occurs-check   156
;  :datatype-splits         113
;  :decisions               347
;  :del-clause              940
;  :final-checks            92
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1566
;  :mk-clause               952
;  :num-allocs              3712926
;  :num-checks              130
;  :propagations            358
;  :quant-instantiations    159
;  :rlimit-count            154070)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1761
;  :arith-add-rows          85
;  :arith-assert-diseq      109
;  :arith-assert-lower      310
;  :arith-assert-upper      197
;  :arith-bound-prop        22
;  :arith-conflicts         11
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         34
;  :arith-offset-eqs        9
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 285
;  :datatype-occurs-check   160
;  :datatype-splits         116
;  :decisions               355
;  :del-clause              994
;  :final-checks            94
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1612
;  :mk-clause               1006
;  :num-allocs              3712926
;  :num-checks              131
;  :propagations            372
;  :quant-instantiations    163
;  :rlimit-count            154837)
(push) ; 4
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1797
;  :arith-add-rows          85
;  :arith-assert-diseq      115
;  :arith-assert-lower      321
;  :arith-assert-upper      205
;  :arith-bound-prop        26
;  :arith-conflicts         11
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         36
;  :arith-offset-eqs        9
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 291
;  :datatype-occurs-check   164
;  :datatype-splits         119
;  :decisions               364
;  :del-clause              1054
;  :final-checks            96
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1659
;  :mk-clause               1066
;  :num-allocs              3712926
;  :num-checks              132
;  :propagations            388
;  :quant-instantiations    167
;  :rlimit-count            155607
;  :time                    0.00)
; [then-branch: 37 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[1] == 0 | live]
; [else-branch: 37 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[1] != 0 | live]
(push) ; 4
; [then-branch: 37 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    1)
  0))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1798
;  :arith-add-rows          85
;  :arith-assert-diseq      115
;  :arith-assert-lower      321
;  :arith-assert-upper      205
;  :arith-bound-prop        26
;  :arith-conflicts         11
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         36
;  :arith-offset-eqs        9
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 291
;  :datatype-occurs-check   164
;  :datatype-splits         119
;  :decisions               364
;  :del-clause              1054
;  :final-checks            96
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1660
;  :mk-clause               1066
;  :num-allocs              3712926
;  :num-checks              133
;  :propagations            388
;  :quant-instantiations    167
;  :rlimit-count            155743)
; [eval] -2
(pop) ; 4
(push) ; 4
; [else-branch: 37 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      1)
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1804
;  :arith-add-rows          85
;  :arith-assert-diseq      115
;  :arith-assert-lower      321
;  :arith-assert-upper      205
;  :arith-bound-prop        26
;  :arith-conflicts         11
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         36
;  :arith-offset-eqs        9
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 291
;  :datatype-occurs-check   164
;  :datatype-splits         119
;  :decisions               364
;  :del-clause              1054
;  :final-checks            96
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1664
;  :mk-clause               1067
;  :num-allocs              3712926
;  :num-checks              134
;  :propagations            388
;  :quant-instantiations    167
;  :rlimit-count            156196)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      2)
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1845
;  :arith-add-rows          85
;  :arith-assert-diseq      125
;  :arith-assert-lower      343
;  :arith-assert-upper      215
;  :arith-bound-prop        34
;  :arith-conflicts         11
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         38
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   168
;  :datatype-splits         122
;  :decisions               374
;  :del-clause              1150
;  :final-checks            98
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1736
;  :mk-clause               1163
;  :num-allocs              3712926
;  :num-checks              135
;  :propagations            412
;  :quant-instantiations    173
;  :rlimit-count            157105)
(push) ; 4
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    2)
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1886
;  :arith-add-rows          85
;  :arith-assert-diseq      137
;  :arith-assert-lower      367
;  :arith-assert-upper      224
;  :arith-bound-prop        46
;  :arith-conflicts         11
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 303
;  :datatype-occurs-check   172
;  :datatype-splits         125
;  :decisions               385
;  :del-clause              1251
;  :final-checks            100
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1818
;  :mk-clause               1264
;  :num-allocs              3712926
;  :num-checks              136
;  :propagations            433
;  :quant-instantiations    179
;  :rlimit-count            158023
;  :time                    0.00)
; [then-branch: 38 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[2] == 0 | live]
; [else-branch: 38 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[2] != 0 | live]
(push) ; 4
; [then-branch: 38 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    2)
  0))
; [eval] diz.Main_event_state[2] == -2
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1887
;  :arith-add-rows          85
;  :arith-assert-diseq      137
;  :arith-assert-lower      367
;  :arith-assert-upper      224
;  :arith-bound-prop        46
;  :arith-conflicts         11
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 303
;  :datatype-occurs-check   172
;  :datatype-splits         125
;  :decisions               385
;  :del-clause              1251
;  :final-checks            100
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1819
;  :mk-clause               1264
;  :num-allocs              3712926
;  :num-checks              137
;  :propagations            433
;  :quant-instantiations    179
;  :rlimit-count            158159)
; [eval] -2
(pop) ; 4
(push) ; 4
; [else-branch: 38 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      2)
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
      2)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[0]) == 0) ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] !(old(diz.Main_event_state[0]) == 0)
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1893
;  :arith-add-rows          85
;  :arith-assert-diseq      137
;  :arith-assert-lower      367
;  :arith-assert-upper      224
;  :arith-bound-prop        46
;  :arith-conflicts         11
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 303
;  :datatype-occurs-check   172
;  :datatype-splits         125
;  :decisions               385
;  :del-clause              1251
;  :final-checks            100
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1823
;  :mk-clause               1265
;  :num-allocs              3712926
;  :num-checks              138
;  :propagations            433
;  :quant-instantiations    179
;  :rlimit-count            158622)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    0)
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1937
;  :arith-add-rows          85
;  :arith-assert-diseq      147
;  :arith-assert-lower      386
;  :arith-assert-upper      235
;  :arith-bound-prop        54
;  :arith-conflicts         11
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        9
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   176
;  :datatype-splits         128
;  :decisions               396
;  :del-clause              1346
;  :final-checks            102
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1895
;  :mk-clause               1360
;  :num-allocs              3712926
;  :num-checks              139
;  :propagations            456
;  :quant-instantiations    185
;  :rlimit-count            159529)
(push) ; 4
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      0)
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2002
;  :arith-add-rows          85
;  :arith-assert-diseq      165
;  :arith-assert-lower      424
;  :arith-assert-upper      251
;  :arith-bound-prop        62
;  :arith-conflicts         11
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         48
;  :arith-offset-eqs        9
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 319
;  :datatype-occurs-check   182
;  :datatype-splits         135
;  :decisions               413
;  :del-clause              1496
;  :final-checks            105
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2007
;  :mk-clause               1510
;  :num-allocs              3712926
;  :num-checks              140
;  :propagations            502
;  :quant-instantiations    195
;  :rlimit-count            160644)
; [then-branch: 39 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[0] != 0 | live]
; [else-branch: 39 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[0] == 0 | live]
(push) ; 4
; [then-branch: 39 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      0)
    0)))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2002
;  :arith-add-rows          85
;  :arith-assert-diseq      165
;  :arith-assert-lower      424
;  :arith-assert-upper      251
;  :arith-bound-prop        62
;  :arith-conflicts         11
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         48
;  :arith-offset-eqs        9
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 319
;  :datatype-occurs-check   182
;  :datatype-splits         135
;  :decisions               413
;  :del-clause              1496
;  :final-checks            105
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2007
;  :mk-clause               1510
;  :num-allocs              3712926
;  :num-checks              141
;  :propagations            502
;  :quant-instantiations    195
;  :rlimit-count            160782)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2002
;  :arith-add-rows          85
;  :arith-assert-diseq      165
;  :arith-assert-lower      424
;  :arith-assert-upper      251
;  :arith-bound-prop        62
;  :arith-conflicts         11
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         48
;  :arith-offset-eqs        9
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 319
;  :datatype-occurs-check   182
;  :datatype-splits         135
;  :decisions               413
;  :del-clause              1496
;  :final-checks            105
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2007
;  :mk-clause               1510
;  :num-allocs              3712926
;  :num-checks              142
;  :propagations            502
;  :quant-instantiations    195
;  :rlimit-count            160797)
(pop) ; 4
(push) ; 4
; [else-branch: 39 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    0)
  0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
        0)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[1]) == 0) ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] !(old(diz.Main_event_state[1]) == 0)
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2008
;  :arith-add-rows          85
;  :arith-assert-diseq      165
;  :arith-assert-lower      424
;  :arith-assert-upper      251
;  :arith-bound-prop        62
;  :arith-conflicts         11
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         48
;  :arith-offset-eqs        9
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 319
;  :datatype-occurs-check   182
;  :datatype-splits         135
;  :decisions               413
;  :del-clause              1496
;  :final-checks            105
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2010
;  :mk-clause               1511
;  :num-allocs              3712926
;  :num-checks              143
;  :propagations            502
;  :quant-instantiations    195
;  :rlimit-count            161228)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2052
;  :arith-add-rows          85
;  :arith-assert-diseq      175
;  :arith-assert-lower      443
;  :arith-assert-upper      262
;  :arith-bound-prop        70
;  :arith-conflicts         11
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        9
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 325
;  :datatype-occurs-check   186
;  :datatype-splits         138
;  :decisions               424
;  :del-clause              1591
;  :final-checks            107
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2082
;  :mk-clause               1606
;  :num-allocs              3712926
;  :num-checks              144
;  :propagations            526
;  :quant-instantiations    201
;  :rlimit-count            162144)
(push) ; 4
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2119
;  :arith-add-rows          85
;  :arith-assert-diseq      193
;  :arith-assert-lower      481
;  :arith-assert-upper      278
;  :arith-bound-prop        78
;  :arith-conflicts         11
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         55
;  :arith-offset-eqs        9
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 335
;  :datatype-occurs-check   192
;  :datatype-splits         145
;  :decisions               441
;  :del-clause              1741
;  :final-checks            110
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2194
;  :mk-clause               1756
;  :num-allocs              3712926
;  :num-checks              145
;  :propagations            574
;  :quant-instantiations    211
;  :rlimit-count            163269)
; [then-branch: 40 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[1] != 0 | live]
; [else-branch: 40 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[1] == 0 | live]
(push) ; 4
; [then-branch: 40 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      1)
    0)))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2119
;  :arith-add-rows          85
;  :arith-assert-diseq      193
;  :arith-assert-lower      481
;  :arith-assert-upper      278
;  :arith-bound-prop        78
;  :arith-conflicts         11
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         55
;  :arith-offset-eqs        9
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 335
;  :datatype-occurs-check   192
;  :datatype-splits         145
;  :decisions               441
;  :del-clause              1741
;  :final-checks            110
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2194
;  :mk-clause               1756
;  :num-allocs              3712926
;  :num-checks              146
;  :propagations            574
;  :quant-instantiations    211
;  :rlimit-count            163407)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2119
;  :arith-add-rows          85
;  :arith-assert-diseq      193
;  :arith-assert-lower      481
;  :arith-assert-upper      278
;  :arith-bound-prop        78
;  :arith-conflicts         11
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         55
;  :arith-offset-eqs        9
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 335
;  :datatype-occurs-check   192
;  :datatype-splits         145
;  :decisions               441
;  :del-clause              1741
;  :final-checks            110
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2194
;  :mk-clause               1756
;  :num-allocs              3712926
;  :num-checks              147
;  :propagations            574
;  :quant-instantiations    211
;  :rlimit-count            163422)
(pop) ; 4
(push) ; 4
; [else-branch: 40 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    1)
  0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
        1)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@01))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[2]) == 0) ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] !(old(diz.Main_event_state[2]) == 0)
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2121
;  :arith-add-rows          85
;  :arith-assert-diseq      193
;  :arith-assert-lower      481
;  :arith-assert-upper      278
;  :arith-bound-prop        78
;  :arith-conflicts         11
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         55
;  :arith-offset-eqs        9
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 335
;  :datatype-occurs-check   192
;  :datatype-splits         145
;  :decisions               441
;  :del-clause              1741
;  :final-checks            110
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2196
;  :mk-clause               1757
;  :num-allocs              3712926
;  :num-checks              148
;  :propagations            574
;  :quant-instantiations    211
;  :rlimit-count            163771)
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    2)
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2160
;  :arith-add-rows          85
;  :arith-assert-diseq      205
;  :arith-assert-lower      505
;  :arith-assert-upper      287
;  :arith-bound-prop        90
;  :arith-conflicts         11
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         58
;  :arith-offset-eqs        9
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 340
;  :datatype-occurs-check   196
;  :datatype-splits         147
;  :decisions               451
;  :del-clause              1842
;  :final-checks            112
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2276
;  :mk-clause               1858
;  :num-allocs              3712926
;  :num-checks              149
;  :propagations            597
;  :quant-instantiations    217
;  :rlimit-count            164688)
(push) ; 4
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      2)
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2226
;  :arith-add-rows          85
;  :arith-assert-diseq      223
;  :arith-assert-lower      543
;  :arith-assert-upper      303
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        354
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 349
;  :datatype-occurs-check   202
;  :datatype-splits         152
;  :decisions               467
;  :del-clause              1999
;  :final-checks            115
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2386
;  :mk-clause               2015
;  :num-allocs              3712926
;  :num-checks              150
;  :propagations            650
;  :quant-instantiations    227
;  :rlimit-count            165809)
; [then-branch: 41 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[2] != 0 | live]
; [else-branch: 41 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[2] == 0 | live]
(push) ; 4
; [then-branch: 41 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      2)
    0)))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2226
;  :arith-add-rows          85
;  :arith-assert-diseq      223
;  :arith-assert-lower      543
;  :arith-assert-upper      303
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        354
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 349
;  :datatype-occurs-check   202
;  :datatype-splits         152
;  :decisions               467
;  :del-clause              1999
;  :final-checks            115
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2386
;  :mk-clause               2015
;  :num-allocs              3712926
;  :num-checks              151
;  :propagations            650
;  :quant-instantiations    227
;  :rlimit-count            165947)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2226
;  :arith-add-rows          85
;  :arith-assert-diseq      223
;  :arith-assert-lower      543
;  :arith-assert-upper      303
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        354
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 349
;  :datatype-occurs-check   202
;  :datatype-splits         152
;  :decisions               467
;  :del-clause              1999
;  :final-checks            115
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2386
;  :mk-clause               2015
;  :num-allocs              3712926
;  :num-checks              152
;  :propagations            650
;  :quant-instantiations    227
;  :rlimit-count            165962)
(pop) ; 4
(push) ; 4
; [else-branch: 41 | First:(Second:(Second:(Second:(Second:($t@80@01)))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    2)
  0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
        2)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@01)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
      2))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Main_wakeup_after_wait_EncodedGlobalVariables ----------
(declare-const diz@84@01 $Ref)
(declare-const globals@85@01 $Ref)
(declare-const diz@86@01 $Ref)
(declare-const globals@87@01 $Ref)
(push) ; 1
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 ($Snap.combine ($Snap.first $t@88@01) ($Snap.second $t@88@01))))
(assert (= ($Snap.first $t@88@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@86@01 $Ref.null)))
(assert (=
  ($Snap.second $t@88@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@88@01))
    ($Snap.second ($Snap.second $t@88@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@88@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@88@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@88@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01)))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@89@01 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 42 | 0 <= i@89@01 | live]
; [else-branch: 42 | !(0 <= i@89@01) | live]
(push) ; 4
; [then-branch: 42 | 0 <= i@89@01]
(assert (<= 0 i@89@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 4
(push) ; 4
; [else-branch: 42 | !(0 <= i@89@01)]
(assert (not (<= 0 i@89@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 43 | i@89@01 < |First:(Second:(Second:($t@88@01)))| && 0 <= i@89@01 | live]
; [else-branch: 43 | !(i@89@01 < |First:(Second:(Second:($t@88@01)))| && 0 <= i@89@01) | live]
(push) ; 4
; [then-branch: 43 | i@89@01 < |First:(Second:(Second:($t@88@01)))| && 0 <= i@89@01]
(assert (and
  (<
    i@89@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))
  (<= 0 i@89@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 5
(assert (not (>= i@89@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2265
;  :arith-add-rows          85
;  :arith-assert-diseq      225
;  :arith-assert-lower      550
;  :arith-assert-upper      306
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        358
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 349
;  :datatype-occurs-check   202
;  :datatype-splits         152
;  :decisions               467
;  :del-clause              2014
;  :final-checks            115
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2415
;  :mk-clause               2021
;  :num-allocs              3712926
;  :num-checks              153
;  :propagations            652
;  :quant-instantiations    233
;  :rlimit-count            167179)
; [eval] -1
(push) ; 5
; [then-branch: 44 | First:(Second:(Second:($t@88@01)))[i@89@01] == -1 | live]
; [else-branch: 44 | First:(Second:(Second:($t@88@01)))[i@89@01] != -1 | live]
(push) ; 6
; [then-branch: 44 | First:(Second:(Second:($t@88@01)))[i@89@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    i@89@01)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 44 | First:(Second:(Second:($t@88@01)))[i@89@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      i@89@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 7
(assert (not (>= i@89@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2265
;  :arith-add-rows          85
;  :arith-assert-diseq      225
;  :arith-assert-lower      550
;  :arith-assert-upper      306
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        358
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 349
;  :datatype-occurs-check   202
;  :datatype-splits         152
;  :decisions               467
;  :del-clause              2014
;  :final-checks            115
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2416
;  :mk-clause               2021
;  :num-allocs              3712926
;  :num-checks              154
;  :propagations            652
;  :quant-instantiations    233
;  :rlimit-count            167342)
(push) ; 7
; [then-branch: 45 | 0 <= First:(Second:(Second:($t@88@01)))[i@89@01] | live]
; [else-branch: 45 | !(0 <= First:(Second:(Second:($t@88@01)))[i@89@01]) | live]
(push) ; 8
; [then-branch: 45 | 0 <= First:(Second:(Second:($t@88@01)))[i@89@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    i@89@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@89@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2265
;  :arith-add-rows          85
;  :arith-assert-diseq      226
;  :arith-assert-lower      553
;  :arith-assert-upper      306
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        359
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 349
;  :datatype-occurs-check   202
;  :datatype-splits         152
;  :decisions               467
;  :del-clause              2014
;  :final-checks            115
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2419
;  :mk-clause               2022
;  :num-allocs              3712926
;  :num-checks              155
;  :propagations            652
;  :quant-instantiations    233
;  :rlimit-count            167456)
; [eval] |diz.Main_event_state|
(pop) ; 8
(push) ; 8
; [else-branch: 45 | !(0 <= First:(Second:(Second:($t@88@01)))[i@89@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      i@89@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 43 | !(i@89@01 < |First:(Second:(Second:($t@88@01)))| && 0 <= i@89@01)]
(assert (not
  (and
    (<
      i@89@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))
    (<= 0 i@89@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@89@01 Int)) (!
  (implies
    (and
      (<
        i@89@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))
      (<= 0 i@89@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          i@89@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            i@89@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            i@89@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    i@89@01))
  :qid |prog.l<no position>|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 ($Snap.combine ($Snap.first $t@90@01) ($Snap.second $t@90@01))))
(assert (=
  ($Snap.second $t@90@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@90@01))
    ($Snap.second ($Snap.second $t@90@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@90@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@90@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@90@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@90@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@91@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 46 | 0 <= i@91@01 | live]
; [else-branch: 46 | !(0 <= i@91@01) | live]
(push) ; 5
; [then-branch: 46 | 0 <= i@91@01]
(assert (<= 0 i@91@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 46 | !(0 <= i@91@01)]
(assert (not (<= 0 i@91@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 47 | i@91@01 < |First:(Second:($t@90@01))| && 0 <= i@91@01 | live]
; [else-branch: 47 | !(i@91@01 < |First:(Second:($t@90@01))| && 0 <= i@91@01) | live]
(push) ; 5
; [then-branch: 47 | i@91@01 < |First:(Second:($t@90@01))| && 0 <= i@91@01]
(assert (and
  (<
    i@91@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))
  (<= 0 i@91@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@91@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2310
;  :arith-add-rows          85
;  :arith-assert-diseq      226
;  :arith-assert-lower      558
;  :arith-assert-upper      309
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        361
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2021
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2444
;  :mk-clause               2022
;  :num-allocs              3712926
;  :num-checks              157
;  :propagations            652
;  :quant-instantiations    237
;  :rlimit-count            169169)
; [eval] -1
(push) ; 6
; [then-branch: 48 | First:(Second:($t@90@01))[i@91@01] == -1 | live]
; [else-branch: 48 | First:(Second:($t@90@01))[i@91@01] != -1 | live]
(push) ; 7
; [then-branch: 48 | First:(Second:($t@90@01))[i@91@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
    i@91@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 48 | First:(Second:($t@90@01))[i@91@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
      i@91@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@91@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2310
;  :arith-add-rows          85
;  :arith-assert-diseq      226
;  :arith-assert-lower      558
;  :arith-assert-upper      309
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        361
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2021
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2445
;  :mk-clause               2022
;  :num-allocs              3712926
;  :num-checks              158
;  :propagations            652
;  :quant-instantiations    237
;  :rlimit-count            169320)
(push) ; 8
; [then-branch: 49 | 0 <= First:(Second:($t@90@01))[i@91@01] | live]
; [else-branch: 49 | !(0 <= First:(Second:($t@90@01))[i@91@01]) | live]
(push) ; 9
; [then-branch: 49 | 0 <= First:(Second:($t@90@01))[i@91@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
    i@91@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@91@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2310
;  :arith-add-rows          85
;  :arith-assert-diseq      227
;  :arith-assert-lower      561
;  :arith-assert-upper      309
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        362
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2021
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2448
;  :mk-clause               2023
;  :num-allocs              3712926
;  :num-checks              159
;  :propagations            652
;  :quant-instantiations    237
;  :rlimit-count            169423)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 49 | !(0 <= First:(Second:($t@90@01))[i@91@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
      i@91@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 47 | !(i@91@01 < |First:(Second:($t@90@01))| && 0 <= i@91@01)]
(assert (not
  (and
    (<
      i@91@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))
    (<= 0 i@91@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@91@01 Int)) (!
  (implies
    (and
      (<
        i@91@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))
      (<= 0 i@91@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
          i@91@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
            i@91@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
            i@91@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
    i@91@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2327
;  :arith-add-rows          85
;  :arith-assert-diseq      227
;  :arith-assert-lower      562
;  :arith-assert-upper      310
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        363
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2022
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2467
;  :mk-clause               2034
;  :num-allocs              3712926
;  :num-checks              160
;  :propagations            656
;  :quant-instantiations    239
;  :rlimit-count            170482)
(push) ; 3
; [then-branch: 50 | 0 <= First:(Second:(Second:($t@88@01)))[0] | live]
; [else-branch: 50 | !(0 <= First:(Second:(Second:($t@88@01)))[0]) | live]
(push) ; 4
; [then-branch: 50 | 0 <= First:(Second:(Second:($t@88@01)))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2327
;  :arith-add-rows          85
;  :arith-assert-diseq      227
;  :arith-assert-lower      563
;  :arith-assert-upper      310
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2022
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2473
;  :mk-clause               2040
;  :num-allocs              3712926
;  :num-checks              161
;  :propagations            656
;  :quant-instantiations    240
;  :rlimit-count            170638)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2327
;  :arith-add-rows          85
;  :arith-assert-diseq      227
;  :arith-assert-lower      563
;  :arith-assert-upper      310
;  :arith-bound-prop        98
;  :arith-conflicts         11
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2022
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2473
;  :mk-clause               2040
;  :num-allocs              3712926
;  :num-checks              162
;  :propagations            656
;  :quant-instantiations    240
;  :rlimit-count            170647)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          85
;  :arith-assert-diseq      227
;  :arith-assert-lower      564
;  :arith-assert-upper      311
;  :arith-bound-prop        98
;  :arith-conflicts         12
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2022
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2473
;  :mk-clause               2040
;  :num-allocs              3712926
;  :num-checks              163
;  :propagations            660
;  :quant-instantiations    240
;  :rlimit-count            170754)
(push) ; 5
; [then-branch: 51 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 | live]
; [else-branch: 51 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] != 0 | live]
(push) ; 6
; [then-branch: 51 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 51 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          85
;  :arith-assert-diseq      227
;  :arith-assert-lower      564
;  :arith-assert-upper      311
;  :arith-bound-prop        98
;  :arith-conflicts         12
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2022
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2474
;  :mk-clause               2040
;  :num-allocs              3712926
;  :num-checks              164
;  :propagations            660
;  :quant-instantiations    240
;  :rlimit-count            170973)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          85
;  :arith-assert-diseq      227
;  :arith-assert-lower      564
;  :arith-assert-upper      311
;  :arith-bound-prop        98
;  :arith-conflicts         12
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2022
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2474
;  :mk-clause               2040
;  :num-allocs              3712926
;  :num-checks              165
;  :propagations            660
;  :quant-instantiations    240
;  :rlimit-count            170982)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2329
;  :arith-add-rows          85
;  :arith-assert-diseq      227
;  :arith-assert-lower      565
;  :arith-assert-upper      312
;  :arith-bound-prop        98
;  :arith-conflicts         13
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 352
;  :datatype-occurs-check   204
;  :datatype-splits         155
;  :decisions               470
;  :del-clause              2022
;  :final-checks            117
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2474
;  :mk-clause               2040
;  :num-allocs              3712926
;  :num-checks              166
;  :propagations            664
;  :quant-instantiations    240
;  :rlimit-count            171089)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 50 | !(0 <= First:(Second:(Second:($t@88@01)))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2362
;  :arith-add-rows          85
;  :arith-assert-diseq      231
;  :arith-assert-lower      578
;  :arith-assert-upper      319
;  :arith-bound-prop        98
;  :arith-conflicts         13
;  :arith-eq-adapter        371
;  :arith-fixed-eqs         64
;  :arith-offset-eqs        9
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 358
;  :datatype-occurs-check   208
;  :datatype-splits         158
;  :decisions               478
;  :del-clause              2050
;  :final-checks            119
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2511
;  :mk-clause               2062
;  :num-allocs              3712926
;  :num-checks              167
;  :propagations            672
;  :quant-instantiations    244
;  :rlimit-count            171984)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2394
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      593
;  :arith-assert-upper      325
;  :arith-bound-prop        98
;  :arith-conflicts         13
;  :arith-eq-adapter        378
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2094
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2549
;  :mk-clause               2106
;  :num-allocs              3712926
;  :num-checks              168
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            172829
;  :time                    0.00)
; [then-branch: 52 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[0] | live]
; [else-branch: 52 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[0]) | live]
(push) ; 4
; [then-branch: 52 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[0]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2394
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      594
;  :arith-assert-upper      325
;  :arith-bound-prop        98
;  :arith-conflicts         13
;  :arith-eq-adapter        379
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2094
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2557
;  :mk-clause               2113
;  :num-allocs              3712926
;  :num-checks              169
;  :propagations            690
;  :quant-instantiations    249
;  :rlimit-count            173053)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 52 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        0)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1) ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2400
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      594
;  :arith-assert-upper      325
;  :arith-bound-prop        98
;  :arith-conflicts         13
;  :arith-eq-adapter        379
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2101
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2564
;  :mk-clause               2117
;  :num-allocs              3712926
;  :num-checks              170
;  :propagations            690
;  :quant-instantiations    249
;  :rlimit-count            173592)
(push) ; 3
; [then-branch: 53 | 0 <= First:(Second:(Second:($t@88@01)))[1] | live]
; [else-branch: 53 | !(0 <= First:(Second:(Second:($t@88@01)))[1]) | live]
(push) ; 4
; [then-branch: 53 | 0 <= First:(Second:(Second:($t@88@01)))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2400
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      595
;  :arith-assert-upper      325
;  :arith-bound-prop        98
;  :arith-conflicts         13
;  :arith-eq-adapter        380
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2101
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2570
;  :mk-clause               2123
;  :num-allocs              3712926
;  :num-checks              171
;  :propagations            690
;  :quant-instantiations    250
;  :rlimit-count            173749)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2400
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      595
;  :arith-assert-upper      325
;  :arith-bound-prop        98
;  :arith-conflicts         13
;  :arith-eq-adapter        380
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2101
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2570
;  :mk-clause               2123
;  :num-allocs              3712926
;  :num-checks              172
;  :propagations            690
;  :quant-instantiations    250
;  :rlimit-count            173758)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2401
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      596
;  :arith-assert-upper      326
;  :arith-bound-prop        98
;  :arith-conflicts         14
;  :arith-eq-adapter        380
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2101
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2570
;  :mk-clause               2123
;  :num-allocs              3712926
;  :num-checks              173
;  :propagations            694
;  :quant-instantiations    250
;  :rlimit-count            173866)
(push) ; 5
; [then-branch: 54 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 | live]
; [else-branch: 54 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] != 0 | live]
(push) ; 6
; [then-branch: 54 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 54 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2401
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      596
;  :arith-assert-upper      326
;  :arith-bound-prop        98
;  :arith-conflicts         14
;  :arith-eq-adapter        380
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2101
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2571
;  :mk-clause               2123
;  :num-allocs              3712926
;  :num-checks              174
;  :propagations            694
;  :quant-instantiations    250
;  :rlimit-count            174085)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2401
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      596
;  :arith-assert-upper      326
;  :arith-bound-prop        98
;  :arith-conflicts         14
;  :arith-eq-adapter        380
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2101
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2571
;  :mk-clause               2123
;  :num-allocs              3712926
;  :num-checks              175
;  :propagations            694
;  :quant-instantiations    250
;  :rlimit-count            174094)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2402
;  :arith-add-rows          85
;  :arith-assert-diseq      238
;  :arith-assert-lower      597
;  :arith-assert-upper      327
;  :arith-bound-prop        98
;  :arith-conflicts         15
;  :arith-eq-adapter        380
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   212
;  :datatype-splits         161
;  :decisions               487
;  :del-clause              2101
;  :final-checks            121
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2571
;  :mk-clause               2123
;  :num-allocs              3712926
;  :num-checks              176
;  :propagations            698
;  :quant-instantiations    250
;  :rlimit-count            174202)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 53 | !(0 <= First:(Second:(Second:($t@88@01)))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2430
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      605
;  :arith-assert-upper      332
;  :arith-bound-prop        98
;  :arith-conflicts         15
;  :arith-eq-adapter        384
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 370
;  :datatype-occurs-check   216
;  :datatype-splits         164
;  :decisions               495
;  :del-clause              2118
;  :final-checks            123
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2596
;  :mk-clause               2134
;  :num-allocs              3712926
;  :num-checks              177
;  :propagations            703
;  :quant-instantiations    253
;  :rlimit-count            175018)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2457
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      607
;  :arith-assert-upper      336
;  :arith-bound-prop        98
;  :arith-conflicts         15
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2126
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2613
;  :mk-clause               2142
;  :num-allocs              3712926
;  :num-checks              178
;  :propagations            705
;  :quant-instantiations    255
;  :rlimit-count            175729)
; [then-branch: 55 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[1] | live]
; [else-branch: 55 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[1]) | live]
(push) ; 4
; [then-branch: 55 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[1]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2457
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      608
;  :arith-assert-upper      336
;  :arith-bound-prop        98
;  :arith-conflicts         15
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2126
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2621
;  :mk-clause               2149
;  :num-allocs              3712926
;  :num-checks              179
;  :propagations            705
;  :quant-instantiations    256
;  :rlimit-count            175953)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 55 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        1)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1) ==> diz.Main_process_state[2] == -1
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2463
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      608
;  :arith-assert-upper      336
;  :arith-bound-prop        98
;  :arith-conflicts         15
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2133
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2628
;  :mk-clause               2153
;  :num-allocs              3712926
;  :num-checks              180
;  :propagations            705
;  :quant-instantiations    256
;  :rlimit-count            176502)
(push) ; 3
; [then-branch: 56 | 0 <= First:(Second:(Second:($t@88@01)))[2] | live]
; [else-branch: 56 | !(0 <= First:(Second:(Second:($t@88@01)))[2]) | live]
(push) ; 4
; [then-branch: 56 | 0 <= First:(Second:(Second:($t@88@01)))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2463
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      609
;  :arith-assert-upper      336
;  :arith-bound-prop        98
;  :arith-conflicts         15
;  :arith-eq-adapter        388
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2133
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2634
;  :mk-clause               2159
;  :num-allocs              3712926
;  :num-checks              181
;  :propagations            705
;  :quant-instantiations    257
;  :rlimit-count            176659)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2463
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      609
;  :arith-assert-upper      336
;  :arith-bound-prop        98
;  :arith-conflicts         15
;  :arith-eq-adapter        388
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2133
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2634
;  :mk-clause               2159
;  :num-allocs              3712926
;  :num-checks              182
;  :propagations            705
;  :quant-instantiations    257
;  :rlimit-count            176668)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2464
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      610
;  :arith-assert-upper      337
;  :arith-bound-prop        98
;  :arith-conflicts         16
;  :arith-eq-adapter        388
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2133
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2634
;  :mk-clause               2159
;  :num-allocs              3712926
;  :num-checks              183
;  :propagations            709
;  :quant-instantiations    257
;  :rlimit-count            176776)
(push) ; 5
; [then-branch: 57 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 | live]
; [else-branch: 57 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] != 0 | live]
(push) ; 6
; [then-branch: 57 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 57 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        2))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2464
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      610
;  :arith-assert-upper      337
;  :arith-bound-prop        98
;  :arith-conflicts         16
;  :arith-eq-adapter        388
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2133
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2635
;  :mk-clause               2159
;  :num-allocs              3712926
;  :num-checks              184
;  :propagations            709
;  :quant-instantiations    257
;  :rlimit-count            176995)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2464
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      610
;  :arith-assert-upper      337
;  :arith-bound-prop        98
;  :arith-conflicts         16
;  :arith-eq-adapter        388
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2133
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2635
;  :mk-clause               2159
;  :num-allocs              3712926
;  :num-checks              185
;  :propagations            709
;  :quant-instantiations    257
;  :rlimit-count            177004)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2465
;  :arith-add-rows          85
;  :arith-assert-diseq      240
;  :arith-assert-lower      611
;  :arith-assert-upper      338
;  :arith-bound-prop        98
;  :arith-conflicts         17
;  :arith-eq-adapter        388
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 376
;  :datatype-occurs-check   220
;  :datatype-splits         167
;  :decisions               503
;  :del-clause              2133
;  :final-checks            125
;  :interface-eqs           16
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2635
;  :mk-clause               2159
;  :num-allocs              3712926
;  :num-checks              186
;  :propagations            713
;  :quant-instantiations    257
;  :rlimit-count            177112)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 56 | !(0 <= First:(Second:(Second:($t@88@01)))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2535
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      639
;  :arith-assert-upper      352
;  :arith-bound-prop        98
;  :arith-conflicts         17
;  :arith-eq-adapter        408
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   226
;  :datatype-splits         173
;  :decisions               521
;  :del-clause              2201
;  :final-checks            130
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2719
;  :mk-clause               2221
;  :num-allocs              3712926
;  :num-checks              187
;  :propagations            737
;  :quant-instantiations    264
;  :rlimit-count            178408)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2567
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      642
;  :arith-assert-upper      358
;  :arith-bound-prop        98
;  :arith-conflicts         17
;  :arith-eq-adapter        411
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2211
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2741
;  :mk-clause               2231
;  :num-allocs              3712926
;  :num-checks              188
;  :propagations            740
;  :quant-instantiations    267
;  :rlimit-count            179182
;  :time                    0.00)
; [then-branch: 58 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[2] | live]
; [else-branch: 58 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[2]) | live]
(push) ; 4
; [then-branch: 58 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[2]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2))))
; [eval] diz.Main_process_state[2] == -1
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2567
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      643
;  :arith-assert-upper      358
;  :arith-bound-prop        98
;  :arith-conflicts         17
;  :arith-eq-adapter        412
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2211
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2749
;  :mk-clause               2238
;  :num-allocs              3712926
;  :num-checks              189
;  :propagations            740
;  :quant-instantiations    268
;  :rlimit-count            179407)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 58 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[2])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        2)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        2)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
      2)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2573
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      643
;  :arith-assert-upper      358
;  :arith-bound-prop        98
;  :arith-conflicts         17
;  :arith-eq-adapter        412
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2218
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2756
;  :mk-clause               2242
;  :num-allocs              3712926
;  :num-checks              190
;  :propagations            740
;  :quant-instantiations    268
;  :rlimit-count            179966)
(push) ; 3
; [then-branch: 59 | 0 <= First:(Second:(Second:($t@88@01)))[0] | live]
; [else-branch: 59 | !(0 <= First:(Second:(Second:($t@88@01)))[0]) | live]
(push) ; 4
; [then-branch: 59 | 0 <= First:(Second:(Second:($t@88@01)))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2573
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      644
;  :arith-assert-upper      358
;  :arith-bound-prop        98
;  :arith-conflicts         17
;  :arith-eq-adapter        413
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2218
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2761
;  :mk-clause               2248
;  :num-allocs              3712926
;  :num-checks              191
;  :propagations            740
;  :quant-instantiations    269
;  :rlimit-count            180083)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2573
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      644
;  :arith-assert-upper      358
;  :arith-bound-prop        98
;  :arith-conflicts         17
;  :arith-eq-adapter        413
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2218
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2761
;  :mk-clause               2248
;  :num-allocs              3712926
;  :num-checks              192
;  :propagations            740
;  :quant-instantiations    269
;  :rlimit-count            180092)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2574
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      645
;  :arith-assert-upper      359
;  :arith-bound-prop        98
;  :arith-conflicts         18
;  :arith-eq-adapter        413
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2218
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2761
;  :mk-clause               2248
;  :num-allocs              3712926
;  :num-checks              193
;  :propagations            744
;  :quant-instantiations    269
;  :rlimit-count            180200)
(push) ; 5
; [then-branch: 60 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 | live]
; [else-branch: 60 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] != 0 | live]
(push) ; 6
; [then-branch: 60 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 60 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2574
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      645
;  :arith-assert-upper      359
;  :arith-bound-prop        98
;  :arith-conflicts         18
;  :arith-eq-adapter        413
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2218
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2761
;  :mk-clause               2248
;  :num-allocs              3712926
;  :num-checks              194
;  :propagations            744
;  :quant-instantiations    269
;  :rlimit-count            180403)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2574
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      645
;  :arith-assert-upper      359
;  :arith-bound-prop        98
;  :arith-conflicts         18
;  :arith-eq-adapter        413
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2218
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2761
;  :mk-clause               2248
;  :num-allocs              3712926
;  :num-checks              195
;  :propagations            744
;  :quant-instantiations    269
;  :rlimit-count            180412)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2575
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      646
;  :arith-assert-upper      360
;  :arith-bound-prop        98
;  :arith-conflicts         19
;  :arith-eq-adapter        413
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 391
;  :datatype-occurs-check   230
;  :datatype-splits         176
;  :decisions               530
;  :del-clause              2218
;  :final-checks            132
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2761
;  :mk-clause               2248
;  :num-allocs              3712926
;  :num-checks              196
;  :propagations            748
;  :quant-instantiations    269
;  :rlimit-count            180520)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 59 | !(0 <= First:(Second:(Second:($t@88@01)))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2608
;  :arith-add-rows          85
;  :arith-assert-diseq      250
;  :arith-assert-lower      649
;  :arith-assert-upper      366
;  :arith-bound-prop        98
;  :arith-conflicts         19
;  :arith-eq-adapter        416
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 397
;  :datatype-occurs-check   234
;  :datatype-splits         179
;  :decisions               539
;  :del-clause              2231
;  :final-checks            134
;  :interface-eqs           18
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2779
;  :mk-clause               2255
;  :num-allocs              3712926
;  :num-checks              197
;  :propagations            751
;  :quant-instantiations    272
;  :rlimit-count            181307)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2650
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      655
;  :arith-assert-upper      372
;  :arith-bound-prop        98
;  :arith-conflicts         19
;  :arith-eq-adapter        421
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2246
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2807
;  :mk-clause               2270
;  :num-allocs              3712926
;  :num-checks              198
;  :propagations            758
;  :quant-instantiations    275
;  :rlimit-count            182169)
; [then-branch: 61 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[0]) | live]
; [else-branch: 61 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[0] | live]
(push) ; 4
; [then-branch: 61 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2650
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      655
;  :arith-assert-upper      372
;  :arith-bound-prop        98
;  :arith-conflicts         19
;  :arith-eq-adapter        421
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2246
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2807
;  :mk-clause               2271
;  :num-allocs              3712926
;  :num-checks              199
;  :propagations            758
;  :quant-instantiations    275
;  :rlimit-count            182384)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2650
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      655
;  :arith-assert-upper      372
;  :arith-bound-prop        98
;  :arith-conflicts         19
;  :arith-eq-adapter        421
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2246
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2807
;  :mk-clause               2271
;  :num-allocs              3712926
;  :num-checks              200
;  :propagations            758
;  :quant-instantiations    275
;  :rlimit-count            182399)
(pop) ; 4
(push) ; 4
; [else-branch: 61 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[0]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[0]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
              0))
          0)
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2656
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      655
;  :arith-assert-upper      372
;  :arith-bound-prop        98
;  :arith-conflicts         19
;  :arith-eq-adapter        421
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2247
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2811
;  :mk-clause               2275
;  :num-allocs              3712926
;  :num-checks              201
;  :propagations            758
;  :quant-instantiations    275
;  :rlimit-count            182948)
(push) ; 3
; [then-branch: 62 | 0 <= First:(Second:(Second:($t@88@01)))[1] | live]
; [else-branch: 62 | !(0 <= First:(Second:(Second:($t@88@01)))[1]) | live]
(push) ; 4
; [then-branch: 62 | 0 <= First:(Second:(Second:($t@88@01)))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2656
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      656
;  :arith-assert-upper      372
;  :arith-bound-prop        98
;  :arith-conflicts         19
;  :arith-eq-adapter        422
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2247
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2816
;  :mk-clause               2281
;  :num-allocs              3712926
;  :num-checks              202
;  :propagations            758
;  :quant-instantiations    276
;  :rlimit-count            183065)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2656
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      656
;  :arith-assert-upper      372
;  :arith-bound-prop        98
;  :arith-conflicts         19
;  :arith-eq-adapter        422
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2247
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2816
;  :mk-clause               2281
;  :num-allocs              3712926
;  :num-checks              203
;  :propagations            758
;  :quant-instantiations    276
;  :rlimit-count            183074)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2657
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      657
;  :arith-assert-upper      373
;  :arith-bound-prop        98
;  :arith-conflicts         20
;  :arith-eq-adapter        422
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2247
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2816
;  :mk-clause               2281
;  :num-allocs              3712926
;  :num-checks              204
;  :propagations            762
;  :quant-instantiations    276
;  :rlimit-count            183182)
(push) ; 5
; [then-branch: 63 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 | live]
; [else-branch: 63 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] != 0 | live]
(push) ; 6
; [then-branch: 63 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 63 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2657
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      657
;  :arith-assert-upper      373
;  :arith-bound-prop        98
;  :arith-conflicts         20
;  :arith-eq-adapter        422
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2247
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2816
;  :mk-clause               2281
;  :num-allocs              3712926
;  :num-checks              205
;  :propagations            762
;  :quant-instantiations    276
;  :rlimit-count            183385)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2657
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      657
;  :arith-assert-upper      373
;  :arith-bound-prop        98
;  :arith-conflicts         20
;  :arith-eq-adapter        422
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2247
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2816
;  :mk-clause               2281
;  :num-allocs              3712926
;  :num-checks              206
;  :propagations            762
;  :quant-instantiations    276
;  :rlimit-count            183394)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2658
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      658
;  :arith-assert-upper      374
;  :arith-bound-prop        98
;  :arith-conflicts         21
;  :arith-eq-adapter        422
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 407
;  :datatype-occurs-check   240
;  :datatype-splits         184
;  :decisions               554
;  :del-clause              2247
;  :final-checks            138
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2816
;  :mk-clause               2281
;  :num-allocs              3712926
;  :num-checks              207
;  :propagations            766
;  :quant-instantiations    276
;  :rlimit-count            183502)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 62 | !(0 <= First:(Second:(Second:($t@88@01)))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2695
;  :arith-add-rows          85
;  :arith-assert-diseq      251
;  :arith-assert-lower      662
;  :arith-assert-upper      381
;  :arith-bound-prop        100
;  :arith-conflicts         21
;  :arith-eq-adapter        426
;  :arith-fixed-eqs         72
;  :arith-offset-eqs        9
;  :arith-pivots            125
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 413
;  :datatype-occurs-check   244
;  :datatype-splits         187
;  :decisions               563
;  :del-clause              2268
;  :final-checks            140
;  :interface-eqs           19
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2844
;  :mk-clause               2296
;  :num-allocs              3712926
;  :num-checks              208
;  :propagations            772
;  :quant-instantiations    280
;  :rlimit-count            184352
;  :time                    0.01)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2745
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      668
;  :arith-assert-upper      389
;  :arith-bound-prop        102
;  :arith-conflicts         21
;  :arith-eq-adapter        432
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2292
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2882
;  :mk-clause               2320
;  :num-allocs              3712926
;  :num-checks              209
;  :propagations            784
;  :quant-instantiations    284
;  :rlimit-count            185302)
; [then-branch: 64 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[1]) | live]
; [else-branch: 64 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[1] | live]
(push) ; 4
; [then-branch: 64 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2745
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      668
;  :arith-assert-upper      389
;  :arith-bound-prop        102
;  :arith-conflicts         21
;  :arith-eq-adapter        432
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2292
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2882
;  :mk-clause               2321
;  :num-allocs              3712926
;  :num-checks              210
;  :propagations            784
;  :quant-instantiations    284
;  :rlimit-count            185517)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2745
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      668
;  :arith-assert-upper      389
;  :arith-bound-prop        102
;  :arith-conflicts         21
;  :arith-eq-adapter        432
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2292
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2882
;  :mk-clause               2321
;  :num-allocs              3712926
;  :num-checks              211
;  :propagations            784
;  :quant-instantiations    284
;  :rlimit-count            185532)
(pop) ; 4
(push) ; 4
; [else-branch: 64 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[1]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[1]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
              1))
          0)
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
              1))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@01))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)) ==> diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] !(0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      668
;  :arith-assert-upper      389
;  :arith-bound-prop        102
;  :arith-conflicts         21
;  :arith-eq-adapter        432
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2293
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2885
;  :mk-clause               2325
;  :num-allocs              3712926
;  :num-checks              212
;  :propagations            784
;  :quant-instantiations    284
;  :rlimit-count            185995)
(push) ; 3
; [then-branch: 65 | 0 <= First:(Second:(Second:($t@88@01)))[2] | live]
; [else-branch: 65 | !(0 <= First:(Second:(Second:($t@88@01)))[2]) | live]
(push) ; 4
; [then-branch: 65 | 0 <= First:(Second:(Second:($t@88@01)))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      669
;  :arith-assert-upper      389
;  :arith-bound-prop        102
;  :arith-conflicts         21
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2293
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2890
;  :mk-clause               2331
;  :num-allocs              3712926
;  :num-checks              213
;  :propagations            784
;  :quant-instantiations    285
;  :rlimit-count            186112)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2747
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      669
;  :arith-assert-upper      389
;  :arith-bound-prop        102
;  :arith-conflicts         21
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2293
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2890
;  :mk-clause               2331
;  :num-allocs              3712926
;  :num-checks              214
;  :propagations            784
;  :quant-instantiations    285
;  :rlimit-count            186121)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      670
;  :arith-assert-upper      390
;  :arith-bound-prop        102
;  :arith-conflicts         22
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2293
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2890
;  :mk-clause               2331
;  :num-allocs              3712926
;  :num-checks              215
;  :propagations            788
;  :quant-instantiations    285
;  :rlimit-count            186229)
(push) ; 5
; [then-branch: 66 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 | live]
; [else-branch: 66 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] != 0 | live]
(push) ; 6
; [then-branch: 66 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 66 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        2))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      670
;  :arith-assert-upper      390
;  :arith-bound-prop        102
;  :arith-conflicts         22
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2293
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2890
;  :mk-clause               2331
;  :num-allocs              3712926
;  :num-checks              216
;  :propagations            788
;  :quant-instantiations    285
;  :rlimit-count            186432)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2748
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      670
;  :arith-assert-upper      390
;  :arith-bound-prop        102
;  :arith-conflicts         22
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2293
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2890
;  :mk-clause               2331
;  :num-allocs              3712926
;  :num-checks              217
;  :propagations            788
;  :quant-instantiations    285
;  :rlimit-count            186441)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2749
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      671
;  :arith-assert-upper      391
;  :arith-bound-prop        102
;  :arith-conflicts         23
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 423
;  :datatype-occurs-check   250
;  :datatype-splits         192
;  :decisions               578
;  :del-clause              2293
;  :final-checks            144
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2890
;  :mk-clause               2331
;  :num-allocs              3712926
;  :num-checks              218
;  :propagations            792
;  :quant-instantiations    285
;  :rlimit-count            186549)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 65 | !(0 <= First:(Second:(Second:($t@88@01)))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2787
;  :arith-add-rows          85
;  :arith-assert-diseq      253
;  :arith-assert-lower      676
;  :arith-assert-upper      399
;  :arith-bound-prop        106
;  :arith-conflicts         23
;  :arith-eq-adapter        438
;  :arith-fixed-eqs         76
;  :arith-offset-eqs        9
;  :arith-pivots            131
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 428
;  :datatype-occurs-check   254
;  :datatype-splits         194
;  :decisions               586
;  :del-clause              2322
;  :final-checks            146
;  :interface-eqs           20
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2927
;  :mk-clause               2354
;  :num-allocs              3712926
;  :num-checks              219
;  :propagations            801
;  :quant-instantiations    290
;  :rlimit-count            187446)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2851
;  :arith-add-rows          85
;  :arith-assert-diseq      258
;  :arith-assert-lower      690
;  :arith-assert-upper      412
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        450
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   260
;  :datatype-splits         198
;  :decisions               604
;  :del-clause              2374
;  :final-checks            150
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2993
;  :mk-clause               2406
;  :num-allocs              3712926
;  :num-checks              220
;  :propagations            822
;  :quant-instantiations    296
;  :rlimit-count            188602)
; [then-branch: 67 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[2]) | live]
; [else-branch: 67 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[2] | live]
(push) ; 4
; [then-branch: 67 | !(First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[2])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
        2)))))
; [eval] diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2851
;  :arith-add-rows          85
;  :arith-assert-diseq      258
;  :arith-assert-lower      690
;  :arith-assert-upper      412
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        450
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   260
;  :datatype-splits         198
;  :decisions               604
;  :del-clause              2374
;  :final-checks            150
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2993
;  :mk-clause               2407
;  :num-allocs              3712926
;  :num-checks              221
;  :propagations            822
;  :quant-instantiations    296
;  :rlimit-count            188817)
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2851
;  :arith-add-rows          85
;  :arith-assert-diseq      258
;  :arith-assert-lower      690
;  :arith-assert-upper      412
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        450
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   260
;  :datatype-splits         198
;  :decisions               604
;  :del-clause              2374
;  :final-checks            150
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             2993
;  :mk-clause               2407
;  :num-allocs              3712926
;  :num-checks              222
;  :propagations            822
;  :quant-instantiations    296
;  :rlimit-count            188832)
(pop) ; 4
(push) ; 4
; [else-branch: 67 | First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@88@01)))))[First:(Second:(Second:($t@88@01)))[2]] == -1 && 0 <= First:(Second:(Second:($t@88@01)))[2]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
              2))
          0)
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
              2))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
          2))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@01)))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@88@01))))
      2))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Main_reset_all_events_EncodedGlobalVariables ----------
(declare-const diz@92@01 $Ref)
(declare-const globals@93@01 $Ref)
(declare-const diz@94@01 $Ref)
(declare-const globals@95@01 $Ref)
(push) ; 1
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 ($Snap.combine ($Snap.first $t@96@01) ($Snap.second $t@96@01))))
(assert (= ($Snap.first $t@96@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@94@01 $Ref.null)))
(assert (=
  ($Snap.second $t@96@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@96@01))
    ($Snap.second ($Snap.second $t@96@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@96@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@96@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@96@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@01))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01)))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@97@01 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 68 | 0 <= i@97@01 | live]
; [else-branch: 68 | !(0 <= i@97@01) | live]
(push) ; 4
; [then-branch: 68 | 0 <= i@97@01]
(assert (<= 0 i@97@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 4
(push) ; 4
; [else-branch: 68 | !(0 <= i@97@01)]
(assert (not (<= 0 i@97@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 69 | i@97@01 < |First:(Second:(Second:($t@96@01)))| && 0 <= i@97@01 | live]
; [else-branch: 69 | !(i@97@01 < |First:(Second:(Second:($t@96@01)))| && 0 <= i@97@01) | live]
(push) ; 4
; [then-branch: 69 | i@97@01 < |First:(Second:(Second:($t@96@01)))| && 0 <= i@97@01]
(assert (and
  (<
    i@97@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))
  (<= 0 i@97@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 5
(assert (not (>= i@97@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2890
;  :arith-add-rows          85
;  :arith-assert-diseq      260
;  :arith-assert-lower      697
;  :arith-assert-upper      415
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        454
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   260
;  :datatype-splits         198
;  :decisions               604
;  :del-clause              2406
;  :final-checks            150
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3022
;  :mk-clause               2413
;  :num-allocs              3712926
;  :num-checks              223
;  :propagations            824
;  :quant-instantiations    302
;  :rlimit-count            190084)
; [eval] -1
(push) ; 5
; [then-branch: 70 | First:(Second:(Second:($t@96@01)))[i@97@01] == -1 | live]
; [else-branch: 70 | First:(Second:(Second:($t@96@01)))[i@97@01] != -1 | live]
(push) ; 6
; [then-branch: 70 | First:(Second:(Second:($t@96@01)))[i@97@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    i@97@01)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 70 | First:(Second:(Second:($t@96@01)))[i@97@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
      i@97@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 7
(assert (not (>= i@97@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2890
;  :arith-add-rows          85
;  :arith-assert-diseq      260
;  :arith-assert-lower      697
;  :arith-assert-upper      415
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        454
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   260
;  :datatype-splits         198
;  :decisions               604
;  :del-clause              2406
;  :final-checks            150
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3023
;  :mk-clause               2413
;  :num-allocs              3712926
;  :num-checks              224
;  :propagations            824
;  :quant-instantiations    302
;  :rlimit-count            190247)
(push) ; 7
; [then-branch: 71 | 0 <= First:(Second:(Second:($t@96@01)))[i@97@01] | live]
; [else-branch: 71 | !(0 <= First:(Second:(Second:($t@96@01)))[i@97@01]) | live]
(push) ; 8
; [then-branch: 71 | 0 <= First:(Second:(Second:($t@96@01)))[i@97@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    i@97@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@97@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2890
;  :arith-add-rows          85
;  :arith-assert-diseq      261
;  :arith-assert-lower      700
;  :arith-assert-upper      415
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        455
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   260
;  :datatype-splits         198
;  :decisions               604
;  :del-clause              2406
;  :final-checks            150
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3026
;  :mk-clause               2414
;  :num-allocs              3712926
;  :num-checks              225
;  :propagations            824
;  :quant-instantiations    302
;  :rlimit-count            190361)
; [eval] |diz.Main_event_state|
(pop) ; 8
(push) ; 8
; [else-branch: 71 | !(0 <= First:(Second:(Second:($t@96@01)))[i@97@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
      i@97@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 69 | !(i@97@01 < |First:(Second:(Second:($t@96@01)))| && 0 <= i@97@01)]
(assert (not
  (and
    (<
      i@97@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))
    (<= 0 i@97@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@97@01 Int)) (!
  (implies
    (and
      (<
        i@97@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))
      (<= 0 i@97@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
          i@97@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
            i@97@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
            i@97@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))
    i@97@01))
  :qid |prog.l<no position>|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 ($Snap.combine ($Snap.first $t@98@01) ($Snap.second $t@98@01))))
(assert (=
  ($Snap.second $t@98@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@98@01))
    ($Snap.second ($Snap.second $t@98@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@98@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@98@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@98@01))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@98@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@99@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 72 | 0 <= i@99@01 | live]
; [else-branch: 72 | !(0 <= i@99@01) | live]
(push) ; 5
; [then-branch: 72 | 0 <= i@99@01]
(assert (<= 0 i@99@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 72 | !(0 <= i@99@01)]
(assert (not (<= 0 i@99@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 73 | i@99@01 < |First:(Second:($t@98@01))| && 0 <= i@99@01 | live]
; [else-branch: 73 | !(i@99@01 < |First:(Second:($t@98@01))| && 0 <= i@99@01) | live]
(push) ; 5
; [then-branch: 73 | i@99@01 < |First:(Second:($t@98@01))| && 0 <= i@99@01]
(assert (and
  (<
    i@99@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))))
  (<= 0 i@99@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@99@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2935
;  :arith-add-rows          85
;  :arith-assert-diseq      261
;  :arith-assert-lower      705
;  :arith-assert-upper      418
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 440
;  :datatype-occurs-check   262
;  :datatype-splits         201
;  :decisions               607
;  :del-clause              2413
;  :final-checks            152
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3051
;  :mk-clause               2414
;  :num-allocs              3712926
;  :num-checks              227
;  :propagations            824
;  :quant-instantiations    306
;  :rlimit-count            192074)
; [eval] -1
(push) ; 6
; [then-branch: 74 | First:(Second:($t@98@01))[i@99@01] == -1 | live]
; [else-branch: 74 | First:(Second:($t@98@01))[i@99@01] != -1 | live]
(push) ; 7
; [then-branch: 74 | First:(Second:($t@98@01))[i@99@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
    i@99@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 74 | First:(Second:($t@98@01))[i@99@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
      i@99@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@99@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2935
;  :arith-add-rows          85
;  :arith-assert-diseq      261
;  :arith-assert-lower      705
;  :arith-assert-upper      418
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 440
;  :datatype-occurs-check   262
;  :datatype-splits         201
;  :decisions               607
;  :del-clause              2413
;  :final-checks            152
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3052
;  :mk-clause               2414
;  :num-allocs              3712926
;  :num-checks              228
;  :propagations            824
;  :quant-instantiations    306
;  :rlimit-count            192225)
(push) ; 8
; [then-branch: 75 | 0 <= First:(Second:($t@98@01))[i@99@01] | live]
; [else-branch: 75 | !(0 <= First:(Second:($t@98@01))[i@99@01]) | live]
(push) ; 9
; [then-branch: 75 | 0 <= First:(Second:($t@98@01))[i@99@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
    i@99@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@99@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2935
;  :arith-add-rows          85
;  :arith-assert-diseq      262
;  :arith-assert-lower      708
;  :arith-assert-upper      418
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        458
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 440
;  :datatype-occurs-check   262
;  :datatype-splits         201
;  :decisions               607
;  :del-clause              2413
;  :final-checks            152
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3055
;  :mk-clause               2415
;  :num-allocs              3712926
;  :num-checks              229
;  :propagations            824
;  :quant-instantiations    306
;  :rlimit-count            192328)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 75 | !(0 <= First:(Second:($t@98@01))[i@99@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
      i@99@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 73 | !(i@99@01 < |First:(Second:($t@98@01))| && 0 <= i@99@01)]
(assert (not
  (and
    (<
      i@99@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))))
    (<= 0 i@99@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@99@01 Int)) (!
  (implies
    (and
      (<
        i@99@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))))
      (<= 0 i@99@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
          i@99@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
            i@99@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
            i@99@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
    i@99@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@98@01)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@96@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2953
;  :arith-add-rows          85
;  :arith-assert-diseq      262
;  :arith-assert-lower      709
;  :arith-assert-upper      419
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        459
;  :arith-fixed-eqs         83
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 440
;  :datatype-occurs-check   262
;  :datatype-splits         201
;  :decisions               607
;  :del-clause              2414
;  :final-checks            152
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3075
;  :mk-clause               2425
;  :num-allocs              3712926
;  :num-checks              230
;  :propagations            828
;  :quant-instantiations    308
;  :rlimit-count            193355)
(push) ; 3
; [then-branch: 76 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 | live]
; [else-branch: 76 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] != 0 | live]
(push) ; 4
; [then-branch: 76 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
    0)
  0))
(pop) ; 4
(push) ; 4
; [else-branch: 76 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2953
;  :arith-add-rows          85
;  :arith-assert-diseq      262
;  :arith-assert-lower      709
;  :arith-assert-upper      419
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        459
;  :arith-fixed-eqs         83
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 440
;  :datatype-occurs-check   262
;  :datatype-splits         201
;  :decisions               607
;  :del-clause              2414
;  :final-checks            152
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3076
;  :mk-clause               2425
;  :num-allocs              3712926
;  :num-checks              231
;  :propagations            828
;  :quant-instantiations    308
;  :rlimit-count            193540)
; [eval] -1
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2981
;  :arith-add-rows          85
;  :arith-assert-diseq      264
;  :arith-assert-lower      715
;  :arith-assert-upper      423
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        463
;  :arith-fixed-eqs         83
;  :arith-offset-eqs        9
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 446
;  :datatype-occurs-check   266
;  :datatype-splits         204
;  :decisions               614
;  :del-clause              2445
;  :final-checks            154
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3097
;  :mk-clause               2456
;  :num-allocs              3712926
;  :num-checks              232
;  :propagations            838
;  :quant-instantiations    310
;  :rlimit-count            194199)
(push) ; 4
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3009
;  :arith-add-rows          85
;  :arith-assert-diseq      269
;  :arith-assert-lower      723
;  :arith-assert-upper      426
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        467
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        9
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 452
;  :datatype-occurs-check   270
;  :datatype-splits         207
;  :decisions               620
;  :del-clause              2476
;  :final-checks            156
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3119
;  :mk-clause               2487
;  :num-allocs              3712926
;  :num-checks              233
;  :propagations            849
;  :quant-instantiations    312
;  :rlimit-count            194859)
; [then-branch: 77 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == -1 | live]
; [else-branch: 77 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == -1) | live]
(push) ; 4
; [then-branch: 77 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3009
;  :arith-add-rows          85
;  :arith-assert-diseq      269
;  :arith-assert-lower      723
;  :arith-assert-upper      426
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        467
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        9
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 452
;  :datatype-occurs-check   270
;  :datatype-splits         207
;  :decisions               620
;  :del-clause              2476
;  :final-checks            156
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3121
;  :mk-clause               2488
;  :num-allocs              3712926
;  :num-checks              234
;  :propagations            849
;  :quant-instantiations    312
;  :rlimit-count            195018)
; [eval] -2
(pop) ; 4
(push) ; 4
; [else-branch: 77 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      (- 0 1)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3015
;  :arith-add-rows          85
;  :arith-assert-diseq      269
;  :arith-assert-lower      723
;  :arith-assert-upper      426
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        467
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        9
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 452
;  :datatype-occurs-check   270
;  :datatype-splits         207
;  :decisions               620
;  :del-clause              2477
;  :final-checks            156
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3127
;  :mk-clause               2492
;  :num-allocs              3712926
;  :num-checks              235
;  :propagations            849
;  :quant-instantiations    312
;  :rlimit-count            195513)
(push) ; 3
; [then-branch: 78 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 | live]
; [else-branch: 78 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] != 0 | live]
(push) ; 4
; [then-branch: 78 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
    1)
  0))
(pop) ; 4
(push) ; 4
; [else-branch: 78 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3015
;  :arith-add-rows          85
;  :arith-assert-diseq      269
;  :arith-assert-lower      723
;  :arith-assert-upper      426
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        467
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        9
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 452
;  :datatype-occurs-check   270
;  :datatype-splits         207
;  :decisions               620
;  :del-clause              2477
;  :final-checks            156
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3128
;  :mk-clause               2492
;  :num-allocs              3712926
;  :num-checks              236
;  :propagations            849
;  :quant-instantiations    312
;  :rlimit-count            195694)
; [eval] -1
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3045
;  :arith-add-rows          85
;  :arith-assert-diseq      274
;  :arith-assert-lower      731
;  :arith-assert-upper      429
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        471
;  :arith-fixed-eqs         85
;  :arith-offset-eqs        9
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 458
;  :datatype-occurs-check   274
;  :datatype-splits         210
;  :decisions               628
;  :del-clause              2509
;  :final-checks            158
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3150
;  :mk-clause               2524
;  :num-allocs              3712926
;  :num-checks              237
;  :propagations            862
;  :quant-instantiations    314
;  :rlimit-count            196368)
(push) ; 4
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3081
;  :arith-add-rows          85
;  :arith-assert-diseq      284
;  :arith-assert-lower      747
;  :arith-assert-upper      435
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        479
;  :arith-fixed-eqs         87
;  :arith-offset-eqs        9
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 464
;  :datatype-occurs-check   278
;  :datatype-splits         213
;  :decisions               635
;  :del-clause              2564
;  :final-checks            160
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3189
;  :mk-clause               2579
;  :num-allocs              3712926
;  :num-checks              238
;  :propagations            884
;  :quant-instantiations    318
;  :rlimit-count            197187)
; [then-branch: 79 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == -1 | live]
; [else-branch: 79 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == -1) | live]
(push) ; 4
; [then-branch: 79 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3081
;  :arith-add-rows          85
;  :arith-assert-diseq      284
;  :arith-assert-lower      747
;  :arith-assert-upper      435
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        479
;  :arith-fixed-eqs         87
;  :arith-offset-eqs        9
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 464
;  :datatype-occurs-check   278
;  :datatype-splits         213
;  :decisions               635
;  :del-clause              2564
;  :final-checks            160
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3191
;  :mk-clause               2580
;  :num-allocs              3712926
;  :num-checks              239
;  :propagations            884
;  :quant-instantiations    318
;  :rlimit-count            197346)
; [eval] -2
(pop) ; 4
(push) ; 4
; [else-branch: 79 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      (- 0 1)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3087
;  :arith-add-rows          85
;  :arith-assert-diseq      284
;  :arith-assert-lower      747
;  :arith-assert-upper      435
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        479
;  :arith-fixed-eqs         87
;  :arith-offset-eqs        9
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 464
;  :datatype-occurs-check   278
;  :datatype-splits         213
;  :decisions               635
;  :del-clause              2565
;  :final-checks            160
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3197
;  :mk-clause               2584
;  :num-allocs              3712926
;  :num-checks              240
;  :propagations            884
;  :quant-instantiations    318
;  :rlimit-count            197847)
(push) ; 3
; [then-branch: 80 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 | live]
; [else-branch: 80 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] != 0 | live]
(push) ; 4
; [then-branch: 80 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
    2)
  0))
(pop) ; 4
(push) ; 4
; [else-branch: 80 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3087
;  :arith-add-rows          85
;  :arith-assert-diseq      284
;  :arith-assert-lower      747
;  :arith-assert-upper      435
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        479
;  :arith-fixed-eqs         87
;  :arith-offset-eqs        9
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 464
;  :datatype-occurs-check   278
;  :datatype-splits         213
;  :decisions               635
;  :del-clause              2565
;  :final-checks            160
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             3198
;  :mk-clause               2584
;  :num-allocs              3712926
;  :num-checks              241
;  :propagations            884
;  :quant-instantiations    318
;  :rlimit-count            198028)
; [eval] -1
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3131
;  :arith-add-rows          85
;  :arith-assert-diseq      296
;  :arith-assert-lower      769
;  :arith-assert-upper      445
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        491
;  :arith-fixed-eqs         89
;  :arith-offset-eqs        9
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 470
;  :datatype-occurs-check   282
;  :datatype-splits         216
;  :decisions               644
;  :del-clause              2655
;  :final-checks            162
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3253
;  :mk-clause               2674
;  :num-allocs              3896052
;  :num-checks              242
;  :propagations            920
;  :quant-instantiations    324
;  :rlimit-count            198962)
(push) ; 4
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3175
;  :arith-add-rows          85
;  :arith-assert-diseq      311
;  :arith-assert-lower      793
;  :arith-assert-upper      454
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        503
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        9
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 476
;  :datatype-occurs-check   286
;  :datatype-splits         219
;  :decisions               652
;  :del-clause              2745
;  :final-checks            164
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3309
;  :mk-clause               2764
;  :num-allocs              3896052
;  :num-checks              243
;  :propagations            957
;  :quant-instantiations    330
;  :rlimit-count            199897)
; [then-branch: 81 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == -1 | live]
; [else-branch: 81 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == -1) | live]
(push) ; 4
; [then-branch: 81 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] == -2
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3175
;  :arith-add-rows          85
;  :arith-assert-diseq      311
;  :arith-assert-lower      793
;  :arith-assert-upper      454
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        503
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        9
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 476
;  :datatype-occurs-check   286
;  :datatype-splits         219
;  :decisions               652
;  :del-clause              2745
;  :final-checks            164
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3311
;  :mk-clause               2765
;  :num-allocs              3896052
;  :num-checks              244
;  :propagations            957
;  :quant-instantiations    330
;  :rlimit-count            200056)
; [eval] -2
(pop) ; 4
(push) ; 4
; [else-branch: 81 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      (- 0 1)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
      2)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1) ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1)
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3181
;  :arith-add-rows          85
;  :arith-assert-diseq      311
;  :arith-assert-lower      793
;  :arith-assert-upper      454
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        503
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        9
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 476
;  :datatype-occurs-check   286
;  :datatype-splits         219
;  :decisions               652
;  :del-clause              2746
;  :final-checks            164
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3317
;  :mk-clause               2769
;  :num-allocs              3896052
;  :num-checks              245
;  :propagations            957
;  :quant-instantiations    330
;  :rlimit-count            200567)
(push) ; 3
; [then-branch: 82 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 | live]
; [else-branch: 82 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] != 0 | live]
(push) ; 4
; [then-branch: 82 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
    0)
  0))
(pop) ; 4
(push) ; 4
; [else-branch: 82 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3181
;  :arith-add-rows          85
;  :arith-assert-diseq      311
;  :arith-assert-lower      793
;  :arith-assert-upper      454
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        503
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        9
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 476
;  :datatype-occurs-check   286
;  :datatype-splits         219
;  :decisions               652
;  :del-clause              2746
;  :final-checks            164
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3317
;  :mk-clause               2769
;  :num-allocs              3896052
;  :num-checks              246
;  :propagations            957
;  :quant-instantiations    330
;  :rlimit-count            200732)
; [eval] -1
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3226
;  :arith-add-rows          85
;  :arith-assert-diseq      326
;  :arith-assert-lower      817
;  :arith-assert-upper      463
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        515
;  :arith-fixed-eqs         95
;  :arith-offset-eqs        9
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 482
;  :datatype-occurs-check   290
;  :datatype-splits         222
;  :decisions               660
;  :del-clause              2836
;  :final-checks            166
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3371
;  :mk-clause               2859
;  :num-allocs              3896052
;  :num-checks              247
;  :propagations            995
;  :quant-instantiations    336
;  :rlimit-count            201668)
(push) ; 4
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3276
;  :arith-add-rows          85
;  :arith-assert-diseq      336
;  :arith-assert-lower      833
;  :arith-assert-upper      469
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        523
;  :arith-fixed-eqs         97
;  :arith-offset-eqs        9
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 492
;  :datatype-occurs-check   296
;  :datatype-splits         227
;  :decisions               673
;  :del-clause              2897
;  :final-checks            169
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3412
;  :mk-clause               2920
;  :num-allocs              3896052
;  :num-checks              248
;  :propagations            1024
;  :quant-instantiations    340
;  :rlimit-count            202546
;  :time                    0.00)
; [then-branch: 83 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == -1) | live]
; [else-branch: 83 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == -1 | live]
(push) ; 4
; [then-branch: 83 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        0)
      (- 0 1)))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3276
;  :arith-add-rows          85
;  :arith-assert-diseq      336
;  :arith-assert-lower      833
;  :arith-assert-upper      469
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        523
;  :arith-fixed-eqs         97
;  :arith-offset-eqs        9
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 492
;  :datatype-occurs-check   296
;  :datatype-splits         227
;  :decisions               673
;  :del-clause              2897
;  :final-checks            169
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3412
;  :mk-clause               2920
;  :num-allocs              3896052
;  :num-checks              249
;  :propagations            1025
;  :quant-instantiations    340
;  :rlimit-count            202730)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3276
;  :arith-add-rows          85
;  :arith-assert-diseq      336
;  :arith-assert-lower      833
;  :arith-assert-upper      469
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        523
;  :arith-fixed-eqs         97
;  :arith-offset-eqs        9
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 492
;  :datatype-occurs-check   296
;  :datatype-splits         227
;  :decisions               673
;  :del-clause              2897
;  :final-checks            169
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3412
;  :mk-clause               2920
;  :num-allocs              3896052
;  :num-checks              250
;  :propagations            1025
;  :quant-instantiations    340
;  :rlimit-count            202745)
(pop) ; 4
(push) ; 4
; [else-branch: 83 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0)
    (- 0 1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
          0)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
          0)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1) ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1)
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3282
;  :arith-add-rows          85
;  :arith-assert-diseq      336
;  :arith-assert-lower      833
;  :arith-assert-upper      469
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        523
;  :arith-fixed-eqs         97
;  :arith-offset-eqs        9
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 492
;  :datatype-occurs-check   296
;  :datatype-splits         227
;  :decisions               673
;  :del-clause              2897
;  :final-checks            169
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3415
;  :mk-clause               2921
;  :num-allocs              3896052
;  :num-checks              251
;  :propagations            1025
;  :quant-instantiations    340
;  :rlimit-count            203206)
(push) ; 3
; [then-branch: 84 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 | live]
; [else-branch: 84 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] != 0 | live]
(push) ; 4
; [then-branch: 84 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
    1)
  0))
(pop) ; 4
(push) ; 4
; [else-branch: 84 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3282
;  :arith-add-rows          85
;  :arith-assert-diseq      336
;  :arith-assert-lower      833
;  :arith-assert-upper      469
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        523
;  :arith-fixed-eqs         97
;  :arith-offset-eqs        9
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 492
;  :datatype-occurs-check   296
;  :datatype-splits         227
;  :decisions               673
;  :del-clause              2897
;  :final-checks            169
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3415
;  :mk-clause               2921
;  :num-allocs              3896052
;  :num-checks              252
;  :propagations            1025
;  :quant-instantiations    340
;  :rlimit-count            203371)
; [eval] -1
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3327
;  :arith-add-rows          85
;  :arith-assert-diseq      351
;  :arith-assert-lower      857
;  :arith-assert-upper      478
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        535
;  :arith-fixed-eqs         100
;  :arith-offset-eqs        9
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 498
;  :datatype-occurs-check   300
;  :datatype-splits         230
;  :decisions               681
;  :del-clause              2983
;  :final-checks            171
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3469
;  :mk-clause               3007
;  :num-allocs              3896052
;  :num-checks              253
;  :propagations            1062
;  :quant-instantiations    346
;  :rlimit-count            204313)
(push) ; 4
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3384
;  :arith-add-rows          85
;  :arith-assert-diseq      363
;  :arith-assert-lower      879
;  :arith-assert-upper      488
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        547
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 508
;  :datatype-occurs-check   306
;  :datatype-splits         235
;  :decisions               694
;  :del-clause              3068
;  :final-checks            174
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3526
;  :mk-clause               3092
;  :num-allocs              3896052
;  :num-checks              254
;  :propagations            1099
;  :quant-instantiations    352
;  :rlimit-count            205288)
; [then-branch: 85 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == -1) | live]
; [else-branch: 85 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == -1 | live]
(push) ; 4
; [then-branch: 85 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        1)
      (- 0 1)))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3384
;  :arith-add-rows          85
;  :arith-assert-diseq      363
;  :arith-assert-lower      879
;  :arith-assert-upper      488
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        547
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 508
;  :datatype-occurs-check   306
;  :datatype-splits         235
;  :decisions               694
;  :del-clause              3068
;  :final-checks            174
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3526
;  :mk-clause               3092
;  :num-allocs              3896052
;  :num-checks              255
;  :propagations            1100
;  :quant-instantiations    352
;  :rlimit-count            205472)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3384
;  :arith-add-rows          85
;  :arith-assert-diseq      363
;  :arith-assert-lower      879
;  :arith-assert-upper      488
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        547
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 508
;  :datatype-occurs-check   306
;  :datatype-splits         235
;  :decisions               694
;  :del-clause              3068
;  :final-checks            174
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3526
;  :mk-clause               3092
;  :num-allocs              3896052
;  :num-checks              256
;  :propagations            1100
;  :quant-instantiations    352
;  :rlimit-count            205487)
(pop) ; 4
(push) ; 4
; [else-branch: 85 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1)
    (- 0 1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
          1)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
          1)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@98@01))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1) ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] !(old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1)
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3386
;  :arith-add-rows          85
;  :arith-assert-diseq      363
;  :arith-assert-lower      879
;  :arith-assert-upper      488
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        547
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 508
;  :datatype-occurs-check   306
;  :datatype-splits         235
;  :decisions               694
;  :del-clause              3068
;  :final-checks            174
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3528
;  :mk-clause               3093
;  :num-allocs              3896052
;  :num-checks              257
;  :propagations            1100
;  :quant-instantiations    352
;  :rlimit-count            205866)
(push) ; 3
; [then-branch: 86 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 | live]
; [else-branch: 86 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] != 0 | live]
(push) ; 4
; [then-branch: 86 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
    2)
  0))
(pop) ; 4
(push) ; 4
; [else-branch: 86 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3386
;  :arith-add-rows          85
;  :arith-assert-diseq      363
;  :arith-assert-lower      879
;  :arith-assert-upper      488
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        547
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 508
;  :datatype-occurs-check   306
;  :datatype-splits         235
;  :decisions               694
;  :del-clause              3068
;  :final-checks            174
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3528
;  :mk-clause               3093
;  :num-allocs              3896052
;  :num-checks              258
;  :propagations            1100
;  :quant-instantiations    352
;  :rlimit-count            206031)
; [eval] -1
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3428
;  :arith-add-rows          85
;  :arith-assert-diseq      378
;  :arith-assert-lower      903
;  :arith-assert-upper      497
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        559
;  :arith-fixed-eqs         105
;  :arith-offset-eqs        9
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 513
;  :datatype-occurs-check   310
;  :datatype-splits         237
;  :decisions               701
;  :del-clause              3158
;  :final-checks            176
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3581
;  :mk-clause               3183
;  :num-allocs              3896052
;  :num-checks              259
;  :propagations            1140
;  :quant-instantiations    358
;  :rlimit-count            206961)
(push) ; 4
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3483
;  :arith-add-rows          85
;  :arith-assert-diseq      390
;  :arith-assert-lower      925
;  :arith-assert-upper      507
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        571
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   316
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3249
;  :final-checks            179
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3637
;  :mk-clause               3274
;  :num-allocs              3896052
;  :num-checks              260
;  :propagations            1181
;  :quant-instantiations    364
;  :rlimit-count            207928
;  :time                    0.01)
; [then-branch: 87 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == -1) | live]
; [else-branch: 87 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == -1 | live]
(push) ; 4
; [then-branch: 87 | !(First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
        2)
      (- 0 1)))))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3483
;  :arith-add-rows          85
;  :arith-assert-diseq      390
;  :arith-assert-lower      925
;  :arith-assert-upper      507
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        571
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   316
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3249
;  :final-checks            179
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3637
;  :mk-clause               3274
;  :num-allocs              3896052
;  :num-checks              261
;  :propagations            1182
;  :quant-instantiations    364
;  :rlimit-count            208112)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3483
;  :arith-add-rows          85
;  :arith-assert-diseq      390
;  :arith-assert-lower      925
;  :arith-assert-upper      507
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        571
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   316
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3249
;  :final-checks            179
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3637
;  :mk-clause               3274
;  :num-allocs              3896052
;  :num-checks              262
;  :propagations            1182
;  :quant-instantiations    364
;  :rlimit-count            208127)
(pop) ; 4
(push) ; 4
; [else-branch: 87 | First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == 0 || First:(Second:(Second:(Second:(Second:($t@96@01)))))[2] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2)
    (- 0 1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
          2)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
          2)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@98@01)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@01))))))
      2))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Nand_gate___contract_unsatisfiable__Nand_gate_EncodedGlobalVariables_Main ----------
(declare-const diz@100@01 $Ref)
(declare-const globals@101@01 $Ref)
(declare-const m_param@102@01 $Ref)
(declare-const diz@103@01 $Ref)
(declare-const globals@104@01 $Ref)
(declare-const m_param@105@01 $Ref)
(push) ; 1
(declare-const $t@106@01 $Snap)
(assert (= $t@106@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@103@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@107@01 $Snap)
(assert (= $t@107@01 ($Snap.combine ($Snap.first $t@107@01) ($Snap.second $t@107@01))))
(assert (= ($Snap.first $t@107@01) $Snap.unit))
(assert (= ($Snap.second $t@107@01) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Nand_gate_Nand_gate_EncodedGlobalVariables_Main ----------
(declare-const globals@108@01 $Ref)
(declare-const m_param@109@01 $Ref)
(declare-const sys__result@110@01 $Ref)
(declare-const globals@111@01 $Ref)
(declare-const m_param@112@01 $Ref)
(declare-const sys__result@113@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@113@01 $Ref.null)))
(assert (=
  ($Snap.second $t@114@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@01))
    ($Snap.second ($Snap.second $t@114@01)))))
(assert (= ($Snap.first ($Snap.second $t@114@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Nand_gate()
; [eval] type_of(sys__result)
; [eval] class_Nand_gate()
(assert (= (type_of<TYPE> sys__result@113@01) (as class_Nand_gate<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@114@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@114@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@114@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@114@01))))
  m_param@112@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_A == true
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  true))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_B == false
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_out == false
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  false))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__13: Ref
(declare-const diz__13@115@01 $Ref)
; [exec]
; diz__13 := new(Nand_gate_m, Nand_gate_A, Nand_gate_B, Nand_gate_out)
(declare-const diz__13@116@01 $Ref)
(assert (not (= diz__13@116@01 $Ref.null)))
(declare-const Nand_gate_m@117@01 $Ref)
(declare-const Nand_gate_A@118@01 Bool)
(declare-const Nand_gate_B@119@01 Bool)
(declare-const Nand_gate_out@120@01 Bool)
(assert (not (= diz__13@116@01 m_param@112@01)))
(assert (not (= diz__13@116@01 sys__result@113@01)))
(assert (not (= diz__13@116@01 globals@111@01)))
(assert (not (= diz__13@116@01 diz__13@115@01)))
; [exec]
; inhale type_of(diz__13) == class_Nand_gate()
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] type_of(diz__13) == class_Nand_gate()
; [eval] type_of(diz__13)
; [eval] class_Nand_gate()
(assert (= (type_of<TYPE> diz__13@116@01) (as class_Nand_gate<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__13.Nand_gate_m := m_param
; [exec]
; diz__13.Nand_gate_A := true
; [exec]
; diz__13.Nand_gate_B := false
; [exec]
; diz__13.Nand_gate_out := false
; [exec]
; sys__result := diz__13
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Nand_gate() && acc(sys__result.Nand_gate_m, write) && acc(sys__result.Nand_gate_A, write) && acc(sys__result.Nand_gate_B, write) && acc(sys__result.Nand_gate_out, write) && sys__result.Nand_gate_m == m_param && sys__result.Nand_gate_A == true && sys__result.Nand_gate_B == false && sys__result.Nand_gate_out == false
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Nand_gate()
; [eval] type_of(sys__result)
; [eval] class_Nand_gate()
; [eval] sys__result.Nand_gate_m == m_param
; [eval] sys__result.Nand_gate_A == true
; [eval] sys__result.Nand_gate_B == false
; [eval] sys__result.Nand_gate_out == false
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read___contract_unsatisfiable__Read_EncodedGlobalVariables_Main ----------
(declare-const diz@122@01 $Ref)
(declare-const globals@123@01 $Ref)
(declare-const m_param@124@01 $Ref)
(declare-const diz@125@01 $Ref)
(declare-const globals@126@01 $Ref)
(declare-const m_param@127@01 $Ref)
(push) ; 1
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@125@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@129@01 $Snap)
(assert (= $t@129@01 ($Snap.combine ($Snap.first $t@129@01) ($Snap.second $t@129@01))))
(assert (= ($Snap.first $t@129@01) $Snap.unit))
(assert (= ($Snap.second $t@129@01) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Read_Read_EncodedGlobalVariables_Main ----------
(declare-const globals@130@01 $Ref)
(declare-const m_param@131@01 $Ref)
(declare-const sys__result@132@01 $Ref)
(declare-const globals@133@01 $Ref)
(declare-const m_param@134@01 $Ref)
(declare-const sys__result@135@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@136@01 $Snap)
(assert (= $t@136@01 ($Snap.combine ($Snap.first $t@136@01) ($Snap.second $t@136@01))))
(assert (= ($Snap.first $t@136@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@135@01 $Ref.null)))
(assert (=
  ($Snap.second $t@136@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@136@01))
    ($Snap.second ($Snap.second $t@136@01)))))
(assert (= ($Snap.first ($Snap.second $t@136@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Read()
; [eval] type_of(sys__result)
; [eval] class_Read()
(assert (= (type_of<TYPE> sys__result@135@01) (as class_Read<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@136@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@136@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@136@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@136@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))
  $Snap.unit))
; [eval] sys__result.Read_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))
  m_param@134@01))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__14: Ref
(declare-const diz__14@137@01 $Ref)
; [exec]
; diz__14 := new(Read_m)
(declare-const diz__14@138@01 $Ref)
(assert (not (= diz__14@138@01 $Ref.null)))
(declare-const Read_m@139@01 $Ref)
(assert (not (= diz__14@138@01 globals@133@01)))
(assert (not (= diz__14@138@01 diz__14@137@01)))
(assert (not (= diz__14@138@01 m_param@134@01)))
(assert (not (= diz__14@138@01 sys__result@135@01)))
; [exec]
; inhale type_of(diz__14) == class_Read()
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 $Snap.unit))
; [eval] type_of(diz__14) == class_Read()
; [eval] type_of(diz__14)
; [eval] class_Read()
(assert (= (type_of<TYPE> diz__14@138@01) (as class_Read<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__14.Read_m := m_param
; [exec]
; inhale acc(Read_idleToken_EncodedGlobalVariables(diz__14, globals), write)
(declare-const $t@141@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__14
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Read() && acc(Read_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Read_m, write) && sys__result.Read_m == m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Read()
; [eval] type_of(sys__result)
; [eval] class_Read()
; [eval] sys__result.Read_m == m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@142@01 $Ref)
(declare-const globals@143@01 $Ref)
(declare-const diz@144@01 $Ref)
(declare-const globals@145@01 $Ref)
(push) ; 1
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 ($Snap.combine ($Snap.first $t@146@01) ($Snap.second $t@146@01))))
(assert (= ($Snap.first $t@146@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@144@01 $Ref.null)))
(assert (=
  ($Snap.second $t@146@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@146@01))
    ($Snap.second ($Snap.second $t@146@01)))))
(declare-const $k@147@01 $Perm)
(assert ($Perm.isReadVar $k@147@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@147@01 $Perm.No) (< $Perm.No $k@147@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3514
;  :arith-add-rows          85
;  :arith-assert-diseq      391
;  :arith-assert-lower      927
;  :arith-assert-upper      508
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        572
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   337
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3273
;  :final-checks            194
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3669
;  :mk-clause               3276
;  :num-allocs              3896052
;  :num-checks              278
;  :propagations            1183
;  :quant-instantiations    364
;  :rlimit-count            213561)
(assert (<= $Perm.No $k@147@01))
(assert (<= $k@147@01 $Perm.Write))
(assert (implies (< $Perm.No $k@147@01) (not (= diz@144@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@146@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@146@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@146@01))) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3520
;  :arith-add-rows          85
;  :arith-assert-diseq      391
;  :arith-assert-lower      927
;  :arith-assert-upper      509
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        572
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   337
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3273
;  :final-checks            194
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3672
;  :mk-clause               3276
;  :num-allocs              3896052
;  :num-checks              279
;  :propagations            1183
;  :quant-instantiations    364
;  :rlimit-count            213814)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@146@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@146@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
(push) ; 2
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3526
;  :arith-add-rows          85
;  :arith-assert-diseq      391
;  :arith-assert-lower      927
;  :arith-assert-upper      509
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        572
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   337
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3273
;  :final-checks            194
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3675
;  :mk-clause               3276
;  :num-allocs              3896052
;  :num-checks              280
;  :propagations            1183
;  :quant-instantiations    365
;  :rlimit-count            214098)
(declare-const $k@148@01 $Perm)
(assert ($Perm.isReadVar $k@148@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@148@01 $Perm.No) (< $Perm.No $k@148@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3526
;  :arith-add-rows          85
;  :arith-assert-diseq      392
;  :arith-assert-lower      929
;  :arith-assert-upper      510
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        573
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   337
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3273
;  :final-checks            194
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3679
;  :mk-clause               3278
;  :num-allocs              3896052
;  :num-checks              281
;  :propagations            1184
;  :quant-instantiations    365
;  :rlimit-count            214296)
(assert (<= $Perm.No $k@148@01))
(assert (<= $k@148@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@148@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@146@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3532
;  :arith-add-rows          85
;  :arith-assert-diseq      392
;  :arith-assert-lower      929
;  :arith-assert-upper      511
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        573
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   337
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3273
;  :final-checks            194
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3682
;  :mk-clause               3278
;  :num-allocs              3896052
;  :num-checks              282
;  :propagations            1184
;  :quant-instantiations    365
;  :rlimit-count            214569)
(push) ; 2
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3532
;  :arith-add-rows          85
;  :arith-assert-diseq      392
;  :arith-assert-lower      929
;  :arith-assert-upper      511
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        573
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 522
;  :datatype-occurs-check   337
;  :datatype-splits         241
;  :decisions               713
;  :del-clause              3273
;  :final-checks            194
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3682
;  :mk-clause               3278
;  :num-allocs              3896052
;  :num-checks              283
;  :propagations            1184
;  :quant-instantiations    365
;  :rlimit-count            214617
;  :time                    0.01)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
  diz@144@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@149@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@150@01 $Ref)
(declare-const globals@151@01 $Ref)
(declare-const diz@152@01 $Ref)
(declare-const globals@153@01 $Ref)
(push) ; 1
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 ($Snap.combine ($Snap.first $t@154@01) ($Snap.second $t@154@01))))
(assert (= ($Snap.first $t@154@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@152@01 $Ref.null)))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 ($Snap.combine ($Snap.first $t@155@01) ($Snap.second $t@155@01))))
(assert (=
  ($Snap.second $t@155@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@155@01))
    ($Snap.second ($Snap.second $t@155@01)))))
(declare-const $k@156@01 $Perm)
(assert ($Perm.isReadVar $k@156@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@156@01 $Perm.No) (< $Perm.No $k@156@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3560
;  :arith-add-rows          85
;  :arith-assert-diseq      393
;  :arith-assert-lower      931
;  :arith-assert-upper      512
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        574
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   341
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3277
;  :final-checks            198
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3697
;  :mk-clause               3280
;  :num-allocs              3896052
;  :num-checks              286
;  :propagations            1185
;  :quant-instantiations    366
;  :rlimit-count            215871)
(assert (<= $Perm.No $k@156@01))
(assert (<= $k@156@01 $Perm.Write))
(assert (implies (< $Perm.No $k@156@01) (not (= diz@152@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@155@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@155@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@155@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@155@01))) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@156@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3566
;  :arith-add-rows          85
;  :arith-assert-diseq      393
;  :arith-assert-lower      931
;  :arith-assert-upper      513
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        574
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   341
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3277
;  :final-checks            198
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3700
;  :mk-clause               3280
;  :num-allocs              3896052
;  :num-checks              287
;  :propagations            1185
;  :quant-instantiations    366
;  :rlimit-count            216124
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@155@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@155@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@155@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@155@01)))))))
(push) ; 3
(assert (not (< $Perm.No $k@156@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3572
;  :arith-add-rows          85
;  :arith-assert-diseq      393
;  :arith-assert-lower      931
;  :arith-assert-upper      513
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        574
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   341
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3277
;  :final-checks            198
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3703
;  :mk-clause               3280
;  :num-allocs              3896052
;  :num-checks              288
;  :propagations            1185
;  :quant-instantiations    367
;  :rlimit-count            216408)
(declare-const $k@157@01 $Perm)
(assert ($Perm.isReadVar $k@157@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@157@01 $Perm.No) (< $Perm.No $k@157@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3572
;  :arith-add-rows          85
;  :arith-assert-diseq      394
;  :arith-assert-lower      933
;  :arith-assert-upper      514
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        575
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   341
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3277
;  :final-checks            198
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3707
;  :mk-clause               3282
;  :num-allocs              3896052
;  :num-checks              289
;  :propagations            1186
;  :quant-instantiations    367
;  :rlimit-count            216607)
(assert (<= $Perm.No $k@157@01))
(assert (<= $k@157@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@157@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@155@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@155@01))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@156@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3573
;  :arith-add-rows          85
;  :arith-assert-diseq      394
;  :arith-assert-lower      933
;  :arith-assert-upper      515
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        575
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   341
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3277
;  :final-checks            198
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3709
;  :mk-clause               3282
;  :num-allocs              3896052
;  :num-checks              290
;  :propagations            1186
;  :quant-instantiations    367
;  :rlimit-count            216793)
(push) ; 3
(assert (not (< $Perm.No $k@157@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3573
;  :arith-add-rows          85
;  :arith-assert-diseq      394
;  :arith-assert-lower      933
;  :arith-assert-upper      515
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        575
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    168
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   341
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3277
;  :final-checks            198
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3709
;  :mk-clause               3282
;  :num-allocs              3896052
;  :num-checks              291
;  :propagations            1186
;  :quant-instantiations    367
;  :rlimit-count            216841)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@155@01)))))
  diz@152@01))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@158@01 $Ref)
(declare-const globals@159@01 $Ref)
(declare-const sys__result@160@01 Int)
(declare-const diz@161@01 $Ref)
(declare-const globals@162@01 $Ref)
(declare-const sys__result@163@01 Int)
(push) ; 1
(declare-const $t@164@01 $Snap)
(assert (= $t@164@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@161@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.Read_m, wildcard) && diz.Read_m != null && acc(diz.Read_m.Main_nand_read, wildcard) && diz.Read_m.Main_nand_read == diz)
(declare-const $t@165@01 $Snap)
(assert (= $t@165@01 ($Snap.combine ($Snap.first $t@165@01) ($Snap.second $t@165@01))))
(assert (= ($Snap.first $t@165@01) $Snap.unit))
(assert (=
  ($Snap.second $t@165@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@165@01))
    ($Snap.second ($Snap.second $t@165@01)))))
(declare-const $k@166@01 $Perm)
(assert ($Perm.isReadVar $k@166@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@166@01 $Perm.No) (< $Perm.No $k@166@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3585
;  :arith-add-rows          85
;  :arith-assert-diseq      395
;  :arith-assert-lower      935
;  :arith-assert-upper      516
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        576
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   342
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3281
;  :final-checks            199
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3718
;  :mk-clause               3284
;  :num-allocs              3896052
;  :num-checks              293
;  :propagations            1187
;  :quant-instantiations    367
;  :rlimit-count            217617)
(assert (<= $Perm.No $k@166@01))
(assert (<= $k@166@01 $Perm.Write))
(assert (implies (< $Perm.No $k@166@01) (not (= diz@161@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@165@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@165@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@165@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@165@01))) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@166@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3591
;  :arith-add-rows          85
;  :arith-assert-diseq      395
;  :arith-assert-lower      935
;  :arith-assert-upper      517
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        576
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   342
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3281
;  :final-checks            199
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3721
;  :mk-clause               3284
;  :num-allocs              3896052
;  :num-checks              294
;  :propagations            1187
;  :quant-instantiations    367
;  :rlimit-count            217870)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@165@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@165@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@165@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@165@01)))))))
(push) ; 3
(assert (not (< $Perm.No $k@166@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3597
;  :arith-add-rows          85
;  :arith-assert-diseq      395
;  :arith-assert-lower      935
;  :arith-assert-upper      517
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        576
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   342
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3281
;  :final-checks            199
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3724
;  :mk-clause               3284
;  :num-allocs              3896052
;  :num-checks              295
;  :propagations            1187
;  :quant-instantiations    368
;  :rlimit-count            218154)
(declare-const $k@167@01 $Perm)
(assert ($Perm.isReadVar $k@167@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@167@01 $Perm.No) (< $Perm.No $k@167@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3597
;  :arith-add-rows          85
;  :arith-assert-diseq      396
;  :arith-assert-lower      937
;  :arith-assert-upper      518
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        577
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   342
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3281
;  :final-checks            199
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3728
;  :mk-clause               3286
;  :num-allocs              3896052
;  :num-checks              296
;  :propagations            1188
;  :quant-instantiations    368
;  :rlimit-count            218352)
(assert (<= $Perm.No $k@167@01))
(assert (<= $k@167@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@167@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@165@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@165@01))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@166@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3598
;  :arith-add-rows          85
;  :arith-assert-diseq      396
;  :arith-assert-lower      937
;  :arith-assert-upper      519
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        577
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   342
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3281
;  :final-checks            199
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3730
;  :mk-clause               3286
;  :num-allocs              3896052
;  :num-checks              297
;  :propagations            1188
;  :quant-instantiations    368
;  :rlimit-count            218538
;  :time                    0.00)
(push) ; 3
(assert (not (< $Perm.No $k@167@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3598
;  :arith-add-rows          85
;  :arith-assert-diseq      396
;  :arith-assert-lower      937
;  :arith-assert-upper      519
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        577
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 526
;  :datatype-occurs-check   342
;  :datatype-splits         245
;  :decisions               717
;  :del-clause              3281
;  :final-checks            199
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3730
;  :mk-clause               3286
;  :num-allocs              3896052
;  :num-checks              298
;  :propagations            1188
;  :quant-instantiations    368
;  :rlimit-count            218586)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@165@01)))))
  diz@161@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Read_run_EncodedGlobalVariables ----------
(declare-const diz@168@01 $Ref)
(declare-const globals@169@01 $Ref)
(declare-const sys__result@170@01 Int)
(declare-const diz@171@01 $Ref)
(declare-const globals@172@01 $Ref)
(declare-const sys__result@173@01 Int)
(push) ; 1
(declare-const $t@174@01 $Snap)
(assert (= $t@174@01 ($Snap.combine ($Snap.first $t@174@01) ($Snap.second $t@174@01))))
(assert (= ($Snap.first $t@174@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@171@01 $Ref.null)))
(assert (=
  ($Snap.second $t@174@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@174@01))
    ($Snap.second ($Snap.second $t@174@01)))))
(declare-const $k@175@01 $Perm)
(assert ($Perm.isReadVar $k@175@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@175@01 $Perm.No) (< $Perm.No $k@175@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3635
;  :arith-add-rows          85
;  :arith-assert-diseq      397
;  :arith-assert-lower      939
;  :arith-assert-upper      520
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        578
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 534
;  :datatype-occurs-check   352
;  :datatype-splits         247
;  :decisions               725
;  :del-clause              3285
;  :final-checks            204
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3742
;  :mk-clause               3288
;  :num-allocs              3896052
;  :num-checks              303
;  :propagations            1189
;  :quant-instantiations    369
;  :rlimit-count            220300)
(assert (<= $Perm.No $k@175@01))
(assert (<= $k@175@01 $Perm.Write))
(assert (implies (< $Perm.No $k@175@01) (not (= diz@171@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@174@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@174@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@174@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@174@01))) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3641
;  :arith-add-rows          85
;  :arith-assert-diseq      397
;  :arith-assert-lower      939
;  :arith-assert-upper      521
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        578
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 534
;  :datatype-occurs-check   352
;  :datatype-splits         247
;  :decisions               725
;  :del-clause              3285
;  :final-checks            204
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3745
;  :mk-clause               3288
;  :num-allocs              3896052
;  :num-checks              304
;  :propagations            1189
;  :quant-instantiations    369
;  :rlimit-count            220553)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@174@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@01)))))))
(push) ; 2
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3647
;  :arith-add-rows          85
;  :arith-assert-diseq      397
;  :arith-assert-lower      939
;  :arith-assert-upper      521
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        578
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 534
;  :datatype-occurs-check   352
;  :datatype-splits         247
;  :decisions               725
;  :del-clause              3285
;  :final-checks            204
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3748
;  :mk-clause               3288
;  :num-allocs              3896052
;  :num-checks              305
;  :propagations            1189
;  :quant-instantiations    370
;  :rlimit-count            220837)
(declare-const $k@176@01 $Perm)
(assert ($Perm.isReadVar $k@176@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@176@01 $Perm.No) (< $Perm.No $k@176@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3647
;  :arith-add-rows          85
;  :arith-assert-diseq      398
;  :arith-assert-lower      941
;  :arith-assert-upper      522
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 534
;  :datatype-occurs-check   352
;  :datatype-splits         247
;  :decisions               725
;  :del-clause              3285
;  :final-checks            204
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3752
;  :mk-clause               3290
;  :num-allocs              3896052
;  :num-checks              306
;  :propagations            1190
;  :quant-instantiations    370
;  :rlimit-count            221036)
(assert (<= $Perm.No $k@176@01))
(assert (<= $k@176@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@176@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@01))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3648
;  :arith-add-rows          85
;  :arith-assert-diseq      398
;  :arith-assert-lower      941
;  :arith-assert-upper      523
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 534
;  :datatype-occurs-check   352
;  :datatype-splits         247
;  :decisions               725
;  :del-clause              3285
;  :final-checks            204
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3754
;  :mk-clause               3290
;  :num-allocs              3896052
;  :num-checks              307
;  :propagations            1190
;  :quant-instantiations    370
;  :rlimit-count            221222)
(push) ; 2
(assert (not (< $Perm.No $k@176@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3648
;  :arith-add-rows          85
;  :arith-assert-diseq      398
;  :arith-assert-lower      941
;  :arith-assert-upper      523
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        579
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 534
;  :datatype-occurs-check   352
;  :datatype-splits         247
;  :decisions               725
;  :del-clause              3285
;  :final-checks            204
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3754
;  :mk-clause               3290
;  :num-allocs              3896052
;  :num-checks              308
;  :propagations            1190
;  :quant-instantiations    370
;  :rlimit-count            221270)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@01)))))
  diz@171@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@177@01 $Snap)
(assert (= $t@177@01 ($Snap.combine ($Snap.first $t@177@01) ($Snap.second $t@177@01))))
(declare-const $k@178@01 $Perm)
(assert ($Perm.isReadVar $k@178@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@178@01 $Perm.No) (< $Perm.No $k@178@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3661
;  :arith-add-rows          85
;  :arith-assert-diseq      399
;  :arith-assert-lower      943
;  :arith-assert-upper      524
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   354
;  :datatype-splits         249
;  :decisions               727
;  :del-clause              3289
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3763
;  :mk-clause               3292
;  :num-allocs              3896052
;  :num-checks              310
;  :propagations            1191
;  :quant-instantiations    371
;  :rlimit-count            221976)
(assert (<= $Perm.No $k@178@01))
(assert (<= $k@178@01 $Perm.Write))
(assert (implies (< $Perm.No $k@178@01) (not (= diz@171@01 $Ref.null))))
(assert (=
  ($Snap.second $t@177@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@177@01))
    ($Snap.second ($Snap.second $t@177@01)))))
(assert (= ($Snap.first ($Snap.second $t@177@01)) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@178@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          85
;  :arith-assert-diseq      399
;  :arith-assert-lower      943
;  :arith-assert-upper      525
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   354
;  :datatype-splits         249
;  :decisions               727
;  :del-clause              3289
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3766
;  :mk-clause               3292
;  :num-allocs              3896052
;  :num-checks              311
;  :propagations            1191
;  :quant-instantiations    371
;  :rlimit-count            222219)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@177@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@177@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@177@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@177@01))))))
(push) ; 3
(assert (not (< $Perm.No $k@178@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3673
;  :arith-add-rows          85
;  :arith-assert-diseq      399
;  :arith-assert-lower      943
;  :arith-assert-upper      525
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        580
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   354
;  :datatype-splits         249
;  :decisions               727
;  :del-clause              3289
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3769
;  :mk-clause               3292
;  :num-allocs              3896052
;  :num-checks              312
;  :propagations            1191
;  :quant-instantiations    372
;  :rlimit-count            222491
;  :time                    0.01)
(declare-const $k@179@01 $Perm)
(assert ($Perm.isReadVar $k@179@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@179@01 $Perm.No) (< $Perm.No $k@179@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3673
;  :arith-add-rows          85
;  :arith-assert-diseq      400
;  :arith-assert-lower      945
;  :arith-assert-upper      526
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        581
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   354
;  :datatype-splits         249
;  :decisions               727
;  :del-clause              3289
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3773
;  :mk-clause               3294
;  :num-allocs              3896052
;  :num-checks              313
;  :propagations            1192
;  :quant-instantiations    372
;  :rlimit-count            222689)
(assert (<= $Perm.No $k@179@01))
(assert (<= $k@179@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@179@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@177@01)) $Ref.null))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@177@01))) $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@178@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3674
;  :arith-add-rows          85
;  :arith-assert-diseq      400
;  :arith-assert-lower      945
;  :arith-assert-upper      527
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        581
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   354
;  :datatype-splits         249
;  :decisions               727
;  :del-clause              3289
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3775
;  :mk-clause               3294
;  :num-allocs              3896052
;  :num-checks              314
;  :propagations            1192
;  :quant-instantiations    372
;  :rlimit-count            222865)
(push) ; 3
(assert (not (< $Perm.No $k@179@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3674
;  :arith-add-rows          85
;  :arith-assert-diseq      400
;  :arith-assert-lower      945
;  :arith-assert-upper      527
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        581
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   354
;  :datatype-splits         249
;  :decisions               727
;  :del-clause              3289
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3775
;  :mk-clause               3294
;  :num-allocs              3896052
;  :num-checks              315
;  :propagations            1192
;  :quant-instantiations    372
;  :rlimit-count            222913)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@177@01))))
  diz@171@01))
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__15: Int
(declare-const sys__local__result__15@180@01 Int)
; [exec]
; var __flatten_26__16: Ref
(declare-const __flatten_26__16@181@01 $Ref)
; [exec]
; var __flatten_27__17: Seq[Int]
(declare-const __flatten_27__17@182@01 Seq<Int>)
; [exec]
; var __flatten_28__18: Ref
(declare-const __flatten_28__18@183@01 $Ref)
; [exec]
; var __flatten_29__19: Ref
(declare-const __flatten_29__19@184@01 $Ref)
; [exec]
; var __flatten_30__20: Ref
(declare-const __flatten_30__20@185@01 $Ref)
; [exec]
; var __flatten_31__21: Bool
(declare-const __flatten_31__21@186@01 Bool)
; [exec]
; var __flatten_32__22: Ref
(declare-const __flatten_32__22@187@01 $Ref)
; [exec]
; var __flatten_33__23: Ref
(declare-const __flatten_33__23@188@01 $Ref)
; [exec]
; var __flatten_34__24: Ref
(declare-const __flatten_34__24@189@01 $Ref)
; [exec]
; var __flatten_35__25: Ref
(declare-const __flatten_35__25@190@01 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 3
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3674
;  :arith-add-rows          85
;  :arith-assert-diseq      400
;  :arith-assert-lower      945
;  :arith-assert-upper      527
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        581
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   354
;  :datatype-splits         249
;  :decisions               727
;  :del-clause              3293
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3775
;  :mk-clause               3294
;  :num-allocs              3896052
;  :num-checks              316
;  :propagations            1192
;  :quant-instantiations    372
;  :rlimit-count            222977)
(declare-const $t@191@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3680
;  :arith-add-rows          85
;  :arith-assert-diseq      400
;  :arith-assert-lower      945
;  :arith-assert-upper      527
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        581
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3293
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3775
;  :mk-clause               3294
;  :num-allocs              3896052
;  :num-checks              318
;  :propagations            1192
;  :quant-instantiations    372
;  :rlimit-count            223294
;  :time                    0.01)
(assert (= $t@191@01 ($Snap.combine ($Snap.first $t@191@01) ($Snap.second $t@191@01))))
(assert (= ($Snap.first $t@191@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@191@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@191@01))
    ($Snap.second ($Snap.second $t@191@01)))))
(assert (= ($Snap.first ($Snap.second $t@191@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@191@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@191@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@191@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@191@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@192@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 88 | 0 <= i@192@01 | live]
; [else-branch: 88 | !(0 <= i@192@01) | live]
(push) ; 5
; [then-branch: 88 | 0 <= i@192@01]
(assert (<= 0 i@192@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 88 | !(0 <= i@192@01)]
(assert (not (<= 0 i@192@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 89 | i@192@01 < |First:(Second:(Second:(Second:($t@191@01))))| && 0 <= i@192@01 | live]
; [else-branch: 89 | !(i@192@01 < |First:(Second:(Second:(Second:($t@191@01))))| && 0 <= i@192@01) | live]
(push) ; 5
; [then-branch: 89 | i@192@01 < |First:(Second:(Second:(Second:($t@191@01))))| && 0 <= i@192@01]
(assert (and
  (<
    i@192@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
  (<= 0 i@192@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@192@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3731
;  :arith-add-rows          85
;  :arith-assert-diseq      402
;  :arith-assert-lower      952
;  :arith-assert-upper      530
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        585
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3293
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3807
;  :mk-clause               3300
;  :num-allocs              3896052
;  :num-checks              319
;  :propagations            1194
;  :quant-instantiations    378
;  :rlimit-count            224643)
; [eval] -1
(push) ; 6
; [then-branch: 90 | First:(Second:(Second:(Second:($t@191@01))))[i@192@01] == -1 | live]
; [else-branch: 90 | First:(Second:(Second:(Second:($t@191@01))))[i@192@01] != -1 | live]
(push) ; 7
; [then-branch: 90 | First:(Second:(Second:(Second:($t@191@01))))[i@192@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
    i@192@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 90 | First:(Second:(Second:(Second:($t@191@01))))[i@192@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
      i@192@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@192@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3731
;  :arith-add-rows          85
;  :arith-assert-diseq      402
;  :arith-assert-lower      952
;  :arith-assert-upper      530
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        585
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3293
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3808
;  :mk-clause               3300
;  :num-allocs              3896052
;  :num-checks              320
;  :propagations            1194
;  :quant-instantiations    378
;  :rlimit-count            224818)
(push) ; 8
; [then-branch: 91 | 0 <= First:(Second:(Second:(Second:($t@191@01))))[i@192@01] | live]
; [else-branch: 91 | !(0 <= First:(Second:(Second:(Second:($t@191@01))))[i@192@01]) | live]
(push) ; 9
; [then-branch: 91 | 0 <= First:(Second:(Second:(Second:($t@191@01))))[i@192@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
    i@192@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@192@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3731
;  :arith-add-rows          85
;  :arith-assert-diseq      403
;  :arith-assert-lower      955
;  :arith-assert-upper      530
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        586
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3293
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3811
;  :mk-clause               3301
;  :num-allocs              3896052
;  :num-checks              321
;  :propagations            1194
;  :quant-instantiations    378
;  :rlimit-count            224942)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 91 | !(0 <= First:(Second:(Second:(Second:($t@191@01))))[i@192@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
      i@192@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 89 | !(i@192@01 < |First:(Second:(Second:(Second:($t@191@01))))| && 0 <= i@192@01)]
(assert (not
  (and
    (<
      i@192@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
    (<= 0 i@192@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@192@01 Int)) (!
  (implies
    (and
      (<
        i@192@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
      (<= 0 i@192@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
          i@192@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
            i@192@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
            i@192@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
    i@192@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))
(declare-const $k@193@01 $Perm)
(assert ($Perm.isReadVar $k@193@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@193@01 $Perm.No) (< $Perm.No $k@193@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3736
;  :arith-add-rows          85
;  :arith-assert-diseq      404
;  :arith-assert-lower      957
;  :arith-assert-upper      531
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        587
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3817
;  :mk-clause               3303
;  :num-allocs              3896052
;  :num-checks              322
;  :propagations            1195
;  :quant-instantiations    378
;  :rlimit-count            225711)
(assert (<= $Perm.No $k@193@01))
(assert (<= $k@193@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@193@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3742
;  :arith-add-rows          85
;  :arith-assert-diseq      404
;  :arith-assert-lower      957
;  :arith-assert-upper      532
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        587
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3820
;  :mk-clause               3303
;  :num-allocs              3896052
;  :num-checks              323
;  :propagations            1195
;  :quant-instantiations    378
;  :rlimit-count            226034)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3748
;  :arith-add-rows          85
;  :arith-assert-diseq      404
;  :arith-assert-lower      957
;  :arith-assert-upper      532
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        587
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3823
;  :mk-clause               3303
;  :num-allocs              3896052
;  :num-checks              324
;  :propagations            1195
;  :quant-instantiations    379
;  :rlimit-count            226390)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3753
;  :arith-add-rows          85
;  :arith-assert-diseq      404
;  :arith-assert-lower      957
;  :arith-assert-upper      532
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        587
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3824
;  :mk-clause               3303
;  :num-allocs              3896052
;  :num-checks              325
;  :propagations            1195
;  :quant-instantiations    379
;  :rlimit-count            226647)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3758
;  :arith-add-rows          85
;  :arith-assert-diseq      404
;  :arith-assert-lower      957
;  :arith-assert-upper      532
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        587
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3825
;  :mk-clause               3303
;  :num-allocs              3896052
;  :num-checks              326
;  :propagations            1195
;  :quant-instantiations    379
;  :rlimit-count            226914
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))
(declare-const $k@194@01 $Perm)
(assert ($Perm.isReadVar $k@194@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@194@01 $Perm.No) (< $Perm.No $k@194@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3763
;  :arith-add-rows          85
;  :arith-assert-diseq      405
;  :arith-assert-lower      959
;  :arith-assert-upper      533
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        588
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3830
;  :mk-clause               3305
;  :num-allocs              3896052
;  :num-checks              327
;  :propagations            1196
;  :quant-instantiations    379
;  :rlimit-count            227335)
(assert (<= $Perm.No $k@194@01))
(assert (<= $k@194@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@194@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@194@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3769
;  :arith-add-rows          85
;  :arith-assert-diseq      405
;  :arith-assert-lower      959
;  :arith-assert-upper      534
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        588
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3833
;  :mk-clause               3305
;  :num-allocs              3896052
;  :num-checks              328
;  :propagations            1196
;  :quant-instantiations    379
;  :rlimit-count            227708)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@194@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3775
;  :arith-add-rows          85
;  :arith-assert-diseq      405
;  :arith-assert-lower      959
;  :arith-assert-upper      534
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        588
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3836
;  :mk-clause               3305
;  :num-allocs              3896052
;  :num-checks              329
;  :propagations            1196
;  :quant-instantiations    380
;  :rlimit-count            228118)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))))
(declare-const $k@195@01 $Perm)
(assert ($Perm.isReadVar $k@195@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@195@01 $Perm.No) (< $Perm.No $k@195@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3780
;  :arith-add-rows          85
;  :arith-assert-diseq      406
;  :arith-assert-lower      961
;  :arith-assert-upper      535
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        589
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    198
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3841
;  :mk-clause               3307
;  :num-allocs              3896052
;  :num-checks              330
;  :propagations            1197
;  :quant-instantiations    380
;  :rlimit-count            228568)
(assert (<= $Perm.No $k@195@01))
(assert (<= $k@195@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@195@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@195@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3786
;  :arith-add-rows          85
;  :arith-assert-diseq      406
;  :arith-assert-lower      961
;  :arith-assert-upper      536
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        589
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3844
;  :mk-clause               3307
;  :num-allocs              3896052
;  :num-checks              331
;  :propagations            1197
;  :quant-instantiations    380
;  :rlimit-count            228971
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@195@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3792
;  :arith-add-rows          85
;  :arith-assert-diseq      406
;  :arith-assert-lower      961
;  :arith-assert-upper      536
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        589
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3847
;  :mk-clause               3307
;  :num-allocs              3896052
;  :num-checks              332
;  :propagations            1197
;  :quant-instantiations    381
;  :rlimit-count            229407)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))))))
(declare-const $k@196@01 $Perm)
(assert ($Perm.isReadVar $k@196@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@196@01 $Perm.No) (< $Perm.No $k@196@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3797
;  :arith-add-rows          85
;  :arith-assert-diseq      407
;  :arith-assert-lower      963
;  :arith-assert-upper      537
;  :arith-bound-prop        110
;  :arith-conflicts         23
;  :arith-eq-adapter        590
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3852
;  :mk-clause               3309
;  :num-allocs              3896052
;  :num-checks              333
;  :propagations            1198
;  :quant-instantiations    381
;  :rlimit-count            229887)
(declare-const $t@197@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@176@01)
    (=
      $t@197@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@01)))))))
  (implies
    (< $Perm.No $k@196@01)
    (=
      $t@197@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@176@01 $k@196@01)))
(assert (<= (+ $k@176@01 $k@196@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@176@01 $k@196@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@176@01 $k@196@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3807
;  :arith-add-rows          85
;  :arith-assert-diseq      407
;  :arith-assert-lower      964
;  :arith-assert-upper      539
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        590
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3860
;  :mk-clause               3309
;  :num-allocs              3896052
;  :num-checks              334
;  :propagations            1198
;  :quant-instantiations    382
;  :rlimit-count            230574)
(assert (not (= $t@197@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3813
;  :arith-add-rows          85
;  :arith-assert-diseq      407
;  :arith-assert-lower      964
;  :arith-assert-upper      539
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        590
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3862
;  :mk-clause               3309
;  :num-allocs              3896052
;  :num-checks              335
;  :propagations            1198
;  :quant-instantiations    382
;  :rlimit-count            230976)
(declare-const $k@198@01 $Perm)
(assert ($Perm.isReadVar $k@198@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@198@01 $Perm.No) (< $Perm.No $k@198@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3813
;  :arith-add-rows          85
;  :arith-assert-diseq      408
;  :arith-assert-lower      966
;  :arith-assert-upper      540
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        591
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3866
;  :mk-clause               3311
;  :num-allocs              3896052
;  :num-checks              336
;  :propagations            1199
;  :quant-instantiations    382
;  :rlimit-count            231174)
(assert (<= $Perm.No $k@198@01))
(assert (<= $k@198@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@198@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3814
;  :arith-add-rows          85
;  :arith-assert-diseq      408
;  :arith-assert-lower      966
;  :arith-assert-upper      541
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        591
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3868
;  :mk-clause               3311
;  :num-allocs              3896052
;  :num-checks              337
;  :propagations            1199
;  :quant-instantiations    382
;  :rlimit-count            231540)
(push) ; 3
(assert (not (< $Perm.No $k@198@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3814
;  :arith-add-rows          85
;  :arith-assert-diseq      408
;  :arith-assert-lower      966
;  :arith-assert-upper      541
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        591
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   355
;  :datatype-splits         249
;  :decisions               729
;  :del-clause              3294
;  :final-checks            207
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3868
;  :mk-clause               3311
;  :num-allocs              3896052
;  :num-checks              338
;  :propagations            1199
;  :quant-instantiations    382
;  :rlimit-count            231588)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@191@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01))) globals@172@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Read_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3855
;  :arith-add-rows          85
;  :arith-assert-diseq      408
;  :arith-assert-lower      966
;  :arith-assert-upper      541
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        591
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 550
;  :datatype-occurs-check   359
;  :datatype-splits         259
;  :decisions               741
;  :del-clause              3310
;  :final-checks            209
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3881
;  :mk-clause               3311
;  :num-allocs              3896052
;  :num-checks              340
;  :propagations            1199
;  :quant-instantiations    383
;  :rlimit-count            232528)
(declare-const $t@199@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(declare-const __flatten_26__16@200@01 $Ref)
(declare-const __flatten_28__18@201@01 $Ref)
(declare-const __flatten_27__17@202@01 Seq<Int>)
(declare-const __flatten_30__20@203@01 $Ref)
(declare-const __flatten_29__19@204@01 $Ref)
(declare-const __flatten_33__23@205@01 $Ref)
(declare-const __flatten_32__22@206@01 $Ref)
(declare-const __flatten_35__25@207@01 $Ref)
(declare-const __flatten_34__24@208@01 $Ref)
(declare-const __flatten_31__21@209@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@210@01 $Snap)
(assert (= $t@210@01 ($Snap.combine ($Snap.first $t@210@01) ($Snap.second $t@210@01))))
(declare-const $k@211@01 $Perm)
(assert ($Perm.isReadVar $k@211@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@211@01 $Perm.No) (< $Perm.No $k@211@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3898
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      968
;  :arith-assert-upper      542
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        592
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    204
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3896
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              342
;  :propagations            1200
;  :quant-instantiations    383
;  :rlimit-count            233300)
(assert (<= $Perm.No $k@211@01))
(assert (<= $k@211@01 $Perm.Write))
(assert (implies (< $Perm.No $k@211@01) (not (= diz@171@01 $Ref.null))))
(assert (=
  ($Snap.second $t@210@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@210@01))
    ($Snap.second ($Snap.second $t@210@01)))))
(assert (= ($Snap.first ($Snap.second $t@210@01)) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3904
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      968
;  :arith-assert-upper      543
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        592
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3899
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              343
;  :propagations            1200
;  :quant-instantiations    383
;  :rlimit-count            233543)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@210@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@210@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3910
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      968
;  :arith-assert-upper      543
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        592
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3902
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              344
;  :propagations            1200
;  :quant-instantiations    384
;  :rlimit-count            233815)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@210@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3915
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      968
;  :arith-assert-upper      543
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        592
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3903
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              345
;  :propagations            1200
;  :quant-instantiations    384
;  :rlimit-count            233992)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
  $Snap.unit))
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3921
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      968
;  :arith-assert-upper      543
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        592
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    208
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3905
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              346
;  :propagations            1200
;  :quant-instantiations    384
;  :rlimit-count            234211
;  :time                    0.01)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3928
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      970
;  :arith-assert-upper      544
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        593
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3911
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              347
;  :propagations            1200
;  :quant-instantiations    386
;  :rlimit-count            234540)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
  $Snap.unit))
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3934
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      970
;  :arith-assert-upper      544
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        593
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3913
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              348
;  :propagations            1200
;  :quant-instantiations    386
;  :rlimit-count            234779)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
  $Snap.unit))
; [eval] (forall i__26: Int :: { diz.Read_m.Main_process_state[i__26] } 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|)
(declare-const i__26@212@01 Int)
(push) ; 4
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__26
(push) ; 5
; [then-branch: 92 | 0 <= i__26@212@01 | live]
; [else-branch: 92 | !(0 <= i__26@212@01) | live]
(push) ; 6
; [then-branch: 92 | 0 <= i__26@212@01]
(assert (<= 0 i__26@212@01))
; [eval] i__26 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3942
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      973
;  :arith-assert-upper      545
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        594
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3921
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              349
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            235217)
(pop) ; 6
(push) ; 6
; [else-branch: 92 | !(0 <= i__26@212@01)]
(assert (not (<= 0 i__26@212@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 93 | i__26@212@01 < |First:(Second:(Second:(Second:($t@210@01))))| && 0 <= i__26@212@01 | live]
; [else-branch: 93 | !(i__26@212@01 < |First:(Second:(Second:(Second:($t@210@01))))| && 0 <= i__26@212@01) | live]
(push) ; 6
; [then-branch: 93 | i__26@212@01 < |First:(Second:(Second:(Second:($t@210@01))))| && 0 <= i__26@212@01]
(assert (and
  (<
    i__26@212@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
  (<= 0 i__26@212@01)))
; [eval] diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26] == -1
; [eval] diz.Read_m.Main_process_state[i__26]
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3942
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      974
;  :arith-assert-upper      546
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        594
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3923
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              350
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            235374)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__26@212@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3942
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      974
;  :arith-assert-upper      546
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        594
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3923
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              351
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            235383)
; [eval] -1
(push) ; 7
; [then-branch: 94 | First:(Second:(Second:(Second:($t@210@01))))[i__26@212@01] == -1 | live]
; [else-branch: 94 | First:(Second:(Second:(Second:($t@210@01))))[i__26@212@01] != -1 | live]
(push) ; 8
; [then-branch: 94 | First:(Second:(Second:(Second:($t@210@01))))[i__26@212@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
    i__26@212@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 94 | First:(Second:(Second:(Second:($t@210@01))))[i__26@212@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
      i__26@212@01)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__26]
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3942
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      974
;  :arith-assert-upper      546
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        594
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3924
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              352
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            235597
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__26@212@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3942
;  :arith-add-rows          85
;  :arith-assert-diseq      409
;  :arith-assert-lower      974
;  :arith-assert-upper      546
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        594
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.23
;  :memory                  4.23
;  :minimized-lits          2
;  :mk-bool-var             3924
;  :mk-clause               3313
;  :num-allocs              3896052
;  :num-checks              353
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            235606)
(push) ; 9
; [then-branch: 95 | 0 <= First:(Second:(Second:(Second:($t@210@01))))[i__26@212@01] | live]
; [else-branch: 95 | !(0 <= First:(Second:(Second:(Second:($t@210@01))))[i__26@212@01]) | live]
(push) ; 10
; [then-branch: 95 | 0 <= First:(Second:(Second:(Second:($t@210@01))))[i__26@212@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
    i__26@212@01)))
; [eval] diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3942
;  :arith-add-rows          85
;  :arith-assert-diseq      410
;  :arith-assert-lower      977
;  :arith-assert-upper      546
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        595
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3927
;  :mk-clause               3314
;  :num-allocs              4112032
;  :num-checks              354
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            235769
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__26@212@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3942
;  :arith-add-rows          85
;  :arith-assert-diseq      410
;  :arith-assert-lower      977
;  :arith-assert-upper      546
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        595
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3927
;  :mk-clause               3314
;  :num-allocs              4112032
;  :num-checks              355
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            235778)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3942
;  :arith-add-rows          85
;  :arith-assert-diseq      410
;  :arith-assert-lower      977
;  :arith-assert-upper      546
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        595
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3310
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3927
;  :mk-clause               3314
;  :num-allocs              4112032
;  :num-checks              356
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            235826
;  :time                    0.00)
(pop) ; 10
(push) ; 10
; [else-branch: 95 | !(0 <= First:(Second:(Second:(Second:($t@210@01))))[i__26@212@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
      i__26@212@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 93 | !(i__26@212@01 < |First:(Second:(Second:(Second:($t@210@01))))| && 0 <= i__26@212@01)]
(assert (not
  (and
    (<
      i__26@212@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
    (<= 0 i__26@212@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__26@212@01 Int)) (!
  (implies
    (and
      (<
        i__26@212@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
      (<= 0 i__26@212@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
          i__26@212@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
            i__26@212@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
            i__26@212@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
    i__26@212@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3947
;  :arith-add-rows          85
;  :arith-assert-diseq      410
;  :arith-assert-lower      977
;  :arith-assert-upper      546
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        595
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3929
;  :mk-clause               3314
;  :num-allocs              4112032
;  :num-checks              357
;  :propagations            1200
;  :quant-instantiations    388
;  :rlimit-count            236451)
(declare-const $k@213@01 $Perm)
(assert ($Perm.isReadVar $k@213@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@213@01 $Perm.No) (< $Perm.No $k@213@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3947
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      547
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3933
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              358
;  :propagations            1201
;  :quant-instantiations    388
;  :rlimit-count            236649)
(assert (<= $Perm.No $k@213@01))
(assert (<= $k@213@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@213@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3953
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3936
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              359
;  :propagations            1201
;  :quant-instantiations    388
;  :rlimit-count            236972)
(push) ; 4
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3953
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3936
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              360
;  :propagations            1201
;  :quant-instantiations    388
;  :rlimit-count            237020)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3959
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3939
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              361
;  :propagations            1201
;  :quant-instantiations    389
;  :rlimit-count            237376)
(push) ; 4
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3959
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3939
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              362
;  :propagations            1201
;  :quant-instantiations    389
;  :rlimit-count            237424)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3964
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3940
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              363
;  :propagations            1201
;  :quant-instantiations    389
;  :rlimit-count            237681
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3964
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3940
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              364
;  :propagations            1201
;  :quant-instantiations    389
;  :rlimit-count            237729)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3969
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3941
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              365
;  :propagations            1201
;  :quant-instantiations    389
;  :rlimit-count            237996)
(push) ; 4
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3969
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3941
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              366
;  :propagations            1201
;  :quant-instantiations    389
;  :rlimit-count            238044)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3974
;  :arith-add-rows          85
;  :arith-assert-diseq      411
;  :arith-assert-lower      979
;  :arith-assert-upper      548
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        596
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3942
;  :mk-clause               3316
;  :num-allocs              4112032
;  :num-checks              367
;  :propagations            1201
;  :quant-instantiations    389
;  :rlimit-count            238321)
(declare-const $k@214@01 $Perm)
(assert ($Perm.isReadVar $k@214@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@214@01 $Perm.No) (< $Perm.No $k@214@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3974
;  :arith-add-rows          85
;  :arith-assert-diseq      412
;  :arith-assert-lower      981
;  :arith-assert-upper      549
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        597
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3946
;  :mk-clause               3318
;  :num-allocs              4112032
;  :num-checks              368
;  :propagations            1202
;  :quant-instantiations    389
;  :rlimit-count            238519)
(assert (<= $Perm.No $k@214@01))
(assert (<= $k@214@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@214@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3980
;  :arith-add-rows          85
;  :arith-assert-diseq      412
;  :arith-assert-lower      981
;  :arith-assert-upper      550
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        597
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3949
;  :mk-clause               3318
;  :num-allocs              4112032
;  :num-checks              369
;  :propagations            1202
;  :quant-instantiations    389
;  :rlimit-count            238892
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@214@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3980
;  :arith-add-rows          85
;  :arith-assert-diseq      412
;  :arith-assert-lower      981
;  :arith-assert-upper      550
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        597
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3949
;  :mk-clause               3318
;  :num-allocs              4112032
;  :num-checks              370
;  :propagations            1202
;  :quant-instantiations    389
;  :rlimit-count            238940
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3986
;  :arith-add-rows          85
;  :arith-assert-diseq      412
;  :arith-assert-lower      981
;  :arith-assert-upper      550
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        597
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3952
;  :mk-clause               3318
;  :num-allocs              4112032
;  :num-checks              371
;  :propagations            1202
;  :quant-instantiations    390
;  :rlimit-count            239350)
(push) ; 4
(assert (not (< $Perm.No $k@214@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3986
;  :arith-add-rows          85
;  :arith-assert-diseq      412
;  :arith-assert-lower      981
;  :arith-assert-upper      550
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        597
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3952
;  :mk-clause               3318
;  :num-allocs              4112032
;  :num-checks              372
;  :propagations            1202
;  :quant-instantiations    390
;  :rlimit-count            239398)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3991
;  :arith-add-rows          85
;  :arith-assert-diseq      412
;  :arith-assert-lower      981
;  :arith-assert-upper      550
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        597
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3953
;  :mk-clause               3318
;  :num-allocs              4112032
;  :num-checks              373
;  :propagations            1202
;  :quant-instantiations    390
;  :rlimit-count            239705)
(declare-const $k@215@01 $Perm)
(assert ($Perm.isReadVar $k@215@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@215@01 $Perm.No) (< $Perm.No $k@215@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3991
;  :arith-add-rows          85
;  :arith-assert-diseq      413
;  :arith-assert-lower      983
;  :arith-assert-upper      551
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        598
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3957
;  :mk-clause               3320
;  :num-allocs              4112032
;  :num-checks              374
;  :propagations            1203
;  :quant-instantiations    390
;  :rlimit-count            239903)
(assert (<= $Perm.No $k@215@01))
(assert (<= $k@215@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@215@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3997
;  :arith-add-rows          85
;  :arith-assert-diseq      413
;  :arith-assert-lower      983
;  :arith-assert-upper      552
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        598
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3960
;  :mk-clause               3320
;  :num-allocs              4112032
;  :num-checks              375
;  :propagations            1203
;  :quant-instantiations    390
;  :rlimit-count            240306)
(push) ; 4
(assert (not (< $Perm.No $k@215@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3997
;  :arith-add-rows          85
;  :arith-assert-diseq      413
;  :arith-assert-lower      983
;  :arith-assert-upper      552
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        598
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3960
;  :mk-clause               3320
;  :num-allocs              4112032
;  :num-checks              376
;  :propagations            1203
;  :quant-instantiations    390
;  :rlimit-count            240354)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4003
;  :arith-add-rows          85
;  :arith-assert-diseq      413
;  :arith-assert-lower      983
;  :arith-assert-upper      552
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        598
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3963
;  :mk-clause               3320
;  :num-allocs              4112032
;  :num-checks              377
;  :propagations            1203
;  :quant-instantiations    391
;  :rlimit-count            240790
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@215@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4003
;  :arith-add-rows          85
;  :arith-assert-diseq      413
;  :arith-assert-lower      983
;  :arith-assert-upper      552
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        598
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3963
;  :mk-clause               3320
;  :num-allocs              4112032
;  :num-checks              378
;  :propagations            1203
;  :quant-instantiations    391
;  :rlimit-count            240838)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4008
;  :arith-add-rows          85
;  :arith-assert-diseq      413
;  :arith-assert-lower      983
;  :arith-assert-upper      552
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        598
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3964
;  :mk-clause               3320
;  :num-allocs              4112032
;  :num-checks              379
;  :propagations            1203
;  :quant-instantiations    391
;  :rlimit-count            241175)
(declare-const $k@216@01 $Perm)
(assert ($Perm.isReadVar $k@216@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@216@01 $Perm.No) (< $Perm.No $k@216@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4008
;  :arith-add-rows          85
;  :arith-assert-diseq      414
;  :arith-assert-lower      985
;  :arith-assert-upper      553
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        599
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3968
;  :mk-clause               3322
;  :num-allocs              4112032
;  :num-checks              380
;  :propagations            1204
;  :quant-instantiations    391
;  :rlimit-count            241373)
(assert (<= $Perm.No $k@216@01))
(assert (<= $k@216@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@216@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4014
;  :arith-add-rows          85
;  :arith-assert-diseq      414
;  :arith-assert-lower      985
;  :arith-assert-upper      554
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        599
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3971
;  :mk-clause               3322
;  :num-allocs              4112032
;  :num-checks              381
;  :propagations            1204
;  :quant-instantiations    391
;  :rlimit-count            241806)
(push) ; 4
(assert (not (< $Perm.No $k@216@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4014
;  :arith-add-rows          85
;  :arith-assert-diseq      414
;  :arith-assert-lower      985
;  :arith-assert-upper      554
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        599
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3971
;  :mk-clause               3322
;  :num-allocs              4112032
;  :num-checks              382
;  :propagations            1204
;  :quant-instantiations    391
;  :rlimit-count            241854
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4020
;  :arith-add-rows          85
;  :arith-assert-diseq      414
;  :arith-assert-lower      985
;  :arith-assert-upper      554
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        599
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    225
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3974
;  :mk-clause               3322
;  :num-allocs              4112032
;  :num-checks              383
;  :propagations            1204
;  :quant-instantiations    392
;  :rlimit-count            242320)
(push) ; 4
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4020
;  :arith-add-rows          85
;  :arith-assert-diseq      414
;  :arith-assert-lower      985
;  :arith-assert-upper      554
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        599
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    225
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3974
;  :mk-clause               3322
;  :num-allocs              4112032
;  :num-checks              384
;  :propagations            1204
;  :quant-instantiations    392
;  :rlimit-count            242368)
(declare-const $k@217@01 $Perm)
(assert ($Perm.isReadVar $k@217@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@217@01 $Perm.No) (< $Perm.No $k@217@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4020
;  :arith-add-rows          85
;  :arith-assert-diseq      415
;  :arith-assert-lower      987
;  :arith-assert-upper      555
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        600
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    225
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3978
;  :mk-clause               3324
;  :num-allocs              4112032
;  :num-checks              385
;  :propagations            1205
;  :quant-instantiations    392
;  :rlimit-count            242566)
(assert (<= $Perm.No $k@217@01))
(assert (<= $k@217@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@217@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4026
;  :arith-add-rows          85
;  :arith-assert-diseq      415
;  :arith-assert-lower      987
;  :arith-assert-upper      556
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        600
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3981
;  :mk-clause               3324
;  :num-allocs              4112032
;  :num-checks              386
;  :propagations            1205
;  :quant-instantiations    392
;  :rlimit-count            243019)
(push) ; 4
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4026
;  :arith-add-rows          85
;  :arith-assert-diseq      415
;  :arith-assert-lower      987
;  :arith-assert-upper      556
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        600
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3981
;  :mk-clause               3324
;  :num-allocs              4112032
;  :num-checks              387
;  :propagations            1205
;  :quant-instantiations    392
;  :rlimit-count            243067)
(push) ; 4
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4026
;  :arith-add-rows          85
;  :arith-assert-diseq      415
;  :arith-assert-lower      987
;  :arith-assert-upper      556
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        600
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3981
;  :mk-clause               3324
;  :num-allocs              4112032
;  :num-checks              388
;  :propagations            1205
;  :quant-instantiations    392
;  :rlimit-count            243115)
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4026
;  :arith-add-rows          85
;  :arith-assert-diseq      415
;  :arith-assert-lower      987
;  :arith-assert-upper      556
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        600
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3981
;  :mk-clause               3324
;  :num-allocs              4112032
;  :num-checks              389
;  :propagations            1205
;  :quant-instantiations    392
;  :rlimit-count            243163)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 4
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4030
;  :arith-add-rows          85
;  :arith-assert-diseq      415
;  :arith-assert-lower      987
;  :arith-assert-upper      556
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        600
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3984
;  :mk-clause               3324
;  :num-allocs              4112032
;  :num-checks              390
;  :propagations            1205
;  :quant-instantiations    393
;  :rlimit-count            243594)
(push) ; 4
(assert (not (< $Perm.No $k@216@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4030
;  :arith-add-rows          85
;  :arith-assert-diseq      415
;  :arith-assert-lower      987
;  :arith-assert-upper      556
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        600
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3311
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3984
;  :mk-clause               3324
;  :num-allocs              4112032
;  :num-checks              391
;  :propagations            1205
;  :quant-instantiations    393
;  :rlimit-count            243642)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
  diz@171@01))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@218@01 $Perm)
(assert ($Perm.isReadVar $k@218@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@218@01 $Perm.No) (< $Perm.No $k@218@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      989
;  :arith-assert-upper      557
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3989
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              392
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244109)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@175@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      989
;  :arith-assert-upper      557
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3989
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              393
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244120)
(assert (< $k@218@01 $k@175@01))
(assert (<= $Perm.No (- $k@175@01 $k@218@01)))
(assert (<= (- $k@175@01 $k@218@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@175@01 $k@218@01)) (not (= diz@171@01 $Ref.null))))
; [eval] diz.Read_m != null
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      991
;  :arith-assert-upper      558
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3992
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              394
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244328)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      991
;  :arith-assert-upper      558
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3992
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              395
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244376)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      991
;  :arith-assert-upper      558
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3992
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              396
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244424)
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      991
;  :arith-assert-upper      558
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3992
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              397
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244472)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      991
;  :arith-assert-upper      558
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3992
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              398
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244520)
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      991
;  :arith-assert-upper      558
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3992
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              399
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244568
;  :time                    0.01)
; [eval] (forall i__26: Int :: { diz.Read_m.Main_process_state[i__26] } 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|)
(declare-const i__26@219@01 Int)
(push) ; 4
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__26
(push) ; 5
; [then-branch: 96 | 0 <= i__26@219@01 | live]
; [else-branch: 96 | !(0 <= i__26@219@01) | live]
(push) ; 6
; [then-branch: 96 | 0 <= i__26@219@01]
(assert (<= 0 i__26@219@01))
; [eval] i__26 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      992
;  :arith-assert-upper      558
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3993
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              400
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244668)
(pop) ; 6
(push) ; 6
; [else-branch: 96 | !(0 <= i__26@219@01)]
(assert (not (<= 0 i__26@219@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 97 | i__26@219@01 < |First:(Second:(Second:(Second:($t@191@01))))| && 0 <= i__26@219@01 | live]
; [else-branch: 97 | !(i__26@219@01 < |First:(Second:(Second:(Second:($t@191@01))))| && 0 <= i__26@219@01) | live]
(push) ; 6
; [then-branch: 97 | i__26@219@01 < |First:(Second:(Second:(Second:($t@191@01))))| && 0 <= i__26@219@01]
(assert (and
  (<
    i__26@219@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
  (<= 0 i__26@219@01)))
; [eval] diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26] == -1
; [eval] diz.Read_m.Main_process_state[i__26]
(push) ; 7
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      993
;  :arith-assert-upper      559
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3995
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              401
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244825
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__26@219@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      416
;  :arith-assert-lower      993
;  :arith-assert-upper      559
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        601
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             3995
;  :mk-clause               3326
;  :num-allocs              4112032
;  :num-checks              402
;  :propagations            1206
;  :quant-instantiations    393
;  :rlimit-count            244834)
; [eval] -1
(push) ; 7
; [then-branch: 98 | First:(Second:(Second:(Second:($t@191@01))))[i__26@219@01] == -1 | live]
; [else-branch: 98 | First:(Second:(Second:(Second:($t@191@01))))[i__26@219@01] != -1 | live]
(push) ; 8
; [then-branch: 98 | First:(Second:(Second:(Second:($t@191@01))))[i__26@219@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
    i__26@219@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 98 | First:(Second:(Second:(Second:($t@191@01))))[i__26@219@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
      i__26@219@01)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__26]
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      417
;  :arith-assert-lower      996
;  :arith-assert-upper      560
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        602
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4001
;  :mk-clause               3330
;  :num-allocs              4112032
;  :num-checks              403
;  :propagations            1208
;  :quant-instantiations    394
;  :rlimit-count            245105)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__26@219@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      417
;  :arith-assert-lower      996
;  :arith-assert-upper      560
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        602
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4001
;  :mk-clause               3330
;  :num-allocs              4112032
;  :num-checks              404
;  :propagations            1208
;  :quant-instantiations    394
;  :rlimit-count            245114)
(push) ; 9
; [then-branch: 99 | 0 <= First:(Second:(Second:(Second:($t@191@01))))[i__26@219@01] | live]
; [else-branch: 99 | !(0 <= First:(Second:(Second:(Second:($t@191@01))))[i__26@219@01]) | live]
(push) ; 10
; [then-branch: 99 | 0 <= First:(Second:(Second:(Second:($t@191@01))))[i__26@219@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
    i__26@219@01)))
; [eval] diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      417
;  :arith-assert-lower      996
;  :arith-assert-upper      560
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        602
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4001
;  :mk-clause               3330
;  :num-allocs              4112032
;  :num-checks              405
;  :propagations            1208
;  :quant-instantiations    394
;  :rlimit-count            245267)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__26@219@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      417
;  :arith-assert-lower      996
;  :arith-assert-upper      560
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        602
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4001
;  :mk-clause               3330
;  :num-allocs              4112032
;  :num-checks              406
;  :propagations            1208
;  :quant-instantiations    394
;  :rlimit-count            245276)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      417
;  :arith-assert-lower      996
;  :arith-assert-upper      560
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        602
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3323
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4001
;  :mk-clause               3330
;  :num-allocs              4112032
;  :num-checks              407
;  :propagations            1208
;  :quant-instantiations    394
;  :rlimit-count            245324
;  :time                    0.01)
(pop) ; 10
(push) ; 10
; [else-branch: 99 | !(0 <= First:(Second:(Second:(Second:($t@191@01))))[i__26@219@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
      i__26@219@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 97 | !(i__26@219@01 < |First:(Second:(Second:(Second:($t@191@01))))| && 0 <= i__26@219@01)]
(assert (not
  (and
    (<
      i__26@219@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
    (<= 0 i__26@219@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__26@219@01 Int)) (!
  (implies
    (and
      (<
        i__26@219@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
      (<= 0 i__26@219@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
          i__26@219@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
            i__26@219@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
            i__26@219@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
    i__26@219@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      418
;  :arith-assert-lower      997
;  :arith-assert-upper      561
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        603
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4009
;  :mk-clause               3342
;  :num-allocs              4112032
;  :num-checks              408
;  :propagations            1210
;  :quant-instantiations    395
;  :rlimit-count            245770)
(assert (forall ((i__26@219@01 Int)) (!
  (implies
    (and
      (<
        i__26@219@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))
      (<= 0 i__26@219@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
          i__26@219@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
            i__26@219@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
            i__26@219@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))
    i__26@219@01))
  :qid |prog.l<no position>|)))
(declare-const $k@220@01 $Perm)
(assert ($Perm.isReadVar $k@220@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      999
;  :arith-assert-upper      562
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4014
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              409
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246329
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@220@01 $Perm.No) (< $Perm.No $k@220@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      999
;  :arith-assert-upper      562
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4014
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              410
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246379)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@193@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      999
;  :arith-assert-upper      562
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4014
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              411
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246390)
(assert (< $k@220@01 $k@193@01))
(assert (<= $Perm.No (- $k@193@01 $k@220@01)))
(assert (<= (- $k@193@01 $k@220@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@193@01 $k@220@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand != null
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      1001
;  :arith-assert-upper      563
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4017
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              412
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246604)
(push) ; 4
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      1001
;  :arith-assert-upper      563
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4017
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              413
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246652
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      1001
;  :arith-assert-upper      563
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4017
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              414
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246700)
(push) ; 4
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      1001
;  :arith-assert-upper      563
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4017
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              415
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246748)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      1001
;  :arith-assert-upper      563
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4017
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              416
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246796)
(push) ; 4
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      1001
;  :arith-assert-upper      563
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4017
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              417
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246844)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      1001
;  :arith-assert-upper      563
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4017
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              418
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246892
;  :time                    0.02)
(push) ; 4
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      419
;  :arith-assert-lower      1001
;  :arith-assert-upper      563
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4017
;  :mk-clause               3344
;  :num-allocs              4112032
;  :num-checks              419
;  :propagations            1211
;  :quant-instantiations    395
;  :rlimit-count            246940)
(declare-const $k@221@01 $Perm)
(assert ($Perm.isReadVar $k@221@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      420
;  :arith-assert-lower      1003
;  :arith-assert-upper      564
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        605
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4021
;  :mk-clause               3346
;  :num-allocs              4112032
;  :num-checks              420
;  :propagations            1212
;  :quant-instantiations    395
;  :rlimit-count            247136)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@221@01 $Perm.No) (< $Perm.No $k@221@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      420
;  :arith-assert-lower      1003
;  :arith-assert-upper      564
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        605
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4021
;  :mk-clause               3346
;  :num-allocs              4112032
;  :num-checks              421
;  :propagations            1212
;  :quant-instantiations    395
;  :rlimit-count            247186)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@194@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      420
;  :arith-assert-lower      1003
;  :arith-assert-upper      564
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        605
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4021
;  :mk-clause               3346
;  :num-allocs              4112032
;  :num-checks              422
;  :propagations            1212
;  :quant-instantiations    395
;  :rlimit-count            247197)
(assert (< $k@221@01 $k@194@01))
(assert (<= $Perm.No (- $k@194@01 $k@221@01)))
(assert (<= (- $k@194@01 $k@221@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@194@01 $k@221@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_a != null
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      420
;  :arith-assert-lower      1005
;  :arith-assert-upper      565
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        605
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4024
;  :mk-clause               3346
;  :num-allocs              4112032
;  :num-checks              423
;  :propagations            1212
;  :quant-instantiations    395
;  :rlimit-count            247417)
(push) ; 4
(assert (not (< $Perm.No $k@194@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      420
;  :arith-assert-lower      1005
;  :arith-assert-upper      565
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        605
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4024
;  :mk-clause               3346
;  :num-allocs              4112032
;  :num-checks              424
;  :propagations            1212
;  :quant-instantiations    395
;  :rlimit-count            247465)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      420
;  :arith-assert-lower      1005
;  :arith-assert-upper      565
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        605
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4024
;  :mk-clause               3346
;  :num-allocs              4112032
;  :num-checks              425
;  :propagations            1212
;  :quant-instantiations    395
;  :rlimit-count            247513)
(push) ; 4
(assert (not (< $Perm.No $k@194@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      420
;  :arith-assert-lower      1005
;  :arith-assert-upper      565
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        605
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4024
;  :mk-clause               3346
;  :num-allocs              4112032
;  :num-checks              426
;  :propagations            1212
;  :quant-instantiations    395
;  :rlimit-count            247561)
(declare-const $k@222@01 $Perm)
(assert ($Perm.isReadVar $k@222@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      421
;  :arith-assert-lower      1007
;  :arith-assert-upper      566
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        606
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4028
;  :mk-clause               3348
;  :num-allocs              4112032
;  :num-checks              427
;  :propagations            1213
;  :quant-instantiations    395
;  :rlimit-count            247757)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@222@01 $Perm.No) (< $Perm.No $k@222@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      421
;  :arith-assert-lower      1007
;  :arith-assert-upper      566
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        606
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4028
;  :mk-clause               3348
;  :num-allocs              4112032
;  :num-checks              428
;  :propagations            1213
;  :quant-instantiations    395
;  :rlimit-count            247807)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@195@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      421
;  :arith-assert-lower      1007
;  :arith-assert-upper      566
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        606
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4028
;  :mk-clause               3348
;  :num-allocs              4112032
;  :num-checks              429
;  :propagations            1213
;  :quant-instantiations    395
;  :rlimit-count            247818)
(assert (< $k@222@01 $k@195@01))
(assert (<= $Perm.No (- $k@195@01 $k@222@01)))
(assert (<= (- $k@195@01 $k@222@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@195@01 $k@222@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_b != null
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      421
;  :arith-assert-lower      1009
;  :arith-assert-upper      567
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        606
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4031
;  :mk-clause               3348
;  :num-allocs              4112032
;  :num-checks              430
;  :propagations            1213
;  :quant-instantiations    395
;  :rlimit-count            248032)
(push) ; 4
(assert (not (< $Perm.No $k@195@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      421
;  :arith-assert-lower      1009
;  :arith-assert-upper      567
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        606
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4031
;  :mk-clause               3348
;  :num-allocs              4112032
;  :num-checks              431
;  :propagations            1213
;  :quant-instantiations    395
;  :rlimit-count            248080)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      421
;  :arith-assert-lower      1009
;  :arith-assert-upper      567
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        606
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4031
;  :mk-clause               3348
;  :num-allocs              4112032
;  :num-checks              432
;  :propagations            1213
;  :quant-instantiations    395
;  :rlimit-count            248128)
(push) ; 4
(assert (not (< $Perm.No $k@195@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      421
;  :arith-assert-lower      1009
;  :arith-assert-upper      567
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        606
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4031
;  :mk-clause               3348
;  :num-allocs              4112032
;  :num-checks              433
;  :propagations            1213
;  :quant-instantiations    395
;  :rlimit-count            248176)
(declare-const $k@223@01 $Perm)
(assert ($Perm.isReadVar $k@223@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      422
;  :arith-assert-lower      1011
;  :arith-assert-upper      568
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        607
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4035
;  :mk-clause               3350
;  :num-allocs              4112032
;  :num-checks              434
;  :propagations            1214
;  :quant-instantiations    395
;  :rlimit-count            248373)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@223@01 $Perm.No) (< $Perm.No $k@223@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4033
;  :arith-add-rows          85
;  :arith-assert-diseq      422
;  :arith-assert-lower      1011
;  :arith-assert-upper      568
;  :arith-bound-prop        110
;  :arith-conflicts         24
;  :arith-eq-adapter        607
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3339
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4035
;  :mk-clause               3350
;  :num-allocs              4112032
;  :num-checks              435
;  :propagations            1214
;  :quant-instantiations    395
;  :rlimit-count            248423)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@176@01 $k@196@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          85
;  :arith-assert-diseq      422
;  :arith-assert-lower      1011
;  :arith-assert-upper      569
;  :arith-bound-prop        110
;  :arith-conflicts         25
;  :arith-eq-adapter        608
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4037
;  :mk-clause               3352
;  :num-allocs              4112032
;  :num-checks              436
;  :propagations            1215
;  :quant-instantiations    395
;  :rlimit-count            248485)
(assert (< $k@223@01 (+ $k@176@01 $k@196@01)))
(assert (<= $Perm.No (- (+ $k@176@01 $k@196@01) $k@223@01)))
(assert (<= (- (+ $k@176@01 $k@196@01) $k@223@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@176@01 $k@196@01) $k@223@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand_read != null
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      422
;  :arith-assert-lower      1013
;  :arith-assert-upper      570
;  :arith-bound-prop        110
;  :arith-conflicts         25
;  :arith-eq-adapter        608
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4040
;  :mk-clause               3352
;  :num-allocs              4112032
;  :num-checks              437
;  :propagations            1215
;  :quant-instantiations    395
;  :rlimit-count            248702
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No (+ $k@176@01 $k@196@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      422
;  :arith-assert-lower      1013
;  :arith-assert-upper      571
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        608
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4041
;  :mk-clause               3352
;  :num-allocs              4112032
;  :num-checks              438
;  :propagations            1215
;  :quant-instantiations    395
;  :rlimit-count            248765)
(declare-const $k@224@01 $Perm)
(assert ($Perm.isReadVar $k@224@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1015
;  :arith-assert-upper      572
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4045
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              439
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            248961)
(push) ; 4
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1015
;  :arith-assert-upper      572
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4045
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              440
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249009)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@224@01 $Perm.No) (< $Perm.No $k@224@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1015
;  :arith-assert-upper      572
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4045
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              441
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249059)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@198@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1015
;  :arith-assert-upper      572
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4045
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              442
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249070)
(assert (< $k@224@01 $k@198@01))
(assert (<= $Perm.No (- $k@198@01 $k@224@01)))
(assert (<= (- $k@198@01 $k@224@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@198@01 $k@224@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01))))))))))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1017
;  :arith-assert-upper      573
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4048
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              443
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249284
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1017
;  :arith-assert-upper      573
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4048
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              444
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249332)
(push) ; 4
(assert (not (< $Perm.No $k@198@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1017
;  :arith-assert-upper      573
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4048
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              445
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249380)
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1017
;  :arith-assert-upper      573
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4048
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              446
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249428
;  :time                    0.00)
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 4
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1017
;  :arith-assert-upper      573
;  :arith-bound-prop        110
;  :arith-conflicts         26
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4048
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              447
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249476)
(push) ; 4
(assert (not (< $Perm.No (+ $k@176@01 $k@196@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1017
;  :arith-assert-upper      574
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4049
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              448
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249539
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@197@01 diz@171@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4034
;  :arith-add-rows          86
;  :arith-assert-diseq      423
;  :arith-assert-lower      1017
;  :arith-assert-upper      574
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        609
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 562
;  :datatype-occurs-check   363
;  :datatype-splits         269
;  :decisions               753
;  :del-clause              3341
;  :final-checks            211
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.33
;  :memory                  4.33
;  :minimized-lits          2
;  :mk-bool-var             4049
;  :mk-clause               3354
;  :num-allocs              4112032
;  :num-checks              449
;  :propagations            1216
;  :quant-instantiations    395
;  :rlimit-count            249595)
(assert (= $t@197@01 diz@171@01))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@211@01 $Perm.Write))
(assert ($Perm.isReadVar $k@213@01 $Perm.Write))
(assert ($Perm.isReadVar $k@214@01 $Perm.Write))
(assert ($Perm.isReadVar $k@215@01 $Perm.Write))
(assert ($Perm.isReadVar $k@216@01 $Perm.Write))
(assert ($Perm.isReadVar $k@217@01 $Perm.Write))
(assert (= $t@210@01 ($Snap.combine ($Snap.first $t@210@01) ($Snap.second $t@210@01))))
(assert (<= $Perm.No $k@211@01))
(assert (<= $k@211@01 $Perm.Write))
(assert (implies (< $Perm.No $k@211@01) (not (= diz@171@01 $Ref.null))))
(assert (=
  ($Snap.second $t@210@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@210@01))
    ($Snap.second ($Snap.second $t@210@01)))))
(assert (= ($Snap.first ($Snap.second $t@210@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@210@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@210@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@210@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
  $Snap.unit))
(assert (forall ((i__26@212@01 Int)) (!
  (implies
    (and
      (<
        i__26@212@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))
      (<= 0 i__26@212@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
          i__26@212@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
            i__26@212@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
            i__26@212@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
    i__26@212@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
(assert (<= $Perm.No $k@213@01))
(assert (<= $k@213@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@213@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))
(assert (<= $Perm.No $k@214@01))
(assert (<= $k@214@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@214@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))
(assert (<= $Perm.No $k@215@01))
(assert (<= $k@215@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@215@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
(assert (<= $Perm.No $k@216@01))
(assert (<= $k@216@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@216@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))))
(assert (<= $Perm.No $k@217@01))
(assert (<= $k@217@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@217@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))
  diz@171@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4455
;  :arith-add-rows          86
;  :arith-assert-diseq      429
;  :arith-assert-lower      1033
;  :arith-assert-upper      588
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        617
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4201
;  :mk-clause               3368
;  :num-allocs              4342363
;  :num-checks              452
;  :propagations            1222
;  :quant-instantiations    405
;  :rlimit-count            256459)
; [then-branch: 100 | True | live]
; [else-branch: 100 | False | dead]
(push) ; 5
; [then-branch: 100 | True]
; [exec]
; __flatten_26__16 := diz.Read_m
(push) ; 6
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4455
;  :arith-add-rows          86
;  :arith-assert-diseq      429
;  :arith-assert-lower      1033
;  :arith-assert-upper      588
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        617
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4201
;  :mk-clause               3368
;  :num-allocs              4342363
;  :num-checks              453
;  :propagations            1222
;  :quant-instantiations    405
;  :rlimit-count            256512)
(declare-const __flatten_26__16@225@01 $Ref)
(assert (= __flatten_26__16@225@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))))
; [exec]
; __flatten_28__18 := diz.Read_m
(push) ; 6
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4456
;  :arith-add-rows          86
;  :arith-assert-diseq      429
;  :arith-assert-lower      1033
;  :arith-assert-upper      588
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        617
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4202
;  :mk-clause               3368
;  :num-allocs              4342363
;  :num-checks              454
;  :propagations            1222
;  :quant-instantiations    405
;  :rlimit-count            256617)
(declare-const __flatten_28__18@226@01 $Ref)
(assert (= __flatten_28__18@226@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))))
; [exec]
; __flatten_27__17 := __flatten_28__18.Main_process_state[2 := 2]
; [eval] __flatten_28__18.Main_process_state[2 := 2]
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) __flatten_28__18@226@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4457
;  :arith-add-rows          86
;  :arith-assert-diseq      429
;  :arith-assert-lower      1033
;  :arith-assert-upper      588
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        617
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4203
;  :mk-clause               3368
;  :num-allocs              4342363
;  :num-checks              455
;  :propagations            1222
;  :quant-instantiations    405
;  :rlimit-count            256665)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4457
;  :arith-add-rows          86
;  :arith-assert-diseq      429
;  :arith-assert-lower      1033
;  :arith-assert-upper      588
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        617
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4203
;  :mk-clause               3368
;  :num-allocs              4342363
;  :num-checks              456
;  :propagations            1222
;  :quant-instantiations    405
;  :rlimit-count            256680)
(declare-const __flatten_27__17@227@01 Seq<Int>)
(assert (Seq_equal
  __flatten_27__17@227@01
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))
    2
    2)))
; [exec]
; __flatten_26__16.Main_process_state := __flatten_27__17
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) __flatten_26__16@225@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4467
;  :arith-add-rows          89
;  :arith-assert-diseq      430
;  :arith-assert-lower      1037
;  :arith-assert-upper      590
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        620
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4226
;  :mk-clause               3387
;  :num-allocs              4342363
;  :num-checks              457
;  :propagations            1231
;  :quant-instantiations    410
;  :rlimit-count            257161)
(assert (not (= __flatten_26__16@225@01 $Ref.null)))
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@228@01 $Snap)
(assert (= $t@228@01 ($Snap.combine ($Snap.first $t@228@01) ($Snap.second $t@228@01))))
(declare-const $k@229@01 $Perm)
(assert ($Perm.isReadVar $k@229@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@229@01 $Perm.No) (< $Perm.No $k@229@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4473
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1039
;  :arith-assert-upper      591
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        621
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    250
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4232
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              458
;  :propagations            1232
;  :quant-instantiations    410
;  :rlimit-count            257509)
(assert (<= $Perm.No $k@229@01))
(assert (<= $k@229@01 $Perm.Write))
(assert (implies (< $Perm.No $k@229@01) (not (= diz@171@01 $Ref.null))))
(assert (=
  ($Snap.second $t@228@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@228@01))
    ($Snap.second ($Snap.second $t@228@01)))))
(assert (= ($Snap.first ($Snap.second $t@228@01)) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4479
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1039
;  :arith-assert-upper      592
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        621
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    251
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4235
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              459
;  :propagations            1232
;  :quant-instantiations    410
;  :rlimit-count            257752)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@228@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@228@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4485
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1039
;  :arith-assert-upper      592
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        621
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    252
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4238
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              460
;  :propagations            1232
;  :quant-instantiations    411
;  :rlimit-count            258024
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@228@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4490
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1039
;  :arith-assert-upper      592
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        621
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4239
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              461
;  :propagations            1232
;  :quant-instantiations    411
;  :rlimit-count            258201)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  $Snap.unit))
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4496
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1039
;  :arith-assert-upper      592
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        621
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4241
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              462
;  :propagations            1232
;  :quant-instantiations    411
;  :rlimit-count            258420)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4503
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1041
;  :arith-assert-upper      593
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        622
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    255
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4247
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              463
;  :propagations            1232
;  :quant-instantiations    413
;  :rlimit-count            258749)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4509
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1041
;  :arith-assert-upper      593
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        622
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    256
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4249
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              464
;  :propagations            1232
;  :quant-instantiations    413
;  :rlimit-count            258988)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
  $Snap.unit))
; [eval] (forall i__27: Int :: { diz.Read_m.Main_process_state[i__27] } 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|)
(declare-const i__27@230@01 Int)
(push) ; 7
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__27
(push) ; 8
; [then-branch: 101 | 0 <= i__27@230@01 | live]
; [else-branch: 101 | !(0 <= i__27@230@01) | live]
(push) ; 9
; [then-branch: 101 | 0 <= i__27@230@01]
(assert (<= 0 i__27@230@01))
; [eval] i__27 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4517
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1044
;  :arith-assert-upper      594
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        623
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4257
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              465
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            259428)
(pop) ; 9
(push) ; 9
; [else-branch: 101 | !(0 <= i__27@230@01)]
(assert (not (<= 0 i__27@230@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 102 | i__27@230@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i__27@230@01 | live]
; [else-branch: 102 | !(i__27@230@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i__27@230@01) | live]
(push) ; 9
; [then-branch: 102 | i__27@230@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i__27@230@01]
(assert (and
  (<
    i__27@230@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  (<= 0 i__27@230@01)))
; [eval] diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27] == -1
; [eval] diz.Read_m.Main_process_state[i__27]
(push) ; 10
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4517
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1045
;  :arith-assert-upper      595
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        623
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4259
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              466
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            259585)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__27@230@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4517
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1045
;  :arith-assert-upper      595
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        623
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4259
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              467
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            259594)
; [eval] -1
(push) ; 10
; [then-branch: 103 | First:(Second:(Second:(Second:($t@228@01))))[i__27@230@01] == -1 | live]
; [else-branch: 103 | First:(Second:(Second:(Second:($t@228@01))))[i__27@230@01] != -1 | live]
(push) ; 11
; [then-branch: 103 | First:(Second:(Second:(Second:($t@228@01))))[i__27@230@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i__27@230@01)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 103 | First:(Second:(Second:(Second:($t@228@01))))[i__27@230@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      i__27@230@01)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__27]
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4517
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1045
;  :arith-assert-upper      595
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        623
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4260
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              468
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            259808
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__27@230@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4517
;  :arith-add-rows          89
;  :arith-assert-diseq      431
;  :arith-assert-lower      1045
;  :arith-assert-upper      595
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        623
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4260
;  :mk-clause               3389
;  :num-allocs              4342363
;  :num-checks              469
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            259817)
(push) ; 12
; [then-branch: 104 | 0 <= First:(Second:(Second:(Second:($t@228@01))))[i__27@230@01] | live]
; [else-branch: 104 | !(0 <= First:(Second:(Second:(Second:($t@228@01))))[i__27@230@01]) | live]
(push) ; 13
; [then-branch: 104 | 0 <= First:(Second:(Second:(Second:($t@228@01))))[i__27@230@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i__27@230@01)))
; [eval] diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4517
;  :arith-add-rows          89
;  :arith-assert-diseq      432
;  :arith-assert-lower      1048
;  :arith-assert-upper      595
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        624
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4263
;  :mk-clause               3390
;  :num-allocs              4342363
;  :num-checks              470
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            259980
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__27@230@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4517
;  :arith-add-rows          89
;  :arith-assert-diseq      432
;  :arith-assert-lower      1048
;  :arith-assert-upper      595
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        624
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4263
;  :mk-clause               3390
;  :num-allocs              4342363
;  :num-checks              471
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            259989)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4517
;  :arith-add-rows          89
;  :arith-assert-diseq      432
;  :arith-assert-lower      1048
;  :arith-assert-upper      595
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        624
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3355
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4263
;  :mk-clause               3390
;  :num-allocs              4342363
;  :num-checks              472
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            260037)
(pop) ; 13
(push) ; 13
; [else-branch: 104 | !(0 <= First:(Second:(Second:(Second:($t@228@01))))[i__27@230@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      i__27@230@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 102 | !(i__27@230@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i__27@230@01)]
(assert (not
  (and
    (<
      i__27@230@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    (<= 0 i__27@230@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__27@230@01 Int)) (!
  (implies
    (and
      (<
        i__27@230@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      (<= 0 i__27@230@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          i__27@230@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i__27@230@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i__27@230@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i__27@230@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4522
;  :arith-add-rows          89
;  :arith-assert-diseq      432
;  :arith-assert-lower      1048
;  :arith-assert-upper      595
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        624
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4265
;  :mk-clause               3390
;  :num-allocs              4342363
;  :num-checks              473
;  :propagations            1232
;  :quant-instantiations    415
;  :rlimit-count            260662)
(declare-const $k@231@01 $Perm)
(assert ($Perm.isReadVar $k@231@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@231@01 $Perm.No) (< $Perm.No $k@231@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4522
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      596
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4269
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              474
;  :propagations            1233
;  :quant-instantiations    415
;  :rlimit-count            260860)
(assert (<= $Perm.No $k@231@01))
(assert (<= $k@231@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@231@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4528
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4272
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              475
;  :propagations            1233
;  :quant-instantiations    415
;  :rlimit-count            261183
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4528
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4272
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              476
;  :propagations            1233
;  :quant-instantiations    415
;  :rlimit-count            261231)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4534
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4275
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              477
;  :propagations            1233
;  :quant-instantiations    416
;  :rlimit-count            261587)
(push) ; 7
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4534
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4275
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              478
;  :propagations            1233
;  :quant-instantiations    416
;  :rlimit-count            261635)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4539
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4276
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              479
;  :propagations            1233
;  :quant-instantiations    416
;  :rlimit-count            261892
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4539
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4276
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              480
;  :propagations            1233
;  :quant-instantiations    416
;  :rlimit-count            261940)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4544
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4277
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              481
;  :propagations            1233
;  :quant-instantiations    416
;  :rlimit-count            262207)
(push) ; 7
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4544
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4277
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              482
;  :propagations            1233
;  :quant-instantiations    416
;  :rlimit-count            262255)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4549
;  :arith-add-rows          89
;  :arith-assert-diseq      433
;  :arith-assert-lower      1050
;  :arith-assert-upper      597
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        625
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4278
;  :mk-clause               3392
;  :num-allocs              4342363
;  :num-checks              483
;  :propagations            1233
;  :quant-instantiations    416
;  :rlimit-count            262532)
(declare-const $k@232@01 $Perm)
(assert ($Perm.isReadVar $k@232@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@232@01 $Perm.No) (< $Perm.No $k@232@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4549
;  :arith-add-rows          89
;  :arith-assert-diseq      434
;  :arith-assert-lower      1052
;  :arith-assert-upper      598
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        626
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             4282
;  :mk-clause               3394
;  :num-allocs              4342363
;  :num-checks              484
;  :propagations            1234
;  :quant-instantiations    416
;  :rlimit-count            262730)
(assert (<= $Perm.No $k@232@01))
(assert (<= $k@232@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@232@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4555
;  :arith-add-rows          89
;  :arith-assert-diseq      434
;  :arith-assert-lower      1052
;  :arith-assert-upper      599
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        626
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4285
;  :mk-clause               3394
;  :num-allocs              4580358
;  :num-checks              485
;  :propagations            1234
;  :quant-instantiations    416
;  :rlimit-count            263103
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4555
;  :arith-add-rows          89
;  :arith-assert-diseq      434
;  :arith-assert-lower      1052
;  :arith-assert-upper      599
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        626
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4285
;  :mk-clause               3394
;  :num-allocs              4580358
;  :num-checks              486
;  :propagations            1234
;  :quant-instantiations    416
;  :rlimit-count            263151)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4561
;  :arith-add-rows          89
;  :arith-assert-diseq      434
;  :arith-assert-lower      1052
;  :arith-assert-upper      599
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        626
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4288
;  :mk-clause               3394
;  :num-allocs              4580358
;  :num-checks              487
;  :propagations            1234
;  :quant-instantiations    417
;  :rlimit-count            263561
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4561
;  :arith-add-rows          89
;  :arith-assert-diseq      434
;  :arith-assert-lower      1052
;  :arith-assert-upper      599
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        626
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4288
;  :mk-clause               3394
;  :num-allocs              4580358
;  :num-checks              488
;  :propagations            1234
;  :quant-instantiations    417
;  :rlimit-count            263609
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4566
;  :arith-add-rows          89
;  :arith-assert-diseq      434
;  :arith-assert-lower      1052
;  :arith-assert-upper      599
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        626
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4289
;  :mk-clause               3394
;  :num-allocs              4580358
;  :num-checks              489
;  :propagations            1234
;  :quant-instantiations    417
;  :rlimit-count            263916)
(declare-const $k@233@01 $Perm)
(assert ($Perm.isReadVar $k@233@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@233@01 $Perm.No) (< $Perm.No $k@233@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4566
;  :arith-add-rows          89
;  :arith-assert-diseq      435
;  :arith-assert-lower      1054
;  :arith-assert-upper      600
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        627
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4293
;  :mk-clause               3396
;  :num-allocs              4580358
;  :num-checks              490
;  :propagations            1235
;  :quant-instantiations    417
;  :rlimit-count            264114)
(assert (<= $Perm.No $k@233@01))
(assert (<= $k@233@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@233@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4572
;  :arith-add-rows          89
;  :arith-assert-diseq      435
;  :arith-assert-lower      1054
;  :arith-assert-upper      601
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        627
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    267
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4296
;  :mk-clause               3396
;  :num-allocs              4580358
;  :num-checks              491
;  :propagations            1235
;  :quant-instantiations    417
;  :rlimit-count            264517)
(push) ; 7
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4572
;  :arith-add-rows          89
;  :arith-assert-diseq      435
;  :arith-assert-lower      1054
;  :arith-assert-upper      601
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        627
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    267
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4296
;  :mk-clause               3396
;  :num-allocs              4580358
;  :num-checks              492
;  :propagations            1235
;  :quant-instantiations    417
;  :rlimit-count            264565)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4578
;  :arith-add-rows          89
;  :arith-assert-diseq      435
;  :arith-assert-lower      1054
;  :arith-assert-upper      601
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        627
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4299
;  :mk-clause               3396
;  :num-allocs              4580358
;  :num-checks              493
;  :propagations            1235
;  :quant-instantiations    418
;  :rlimit-count            265001)
(push) ; 7
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4578
;  :arith-add-rows          89
;  :arith-assert-diseq      435
;  :arith-assert-lower      1054
;  :arith-assert-upper      601
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        627
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4299
;  :mk-clause               3396
;  :num-allocs              4580358
;  :num-checks              494
;  :propagations            1235
;  :quant-instantiations    418
;  :rlimit-count            265049)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4583
;  :arith-add-rows          89
;  :arith-assert-diseq      435
;  :arith-assert-lower      1054
;  :arith-assert-upper      601
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        627
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4300
;  :mk-clause               3396
;  :num-allocs              4580358
;  :num-checks              495
;  :propagations            1235
;  :quant-instantiations    418
;  :rlimit-count            265386)
(declare-const $k@234@01 $Perm)
(assert ($Perm.isReadVar $k@234@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@234@01 $Perm.No) (< $Perm.No $k@234@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4583
;  :arith-add-rows          89
;  :arith-assert-diseq      436
;  :arith-assert-lower      1056
;  :arith-assert-upper      602
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        628
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4304
;  :mk-clause               3398
;  :num-allocs              4580358
;  :num-checks              496
;  :propagations            1236
;  :quant-instantiations    418
;  :rlimit-count            265585)
(assert (<= $Perm.No $k@234@01))
(assert (<= $k@234@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@234@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4589
;  :arith-add-rows          89
;  :arith-assert-diseq      436
;  :arith-assert-lower      1056
;  :arith-assert-upper      603
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        628
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4307
;  :mk-clause               3398
;  :num-allocs              4580358
;  :num-checks              497
;  :propagations            1236
;  :quant-instantiations    418
;  :rlimit-count            266018)
(push) ; 7
(assert (not (< $Perm.No $k@234@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4589
;  :arith-add-rows          89
;  :arith-assert-diseq      436
;  :arith-assert-lower      1056
;  :arith-assert-upper      603
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        628
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4307
;  :mk-clause               3398
;  :num-allocs              4580358
;  :num-checks              498
;  :propagations            1236
;  :quant-instantiations    418
;  :rlimit-count            266066)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4595
;  :arith-add-rows          89
;  :arith-assert-diseq      436
;  :arith-assert-lower      1056
;  :arith-assert-upper      603
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        628
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4310
;  :mk-clause               3398
;  :num-allocs              4580358
;  :num-checks              499
;  :propagations            1236
;  :quant-instantiations    419
;  :rlimit-count            266532)
(push) ; 7
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4595
;  :arith-add-rows          89
;  :arith-assert-diseq      436
;  :arith-assert-lower      1056
;  :arith-assert-upper      603
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        628
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4310
;  :mk-clause               3398
;  :num-allocs              4580358
;  :num-checks              500
;  :propagations            1236
;  :quant-instantiations    419
;  :rlimit-count            266580
;  :time                    0.01)
(declare-const $k@235@01 $Perm)
(assert ($Perm.isReadVar $k@235@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@235@01 $Perm.No) (< $Perm.No $k@235@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4595
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      604
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4314
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              501
;  :propagations            1237
;  :quant-instantiations    419
;  :rlimit-count            266778)
(assert (<= $Perm.No $k@235@01))
(assert (<= $k@235@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@235@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4601
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4317
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              502
;  :propagations            1237
;  :quant-instantiations    419
;  :rlimit-count            267231)
(push) ; 7
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4601
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4317
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              503
;  :propagations            1237
;  :quant-instantiations    419
;  :rlimit-count            267279
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@235@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4601
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4317
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              504
;  :propagations            1237
;  :quant-instantiations    419
;  :rlimit-count            267327)
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4601
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4317
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              505
;  :propagations            1237
;  :quant-instantiations    419
;  :rlimit-count            267375)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 7
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4606
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4320
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              506
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            267807)
(push) ; 7
(assert (not (< $Perm.No $k@234@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4606
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4320
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              507
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            267855)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  diz@171@01))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_process_state[2] != -1
; [eval] diz.Read_m.Main_process_state[2]
(push) ; 8
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4609
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4321
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              508
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            268161
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4609
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4321
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              509
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            268176)
; [eval] -1
(push) ; 8
; [then-branch: 105 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1 | live]
; [else-branch: 105 | First:(Second:(Second:(Second:($t@228@01))))[2] == -1 | live]
(push) ; 9
; [then-branch: 105 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      2)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 105 | First:(Second:(Second:(Second:($t@228@01))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    2)
  (- 0 1)))
; [eval] diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4610
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4322
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              510
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            268371)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4610
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4322
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              511
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            268386)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !(diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2)
; [eval] diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_process_state[2] != -1
; [eval] diz.Read_m.Main_process_state[2]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4610
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4322
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              512
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            268439)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4610
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4322
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              513
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            268454)
; [eval] -1
(push) ; 8
; [then-branch: 106 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1 | live]
; [else-branch: 106 | First:(Second:(Second:(Second:($t@228@01))))[2] == -1 | live]
(push) ; 9
; [then-branch: 106 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      2)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 106 | First:(Second:(Second:(Second:($t@228@01))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    2)
  (- 0 1)))
; [eval] diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4323
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              514
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            268645
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      437
;  :arith-assert-lower      1058
;  :arith-assert-upper      605
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        629
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3356
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4323
;  :mk-clause               3400
;  :num-allocs              4580358
;  :num-checks              515
;  :propagations            1237
;  :quant-instantiations    420
;  :rlimit-count            268660)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(declare-const $k@236@01 $Perm)
(assert ($Perm.isReadVar $k@236@01 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@236@01 $Perm.No) (< $Perm.No $k@236@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1060
;  :arith-assert-upper      606
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4327
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              516
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            268863)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@211@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1060
;  :arith-assert-upper      606
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4327
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              517
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            268874)
(assert (< $k@236@01 $k@211@01))
(assert (<= $Perm.No (- $k@211@01 $k@236@01)))
(assert (<= (- $k@211@01 $k@236@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@211@01 $k@236@01)) (not (= diz@171@01 $Ref.null))))
; [eval] diz.Read_m != null
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1062
;  :arith-assert-upper      607
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4330
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              518
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269088)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1062
;  :arith-assert-upper      607
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4330
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              519
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269136)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1062
;  :arith-assert-upper      607
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4330
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              520
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269184)
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1062
;  :arith-assert-upper      607
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        630
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4330
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              521
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269232
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (= (Seq_length __flatten_27__17@227@01) 3)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4611
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1062
;  :arith-assert-upper      607
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        631
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4333
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              522
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269306)
(assert (= (Seq_length __flatten_27__17@227@01) 3))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4612
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1063
;  :arith-assert-upper      608
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4336
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              523
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269405
;  :time                    0.00)
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4612
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1063
;  :arith-assert-upper      608
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4336
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              524
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269453)
; [eval] (forall i__27: Int :: { diz.Read_m.Main_process_state[i__27] } 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|)
(declare-const i__27@237@01 Int)
(push) ; 7
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__27
(push) ; 8
; [then-branch: 107 | 0 <= i__27@237@01 | live]
; [else-branch: 107 | !(0 <= i__27@237@01) | live]
(push) ; 9
; [then-branch: 107 | 0 <= i__27@237@01]
(assert (<= 0 i__27@237@01))
; [eval] i__27 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4612
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1064
;  :arith-assert-upper      608
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4337
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              525
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269554)
(pop) ; 9
(push) ; 9
; [else-branch: 107 | !(0 <= i__27@237@01)]
(assert (not (<= 0 i__27@237@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 108 | i__27@237@01 < |__flatten_27__17@227@01| && 0 <= i__27@237@01 | live]
; [else-branch: 108 | !(i__27@237@01 < |__flatten_27__17@227@01| && 0 <= i__27@237@01) | live]
(push) ; 9
; [then-branch: 108 | i__27@237@01 < |__flatten_27__17@227@01| && 0 <= i__27@237@01]
(assert (and (< i__27@237@01 (Seq_length __flatten_27__17@227@01)) (<= 0 i__27@237@01)))
; [eval] diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27] == -1
; [eval] diz.Read_m.Main_process_state[i__27]
(push) ; 10
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4612
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1065
;  :arith-assert-upper      609
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4339
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              526
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269711)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__27@237@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4612
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1065
;  :arith-assert-upper      609
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        632
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4339
;  :mk-clause               3402
;  :num-allocs              4580358
;  :num-checks              527
;  :propagations            1238
;  :quant-instantiations    420
;  :rlimit-count            269720)
; [eval] -1
(push) ; 10
; [then-branch: 109 | __flatten_27__17@227@01[i__27@237@01] == -1 | live]
; [else-branch: 109 | __flatten_27__17@227@01[i__27@237@01] != -1 | live]
(push) ; 11
; [then-branch: 109 | __flatten_27__17@227@01[i__27@237@01] == -1]
(assert (= (Seq_index __flatten_27__17@227@01 i__27@237@01) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 109 | __flatten_27__17@227@01[i__27@237@01] != -1]
(assert (not (= (Seq_index __flatten_27__17@227@01 i__27@237@01) (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__27]
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4613
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1065
;  :arith-assert-upper      610
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        633
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4347
;  :mk-clause               3412
;  :num-allocs              4580358
;  :num-checks              528
;  :propagations            1238
;  :quant-instantiations    421
;  :rlimit-count            269927)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__27@237@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4613
;  :arith-add-rows          89
;  :arith-assert-diseq      438
;  :arith-assert-lower      1065
;  :arith-assert-upper      610
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        633
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4347
;  :mk-clause               3412
;  :num-allocs              4580358
;  :num-checks              529
;  :propagations            1238
;  :quant-instantiations    421
;  :rlimit-count            269936)
(push) ; 12
; [then-branch: 110 | 0 <= __flatten_27__17@227@01[i__27@237@01] | live]
; [else-branch: 110 | !(0 <= __flatten_27__17@227@01[i__27@237@01]) | live]
(push) ; 13
; [then-branch: 110 | 0 <= __flatten_27__17@227@01[i__27@237@01]]
(assert (<= 0 (Seq_index __flatten_27__17@227@01 i__27@237@01)))
; [eval] diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4613
;  :arith-add-rows          89
;  :arith-assert-diseq      439
;  :arith-assert-lower      1068
;  :arith-assert-upper      610
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        634
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4350
;  :mk-clause               3413
;  :num-allocs              4580358
;  :num-checks              530
;  :propagations            1238
;  :quant-instantiations    421
;  :rlimit-count            270048)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__27@237@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4613
;  :arith-add-rows          89
;  :arith-assert-diseq      439
;  :arith-assert-lower      1068
;  :arith-assert-upper      610
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        634
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4350
;  :mk-clause               3413
;  :num-allocs              4580358
;  :num-checks              531
;  :propagations            1238
;  :quant-instantiations    421
;  :rlimit-count            270057)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4613
;  :arith-add-rows          89
;  :arith-assert-diseq      439
;  :arith-assert-lower      1068
;  :arith-assert-upper      610
;  :arith-bound-prop        110
;  :arith-conflicts         27
;  :arith-eq-adapter        634
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        9
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 634
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               825
;  :del-clause              3368
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4350
;  :mk-clause               3413
;  :num-allocs              4580358
;  :num-checks              532
;  :propagations            1238
;  :quant-instantiations    421
;  :rlimit-count            270105)
(pop) ; 13
(push) ; 13
; [else-branch: 110 | !(0 <= __flatten_27__17@227@01[i__27@237@01])]
(assert (not (<= 0 (Seq_index __flatten_27__17@227@01 i__27@237@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 108 | !(i__27@237@01 < |__flatten_27__17@227@01| && 0 <= i__27@237@01)]
(assert (not
  (and (< i__27@237@01 (Seq_length __flatten_27__17@227@01)) (<= 0 i__27@237@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__27@237@01 Int)) (!
  (implies
    (and
      (< i__27@237@01 (Seq_length __flatten_27__17@227@01))
      (<= 0 i__27@237@01))
    (or
      (= (Seq_index __flatten_27__17@227@01 i__27@237@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_27__17@227@01 i__27@237@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
        (<= 0 (Seq_index __flatten_27__17@227@01 i__27@237@01)))))
  :pattern ((Seq_index __flatten_27__17@227@01 i__27@237@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      444
;  :arith-assert-lower      1082
;  :arith-assert-upper      622
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        642
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            198
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4388
;  :mk-clause               3458
;  :num-allocs              4580358
;  :num-checks              533
;  :propagations            1268
;  :quant-instantiations    424
;  :rlimit-count            270734)
(assert (forall ((i__27@237@01 Int)) (!
  (implies
    (and
      (< i__27@237@01 (Seq_length __flatten_27__17@227@01))
      (<= 0 i__27@237@01))
    (or
      (= (Seq_index __flatten_27__17@227@01 i__27@237@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_27__17@227@01 i__27@237@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))
        (<= 0 (Seq_index __flatten_27__17@227@01 i__27@237@01)))))
  :pattern ((Seq_index __flatten_27__17@227@01 i__27@237@01))
  :qid |prog.l<no position>|)))
(declare-const $k@238@01 $Perm)
(assert ($Perm.isReadVar $k@238@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1084
;  :arith-assert-upper      623
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            198
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4393
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              534
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271202)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@238@01 $Perm.No) (< $Perm.No $k@238@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1084
;  :arith-assert-upper      623
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            198
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4393
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              535
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271252)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@213@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1084
;  :arith-assert-upper      623
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            198
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4393
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              536
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271263)
(assert (< $k@238@01 $k@213@01))
(assert (<= $Perm.No (- $k@213@01 $k@238@01)))
(assert (<= (- $k@213@01 $k@238@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@213@01 $k@238@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand != null
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1086
;  :arith-assert-upper      624
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4396
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              537
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271483)
(push) ; 7
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1086
;  :arith-assert-upper      624
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4396
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              538
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271531)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1086
;  :arith-assert-upper      624
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4396
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              539
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271579)
(push) ; 7
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1086
;  :arith-assert-upper      624
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4396
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              540
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271627)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1086
;  :arith-assert-upper      624
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4396
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              541
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271675)
(push) ; 7
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1086
;  :arith-assert-upper      624
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4396
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              542
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271723
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1086
;  :arith-assert-upper      624
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4396
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              543
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271771
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      445
;  :arith-assert-lower      1086
;  :arith-assert-upper      624
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        643
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4396
;  :mk-clause               3460
;  :num-allocs              4580358
;  :num-checks              544
;  :propagations            1269
;  :quant-instantiations    424
;  :rlimit-count            271819)
(declare-const $k@239@01 $Perm)
(assert ($Perm.isReadVar $k@239@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      446
;  :arith-assert-lower      1088
;  :arith-assert-upper      625
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        644
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4400
;  :mk-clause               3462
;  :num-allocs              4580358
;  :num-checks              545
;  :propagations            1270
;  :quant-instantiations    424
;  :rlimit-count            272015)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@239@01 $Perm.No) (< $Perm.No $k@239@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      446
;  :arith-assert-lower      1088
;  :arith-assert-upper      625
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        644
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4400
;  :mk-clause               3462
;  :num-allocs              4580358
;  :num-checks              546
;  :propagations            1270
;  :quant-instantiations    424
;  :rlimit-count            272065)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@214@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      446
;  :arith-assert-lower      1088
;  :arith-assert-upper      625
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        644
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4400
;  :mk-clause               3462
;  :num-allocs              4580358
;  :num-checks              547
;  :propagations            1270
;  :quant-instantiations    424
;  :rlimit-count            272076
;  :time                    0.00)
(assert (< $k@239@01 $k@214@01))
(assert (<= $Perm.No (- $k@214@01 $k@239@01)))
(assert (<= (- $k@214@01 $k@239@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@214@01 $k@239@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_a != null
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      446
;  :arith-assert-lower      1090
;  :arith-assert-upper      626
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        644
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4403
;  :mk-clause               3462
;  :num-allocs              4580358
;  :num-checks              548
;  :propagations            1270
;  :quant-instantiations    424
;  :rlimit-count            272296)
(push) ; 7
(assert (not (< $Perm.No $k@214@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      446
;  :arith-assert-lower      1090
;  :arith-assert-upper      626
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        644
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4403
;  :mk-clause               3462
;  :num-allocs              4580358
;  :num-checks              549
;  :propagations            1270
;  :quant-instantiations    424
;  :rlimit-count            272344)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      446
;  :arith-assert-lower      1090
;  :arith-assert-upper      626
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        644
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4403
;  :mk-clause               3462
;  :num-allocs              4580358
;  :num-checks              550
;  :propagations            1270
;  :quant-instantiations    424
;  :rlimit-count            272392
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@214@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      446
;  :arith-assert-lower      1090
;  :arith-assert-upper      626
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        644
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4403
;  :mk-clause               3462
;  :num-allocs              4580358
;  :num-checks              551
;  :propagations            1270
;  :quant-instantiations    424
;  :rlimit-count            272440)
(declare-const $k@240@01 $Perm)
(assert ($Perm.isReadVar $k@240@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      447
;  :arith-assert-lower      1092
;  :arith-assert-upper      627
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        645
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4407
;  :mk-clause               3464
;  :num-allocs              4580358
;  :num-checks              552
;  :propagations            1271
;  :quant-instantiations    424
;  :rlimit-count            272637)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@240@01 $Perm.No) (< $Perm.No $k@240@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      447
;  :arith-assert-lower      1092
;  :arith-assert-upper      627
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        645
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4407
;  :mk-clause               3464
;  :num-allocs              4580358
;  :num-checks              553
;  :propagations            1271
;  :quant-instantiations    424
;  :rlimit-count            272687)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@215@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      447
;  :arith-assert-lower      1092
;  :arith-assert-upper      627
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        645
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4407
;  :mk-clause               3464
;  :num-allocs              4580358
;  :num-checks              554
;  :propagations            1271
;  :quant-instantiations    424
;  :rlimit-count            272698)
(assert (< $k@240@01 $k@215@01))
(assert (<= $Perm.No (- $k@215@01 $k@240@01)))
(assert (<= (- $k@215@01 $k@240@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@215@01 $k@240@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_b != null
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      447
;  :arith-assert-lower      1094
;  :arith-assert-upper      628
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        645
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4410
;  :mk-clause               3464
;  :num-allocs              4580358
;  :num-checks              555
;  :propagations            1271
;  :quant-instantiations    424
;  :rlimit-count            272906)
(push) ; 7
(assert (not (< $Perm.No $k@215@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      447
;  :arith-assert-lower      1094
;  :arith-assert-upper      628
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        645
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4410
;  :mk-clause               3464
;  :num-allocs              4580358
;  :num-checks              556
;  :propagations            1271
;  :quant-instantiations    424
;  :rlimit-count            272954)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      447
;  :arith-assert-lower      1094
;  :arith-assert-upper      628
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        645
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4410
;  :mk-clause               3464
;  :num-allocs              4580358
;  :num-checks              557
;  :propagations            1271
;  :quant-instantiations    424
;  :rlimit-count            273002
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@215@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      447
;  :arith-assert-lower      1094
;  :arith-assert-upper      628
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        645
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4410
;  :mk-clause               3464
;  :num-allocs              4580358
;  :num-checks              558
;  :propagations            1271
;  :quant-instantiations    424
;  :rlimit-count            273050)
(declare-const $k@241@01 $Perm)
(assert ($Perm.isReadVar $k@241@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      448
;  :arith-assert-lower      1096
;  :arith-assert-upper      629
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        646
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4414
;  :mk-clause               3466
;  :num-allocs              4580358
;  :num-checks              559
;  :propagations            1272
;  :quant-instantiations    424
;  :rlimit-count            273246)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@241@01 $Perm.No) (< $Perm.No $k@241@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      448
;  :arith-assert-lower      1096
;  :arith-assert-upper      629
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        646
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4414
;  :mk-clause               3466
;  :num-allocs              4580358
;  :num-checks              560
;  :propagations            1272
;  :quant-instantiations    424
;  :rlimit-count            273296)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@216@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      448
;  :arith-assert-lower      1096
;  :arith-assert-upper      629
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        646
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4414
;  :mk-clause               3466
;  :num-allocs              4580358
;  :num-checks              561
;  :propagations            1272
;  :quant-instantiations    424
;  :rlimit-count            273307)
(assert (< $k@241@01 $k@216@01))
(assert (<= $Perm.No (- $k@216@01 $k@241@01)))
(assert (<= (- $k@216@01 $k@241@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@216@01 $k@241@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_read != null
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      448
;  :arith-assert-lower      1098
;  :arith-assert-upper      630
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        646
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4417
;  :mk-clause               3466
;  :num-allocs              4580358
;  :num-checks              562
;  :propagations            1272
;  :quant-instantiations    424
;  :rlimit-count            273527)
(push) ; 7
(assert (not (< $Perm.No $k@216@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      448
;  :arith-assert-lower      1098
;  :arith-assert-upper      630
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        646
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4417
;  :mk-clause               3466
;  :num-allocs              4580358
;  :num-checks              563
;  :propagations            1272
;  :quant-instantiations    424
;  :rlimit-count            273575)
(declare-const $k@242@01 $Perm)
(assert ($Perm.isReadVar $k@242@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1100
;  :arith-assert-upper      631
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4421
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              564
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            273772)
(push) ; 7
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1100
;  :arith-assert-upper      631
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4421
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              565
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            273820)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@242@01 $Perm.No) (< $Perm.No $k@242@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1100
;  :arith-assert-upper      631
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4421
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              566
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            273870)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@217@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1100
;  :arith-assert-upper      631
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4421
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              567
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            273881)
(assert (< $k@242@01 $k@217@01))
(assert (<= $Perm.No (- $k@217@01 $k@242@01)))
(assert (<= (- $k@217@01 $k@242@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@217@01 $k@242@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1102
;  :arith-assert-upper      632
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4424
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              568
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            274089)
(push) ; 7
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1102
;  :arith-assert-upper      632
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4424
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              569
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            274137
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1102
;  :arith-assert-upper      632
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4424
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              570
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            274185)
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1102
;  :arith-assert-upper      632
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4424
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              571
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            274233)
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 7
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1102
;  :arith-assert-upper      632
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4424
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              572
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            274281)
(push) ; 7
(assert (not (< $Perm.No $k@216@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4634
;  :arith-add-rows          89
;  :arith-assert-diseq      449
;  :arith-assert-lower      1102
;  :arith-assert-upper      632
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        647
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 636
;  :datatype-occurs-check   381
;  :datatype-splits         335
;  :decisions               830
;  :del-clause              3424
;  :final-checks            217
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.52
;  :memory                  4.52
;  :minimized-lits          2
;  :mk-bool-var             4424
;  :mk-clause               3468
;  :num-allocs              4580358
;  :num-checks              573
;  :propagations            1273
;  :quant-instantiations    424
;  :rlimit-count            274329)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@229@01 $Perm.Write))
(assert ($Perm.isReadVar $k@231@01 $Perm.Write))
(assert ($Perm.isReadVar $k@232@01 $Perm.Write))
(assert ($Perm.isReadVar $k@233@01 $Perm.Write))
(assert ($Perm.isReadVar $k@234@01 $Perm.Write))
(assert ($Perm.isReadVar $k@235@01 $Perm.Write))
(assert (= $t@228@01 ($Snap.combine ($Snap.first $t@228@01) ($Snap.second $t@228@01))))
(assert (<= $Perm.No $k@229@01))
(assert (<= $k@229@01 $Perm.Write))
(assert (implies (< $Perm.No $k@229@01) (not (= diz@171@01 $Ref.null))))
(assert (=
  ($Snap.second $t@228@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@228@01))
    ($Snap.second ($Snap.second $t@228@01)))))
(assert (= ($Snap.first ($Snap.second $t@228@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@228@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@228@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@228@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
  $Snap.unit))
(assert (forall ((i__27@230@01 Int)) (!
  (implies
    (and
      (<
        i__27@230@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      (<= 0 i__27@230@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          i__27@230@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i__27@230@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i__27@230@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i__27@230@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
(assert (<= $Perm.No $k@231@01))
(assert (<= $k@231@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@231@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
(assert (<= $Perm.No $k@232@01))
(assert (<= $k@232@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@232@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
(assert (<= $Perm.No $k@233@01))
(assert (<= $k@233@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@233@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
(assert (<= $Perm.No $k@234@01))
(assert (<= $k@234@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@234@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))
(assert (<= $Perm.No $k@235@01))
(assert (<= $k@235@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@235@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  diz@171@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_process_state[2] != -1
; [eval] diz.Read_m.Main_process_state[2]
(push) ; 8
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5071
;  :arith-add-rows          89
;  :arith-assert-diseq      455
;  :arith-assert-lower      1118
;  :arith-assert-upper      646
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        655
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    294
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   397
;  :datatype-splits         403
;  :decisions               902
;  :del-clause              3438
;  :final-checks            221
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4578
;  :mk-clause               3482
;  :num-allocs              4830907
;  :num-checks              576
;  :propagations            1279
;  :quant-instantiations    434
;  :rlimit-count            281013)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5071
;  :arith-add-rows          89
;  :arith-assert-diseq      455
;  :arith-assert-lower      1118
;  :arith-assert-upper      646
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        655
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    294
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   397
;  :datatype-splits         403
;  :decisions               902
;  :del-clause              3438
;  :final-checks            221
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4578
;  :mk-clause               3482
;  :num-allocs              4830907
;  :num-checks              577
;  :propagations            1279
;  :quant-instantiations    434
;  :rlimit-count            281028)
; [eval] -1
(push) ; 8
; [then-branch: 111 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1 | live]
; [else-branch: 111 | First:(Second:(Second:(Second:($t@228@01))))[2] == -1 | live]
(push) ; 9
; [then-branch: 111 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      2)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 111 | First:(Second:(Second:(Second:($t@228@01))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    2)
  (- 0 1)))
; [eval] diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5072
;  :arith-add-rows          89
;  :arith-assert-diseq      455
;  :arith-assert-lower      1118
;  :arith-assert-upper      646
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        655
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    294
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   397
;  :datatype-splits         403
;  :decisions               902
;  :del-clause              3438
;  :final-checks            221
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4579
;  :mk-clause               3482
;  :num-allocs              4830907
;  :num-checks              578
;  :propagations            1279
;  :quant-instantiations    434
;  :rlimit-count            281219)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5072
;  :arith-add-rows          89
;  :arith-assert-diseq      455
;  :arith-assert-lower      1118
;  :arith-assert-upper      646
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        655
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        9
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    294
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   397
;  :datatype-splits         403
;  :decisions               902
;  :del-clause              3438
;  :final-checks            221
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4579
;  :mk-clause               3482
;  :num-allocs              4830907
;  :num-checks              579
;  :propagations            1279
;  :quant-instantiations    434
;  :rlimit-count            281234)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5231
;  :arith-add-rows          89
;  :arith-assert-diseq      458
;  :arith-assert-lower      1129
;  :arith-assert-upper      651
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        660
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    294
;  :datatype-constructor-ax 744
;  :datatype-occurs-check   405
;  :datatype-splits         437
;  :decisions               939
;  :del-clause              3456
;  :final-checks            223
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4638
;  :mk-clause               3500
;  :num-allocs              4830907
;  :num-checks              580
;  :propagations            1287
;  :quant-instantiations    438
;  :rlimit-count            282788)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      458
;  :arith-assert-lower      1129
;  :arith-assert-upper      651
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        660
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3457
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4680
;  :mk-clause               3501
;  :num-allocs              4830907
;  :num-checks              581
;  :propagations            1287
;  :quant-instantiations    438
;  :rlimit-count            284111)
; [then-branch: 112 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))[2] != -2 | live]
; [else-branch: 112 | !(First:(Second:(Second:(Second:($t@228@01))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))[2] != -2) | live]
(push) ; 8
; [then-branch: 112 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
        2)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      458
;  :arith-assert-lower      1129
;  :arith-assert-upper      651
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        660
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3457
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4682
;  :mk-clause               3502
;  :num-allocs              4830907
;  :num-checks              582
;  :propagations            1287
;  :quant-instantiations    438
;  :rlimit-count            284389)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      458
;  :arith-assert-lower      1129
;  :arith-assert-upper      651
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        660
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3457
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4682
;  :mk-clause               3502
;  :num-allocs              4830907
;  :num-checks              583
;  :propagations            1287
;  :quant-instantiations    438
;  :rlimit-count            284437)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@243@01 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 113 | 0 <= i@243@01 | live]
; [else-branch: 113 | !(0 <= i@243@01) | live]
(push) ; 11
; [then-branch: 113 | 0 <= i@243@01]
(assert (<= 0 i@243@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 113 | !(0 <= i@243@01)]
(assert (not (<= 0 i@243@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 114 | i@243@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i@243@01 | live]
; [else-branch: 114 | !(i@243@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i@243@01) | live]
(push) ; 11
; [then-branch: 114 | i@243@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i@243@01]
(assert (and
  (<
    i@243@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  (<= 0 i@243@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@243@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      458
;  :arith-assert-lower      1130
;  :arith-assert-upper      652
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        660
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3457
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4684
;  :mk-clause               3502
;  :num-allocs              4830907
;  :num-checks              584
;  :propagations            1287
;  :quant-instantiations    438
;  :rlimit-count            284573)
; [eval] -1
(push) ; 12
; [then-branch: 115 | First:(Second:(Second:(Second:($t@228@01))))[i@243@01] == -1 | live]
; [else-branch: 115 | First:(Second:(Second:(Second:($t@228@01))))[i@243@01] != -1 | live]
(push) ; 13
; [then-branch: 115 | First:(Second:(Second:(Second:($t@228@01))))[i@243@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i@243@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 115 | First:(Second:(Second:(Second:($t@228@01))))[i@243@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      i@243@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@243@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      459
;  :arith-assert-lower      1133
;  :arith-assert-upper      653
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        661
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3457
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4690
;  :mk-clause               3506
;  :num-allocs              4830907
;  :num-checks              585
;  :propagations            1289
;  :quant-instantiations    439
;  :rlimit-count            284805)
(push) ; 14
; [then-branch: 116 | 0 <= First:(Second:(Second:(Second:($t@228@01))))[i@243@01] | live]
; [else-branch: 116 | !(0 <= First:(Second:(Second:(Second:($t@228@01))))[i@243@01]) | live]
(push) ; 15
; [then-branch: 116 | 0 <= First:(Second:(Second:(Second:($t@228@01))))[i@243@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i@243@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@243@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      459
;  :arith-assert-lower      1133
;  :arith-assert-upper      653
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        661
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3457
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.62
;  :memory                  4.62
;  :minimized-lits          2
;  :mk-bool-var             4690
;  :mk-clause               3506
;  :num-allocs              4830907
;  :num-checks              586
;  :propagations            1289
;  :quant-instantiations    439
;  :rlimit-count            284919)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 116 | !(0 <= First:(Second:(Second:(Second:($t@228@01))))[i@243@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      i@243@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 114 | !(i@243@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i@243@01)]
(assert (not
  (and
    (<
      i@243@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    (<= 0 i@243@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i@243@01 Int)) (!
  (implies
    (and
      (<
        i@243@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      (<= 0 i@243@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          i@243@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i@243@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i@243@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i@243@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      461
;  :arith-assert-lower      1134
;  :arith-assert-upper      654
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        662
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4698
;  :mk-clause               3520
;  :num-allocs              5087095
;  :num-checks              587
;  :propagations            1291
;  :quant-instantiations    440
;  :rlimit-count            285365)
(assert (forall ((i@243@01 Int)) (!
  (implies
    (and
      (<
        i@243@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      (<= 0 i@243@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          i@243@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i@243@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i@243@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i@243@01))
  :qid |prog.l<no position>|)))
(declare-const $k@244@01 $Perm)
(assert ($Perm.isReadVar $k@244@01 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@244@01 $Perm.No) (< $Perm.No $k@244@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      462
;  :arith-assert-lower      1136
;  :arith-assert-upper      655
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        663
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4703
;  :mk-clause               3522
;  :num-allocs              5087095
;  :num-checks              588
;  :propagations            1292
;  :quant-instantiations    440
;  :rlimit-count            285925)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@231@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      462
;  :arith-assert-lower      1136
;  :arith-assert-upper      655
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        663
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4703
;  :mk-clause               3522
;  :num-allocs              5087095
;  :num-checks              589
;  :propagations            1292
;  :quant-instantiations    440
;  :rlimit-count            285936)
(assert (< $k@244@01 $k@231@01))
(assert (<= $Perm.No (- $k@231@01 $k@244@01)))
(assert (<= (- $k@231@01 $k@244@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@231@01 $k@244@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      462
;  :arith-assert-lower      1138
;  :arith-assert-upper      656
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        663
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4706
;  :mk-clause               3522
;  :num-allocs              5087095
;  :num-checks              590
;  :propagations            1292
;  :quant-instantiations    440
;  :rlimit-count            286156)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      462
;  :arith-assert-lower      1138
;  :arith-assert-upper      656
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        663
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4706
;  :mk-clause               3522
;  :num-allocs              5087095
;  :num-checks              591
;  :propagations            1292
;  :quant-instantiations    440
;  :rlimit-count            286204
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      462
;  :arith-assert-lower      1138
;  :arith-assert-upper      656
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        663
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4706
;  :mk-clause               3522
;  :num-allocs              5087095
;  :num-checks              592
;  :propagations            1292
;  :quant-instantiations    440
;  :rlimit-count            286252)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      462
;  :arith-assert-lower      1138
;  :arith-assert-upper      656
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        663
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4706
;  :mk-clause               3522
;  :num-allocs              5087095
;  :num-checks              593
;  :propagations            1292
;  :quant-instantiations    440
;  :rlimit-count            286300)
(declare-const $k@245@01 $Perm)
(assert ($Perm.isReadVar $k@245@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@245@01 $Perm.No) (< $Perm.No $k@245@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      463
;  :arith-assert-lower      1140
;  :arith-assert-upper      657
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        664
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4710
;  :mk-clause               3524
;  :num-allocs              5087095
;  :num-checks              594
;  :propagations            1293
;  :quant-instantiations    440
;  :rlimit-count            286499)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@232@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      463
;  :arith-assert-lower      1140
;  :arith-assert-upper      657
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        664
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4710
;  :mk-clause               3524
;  :num-allocs              5087095
;  :num-checks              595
;  :propagations            1293
;  :quant-instantiations    440
;  :rlimit-count            286510)
(assert (< $k@245@01 $k@232@01))
(assert (<= $Perm.No (- $k@232@01 $k@245@01)))
(assert (<= (- $k@232@01 $k@245@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@232@01 $k@245@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      463
;  :arith-assert-lower      1142
;  :arith-assert-upper      658
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        664
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4713
;  :mk-clause               3524
;  :num-allocs              5087095
;  :num-checks              596
;  :propagations            1293
;  :quant-instantiations    440
;  :rlimit-count            286724
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      463
;  :arith-assert-lower      1142
;  :arith-assert-upper      658
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        664
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4713
;  :mk-clause               3524
;  :num-allocs              5087095
;  :num-checks              597
;  :propagations            1293
;  :quant-instantiations    440
;  :rlimit-count            286772)
(declare-const $k@246@01 $Perm)
(assert ($Perm.isReadVar $k@246@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@246@01 $Perm.No) (< $Perm.No $k@246@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      464
;  :arith-assert-lower      1144
;  :arith-assert-upper      659
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        665
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4717
;  :mk-clause               3526
;  :num-allocs              5087095
;  :num-checks              598
;  :propagations            1294
;  :quant-instantiations    440
;  :rlimit-count            286971)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@233@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      464
;  :arith-assert-lower      1144
;  :arith-assert-upper      659
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        665
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4717
;  :mk-clause               3526
;  :num-allocs              5087095
;  :num-checks              599
;  :propagations            1294
;  :quant-instantiations    440
;  :rlimit-count            286982
;  :time                    0.01)
(assert (< $k@246@01 $k@233@01))
(assert (<= $Perm.No (- $k@233@01 $k@246@01)))
(assert (<= (- $k@233@01 $k@246@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@233@01 $k@246@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      464
;  :arith-assert-lower      1146
;  :arith-assert-upper      660
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        665
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4720
;  :mk-clause               3526
;  :num-allocs              5087095
;  :num-checks              600
;  :propagations            1294
;  :quant-instantiations    440
;  :rlimit-count            287190)
(push) ; 9
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      464
;  :arith-assert-lower      1146
;  :arith-assert-upper      660
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        665
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4720
;  :mk-clause               3526
;  :num-allocs              5087095
;  :num-checks              601
;  :propagations            1294
;  :quant-instantiations    440
;  :rlimit-count            287238)
(declare-const $k@247@01 $Perm)
(assert ($Perm.isReadVar $k@247@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@247@01 $Perm.No) (< $Perm.No $k@247@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      465
;  :arith-assert-lower      1148
;  :arith-assert-upper      661
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        666
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4724
;  :mk-clause               3528
;  :num-allocs              5087095
;  :num-checks              602
;  :propagations            1295
;  :quant-instantiations    440
;  :rlimit-count            287437)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@234@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      465
;  :arith-assert-lower      1148
;  :arith-assert-upper      661
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        666
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4724
;  :mk-clause               3528
;  :num-allocs              5087095
;  :num-checks              603
;  :propagations            1295
;  :quant-instantiations    440
;  :rlimit-count            287448)
(assert (< $k@247@01 $k@234@01))
(assert (<= $Perm.No (- $k@234@01 $k@247@01)))
(assert (<= (- $k@234@01 $k@247@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@234@01 $k@247@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@234@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      465
;  :arith-assert-lower      1150
;  :arith-assert-upper      662
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        666
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4727
;  :mk-clause               3528
;  :num-allocs              5087095
;  :num-checks              604
;  :propagations            1295
;  :quant-instantiations    440
;  :rlimit-count            287662)
(declare-const $k@248@01 $Perm)
(assert ($Perm.isReadVar $k@248@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      466
;  :arith-assert-lower      1152
;  :arith-assert-upper      663
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        667
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4731
;  :mk-clause               3530
;  :num-allocs              5087095
;  :num-checks              605
;  :propagations            1296
;  :quant-instantiations    440
;  :rlimit-count            287859)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@248@01 $Perm.No) (< $Perm.No $k@248@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      466
;  :arith-assert-lower      1152
;  :arith-assert-upper      663
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        667
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4731
;  :mk-clause               3530
;  :num-allocs              5087095
;  :num-checks              606
;  :propagations            1296
;  :quant-instantiations    440
;  :rlimit-count            287909)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@235@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      466
;  :arith-assert-lower      1152
;  :arith-assert-upper      663
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        667
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4731
;  :mk-clause               3530
;  :num-allocs              5087095
;  :num-checks              607
;  :propagations            1296
;  :quant-instantiations    440
;  :rlimit-count            287920)
(assert (< $k@248@01 $k@235@01))
(assert (<= $Perm.No (- $k@235@01 $k@248@01)))
(assert (<= (- $k@235@01 $k@248@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@235@01 $k@248@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
      $Ref.null))))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      466
;  :arith-assert-lower      1154
;  :arith-assert-upper      664
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        667
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4734
;  :mk-clause               3530
;  :num-allocs              5087095
;  :num-checks              608
;  :propagations            1296
;  :quant-instantiations    440
;  :rlimit-count            288134)
(push) ; 9
(assert (not (< $Perm.No $k@235@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5388
;  :arith-add-rows          89
;  :arith-assert-diseq      466
;  :arith-assert-lower      1154
;  :arith-assert-upper      664
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        667
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4734
;  :mk-clause               3530
;  :num-allocs              5087095
;  :num-checks              609
;  :propagations            1296
;  :quant-instantiations    440
;  :rlimit-count            288182)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
                                            $Snap.unit)))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) globals@172@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5432
;  :arith-add-rows          89
;  :arith-assert-diseq      466
;  :arith-assert-lower      1154
;  :arith-assert-upper      664
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        667
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4735
;  :mk-clause               3530
;  :num-allocs              5087095
;  :num-checks              610
;  :propagations            1296
;  :quant-instantiations    440
;  :rlimit-count            289077)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5432
;  :arith-add-rows          89
;  :arith-assert-diseq      466
;  :arith-assert-lower      1154
;  :arith-assert-upper      664
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        667
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        9
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 783
;  :datatype-occurs-check   417
;  :datatype-splits         473
;  :decisions               977
;  :del-clause              3475
;  :final-checks            226
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4735
;  :mk-clause               3530
;  :num-allocs              5087095
;  :num-checks              611
;  :propagations            1296
;  :quant-instantiations    440
;  :rlimit-count            289125)
(declare-const $t@249@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5614
;  :arith-add-rows          90
;  :arith-assert-diseq      469
;  :arith-assert-lower      1165
;  :arith-assert-upper      669
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        672
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        9
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3502
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4792
;  :mk-clause               3547
;  :num-allocs              5087095
;  :num-checks              613
;  :propagations            1304
;  :quant-instantiations    445
;  :rlimit-count            290535)
(assert (= $t@249@01 ($Snap.combine ($Snap.first $t@249@01) ($Snap.second $t@249@01))))
(assert (= ($Snap.first $t@249@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@249@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@249@01))
    ($Snap.second ($Snap.second $t@249@01)))))
(assert (= ($Snap.first ($Snap.second $t@249@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@249@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@249@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@249@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@249@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@250@01 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 117 | 0 <= i@250@01 | live]
; [else-branch: 117 | !(0 <= i@250@01) | live]
(push) ; 11
; [then-branch: 117 | 0 <= i@250@01]
(assert (<= 0 i@250@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 117 | !(0 <= i@250@01)]
(assert (not (<= 0 i@250@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 118 | i@250@01 < |First:(Second:(Second:(Second:($t@249@01))))| && 0 <= i@250@01 | live]
; [else-branch: 118 | !(i@250@01 < |First:(Second:(Second:(Second:($t@249@01))))| && 0 <= i@250@01) | live]
(push) ; 11
; [then-branch: 118 | i@250@01 < |First:(Second:(Second:(Second:($t@249@01))))| && 0 <= i@250@01]
(assert (and
  (<
    i@250@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
  (<= 0 i@250@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@250@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5664
;  :arith-add-rows          90
;  :arith-assert-diseq      469
;  :arith-assert-lower      1170
;  :arith-assert-upper      672
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        674
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        9
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    325
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3502
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4818
;  :mk-clause               3547
;  :num-allocs              5087095
;  :num-checks              614
;  :propagations            1304
;  :quant-instantiations    449
;  :rlimit-count            291839)
; [eval] -1
(push) ; 12
; [then-branch: 119 | First:(Second:(Second:(Second:($t@249@01))))[i@250@01] == -1 | live]
; [else-branch: 119 | First:(Second:(Second:(Second:($t@249@01))))[i@250@01] != -1 | live]
(push) ; 13
; [then-branch: 119 | First:(Second:(Second:(Second:($t@249@01))))[i@250@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    i@250@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 119 | First:(Second:(Second:(Second:($t@249@01))))[i@250@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
      i@250@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@250@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5664
;  :arith-add-rows          90
;  :arith-assert-diseq      469
;  :arith-assert-lower      1170
;  :arith-assert-upper      672
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        674
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        9
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    325
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3502
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4819
;  :mk-clause               3547
;  :num-allocs              5087095
;  :num-checks              615
;  :propagations            1304
;  :quant-instantiations    449
;  :rlimit-count            292014)
(push) ; 14
; [then-branch: 120 | 0 <= First:(Second:(Second:(Second:($t@249@01))))[i@250@01] | live]
; [else-branch: 120 | !(0 <= First:(Second:(Second:(Second:($t@249@01))))[i@250@01]) | live]
(push) ; 15
; [then-branch: 120 | 0 <= First:(Second:(Second:(Second:($t@249@01))))[i@250@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    i@250@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@250@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5664
;  :arith-add-rows          90
;  :arith-assert-diseq      470
;  :arith-assert-lower      1173
;  :arith-assert-upper      672
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        675
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        9
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    325
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3502
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4822
;  :mk-clause               3548
;  :num-allocs              5087095
;  :num-checks              616
;  :propagations            1304
;  :quant-instantiations    449
;  :rlimit-count            292137)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 120 | !(0 <= First:(Second:(Second:(Second:($t@249@01))))[i@250@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
      i@250@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 118 | !(i@250@01 < |First:(Second:(Second:(Second:($t@249@01))))| && 0 <= i@250@01)]
(assert (not
  (and
    (<
      i@250@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
    (<= 0 i@250@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@250@01 Int)) (!
  (implies
    (and
      (<
        i@250@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
      (<= 0 i@250@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
          i@250@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
            i@250@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
            i@250@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    i@250@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))
(declare-const $k@251@01 $Perm)
(assert ($Perm.isReadVar $k@251@01 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@251@01 $Perm.No) (< $Perm.No $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5669
;  :arith-add-rows          90
;  :arith-assert-diseq      471
;  :arith-assert-lower      1175
;  :arith-assert-upper      673
;  :arith-bound-prop        110
;  :arith-conflicts         29
;  :arith-eq-adapter        676
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        9
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    326
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4828
;  :mk-clause               3550
;  :num-allocs              5087095
;  :num-checks              617
;  :propagations            1305
;  :quant-instantiations    449
;  :rlimit-count            292905)
(declare-const $t@252@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@231@01 $k@244@01))
    (=
      $t@252@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
  (implies
    (< $Perm.No $k@251@01)
    (=
      $t@252@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))
(assert (<= $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01)))
(assert (<= (+ (- $k@231@01 $k@244@01) $k@251@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5679
;  :arith-add-rows          91
;  :arith-assert-diseq      471
;  :arith-assert-lower      1176
;  :arith-assert-upper      675
;  :arith-bound-prop        110
;  :arith-conflicts         30
;  :arith-eq-adapter        676
;  :arith-fixed-eqs         119
;  :arith-offset-eqs        9
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    327
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4836
;  :mk-clause               3550
;  :num-allocs              5087095
;  :num-checks              618
;  :propagations            1305
;  :quant-instantiations    450
;  :rlimit-count            293591)
(assert (not (= $t@252@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5685
;  :arith-add-rows          91
;  :arith-assert-diseq      471
;  :arith-assert-lower      1176
;  :arith-assert-upper      676
;  :arith-bound-prop        110
;  :arith-conflicts         31
;  :arith-eq-adapter        676
;  :arith-fixed-eqs         120
;  :arith-offset-eqs        9
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4839
;  :mk-clause               3550
;  :num-allocs              5087095
;  :num-checks              619
;  :propagations            1305
;  :quant-instantiations    450
;  :rlimit-count            293915
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5690
;  :arith-add-rows          91
;  :arith-assert-diseq      471
;  :arith-assert-lower      1176
;  :arith-assert-upper      677
;  :arith-bound-prop        110
;  :arith-conflicts         32
;  :arith-eq-adapter        676
;  :arith-fixed-eqs         121
;  :arith-offset-eqs        9
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4841
;  :mk-clause               3550
;  :num-allocs              5087095
;  :num-checks              620
;  :propagations            1305
;  :quant-instantiations    450
;  :rlimit-count            294204)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5695
;  :arith-add-rows          91
;  :arith-assert-diseq      471
;  :arith-assert-lower      1176
;  :arith-assert-upper      678
;  :arith-bound-prop        110
;  :arith-conflicts         33
;  :arith-eq-adapter        676
;  :arith-fixed-eqs         122
;  :arith-offset-eqs        9
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4843
;  :mk-clause               3550
;  :num-allocs              5087095
;  :num-checks              621
;  :propagations            1305
;  :quant-instantiations    450
;  :rlimit-count            294503)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))
(declare-const $k@253@01 $Perm)
(assert ($Perm.isReadVar $k@253@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@253@01 $Perm.No) (< $Perm.No $k@253@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5700
;  :arith-add-rows          91
;  :arith-assert-diseq      472
;  :arith-assert-lower      1178
;  :arith-assert-upper      679
;  :arith-bound-prop        110
;  :arith-conflicts         33
;  :arith-eq-adapter        677
;  :arith-fixed-eqs         122
;  :arith-offset-eqs        9
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4848
;  :mk-clause               3552
;  :num-allocs              5087095
;  :num-checks              622
;  :propagations            1306
;  :quant-instantiations    450
;  :rlimit-count            294924)
(declare-const $t@254@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@232@01 $k@245@01))
    (=
      $t@254@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  (implies
    (< $Perm.No $k@253@01)
    (=
      $t@254@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@232@01 $k@245@01) $k@253@01)))
(assert (<= (+ (- $k@232@01 $k@245@01) $k@253@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@232@01 $k@245@01) $k@253@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@232@01 $k@245@01) $k@253@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5710
;  :arith-add-rows          92
;  :arith-assert-diseq      472
;  :arith-assert-lower      1179
;  :arith-assert-upper      681
;  :arith-bound-prop        110
;  :arith-conflicts         34
;  :arith-eq-adapter        677
;  :arith-fixed-eqs         123
;  :arith-offset-eqs        9
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    332
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4856
;  :mk-clause               3552
;  :num-allocs              5087095
;  :num-checks              623
;  :propagations            1306
;  :quant-instantiations    451
;  :rlimit-count            295708
;  :time                    0.01)
(assert (not (= $t@254@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@232@01 $k@245@01) $k@253@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5716
;  :arith-add-rows          92
;  :arith-assert-diseq      472
;  :arith-assert-lower      1179
;  :arith-assert-upper      682
;  :arith-bound-prop        110
;  :arith-conflicts         35
;  :arith-eq-adapter        677
;  :arith-fixed-eqs         124
;  :arith-offset-eqs        9
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.74
;  :memory                  4.74
;  :minimized-lits          2
;  :mk-bool-var             4859
;  :mk-clause               3552
;  :num-allocs              5087095
;  :num-checks              624
;  :propagations            1306
;  :quant-instantiations    451
;  :rlimit-count            296080)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))))
(declare-const $k@255@01 $Perm)
(assert ($Perm.isReadVar $k@255@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@255@01 $Perm.No) (< $Perm.No $k@255@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5721
;  :arith-add-rows          92
;  :arith-assert-diseq      473
;  :arith-assert-lower      1181
;  :arith-assert-upper      683
;  :arith-bound-prop        110
;  :arith-conflicts         35
;  :arith-eq-adapter        678
;  :arith-fixed-eqs         124
;  :arith-offset-eqs        9
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    334
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4864
;  :mk-clause               3554
;  :num-allocs              5351187
;  :num-checks              625
;  :propagations            1307
;  :quant-instantiations    451
;  :rlimit-count            296531)
(declare-const $t@256@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@233@01 $k@246@01))
    (=
      $t@256@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  (implies
    (< $Perm.No $k@255@01)
    (=
      $t@256@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@233@01 $k@246@01) $k@255@01)))
(assert (<= (+ (- $k@233@01 $k@246@01) $k@255@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@233@01 $k@246@01) $k@255@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@233@01 $k@246@01) $k@255@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5731
;  :arith-add-rows          93
;  :arith-assert-diseq      473
;  :arith-assert-lower      1182
;  :arith-assert-upper      685
;  :arith-bound-prop        110
;  :arith-conflicts         36
;  :arith-eq-adapter        678
;  :arith-fixed-eqs         125
;  :arith-offset-eqs        9
;  :arith-pivots            220
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    335
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4872
;  :mk-clause               3554
;  :num-allocs              5351187
;  :num-checks              626
;  :propagations            1307
;  :quant-instantiations    452
;  :rlimit-count            297399)
(assert (not (= $t@256@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@233@01 $k@246@01) $k@255@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5737
;  :arith-add-rows          93
;  :arith-assert-diseq      473
;  :arith-assert-lower      1182
;  :arith-assert-upper      686
;  :arith-bound-prop        110
;  :arith-conflicts         37
;  :arith-eq-adapter        678
;  :arith-fixed-eqs         126
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4875
;  :mk-clause               3554
;  :num-allocs              5351187
;  :num-checks              627
;  :propagations            1307
;  :quant-instantiations    452
;  :rlimit-count            297811
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))))))
(declare-const $k@257@01 $Perm)
(assert ($Perm.isReadVar $k@257@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@257@01 $Perm.No) (< $Perm.No $k@257@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5742
;  :arith-add-rows          93
;  :arith-assert-diseq      474
;  :arith-assert-lower      1184
;  :arith-assert-upper      687
;  :arith-bound-prop        110
;  :arith-conflicts         37
;  :arith-eq-adapter        679
;  :arith-fixed-eqs         126
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    337
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4880
;  :mk-clause               3556
;  :num-allocs              5351187
;  :num-checks              628
;  :propagations            1308
;  :quant-instantiations    452
;  :rlimit-count            298292)
(declare-const $t@258@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@234@01 $k@247@01))
    (=
      $t@258@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@257@01)
    (=
      $t@258@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@234@01 $k@247@01) $k@257@01)))
(assert (<= (+ (- $k@234@01 $k@247@01) $k@257@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@234@01 $k@247@01) $k@257@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@234@01 $k@247@01) $k@257@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5752
;  :arith-add-rows          94
;  :arith-assert-diseq      474
;  :arith-assert-lower      1185
;  :arith-assert-upper      689
;  :arith-bound-prop        110
;  :arith-conflicts         38
;  :arith-eq-adapter        679
;  :arith-fixed-eqs         127
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4888
;  :mk-clause               3556
;  :num-allocs              5351187
;  :num-checks              629
;  :propagations            1308
;  :quant-instantiations    453
;  :rlimit-count            298988)
(assert (not (= $t@258@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5757
;  :arith-add-rows          94
;  :arith-assert-diseq      474
;  :arith-assert-lower      1185
;  :arith-assert-upper      690
;  :arith-bound-prop        110
;  :arith-conflicts         39
;  :arith-eq-adapter        679
;  :arith-fixed-eqs         128
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4890
;  :mk-clause               3556
;  :num-allocs              5351187
;  :num-checks              630
;  :propagations            1308
;  :quant-instantiations    453
;  :rlimit-count            299395)
(declare-const $k@259@01 $Perm)
(assert ($Perm.isReadVar $k@259@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@259@01 $Perm.No) (< $Perm.No $k@259@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5757
;  :arith-add-rows          94
;  :arith-assert-diseq      475
;  :arith-assert-lower      1187
;  :arith-assert-upper      691
;  :arith-bound-prop        110
;  :arith-conflicts         39
;  :arith-eq-adapter        680
;  :arith-fixed-eqs         128
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4894
;  :mk-clause               3558
;  :num-allocs              5351187
;  :num-checks              631
;  :propagations            1309
;  :quant-instantiations    453
;  :rlimit-count            299594)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  $t@252@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5757
;  :arith-add-rows          94
;  :arith-assert-diseq      475
;  :arith-assert-lower      1187
;  :arith-assert-upper      691
;  :arith-bound-prop        110
;  :arith-conflicts         39
;  :arith-eq-adapter        680
;  :arith-fixed-eqs         128
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4894
;  :mk-clause               3558
;  :num-allocs              5351187
;  :num-checks              632
;  :propagations            1309
;  :quant-instantiations    453
;  :rlimit-count            299605)
(declare-const $t@260@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@235@01 $k@248@01))
    (=
      $t@260@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@259@01)
    (=
      $t@260@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@235@01 $k@248@01) $k@259@01)))
(assert (<= (+ (- $k@235@01 $k@248@01) $k@259@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@235@01 $k@248@01) $k@259@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5765
;  :arith-add-rows          95
;  :arith-assert-diseq      475
;  :arith-assert-lower      1188
;  :arith-assert-upper      693
;  :arith-bound-prop        110
;  :arith-conflicts         40
;  :arith-eq-adapter        680
;  :arith-fixed-eqs         129
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4901
;  :mk-clause               3558
;  :num-allocs              5351187
;  :num-checks              633
;  :propagations            1309
;  :quant-instantiations    454
;  :rlimit-count            300232)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  $t@252@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5765
;  :arith-add-rows          95
;  :arith-assert-diseq      475
;  :arith-assert-lower      1188
;  :arith-assert-upper      693
;  :arith-bound-prop        110
;  :arith-conflicts         40
;  :arith-eq-adapter        680
;  :arith-fixed-eqs         129
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4901
;  :mk-clause               3558
;  :num-allocs              5351187
;  :num-checks              634
;  :propagations            1309
;  :quant-instantiations    454
;  :rlimit-count            300243
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@235@01 $k@248@01) $k@259@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5765
;  :arith-add-rows          95
;  :arith-assert-diseq      475
;  :arith-assert-lower      1188
;  :arith-assert-upper      694
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        680
;  :arith-fixed-eqs         130
;  :arith-offset-eqs        9
;  :arith-pivots            221
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 819
;  :datatype-occurs-check   447
;  :datatype-splits         507
;  :decisions               1014
;  :del-clause              3503
;  :final-checks            228
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              4.83
;  :memory                  4.83
;  :minimized-lits          2
;  :mk-bool-var             4902
;  :mk-clause               3558
;  :num-allocs              5351187
;  :num-checks              635
;  :propagations            1309
;  :quant-instantiations    454
;  :rlimit-count            300321)
(assert (= $t@260@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@249@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) globals@172@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Read_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5986
;  :arith-add-rows          97
;  :arith-assert-diseq      479
;  :arith-assert-lower      1203
;  :arith-assert-upper      701
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        687
;  :arith-fixed-eqs         133
;  :arith-offset-eqs        9
;  :arith-pivots            227
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 862
;  :datatype-occurs-check   475
;  :datatype-splits         548
;  :decisions               1058
;  :del-clause              3536
;  :final-checks            230
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.18
;  :minimized-lits          2
;  :mk-bool-var             4976
;  :mk-clause               3581
;  :num-allocs              6151636
;  :num-checks              637
;  :propagations            1320
;  :quant-instantiations    460
;  :rlimit-count            302055)
(declare-const $t@261@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@262@01 $Perm)
(assert ($Perm.isReadVar $k@262@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@262@01 $Perm.No) (< $Perm.No $k@262@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1220
;  :arith-assert-upper      709
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5053
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              639
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            303888)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@229@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1220
;  :arith-assert-upper      709
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5053
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              640
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            303899
;  :time                    0.01)
(assert (< $k@262@01 $k@229@01))
(assert (<= $Perm.No (- $k@229@01 $k@262@01)))
(assert (<= (- $k@229@01 $k@262@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@229@01 $k@262@01)) (not (= diz@171@01 $Ref.null))))
; [eval] diz.Read_m != null
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1222
;  :arith-assert-upper      710
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5056
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              641
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304113)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1222
;  :arith-assert-upper      710
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5056
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              642
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304161)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1222
;  :arith-assert-upper      710
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5056
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              643
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304209)
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1222
;  :arith-assert-upper      710
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5056
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              644
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304257)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1222
;  :arith-assert-upper      710
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5056
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              645
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304305)
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1222
;  :arith-assert-upper      710
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5056
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              646
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304353)
; [eval] (forall i__27: Int :: { diz.Read_m.Main_process_state[i__27] } 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|)
(declare-const i__27@263@01 Int)
(push) ; 9
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__27
(push) ; 10
; [then-branch: 121 | 0 <= i__27@263@01 | live]
; [else-branch: 121 | !(0 <= i__27@263@01) | live]
(push) ; 11
; [then-branch: 121 | 0 <= i__27@263@01]
(assert (<= 0 i__27@263@01))
; [eval] i__27 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1223
;  :arith-assert-upper      710
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5057
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              647
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304454)
(pop) ; 11
(push) ; 11
; [else-branch: 121 | !(0 <= i__27@263@01)]
(assert (not (<= 0 i__27@263@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 122 | i__27@263@01 < |First:(Second:(Second:(Second:($t@249@01))))| && 0 <= i__27@263@01 | live]
; [else-branch: 122 | !(i__27@263@01 < |First:(Second:(Second:(Second:($t@249@01))))| && 0 <= i__27@263@01) | live]
(push) ; 11
; [then-branch: 122 | i__27@263@01 < |First:(Second:(Second:(Second:($t@249@01))))| && 0 <= i__27@263@01]
(assert (and
  (<
    i__27@263@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
  (<= 0 i__27@263@01)))
; [eval] diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27] == -1
; [eval] diz.Read_m.Main_process_state[i__27]
(push) ; 12
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1224
;  :arith-assert-upper      711
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5059
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              648
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304611)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__27@263@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      484
;  :arith-assert-lower      1224
;  :arith-assert-upper      711
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        695
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5059
;  :mk-clause               3606
;  :num-allocs              6688576
;  :num-checks              649
;  :propagations            1332
;  :quant-instantiations    466
;  :rlimit-count            304620)
; [eval] -1
(push) ; 12
; [then-branch: 123 | First:(Second:(Second:(Second:($t@249@01))))[i__27@263@01] == -1 | live]
; [else-branch: 123 | First:(Second:(Second:(Second:($t@249@01))))[i__27@263@01] != -1 | live]
(push) ; 13
; [then-branch: 123 | First:(Second:(Second:(Second:($t@249@01))))[i__27@263@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    i__27@263@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 123 | First:(Second:(Second:(Second:($t@249@01))))[i__27@263@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
      i__27@263@01)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__27]
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      485
;  :arith-assert-lower      1227
;  :arith-assert-upper      712
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        696
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5065
;  :mk-clause               3610
;  :num-allocs              6688576
;  :num-checks              650
;  :propagations            1334
;  :quant-instantiations    467
;  :rlimit-count            304891)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__27@263@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      485
;  :arith-assert-lower      1227
;  :arith-assert-upper      712
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        696
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5065
;  :mk-clause               3610
;  :num-allocs              6688576
;  :num-checks              651
;  :propagations            1334
;  :quant-instantiations    467
;  :rlimit-count            304900)
(push) ; 14
; [then-branch: 124 | 0 <= First:(Second:(Second:(Second:($t@249@01))))[i__27@263@01] | live]
; [else-branch: 124 | !(0 <= First:(Second:(Second:(Second:($t@249@01))))[i__27@263@01]) | live]
(push) ; 15
; [then-branch: 124 | 0 <= First:(Second:(Second:(Second:($t@249@01))))[i__27@263@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    i__27@263@01)))
; [eval] diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      485
;  :arith-assert-lower      1227
;  :arith-assert-upper      712
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        696
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5065
;  :mk-clause               3610
;  :num-allocs              6688576
;  :num-checks              652
;  :propagations            1334
;  :quant-instantiations    467
;  :rlimit-count            305053)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__27@263@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      485
;  :arith-assert-lower      1227
;  :arith-assert-upper      712
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        696
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5065
;  :mk-clause               3610
;  :num-allocs              6688576
;  :num-checks              653
;  :propagations            1334
;  :quant-instantiations    467
;  :rlimit-count            305062)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      485
;  :arith-assert-lower      1227
;  :arith-assert-upper      712
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        696
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3559
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5065
;  :mk-clause               3610
;  :num-allocs              6688576
;  :num-checks              654
;  :propagations            1334
;  :quant-instantiations    467
;  :rlimit-count            305110)
(pop) ; 15
(push) ; 15
; [else-branch: 124 | !(0 <= First:(Second:(Second:(Second:($t@249@01))))[i__27@263@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
      i__27@263@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 122 | !(i__27@263@01 < |First:(Second:(Second:(Second:($t@249@01))))| && 0 <= i__27@263@01)]
(assert (not
  (and
    (<
      i__27@263@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
    (<= 0 i__27@263@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__27@263@01 Int)) (!
  (implies
    (and
      (<
        i__27@263@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
      (<= 0 i__27@263@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
          i__27@263@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
            i__27@263@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
            i__27@263@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    i__27@263@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      487
;  :arith-assert-lower      1228
;  :arith-assert-upper      713
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        697
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3577
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5073
;  :mk-clause               3624
;  :num-allocs              6688576
;  :num-checks              655
;  :propagations            1336
;  :quant-instantiations    468
;  :rlimit-count            305556)
(assert (forall ((i__27@263@01 Int)) (!
  (implies
    (and
      (<
        i__27@263@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
      (<= 0 i__27@263@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
          i__27@263@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
            i__27@263@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
            i__27@263@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    i__27@263@01))
  :qid |prog.l<no position>|)))
(declare-const $k@264@01 $Perm)
(assert ($Perm.isReadVar $k@264@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      488
;  :arith-assert-lower      1230
;  :arith-assert-upper      714
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        698
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3577
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5078
;  :mk-clause               3626
;  :num-allocs              6688576
;  :num-checks              656
;  :propagations            1337
;  :quant-instantiations    468
;  :rlimit-count            306115
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@264@01 $Perm.No) (< $Perm.No $k@264@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6208
;  :arith-add-rows          99
;  :arith-assert-diseq      488
;  :arith-assert-lower      1230
;  :arith-assert-upper      714
;  :arith-bound-prop        110
;  :arith-conflicts         41
;  :arith-eq-adapter        698
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3577
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5078
;  :mk-clause               3626
;  :num-allocs              6688576
;  :num-checks              657
;  :propagations            1337
;  :quant-instantiations    468
;  :rlimit-count            306165)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@231@01 $k@244@01) $k@251@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          99
;  :arith-assert-diseq      488
;  :arith-assert-lower      1230
;  :arith-assert-upper      715
;  :arith-bound-prop        110
;  :arith-conflicts         42
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5080
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              658
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306245)
(assert (< $k@264@01 (+ (- $k@231@01 $k@244@01) $k@251@01)))
(assert (<= $Perm.No (- (+ (- $k@231@01 $k@244@01) $k@251@01) $k@264@01)))
(assert (<= (- (+ (- $k@231@01 $k@244@01) $k@251@01) $k@264@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@231@01 $k@244@01) $k@251@01) $k@264@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      488
;  :arith-assert-lower      1232
;  :arith-assert-upper      716
;  :arith-bound-prop        110
;  :arith-conflicts         42
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         136
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5083
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              659
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306481)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      488
;  :arith-assert-lower      1232
;  :arith-assert-upper      717
;  :arith-bound-prop        110
;  :arith-conflicts         43
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         137
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5084
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              660
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306562)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      488
;  :arith-assert-lower      1232
;  :arith-assert-upper      717
;  :arith-bound-prop        110
;  :arith-conflicts         43
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         137
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5084
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              661
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306610)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      488
;  :arith-assert-lower      1232
;  :arith-assert-upper      718
;  :arith-bound-prop        110
;  :arith-conflicts         44
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         138
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5085
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              662
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306691)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      488
;  :arith-assert-lower      1232
;  :arith-assert-upper      718
;  :arith-bound-prop        110
;  :arith-conflicts         44
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         138
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5085
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              663
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306739)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      488
;  :arith-assert-lower      1232
;  :arith-assert-upper      719
;  :arith-bound-prop        110
;  :arith-conflicts         45
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         139
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5086
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              664
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306820)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      488
;  :arith-assert-lower      1232
;  :arith-assert-upper      719
;  :arith-bound-prop        110
;  :arith-conflicts         45
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         139
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5086
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              665
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306868
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      488
;  :arith-assert-lower      1232
;  :arith-assert-upper      720
;  :arith-bound-prop        110
;  :arith-conflicts         46
;  :arith-eq-adapter        699
;  :arith-fixed-eqs         140
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5087
;  :mk-clause               3628
;  :num-allocs              6688576
;  :num-checks              666
;  :propagations            1338
;  :quant-instantiations    468
;  :rlimit-count            306949)
(declare-const $k@265@01 $Perm)
(assert ($Perm.isReadVar $k@265@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      489
;  :arith-assert-lower      1234
;  :arith-assert-upper      721
;  :arith-bound-prop        110
;  :arith-conflicts         46
;  :arith-eq-adapter        700
;  :arith-fixed-eqs         140
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5091
;  :mk-clause               3630
;  :num-allocs              6688576
;  :num-checks              667
;  :propagations            1339
;  :quant-instantiations    468
;  :rlimit-count            307146)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@265@01 $Perm.No) (< $Perm.No $k@265@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6209
;  :arith-add-rows          101
;  :arith-assert-diseq      489
;  :arith-assert-lower      1234
;  :arith-assert-upper      721
;  :arith-bound-prop        110
;  :arith-conflicts         46
;  :arith-eq-adapter        700
;  :arith-fixed-eqs         140
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3579
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5091
;  :mk-clause               3630
;  :num-allocs              6688576
;  :num-checks              668
;  :propagations            1339
;  :quant-instantiations    468
;  :rlimit-count            307196)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@232@01 $k@245@01) $k@253@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6210
;  :arith-add-rows          101
;  :arith-assert-diseq      489
;  :arith-assert-lower      1234
;  :arith-assert-upper      722
;  :arith-bound-prop        110
;  :arith-conflicts         47
;  :arith-eq-adapter        701
;  :arith-fixed-eqs         140
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3581
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5093
;  :mk-clause               3632
;  :num-allocs              6688576
;  :num-checks              669
;  :propagations            1340
;  :quant-instantiations    468
;  :rlimit-count            307274
;  :time                    0.01)
(assert (< $k@265@01 (+ (- $k@232@01 $k@245@01) $k@253@01)))
(assert (<= $Perm.No (- (+ (- $k@232@01 $k@245@01) $k@253@01) $k@265@01)))
(assert (<= (- (+ (- $k@232@01 $k@245@01) $k@253@01) $k@265@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@232@01 $k@245@01) $k@253@01) $k@265@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6210
;  :arith-add-rows          102
;  :arith-assert-diseq      489
;  :arith-assert-lower      1236
;  :arith-assert-upper      723
;  :arith-bound-prop        110
;  :arith-conflicts         47
;  :arith-eq-adapter        701
;  :arith-fixed-eqs         140
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3581
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5096
;  :mk-clause               3632
;  :num-allocs              6688576
;  :num-checks              670
;  :propagations            1340
;  :quant-instantiations    468
;  :rlimit-count            307509)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@232@01 $k@245@01) $k@253@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6210
;  :arith-add-rows          102
;  :arith-assert-diseq      489
;  :arith-assert-lower      1236
;  :arith-assert-upper      724
;  :arith-bound-prop        110
;  :arith-conflicts         48
;  :arith-eq-adapter        701
;  :arith-fixed-eqs         141
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3581
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5097
;  :mk-clause               3632
;  :num-allocs              6688576
;  :num-checks              671
;  :propagations            1340
;  :quant-instantiations    468
;  :rlimit-count            307587)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6210
;  :arith-add-rows          102
;  :arith-assert-diseq      489
;  :arith-assert-lower      1236
;  :arith-assert-upper      724
;  :arith-bound-prop        110
;  :arith-conflicts         48
;  :arith-eq-adapter        701
;  :arith-fixed-eqs         141
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3581
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5097
;  :mk-clause               3632
;  :num-allocs              6688576
;  :num-checks              672
;  :propagations            1340
;  :quant-instantiations    468
;  :rlimit-count            307635)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@232@01 $k@245@01) $k@253@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6210
;  :arith-add-rows          102
;  :arith-assert-diseq      489
;  :arith-assert-lower      1236
;  :arith-assert-upper      725
;  :arith-bound-prop        110
;  :arith-conflicts         49
;  :arith-eq-adapter        701
;  :arith-fixed-eqs         142
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3581
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5098
;  :mk-clause               3632
;  :num-allocs              6688576
;  :num-checks              673
;  :propagations            1340
;  :quant-instantiations    468
;  :rlimit-count            307713)
(declare-const $k@266@01 $Perm)
(assert ($Perm.isReadVar $k@266@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6210
;  :arith-add-rows          102
;  :arith-assert-diseq      490
;  :arith-assert-lower      1238
;  :arith-assert-upper      726
;  :arith-bound-prop        110
;  :arith-conflicts         49
;  :arith-eq-adapter        702
;  :arith-fixed-eqs         142
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3581
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5102
;  :mk-clause               3634
;  :num-allocs              6688576
;  :num-checks              674
;  :propagations            1341
;  :quant-instantiations    468
;  :rlimit-count            307909)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@266@01 $Perm.No) (< $Perm.No $k@266@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6210
;  :arith-add-rows          102
;  :arith-assert-diseq      490
;  :arith-assert-lower      1238
;  :arith-assert-upper      726
;  :arith-bound-prop        110
;  :arith-conflicts         49
;  :arith-eq-adapter        702
;  :arith-fixed-eqs         142
;  :arith-offset-eqs        9
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3581
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5102
;  :mk-clause               3634
;  :num-allocs              6688576
;  :num-checks              675
;  :propagations            1341
;  :quant-instantiations    468
;  :rlimit-count            307959)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@233@01 $k@246@01) $k@255@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6211
;  :arith-add-rows          102
;  :arith-assert-diseq      490
;  :arith-assert-lower      1238
;  :arith-assert-upper      727
;  :arith-bound-prop        110
;  :arith-conflicts         50
;  :arith-eq-adapter        703
;  :arith-fixed-eqs         142
;  :arith-offset-eqs        9
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3583
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5104
;  :mk-clause               3636
;  :num-allocs              6688576
;  :num-checks              676
;  :propagations            1342
;  :quant-instantiations    468
;  :rlimit-count            308047)
(assert (< $k@266@01 (+ (- $k@233@01 $k@246@01) $k@255@01)))
(assert (<= $Perm.No (- (+ (- $k@233@01 $k@246@01) $k@255@01) $k@266@01)))
(assert (<= (- (+ (- $k@233@01 $k@246@01) $k@255@01) $k@266@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@233@01 $k@246@01) $k@255@01) $k@266@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6211
;  :arith-add-rows          103
;  :arith-assert-diseq      490
;  :arith-assert-lower      1240
;  :arith-assert-upper      728
;  :arith-bound-prop        110
;  :arith-conflicts         50
;  :arith-eq-adapter        703
;  :arith-fixed-eqs         142
;  :arith-offset-eqs        9
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3583
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5107
;  :mk-clause               3636
;  :num-allocs              6688576
;  :num-checks              677
;  :propagations            1342
;  :quant-instantiations    468
;  :rlimit-count            308288)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@233@01 $k@246@01) $k@255@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6211
;  :arith-add-rows          103
;  :arith-assert-diseq      490
;  :arith-assert-lower      1240
;  :arith-assert-upper      729
;  :arith-bound-prop        110
;  :arith-conflicts         51
;  :arith-eq-adapter        703
;  :arith-fixed-eqs         143
;  :arith-offset-eqs        9
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3583
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5108
;  :mk-clause               3636
;  :num-allocs              6688576
;  :num-checks              678
;  :propagations            1342
;  :quant-instantiations    468
;  :rlimit-count            308377)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6211
;  :arith-add-rows          103
;  :arith-assert-diseq      490
;  :arith-assert-lower      1240
;  :arith-assert-upper      729
;  :arith-bound-prop        110
;  :arith-conflicts         51
;  :arith-eq-adapter        703
;  :arith-fixed-eqs         143
;  :arith-offset-eqs        9
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3583
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5108
;  :mk-clause               3636
;  :num-allocs              6688576
;  :num-checks              679
;  :propagations            1342
;  :quant-instantiations    468
;  :rlimit-count            308425
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@233@01 $k@246@01) $k@255@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6211
;  :arith-add-rows          103
;  :arith-assert-diseq      490
;  :arith-assert-lower      1240
;  :arith-assert-upper      730
;  :arith-bound-prop        110
;  :arith-conflicts         52
;  :arith-eq-adapter        703
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        9
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3583
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5109
;  :mk-clause               3636
;  :num-allocs              6688576
;  :num-checks              680
;  :propagations            1342
;  :quant-instantiations    468
;  :rlimit-count            308514)
(declare-const $k@267@01 $Perm)
(assert ($Perm.isReadVar $k@267@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6211
;  :arith-add-rows          103
;  :arith-assert-diseq      491
;  :arith-assert-lower      1242
;  :arith-assert-upper      731
;  :arith-bound-prop        110
;  :arith-conflicts         52
;  :arith-eq-adapter        704
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        9
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3583
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5113
;  :mk-clause               3638
;  :num-allocs              6688576
;  :num-checks              681
;  :propagations            1343
;  :quant-instantiations    468
;  :rlimit-count            308710)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@267@01 $Perm.No) (< $Perm.No $k@267@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6211
;  :arith-add-rows          103
;  :arith-assert-diseq      491
;  :arith-assert-lower      1242
;  :arith-assert-upper      731
;  :arith-bound-prop        110
;  :arith-conflicts         52
;  :arith-eq-adapter        704
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        9
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3583
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5113
;  :mk-clause               3638
;  :num-allocs              6688576
;  :num-checks              682
;  :propagations            1343
;  :quant-instantiations    468
;  :rlimit-count            308760)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@234@01 $k@247@01) $k@257@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6212
;  :arith-add-rows          103
;  :arith-assert-diseq      491
;  :arith-assert-lower      1242
;  :arith-assert-upper      732
;  :arith-bound-prop        110
;  :arith-conflicts         53
;  :arith-eq-adapter        705
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        9
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3585
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5115
;  :mk-clause               3640
;  :num-allocs              6688576
;  :num-checks              683
;  :propagations            1344
;  :quant-instantiations    468
;  :rlimit-count            308838)
(assert (< $k@267@01 (+ (- $k@234@01 $k@247@01) $k@257@01)))
(assert (<= $Perm.No (- (+ (- $k@234@01 $k@247@01) $k@257@01) $k@267@01)))
(assert (<= (- (+ (- $k@234@01 $k@247@01) $k@257@01) $k@267@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@234@01 $k@247@01) $k@257@01) $k@267@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6212
;  :arith-add-rows          104
;  :arith-assert-diseq      491
;  :arith-assert-lower      1244
;  :arith-assert-upper      733
;  :arith-bound-prop        110
;  :arith-conflicts         53
;  :arith-eq-adapter        705
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3585
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5118
;  :mk-clause               3640
;  :num-allocs              6688576
;  :num-checks              684
;  :propagations            1344
;  :quant-instantiations    468
;  :rlimit-count            309080)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@234@01 $k@247@01) $k@257@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6212
;  :arith-add-rows          104
;  :arith-assert-diseq      491
;  :arith-assert-lower      1244
;  :arith-assert-upper      734
;  :arith-bound-prop        110
;  :arith-conflicts         54
;  :arith-eq-adapter        705
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3585
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5119
;  :mk-clause               3640
;  :num-allocs              6688576
;  :num-checks              685
;  :propagations            1344
;  :quant-instantiations    468
;  :rlimit-count            309158)
(declare-const $k@268@01 $Perm)
(assert ($Perm.isReadVar $k@268@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6212
;  :arith-add-rows          104
;  :arith-assert-diseq      492
;  :arith-assert-lower      1246
;  :arith-assert-upper      735
;  :arith-bound-prop        110
;  :arith-conflicts         54
;  :arith-eq-adapter        706
;  :arith-fixed-eqs         145
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3585
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5123
;  :mk-clause               3642
;  :num-allocs              6688576
;  :num-checks              686
;  :propagations            1345
;  :quant-instantiations    468
;  :rlimit-count            309355)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6212
;  :arith-add-rows          104
;  :arith-assert-diseq      492
;  :arith-assert-lower      1246
;  :arith-assert-upper      736
;  :arith-bound-prop        110
;  :arith-conflicts         55
;  :arith-eq-adapter        706
;  :arith-fixed-eqs         146
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3585
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5124
;  :mk-clause               3642
;  :num-allocs              6688576
;  :num-checks              687
;  :propagations            1345
;  :quant-instantiations    468
;  :rlimit-count            309436
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@268@01 $Perm.No) (< $Perm.No $k@268@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6212
;  :arith-add-rows          104
;  :arith-assert-diseq      492
;  :arith-assert-lower      1246
;  :arith-assert-upper      736
;  :arith-bound-prop        110
;  :arith-conflicts         55
;  :arith-eq-adapter        706
;  :arith-fixed-eqs         146
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3585
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5124
;  :mk-clause               3642
;  :num-allocs              6688576
;  :num-checks              688
;  :propagations            1345
;  :quant-instantiations    468
;  :rlimit-count            309486)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  $t@252@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6212
;  :arith-add-rows          104
;  :arith-assert-diseq      492
;  :arith-assert-lower      1246
;  :arith-assert-upper      736
;  :arith-bound-prop        110
;  :arith-conflicts         55
;  :arith-eq-adapter        706
;  :arith-fixed-eqs         146
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3585
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5124
;  :mk-clause               3642
;  :num-allocs              6688576
;  :num-checks              689
;  :propagations            1345
;  :quant-instantiations    468
;  :rlimit-count            309497)
(push) ; 9
(assert (not (not (= (+ (- $k@235@01 $k@248@01) $k@259@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          104
;  :arith-assert-diseq      492
;  :arith-assert-lower      1246
;  :arith-assert-upper      737
;  :arith-bound-prop        110
;  :arith-conflicts         56
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         146
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5126
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              690
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            309575)
(assert (< $k@268@01 (+ (- $k@235@01 $k@248@01) $k@259@01)))
(assert (<= $Perm.No (- (+ (- $k@235@01 $k@248@01) $k@259@01) $k@268@01)))
(assert (<= (- (+ (- $k@235@01 $k@248@01) $k@259@01) $k@268@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@235@01 $k@248@01) $k@259@01) $k@268@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          105
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      738
;  :arith-bound-prop        110
;  :arith-conflicts         56
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         146
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5129
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              691
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            309810)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@231@01 $k@244@01) $k@251@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          105
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      739
;  :arith-bound-prop        110
;  :arith-conflicts         57
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         147
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5130
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              692
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            309891)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  $t@252@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          105
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      739
;  :arith-bound-prop        110
;  :arith-conflicts         57
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         147
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5130
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              693
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            309902)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@235@01 $k@248@01) $k@259@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          105
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      740
;  :arith-bound-prop        110
;  :arith-conflicts         58
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         148
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5131
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              694
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            309980)
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          105
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      740
;  :arith-bound-prop        110
;  :arith-conflicts         58
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         148
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5131
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              695
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            310028)
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 9
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          105
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      740
;  :arith-bound-prop        110
;  :arith-conflicts         58
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         148
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5131
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              696
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            310076)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@234@01 $k@247@01) $k@257@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          105
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      741
;  :arith-bound-prop        110
;  :arith-conflicts         59
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         149
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5132
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              697
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            310154
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (= $t@258@01 diz@171@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6213
;  :arith-add-rows          105
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      741
;  :arith-bound-prop        110
;  :arith-conflicts         59
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         149
;  :arith-offset-eqs        9
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 905
;  :datatype-occurs-check   503
;  :datatype-splits         589
;  :decisions               1102
;  :del-clause              3587
;  :final-checks            232
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.19
;  :minimized-lits          2
;  :mk-bool-var             5132
;  :mk-clause               3644
;  :num-allocs              6688576
;  :num-checks              698
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            310165)
(assert (= $t@258@01 diz@171@01))
(pop) ; 8
(push) ; 8
; [else-branch: 112 | !(First:(Second:(Second:(Second:($t@228@01))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
          2)
        (- 0 2))))))
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6414
;  :arith-add-rows          106
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      741
;  :arith-bound-prop        110
;  :arith-conflicts         59
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         149
;  :arith-offset-eqs        9
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 955
;  :datatype-occurs-check   515
;  :datatype-splits         625
;  :decisions               1151
;  :del-clause              3601
;  :final-checks            235
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5172
;  :mk-clause               3645
;  :num-allocs              6964937
;  :num-checks              699
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            311791)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6581
;  :arith-add-rows          106
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      741
;  :arith-bound-prop        110
;  :arith-conflicts         59
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         149
;  :arith-offset-eqs        9
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1005
;  :datatype-occurs-check   527
;  :datatype-splits         661
;  :decisions               1200
;  :del-clause              3602
;  :final-checks            238
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5212
;  :mk-clause               3646
;  :num-allocs              6964937
;  :num-checks              700
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            313105
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6748
;  :arith-add-rows          106
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      741
;  :arith-bound-prop        110
;  :arith-conflicts         59
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         149
;  :arith-offset-eqs        9
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1055
;  :datatype-occurs-check   539
;  :datatype-splits         697
;  :decisions               1249
;  :del-clause              3603
;  :final-checks            241
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5252
;  :mk-clause               3647
;  :num-allocs              6964937
;  :num-checks              701
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            314419)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6915
;  :arith-add-rows          106
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      741
;  :arith-bound-prop        110
;  :arith-conflicts         59
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         149
;  :arith-offset-eqs        9
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    343
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   551
;  :datatype-splits         733
;  :decisions               1298
;  :del-clause              3604
;  :final-checks            244
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5292
;  :mk-clause               3648
;  :num-allocs              6964937
;  :num-checks              702
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            315733)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7082
;  :arith-add-rows          106
;  :arith-assert-diseq      492
;  :arith-assert-lower      1248
;  :arith-assert-upper      741
;  :arith-bound-prop        110
;  :arith-conflicts         59
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         149
;  :arith-offset-eqs        9
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1155
;  :datatype-occurs-check   563
;  :datatype-splits         769
;  :decisions               1347
;  :del-clause              3605
;  :final-checks            247
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5332
;  :mk-clause               3649
;  :num-allocs              6964937
;  :num-checks              703
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            317047
;  :time                    0.01)
(declare-const $t@269@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@229@01)
    (= $t@269@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))))
  (implies
    (< $Perm.No (- $k@211@01 $k@236@01))
    (= $t@269@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))))))
(assert (<= $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01))))
(assert (<= (+ $k@229@01 (- $k@211@01 $k@236@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))
  (not (= diz@171@01 $Ref.null))))
; [eval] !(diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2)
; [eval] diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_process_state[2] != -1
; [eval] diz.Read_m.Main_process_state[2]
(push) ; 8
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7089
;  :arith-add-rows          107
;  :arith-assert-diseq      492
;  :arith-assert-lower      1249
;  :arith-assert-upper      743
;  :arith-bound-prop        110
;  :arith-conflicts         60
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         150
;  :arith-offset-eqs        9
;  :arith-pivots            249
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1155
;  :datatype-occurs-check   563
;  :datatype-splits         769
;  :decisions               1347
;  :del-clause              3605
;  :final-checks            247
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5337
;  :mk-clause               3649
;  :num-allocs              6964937
;  :num-checks              704
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            317390)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7089
;  :arith-add-rows          107
;  :arith-assert-diseq      492
;  :arith-assert-lower      1249
;  :arith-assert-upper      743
;  :arith-bound-prop        110
;  :arith-conflicts         60
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         150
;  :arith-offset-eqs        9
;  :arith-pivots            249
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1155
;  :datatype-occurs-check   563
;  :datatype-splits         769
;  :decisions               1347
;  :del-clause              3605
;  :final-checks            247
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5338
;  :mk-clause               3649
;  :num-allocs              6964937
;  :num-checks              705
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            317470)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7089
;  :arith-add-rows          107
;  :arith-assert-diseq      492
;  :arith-assert-lower      1249
;  :arith-assert-upper      743
;  :arith-bound-prop        110
;  :arith-conflicts         60
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         150
;  :arith-offset-eqs        9
;  :arith-pivots            249
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1155
;  :datatype-occurs-check   563
;  :datatype-splits         769
;  :decisions               1347
;  :del-clause              3605
;  :final-checks            247
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5338
;  :mk-clause               3649
;  :num-allocs              6964937
;  :num-checks              706
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            317485)
; [eval] -1
(push) ; 8
; [then-branch: 125 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1 | live]
; [else-branch: 125 | First:(Second:(Second:(Second:($t@228@01))))[2] == -1 | live]
(push) ; 9
; [then-branch: 125 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      2)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 125 | First:(Second:(Second:(Second:($t@228@01))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    2)
  (- 0 1)))
; [eval] diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7090
;  :arith-add-rows          107
;  :arith-assert-diseq      492
;  :arith-assert-lower      1249
;  :arith-assert-upper      744
;  :arith-bound-prop        110
;  :arith-conflicts         61
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         151
;  :arith-offset-eqs        9
;  :arith-pivots            249
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1155
;  :datatype-occurs-check   563
;  :datatype-splits         769
;  :decisions               1347
;  :del-clause              3605
;  :final-checks            247
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5340
;  :mk-clause               3649
;  :num-allocs              6964937
;  :num-checks              707
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            317708
;  :time                    0.00)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7090
;  :arith-add-rows          107
;  :arith-assert-diseq      492
;  :arith-assert-lower      1249
;  :arith-assert-upper      744
;  :arith-bound-prop        110
;  :arith-conflicts         61
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         151
;  :arith-offset-eqs        9
;  :arith-pivots            249
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1155
;  :datatype-occurs-check   563
;  :datatype-splits         769
;  :decisions               1347
;  :del-clause              3605
;  :final-checks            247
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5341
;  :mk-clause               3649
;  :num-allocs              6964937
;  :num-checks              708
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            317788)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7090
;  :arith-add-rows          107
;  :arith-assert-diseq      492
;  :arith-assert-lower      1249
;  :arith-assert-upper      744
;  :arith-bound-prop        110
;  :arith-conflicts         61
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         151
;  :arith-offset-eqs        9
;  :arith-pivots            249
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1155
;  :datatype-occurs-check   563
;  :datatype-splits         769
;  :decisions               1347
;  :del-clause              3605
;  :final-checks            247
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5341
;  :mk-clause               3649
;  :num-allocs              6964937
;  :num-checks              709
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            317803)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7240
;  :arith-add-rows          107
;  :arith-assert-diseq      492
;  :arith-assert-lower      1249
;  :arith-assert-upper      744
;  :arith-bound-prop        110
;  :arith-conflicts         61
;  :arith-eq-adapter        707
;  :arith-fixed-eqs         151
;  :arith-offset-eqs        9
;  :arith-pivots            249
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1193
;  :datatype-occurs-check   575
;  :datatype-splits         804
;  :decisions               1384
;  :del-clause              3606
;  :final-checks            250
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5382
;  :mk-clause               3650
;  :num-allocs              6964937
;  :num-checks              710
;  :propagations            1346
;  :quant-instantiations    468
;  :rlimit-count            319113
;  :time                    0.00)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7392
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      749
;  :arith-bound-prop        110
;  :arith-conflicts         61
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         153
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5440
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              711
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            320613)
; [then-branch: 126 | !(First:(Second:(Second:(Second:($t@228@01))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))[2] != -2) | live]
; [else-branch: 126 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))[2] != -2 | live]
(push) ; 8
; [then-branch: 126 | !(First:(Second:(Second:(Second:($t@228@01))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
          2)
        (- 0 2))))))
; [exec]
; __flatten_30__20 := diz.Read_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7394
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      750
;  :arith-bound-prop        110
;  :arith-conflicts         62
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         154
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5443
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              712
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            320897)
; [exec]
; __flatten_29__19 := __flatten_30__20.Main_nand
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7394
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      750
;  :arith-bound-prop        110
;  :arith-conflicts         62
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         154
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5443
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              713
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            320908
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (- $k@213@01 $k@238@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7394
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      750
;  :arith-bound-prop        110
;  :arith-conflicts         62
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         154
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5443
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              714
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            320927)
(declare-const __flatten_29__19@270@01 $Ref)
(assert (=
  __flatten_29__19@270@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
; [exec]
; __flatten_33__23 := diz.Read_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7395
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      751
;  :arith-bound-prop        110
;  :arith-conflicts         63
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         155
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5445
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              715
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            321144)
; [exec]
; __flatten_32__22 := __flatten_33__23.Main_nand
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7395
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      751
;  :arith-bound-prop        110
;  :arith-conflicts         63
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         155
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5445
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              716
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            321155)
(push) ; 9
(assert (not (< $Perm.No (- $k@213@01 $k@238@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7395
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      751
;  :arith-bound-prop        110
;  :arith-conflicts         63
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         155
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5445
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              717
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            321174
;  :time                    0.01)
(declare-const __flatten_32__22@271@01 $Ref)
(assert (=
  __flatten_32__22@271@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
; [exec]
; __flatten_35__25 := diz.Read_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7396
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5447
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              718
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            321291)
; [exec]
; __flatten_34__24 := __flatten_35__25.Main_nand
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7396
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5447
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              719
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            321302)
(push) ; 9
(assert (not (< $Perm.No (- $k@213@01 $k@238@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7396
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1228
;  :datatype-occurs-check   582
;  :datatype-splits         837
;  :decisions               1420
;  :del-clause              3624
;  :final-checks            252
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5447
;  :mk-clause               3668
;  :num-allocs              6964937
;  :num-checks              720
;  :propagations            1354
;  :quant-instantiations    472
;  :rlimit-count            321321)
(declare-const __flatten_34__24@272@01 $Ref)
(assert (=
  __flatten_34__24@272@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))
; [exec]
; __flatten_31__21 := !(__flatten_32__22.Nand_gate_A && __flatten_34__24.Nand_gate_B)
; [eval] !(__flatten_32__22.Nand_gate_A && __flatten_34__24.Nand_gate_B)
; [eval] __flatten_32__22.Nand_gate_A && __flatten_34__24.Nand_gate_B
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  __flatten_32__22@271@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7579
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1279
;  :datatype-occurs-check   594
;  :datatype-splits         874
;  :decisions               1468
;  :del-clause              3626
;  :final-checks            255
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5494
;  :mk-clause               3670
;  :num-allocs              6964937
;  :num-checks              721
;  :propagations            1355
;  :quant-instantiations    472
;  :rlimit-count            322802)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8041
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5605
;  :mk-clause               3672
;  :num-allocs              6964937
;  :num-checks              724
;  :propagations            1357
;  :quant-instantiations    472
;  :rlimit-count            326384
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8041
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5606
;  :mk-clause               3672
;  :num-allocs              6964937
;  :num-checks              725
;  :propagations            1357
;  :quant-instantiations    472
;  :rlimit-count            326464)
(declare-const $t@273@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8041
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5607
;  :mk-clause               3672
;  :num-allocs              6964937
;  :num-checks              726
;  :propagations            1357
;  :quant-instantiations    472
;  :rlimit-count            326544)
(declare-const $t@274@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8041
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5608
;  :mk-clause               3672
;  :num-allocs              6964937
;  :num-checks              727
;  :propagations            1357
;  :quant-instantiations    472
;  :rlimit-count            326624
;  :time                    0.01)
(declare-const $t@275@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8041
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5609
;  :mk-clause               3672
;  :num-allocs              6964937
;  :num-checks              728
;  :propagations            1357
;  :quant-instantiations    472
;  :rlimit-count            326704)
(declare-const $t@276@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@234@01)
    (=
      $t@273@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@216@01 $k@241@01))
    (=
      $t@273@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@233@01)
    (=
      $t@274@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@215@01 $k@240@01))
    (=
      $t@274@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@232@01)
    (=
      $t@275@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  (implies
    (< $Perm.No (- $k@214@01 $k@239@01))
    (=
      $t@275@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@231@01)
    (=
      $t@276@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
  (implies
    (< $Perm.No (- $k@213@01 $k@238@01))
    (=
      $t@276@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8054
;  :arith-add-rows          108
;  :arith-assert-diseq      495
;  :arith-assert-lower      1260
;  :arith-assert-upper      752
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5616
;  :mk-clause               3672
;  :num-allocs              6964937
;  :num-checks              729
;  :propagations            1357
;  :quant-instantiations    472
;  :rlimit-count            327709)
(declare-const $t@277@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@217@01 $k@242@01))
    (=
      $t@277@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@235@01)
    (=
      $t@277@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@231@01 (- $k@213@01 $k@238@01))))
(assert (<= (+ $k@231@01 (- $k@213@01 $k@238@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@231@01 (- $k@213@01 $k@238@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (<= $Perm.No (+ $k@232@01 (- $k@214@01 $k@239@01))))
(assert (<= (+ $k@232@01 (- $k@214@01 $k@239@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@232@01 (- $k@214@01 $k@239@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (<= $Perm.No (+ $k@233@01 (- $k@215@01 $k@240@01))))
(assert (<= (+ $k@233@01 (- $k@215@01 $k@240@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@233@01 (- $k@215@01 $k@240@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (<= $Perm.No (+ $k@234@01 (- $k@216@01 $k@241@01))))
(assert (<= (+ $k@234@01 (- $k@216@01 $k@241@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@234@01 (- $k@216@01 $k@241@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@217@01 $k@242@01) $k@235@01)))
(assert (<= (+ (- $k@217@01 $k@242@01) $k@235@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@217@01 $k@242@01) $k@235@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
      $Ref.null))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  __flatten_32__22@271@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8055
;  :arith-add-rows          111
;  :arith-assert-diseq      495
;  :arith-assert-lower      1265
;  :arith-assert-upper      757
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            254
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5628
;  :mk-clause               3672
;  :num-allocs              6964937
;  :num-checks              730
;  :propagations            1357
;  :quant-instantiations    472
;  :rlimit-count            328574)
(push) ; 9
; [then-branch: 127 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))))))) | live]
; [else-branch: 127 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@228@01)))))))))))) | live]
(push) ; 10
; [then-branch: 127 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@228@01)))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  __flatten_34__24@272@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8059
;  :arith-add-rows          111
;  :arith-assert-diseq      495
;  :arith-assert-lower      1265
;  :arith-assert-upper      757
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            254
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5632
;  :mk-clause               3672
;  :num-allocs              6964937
;  :num-checks              731
;  :propagations            1357
;  :quant-instantiations    474
;  :rlimit-count            328936)
(pop) ; 10
(push) ; 10
; [else-branch: 127 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const __flatten_31__21@278@01 Bool)
(assert (=
  __flatten_31__21@278@01
  (not
    (and
      ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
      ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
; [exec]
; __flatten_29__19.Nand_gate_out := __flatten_31__21
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  __flatten_29__19@270@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8059
;  :arith-add-rows          111
;  :arith-assert-diseq      495
;  :arith-assert-lower      1265
;  :arith-assert-upper      757
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        712
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            254
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5637
;  :mk-clause               3677
;  :num-allocs              6964937
;  :num-checks              732
;  :propagations            1357
;  :quant-instantiations    474
;  :rlimit-count            329367)
(assert (not (= __flatten_29__19@270@01 $Ref.null)))
; Loop head block: Re-establish invariant
(declare-const $k@279@01 $Perm)
(assert ($Perm.isReadVar $k@279@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@279@01 $Perm.No) (< $Perm.No $k@279@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8060
;  :arith-add-rows          111
;  :arith-assert-diseq      496
;  :arith-assert-lower      1267
;  :arith-assert-upper      758
;  :arith-bound-prop        110
;  :arith-conflicts         64
;  :arith-eq-adapter        713
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            254
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3627
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5642
;  :mk-clause               3679
;  :num-allocs              6964937
;  :num-checks              733
;  :propagations            1358
;  :quant-instantiations    474
;  :rlimit-count            329614)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ $k@229@01 (- $k@211@01 $k@236@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          111
;  :arith-assert-diseq      496
;  :arith-assert-lower      1267
;  :arith-assert-upper      759
;  :arith-bound-prop        110
;  :arith-conflicts         65
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        9
;  :arith-pivots            254
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5644
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              734
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            329694)
(assert (< $k@279@01 (+ $k@229@01 (- $k@211@01 $k@236@01))))
(assert (<= $Perm.No (- (+ $k@229@01 (- $k@211@01 $k@236@01)) $k@279@01)))
(assert (<= (- (+ $k@229@01 (- $k@211@01 $k@236@01)) $k@279@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@229@01 (- $k@211@01 $k@236@01)) $k@279@01))
  (not (= diz@171@01 $Ref.null))))
; [eval] diz.Read_m != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      761
;  :arith-bound-prop        110
;  :arith-conflicts         66
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         157
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5648
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              735
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            329969
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= $t@269@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      761
;  :arith-bound-prop        110
;  :arith-conflicts         66
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         157
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5648
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              736
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            329987)
(assert (not (= $t@269@01 $Ref.null)))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      762
;  :arith-bound-prop        110
;  :arith-conflicts         67
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         158
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5649
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              737
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330088)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      762
;  :arith-bound-prop        110
;  :arith-conflicts         67
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         158
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5650
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              738
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330168)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      763
;  :arith-bound-prop        110
;  :arith-conflicts         68
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         159
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5651
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              739
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330249)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      763
;  :arith-bound-prop        110
;  :arith-conflicts         68
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         159
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5652
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              740
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330329)
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      764
;  :arith-bound-prop        110
;  :arith-conflicts         69
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         160
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5653
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              741
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330410
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      764
;  :arith-bound-prop        110
;  :arith-conflicts         69
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         160
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5654
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              742
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330490)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      765
;  :arith-bound-prop        110
;  :arith-conflicts         70
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         161
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5655
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              743
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330571)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      765
;  :arith-bound-prop        110
;  :arith-conflicts         70
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         161
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5656
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              744
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330651)
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      766
;  :arith-bound-prop        110
;  :arith-conflicts         71
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         162
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5657
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              745
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330732
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1269
;  :arith-assert-upper      766
;  :arith-bound-prop        110
;  :arith-conflicts         71
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         162
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5658
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              746
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330812)
; [eval] (forall i__26: Int :: { diz.Read_m.Main_process_state[i__26] } 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|)
(declare-const i__26@280@01 Int)
(push) ; 9
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__26
(push) ; 10
; [then-branch: 128 | 0 <= i__26@280@01 | live]
; [else-branch: 128 | !(0 <= i__26@280@01) | live]
(push) ; 11
; [then-branch: 128 | 0 <= i__26@280@01]
(assert (<= 0 i__26@280@01))
; [eval] i__26 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1270
;  :arith-assert-upper      767
;  :arith-bound-prop        110
;  :arith-conflicts         72
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5660
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              747
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            330945)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1270
;  :arith-assert-upper      767
;  :arith-bound-prop        110
;  :arith-conflicts         72
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5661
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              748
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            331025)
(pop) ; 11
(push) ; 11
; [else-branch: 128 | !(0 <= i__26@280@01)]
(assert (not (<= 0 i__26@280@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 129 | i__26@280@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i__26@280@01 | live]
; [else-branch: 129 | !(i__26@280@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i__26@280@01) | live]
(push) ; 11
; [then-branch: 129 | i__26@280@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i__26@280@01]
(assert (and
  (<
    i__26@280@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  (<= 0 i__26@280@01)))
; [eval] diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26] == -1
; [eval] diz.Read_m.Main_process_state[i__26]
(push) ; 12
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1271
;  :arith-assert-upper      769
;  :arith-bound-prop        110
;  :arith-conflicts         73
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         164
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5664
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              749
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            331215)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1271
;  :arith-assert-upper      769
;  :arith-bound-prop        110
;  :arith-conflicts         73
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         164
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5665
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              750
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            331295)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__26@280@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      496
;  :arith-assert-lower      1271
;  :arith-assert-upper      769
;  :arith-bound-prop        110
;  :arith-conflicts         73
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         164
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5665
;  :mk-clause               3681
;  :num-allocs              6964937
;  :num-checks              751
;  :propagations            1359
;  :quant-instantiations    474
;  :rlimit-count            331304)
; [eval] -1
(push) ; 12
; [then-branch: 130 | First:(Second:(Second:(Second:($t@228@01))))[i__26@280@01] == -1 | live]
; [else-branch: 130 | First:(Second:(Second:(Second:($t@228@01))))[i__26@280@01] != -1 | live]
(push) ; 13
; [then-branch: 130 | First:(Second:(Second:(Second:($t@228@01))))[i__26@280@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i__26@280@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 130 | First:(Second:(Second:(Second:($t@228@01))))[i__26@280@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      i__26@280@01)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__26]
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      497
;  :arith-assert-lower      1274
;  :arith-assert-upper      771
;  :arith-bound-prop        110
;  :arith-conflicts         74
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         165
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5672
;  :mk-clause               3685
;  :num-allocs              6964937
;  :num-checks              752
;  :propagations            1361
;  :quant-instantiations    475
;  :rlimit-count            331608
;  :time                    0.01)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      497
;  :arith-assert-lower      1274
;  :arith-assert-upper      771
;  :arith-bound-prop        110
;  :arith-conflicts         74
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         165
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5673
;  :mk-clause               3685
;  :num-allocs              6964937
;  :num-checks              753
;  :propagations            1361
;  :quant-instantiations    475
;  :rlimit-count            331688)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__26@280@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      497
;  :arith-assert-lower      1274
;  :arith-assert-upper      771
;  :arith-bound-prop        110
;  :arith-conflicts         74
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         165
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5673
;  :mk-clause               3685
;  :num-allocs              6964937
;  :num-checks              754
;  :propagations            1361
;  :quant-instantiations    475
;  :rlimit-count            331697)
(push) ; 14
; [then-branch: 131 | 0 <= First:(Second:(Second:(Second:($t@228@01))))[i__26@280@01] | live]
; [else-branch: 131 | !(0 <= First:(Second:(Second:(Second:($t@228@01))))[i__26@280@01]) | live]
(push) ; 15
; [then-branch: 131 | 0 <= First:(Second:(Second:(Second:($t@228@01))))[i__26@280@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i__26@280@01)))
; [eval] diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      497
;  :arith-assert-lower      1274
;  :arith-assert-upper      772
;  :arith-bound-prop        110
;  :arith-conflicts         75
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         166
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5674
;  :mk-clause               3685
;  :num-allocs              6964937
;  :num-checks              755
;  :propagations            1361
;  :quant-instantiations    475
;  :rlimit-count            331883)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      497
;  :arith-assert-lower      1274
;  :arith-assert-upper      772
;  :arith-bound-prop        110
;  :arith-conflicts         75
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         166
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5675
;  :mk-clause               3685
;  :num-allocs              6964937
;  :num-checks              756
;  :propagations            1361
;  :quant-instantiations    475
;  :rlimit-count            331963)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__26@280@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      497
;  :arith-assert-lower      1274
;  :arith-assert-upper      772
;  :arith-bound-prop        110
;  :arith-conflicts         75
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         166
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5675
;  :mk-clause               3685
;  :num-allocs              6964937
;  :num-checks              757
;  :propagations            1361
;  :quant-instantiations    475
;  :rlimit-count            331972)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      497
;  :arith-assert-lower      1274
;  :arith-assert-upper      773
;  :arith-bound-prop        110
;  :arith-conflicts         76
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         167
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5676
;  :mk-clause               3685
;  :num-allocs              6964937
;  :num-checks              758
;  :propagations            1361
;  :quant-instantiations    475
;  :rlimit-count            332053)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      497
;  :arith-assert-lower      1274
;  :arith-assert-upper      773
;  :arith-bound-prop        110
;  :arith-conflicts         76
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         167
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3629
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5677
;  :mk-clause               3685
;  :num-allocs              6964937
;  :num-checks              759
;  :propagations            1361
;  :quant-instantiations    475
;  :rlimit-count            332133
;  :time                    0.01)
(pop) ; 15
(push) ; 15
; [else-branch: 131 | !(0 <= First:(Second:(Second:(Second:($t@228@01))))[i__26@280@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
      i__26@280@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 129 | !(i__26@280@01 < |First:(Second:(Second:(Second:($t@228@01))))| && 0 <= i__26@280@01)]
(assert (not
  (and
    (<
      i__26@280@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    (<= 0 i__26@280@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__26@280@01 Int)) (!
  (implies
    (and
      (<
        i__26@280@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      (<= 0 i__26@280@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          i__26@280@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i__26@280@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i__26@280@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i__26@280@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      498
;  :arith-assert-lower      1275
;  :arith-assert-upper      774
;  :arith-bound-prop        110
;  :arith-conflicts         76
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         167
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               506
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5685
;  :mk-clause               3697
;  :num-allocs              6964937
;  :num-checks              760
;  :propagations            1363
;  :quant-instantiations    476
;  :rlimit-count            332579)
(assert (forall ((i__26@280@01 Int)) (!
  (implies
    (and
      (<
        i__26@280@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      (<= 0 i__26@280@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
          i__26@280@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i__26@280@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
            i__26@280@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    i__26@280@01))
  :qid |prog.l<no position>|)))
(declare-const $k@281@01 $Perm)
(assert ($Perm.isReadVar $k@281@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1277
;  :arith-assert-upper      776
;  :arith-bound-prop        110
;  :arith-conflicts         77
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         168
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5691
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              761
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333172)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@281@01 $Perm.No) (< $Perm.No $k@281@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1277
;  :arith-assert-upper      776
;  :arith-bound-prop        110
;  :arith-conflicts         77
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         168
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               508
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5691
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              762
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333222)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1277
;  :arith-assert-upper      776
;  :arith-bound-prop        110
;  :arith-conflicts         77
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         168
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               509
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5692
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              763
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333302)
(push) ; 9
(assert (not (not (= $k@231@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1277
;  :arith-assert-upper      776
;  :arith-bound-prop        110
;  :arith-conflicts         77
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         168
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               509
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5692
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              764
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333313)
(assert (< $k@281@01 $k@231@01))
(assert (<= $Perm.No (- $k@231@01 $k@281@01)))
(assert (<= (- $k@231@01 $k@281@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@231@01 $k@281@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      778
;  :arith-bound-prop        110
;  :arith-conflicts         78
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         169
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               510
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5696
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              765
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333554)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      778
;  :arith-bound-prop        110
;  :arith-conflicts         78
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         169
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5697
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              766
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333634
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      778
;  :arith-bound-prop        110
;  :arith-conflicts         78
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         169
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5697
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              767
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333682)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      779
;  :arith-bound-prop        110
;  :arith-conflicts         79
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         170
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5698
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              768
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333763)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      779
;  :arith-bound-prop        110
;  :arith-conflicts         79
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         170
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5699
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              769
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333843
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      779
;  :arith-bound-prop        110
;  :arith-conflicts         79
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         170
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5699
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              770
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333891)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      780
;  :arith-bound-prop        110
;  :arith-conflicts         80
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         171
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5700
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              771
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            333972
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      780
;  :arith-bound-prop        110
;  :arith-conflicts         80
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         171
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5701
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              772
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            334052)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      780
;  :arith-bound-prop        110
;  :arith-conflicts         80
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         171
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5701
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              773
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            334100)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      781
;  :arith-bound-prop        110
;  :arith-conflicts         81
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5702
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              774
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            334181)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      781
;  :arith-bound-prop        110
;  :arith-conflicts         81
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5703
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              775
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            334261
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      781
;  :arith-bound-prop        110
;  :arith-conflicts         81
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5703
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              776
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            334309)
(push) ; 9
(assert (not (=
  __flatten_29__19@270@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      499
;  :arith-assert-lower      1279
;  :arith-assert-upper      781
;  :arith-bound-prop        110
;  :arith-conflicts         81
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         172
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5703
;  :mk-clause               3699
;  :num-allocs              6964937
;  :num-checks              777
;  :propagations            1364
;  :quant-instantiations    476
;  :rlimit-count            334461)
(declare-const $k@282@01 $Perm)
(assert ($Perm.isReadVar $k@282@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1281
;  :arith-assert-upper      783
;  :arith-bound-prop        110
;  :arith-conflicts         82
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         173
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5708
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              778
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            334690)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@282@01 $Perm.No) (< $Perm.No $k@282@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1281
;  :arith-assert-upper      783
;  :arith-bound-prop        110
;  :arith-conflicts         82
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         173
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5708
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              779
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            334740)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1281
;  :arith-assert-upper      783
;  :arith-bound-prop        110
;  :arith-conflicts         82
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         173
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5709
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              780
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            334820)
(push) ; 9
(assert (not (not (= $k@232@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1281
;  :arith-assert-upper      783
;  :arith-bound-prop        110
;  :arith-conflicts         82
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         173
;  :arith-offset-eqs        9
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5709
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              781
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            334831)
(assert (< $k@282@01 $k@232@01))
(assert (<= $Perm.No (- $k@232@01 $k@282@01)))
(assert (<= (- $k@232@01 $k@282@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@232@01 $k@282@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1283
;  :arith-assert-upper      785
;  :arith-bound-prop        110
;  :arith-conflicts         83
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         174
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5713
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              782
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            335078)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1283
;  :arith-assert-upper      785
;  :arith-bound-prop        110
;  :arith-conflicts         83
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         174
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               527
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5714
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              783
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            335158
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1283
;  :arith-assert-upper      785
;  :arith-bound-prop        110
;  :arith-conflicts         83
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         174
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5714
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              784
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            335206)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1283
;  :arith-assert-upper      786
;  :arith-bound-prop        110
;  :arith-conflicts         84
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         175
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               529
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5715
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              785
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            335287)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1283
;  :arith-assert-upper      786
;  :arith-bound-prop        110
;  :arith-conflicts         84
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         175
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5716
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              786
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            335367)
(push) ; 9
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      500
;  :arith-assert-lower      1283
;  :arith-assert-upper      786
;  :arith-bound-prop        110
;  :arith-conflicts         84
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         175
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5716
;  :mk-clause               3701
;  :num-allocs              6964937
;  :num-checks              787
;  :propagations            1365
;  :quant-instantiations    476
;  :rlimit-count            335415)
(declare-const $k@283@01 $Perm)
(assert ($Perm.isReadVar $k@283@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      501
;  :arith-assert-lower      1285
;  :arith-assert-upper      788
;  :arith-bound-prop        110
;  :arith-conflicts         85
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         176
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5721
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              788
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            335645)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@283@01 $Perm.No) (< $Perm.No $k@283@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      501
;  :arith-assert-lower      1285
;  :arith-assert-upper      788
;  :arith-bound-prop        110
;  :arith-conflicts         85
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         176
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5721
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              789
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            335695)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      501
;  :arith-assert-lower      1285
;  :arith-assert-upper      788
;  :arith-bound-prop        110
;  :arith-conflicts         85
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         176
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5722
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              790
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            335775)
(push) ; 9
(assert (not (not (= $k@233@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          113
;  :arith-assert-diseq      501
;  :arith-assert-lower      1285
;  :arith-assert-upper      788
;  :arith-bound-prop        110
;  :arith-conflicts         85
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         176
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5722
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              791
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            335786)
(assert (< $k@283@01 $k@233@01))
(assert (<= $Perm.No (- $k@233@01 $k@283@01)))
(assert (<= (- $k@233@01 $k@283@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@233@01 $k@283@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      501
;  :arith-assert-lower      1287
;  :arith-assert-upper      790
;  :arith-bound-prop        110
;  :arith-conflicts         86
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         177
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5726
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              792
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            336028
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      501
;  :arith-assert-lower      1287
;  :arith-assert-upper      790
;  :arith-bound-prop        110
;  :arith-conflicts         86
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         177
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5727
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              793
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            336108)
(push) ; 9
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      501
;  :arith-assert-lower      1287
;  :arith-assert-upper      790
;  :arith-bound-prop        110
;  :arith-conflicts         86
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         177
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5727
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              794
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            336156)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      501
;  :arith-assert-lower      1287
;  :arith-assert-upper      791
;  :arith-bound-prop        110
;  :arith-conflicts         87
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         178
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5728
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              795
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            336237)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      501
;  :arith-assert-lower      1287
;  :arith-assert-upper      791
;  :arith-bound-prop        110
;  :arith-conflicts         87
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         178
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               539
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5729
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              796
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            336317)
(push) ; 9
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      501
;  :arith-assert-lower      1287
;  :arith-assert-upper      791
;  :arith-bound-prop        110
;  :arith-conflicts         87
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         178
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5729
;  :mk-clause               3703
;  :num-allocs              6964937
;  :num-checks              797
;  :propagations            1366
;  :quant-instantiations    476
;  :rlimit-count            336365)
(declare-const $k@284@01 $Perm)
(assert ($Perm.isReadVar $k@284@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      502
;  :arith-assert-lower      1289
;  :arith-assert-upper      793
;  :arith-bound-prop        110
;  :arith-conflicts         88
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         179
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5734
;  :mk-clause               3705
;  :num-allocs              6964937
;  :num-checks              798
;  :propagations            1367
;  :quant-instantiations    476
;  :rlimit-count            336594
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@284@01 $Perm.No) (< $Perm.No $k@284@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      502
;  :arith-assert-lower      1289
;  :arith-assert-upper      793
;  :arith-bound-prop        110
;  :arith-conflicts         88
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         179
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5734
;  :mk-clause               3705
;  :num-allocs              6964937
;  :num-checks              799
;  :propagations            1367
;  :quant-instantiations    476
;  :rlimit-count            336644)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      502
;  :arith-assert-lower      1289
;  :arith-assert-upper      793
;  :arith-bound-prop        110
;  :arith-conflicts         88
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         179
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5735
;  :mk-clause               3705
;  :num-allocs              6964937
;  :num-checks              800
;  :propagations            1367
;  :quant-instantiations    476
;  :rlimit-count            336724)
(push) ; 9
(assert (not (not (= $k@234@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      502
;  :arith-assert-lower      1289
;  :arith-assert-upper      793
;  :arith-bound-prop        110
;  :arith-conflicts         88
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         179
;  :arith-offset-eqs        9
;  :arith-pivots            256
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5735
;  :mk-clause               3705
;  :num-allocs              6964937
;  :num-checks              801
;  :propagations            1367
;  :quant-instantiations    476
;  :rlimit-count            336735)
(assert (< $k@284@01 $k@234@01))
(assert (<= $Perm.No (- $k@234@01 $k@284@01)))
(assert (<= (- $k@234@01 $k@284@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@234@01 $k@284@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      502
;  :arith-assert-lower      1291
;  :arith-assert-upper      795
;  :arith-bound-prop        110
;  :arith-conflicts         89
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         180
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5739
;  :mk-clause               3705
;  :num-allocs              6964937
;  :num-checks              802
;  :propagations            1367
;  :quant-instantiations    476
;  :rlimit-count            336982)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      502
;  :arith-assert-lower      1291
;  :arith-assert-upper      795
;  :arith-bound-prop        110
;  :arith-conflicts         89
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         180
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5740
;  :mk-clause               3705
;  :num-allocs              6964937
;  :num-checks              803
;  :propagations            1367
;  :quant-instantiations    476
;  :rlimit-count            337062)
(push) ; 9
(assert (not (< $Perm.No $k@234@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      502
;  :arith-assert-lower      1291
;  :arith-assert-upper      795
;  :arith-bound-prop        110
;  :arith-conflicts         89
;  :arith-eq-adapter        720
;  :arith-fixed-eqs         180
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5740
;  :mk-clause               3705
;  :num-allocs              6964937
;  :num-checks              804
;  :propagations            1367
;  :quant-instantiations    476
;  :rlimit-count            337110)
(declare-const $k@285@01 $Perm)
(assert ($Perm.isReadVar $k@285@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1293
;  :arith-assert-upper      797
;  :arith-bound-prop        110
;  :arith-conflicts         90
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5745
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              805
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337340)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1293
;  :arith-assert-upper      797
;  :arith-bound-prop        110
;  :arith-conflicts         90
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5746
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              806
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337420)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1293
;  :arith-assert-upper      797
;  :arith-bound-prop        110
;  :arith-conflicts         90
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5746
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              807
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337468
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@285@01 $Perm.No) (< $Perm.No $k@285@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1293
;  :arith-assert-upper      797
;  :arith-bound-prop        110
;  :arith-conflicts         90
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               550
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5746
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              808
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337518)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@235@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1293
;  :arith-assert-upper      797
;  :arith-bound-prop        110
;  :arith-conflicts         90
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               550
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5746
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              809
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337529)
(assert (< $k@285@01 $k@235@01))
(assert (<= $Perm.No (- $k@235@01 $k@285@01)))
(assert (<= (- $k@235@01 $k@285@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@235@01 $k@285@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      799
;  :arith-bound-prop        110
;  :arith-conflicts         91
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         182
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5750
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              810
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337770)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      799
;  :arith-bound-prop        110
;  :arith-conflicts         91
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         182
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5751
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              811
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337850)
(push) ; 9
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      799
;  :arith-bound-prop        110
;  :arith-conflicts         91
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         182
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5751
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              812
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337898)
(push) ; 9
(assert (not (< $Perm.No $k@235@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      799
;  :arith-bound-prop        110
;  :arith-conflicts         91
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         182
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5751
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              813
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            337946)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      800
;  :arith-bound-prop        110
;  :arith-conflicts         92
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         183
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5752
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              814
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            338027)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8061
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      800
;  :arith-bound-prop        110
;  :arith-conflicts         92
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         183
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5753
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              815
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            338103)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $t@269@01))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@229@01 (- $k@211@01 $k@236@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8062
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      801
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5755
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              816
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            338237
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@228@01)) $t@269@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8062
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      801
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5755
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              817
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            338248)
(push) ; 9
(assert (not (< $Perm.No $k@234@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8062
;  :arith-add-rows          114
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      801
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            257
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1402
;  :datatype-occurs-check   630
;  :datatype-splits         981
;  :decisions               1587
;  :del-clause              3645
;  :final-checks            264
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5755
;  :mk-clause               3707
;  :num-allocs              6964937
;  :num-checks              818
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            338296
;  :time                    0.00)
(pop) ; 8
(push) ; 8
; [else-branch: 126 | First:(Second:(Second:(Second:($t@228@01))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@228@01))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
        2)
      (- 0 2)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@210@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@191@01)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8184
;  :arith-add-rows          115
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      801
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    353
;  :datatype-constructor-ax 1439
;  :datatype-occurs-check   639
;  :datatype-splits         1005
;  :decisions               1623
;  :del-clause              3695
;  :final-checks            267
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5783
;  :mk-clause               3708
;  :num-allocs              6964937
;  :num-checks              819
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            339601)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8332
;  :arith-add-rows          115
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      801
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               560
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   648
;  :datatype-splits         1050
;  :decisions               1671
;  :del-clause              3696
;  :final-checks            270
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5832
;  :mk-clause               3709
;  :num-allocs              6964937
;  :num-checks              820
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            340801)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8480
;  :arith-add-rows          115
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      801
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1537
;  :datatype-occurs-check   657
;  :datatype-splits         1095
;  :decisions               1719
;  :del-clause              3697
;  :final-checks            273
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5881
;  :mk-clause               3710
;  :num-allocs              6964937
;  :num-checks              821
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            342001
;  :time                    0.01)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8628
;  :arith-add-rows          115
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      801
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1586
;  :datatype-occurs-check   666
;  :datatype-splits         1140
;  :decisions               1767
;  :del-clause              3698
;  :final-checks            276
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5930
;  :mk-clause               3711
;  :num-allocs              6964937
;  :num-checks              822
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            343201)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8776
;  :arith-add-rows          115
;  :arith-assert-diseq      503
;  :arith-assert-lower      1295
;  :arith-assert-upper      801
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        721
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1635
;  :datatype-occurs-check   675
;  :datatype-splits         1185
;  :decisions               1815
;  :del-clause              3699
;  :final-checks            279
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             5979
;  :mk-clause               3712
;  :num-allocs              6964937
;  :num-checks              823
;  :propagations            1368
;  :quant-instantiations    476
;  :rlimit-count            344401)
(declare-const $t@286@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@211@01)
    (= $t@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@210@01))))
  (implies
    (< $Perm.No (- $k@175@01 $k@218@01))
    (=
      $t@286@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@174@01)))))))
(assert (<= $Perm.No (+ $k@211@01 (- $k@175@01 $k@218@01))))
(assert (<= (+ $k@211@01 (- $k@175@01 $k@218@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@211@01 (- $k@175@01 $k@218@01)))
  (not (= diz@171@01 $Ref.null))))
; [eval] !true
; [then-branch: 132 | False | dead]
; [else-branch: 132 | True | live]
(push) ; 5
; [else-branch: 132 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Write_a___contract_unsatisfiable__Write_a_EncodedGlobalVariables_Main ----------
(declare-const diz@287@01 $Ref)
(declare-const globals@288@01 $Ref)
(declare-const m_param@289@01 $Ref)
(declare-const diz@290@01 $Ref)
(declare-const globals@291@01 $Ref)
(declare-const m_param@292@01 $Ref)
(push) ; 1
(declare-const $t@293@01 $Snap)
(assert (= $t@293@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@290@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@294@01 $Snap)
(assert (= $t@294@01 ($Snap.combine ($Snap.first $t@294@01) ($Snap.second $t@294@01))))
(assert (= ($Snap.first $t@294@01) $Snap.unit))
(assert (= ($Snap.second $t@294@01) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Write_a_Write_a_EncodedGlobalVariables_Main ----------
(declare-const globals@295@01 $Ref)
(declare-const m_param@296@01 $Ref)
(declare-const sys__result@297@01 $Ref)
(declare-const globals@298@01 $Ref)
(declare-const m_param@299@01 $Ref)
(declare-const sys__result@300@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@301@01 $Snap)
(assert (= $t@301@01 ($Snap.combine ($Snap.first $t@301@01) ($Snap.second $t@301@01))))
(assert (= ($Snap.first $t@301@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@300@01 $Ref.null)))
(assert (=
  ($Snap.second $t@301@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@301@01))
    ($Snap.second ($Snap.second $t@301@01)))))
(assert (= ($Snap.first ($Snap.second $t@301@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Write_a()
; [eval] type_of(sys__result)
; [eval] class_Write_a()
(assert (= (type_of<TYPE> sys__result@300@01) (as class_Write_a<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@301@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@301@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@301@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@301@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@01)))))
  $Snap.unit))
; [eval] sys__result.Write_a_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@01)))))
  m_param@299@01))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__28: Ref
(declare-const diz__28@302@01 $Ref)
; [exec]
; diz__28 := new(Write_a_m, Write_a_a)
(declare-const diz__28@303@01 $Ref)
(assert (not (= diz__28@303@01 $Ref.null)))
(declare-const Write_a_m@304@01 $Ref)
(declare-const Write_a_a@305@01 Bool)
(assert (not (= diz__28@303@01 sys__result@300@01)))
(assert (not (= diz__28@303@01 globals@298@01)))
(assert (not (= diz__28@303@01 diz__28@302@01)))
(assert (not (= diz__28@303@01 m_param@299@01)))
; [exec]
; inhale type_of(diz__28) == class_Write_a()
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 $Snap.unit))
; [eval] type_of(diz__28) == class_Write_a()
; [eval] type_of(diz__28)
; [eval] class_Write_a()
(assert (= (type_of<TYPE> diz__28@303@01) (as class_Write_a<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__28.Write_a_m := m_param
; [exec]
; inhale acc(Write_a_idleToken_EncodedGlobalVariables(diz__28, globals), write)
(declare-const $t@307@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__28
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Write_a() && acc(Write_a_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Write_a_m, write) && acc(sys__result.Write_a_a, write) && sys__result.Write_a_m == m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Write_a()
; [eval] type_of(sys__result)
; [eval] class_Write_a()
; [eval] sys__result.Write_a_m == m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Write_a_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@308@01 $Ref)
(declare-const globals@309@01 $Ref)
(declare-const diz@310@01 $Ref)
(declare-const globals@311@01 $Ref)
(push) ; 1
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 ($Snap.combine ($Snap.first $t@312@01) ($Snap.second $t@312@01))))
(assert (= ($Snap.first $t@312@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@310@01 $Ref.null)))
(assert (=
  ($Snap.second $t@312@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@312@01))
    ($Snap.second ($Snap.second $t@312@01)))))
(declare-const $k@313@01 $Perm)
(assert ($Perm.isReadVar $k@313@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@313@01 $Perm.No) (< $Perm.No $k@313@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8801
;  :arith-add-rows          115
;  :arith-assert-diseq      504
;  :arith-assert-lower      1298
;  :arith-assert-upper      803
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        722
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 1635
;  :datatype-occurs-check   686
;  :datatype-splits         1185
;  :decisions               1815
;  :del-clause              3711
;  :final-checks            287
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6003
;  :mk-clause               3714
;  :num-allocs              6964937
;  :num-checks              832
;  :propagations            1369
;  :quant-instantiations    476
;  :rlimit-count            347701)
(assert (<= $Perm.No $k@313@01))
(assert (<= $k@313@01 $Perm.Write))
(assert (implies (< $Perm.No $k@313@01) (not (= diz@310@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@312@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@312@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@312@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@312@01))) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@313@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8807
;  :arith-add-rows          115
;  :arith-assert-diseq      504
;  :arith-assert-lower      1298
;  :arith-assert-upper      804
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        722
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1635
;  :datatype-occurs-check   686
;  :datatype-splits         1185
;  :decisions               1815
;  :del-clause              3711
;  :final-checks            287
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6006
;  :mk-clause               3714
;  :num-allocs              6964937
;  :num-checks              833
;  :propagations            1369
;  :quant-instantiations    476
;  :rlimit-count            347954)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@312@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@312@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@312@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))))
(push) ; 2
(assert (not (< $Perm.No $k@313@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8813
;  :arith-add-rows          115
;  :arith-assert-diseq      504
;  :arith-assert-lower      1298
;  :arith-assert-upper      804
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        722
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1635
;  :datatype-occurs-check   686
;  :datatype-splits         1185
;  :decisions               1815
;  :del-clause              3711
;  :final-checks            287
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6009
;  :mk-clause               3714
;  :num-allocs              6964937
;  :num-checks              834
;  :propagations            1369
;  :quant-instantiations    477
;  :rlimit-count            348238)
(declare-const $k@314@01 $Perm)
(assert ($Perm.isReadVar $k@314@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@314@01 $Perm.No) (< $Perm.No $k@314@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8813
;  :arith-add-rows          115
;  :arith-assert-diseq      505
;  :arith-assert-lower      1300
;  :arith-assert-upper      805
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        723
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1635
;  :datatype-occurs-check   686
;  :datatype-splits         1185
;  :decisions               1815
;  :del-clause              3711
;  :final-checks            287
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6013
;  :mk-clause               3716
;  :num-allocs              6964937
;  :num-checks              835
;  :propagations            1370
;  :quant-instantiations    477
;  :rlimit-count            348436)
(assert (<= $Perm.No $k@314@01))
(assert (<= $k@314@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@314@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@312@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@313@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8819
;  :arith-add-rows          115
;  :arith-assert-diseq      505
;  :arith-assert-lower      1300
;  :arith-assert-upper      806
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        723
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1635
;  :datatype-occurs-check   686
;  :datatype-splits         1185
;  :decisions               1815
;  :del-clause              3711
;  :final-checks            287
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6016
;  :mk-clause               3716
;  :num-allocs              6964937
;  :num-checks              836
;  :propagations            1370
;  :quant-instantiations    477
;  :rlimit-count            348709)
(push) ; 2
(assert (not (< $Perm.No $k@314@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8819
;  :arith-add-rows          115
;  :arith-assert-diseq      505
;  :arith-assert-lower      1300
;  :arith-assert-upper      806
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        723
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1635
;  :datatype-occurs-check   686
;  :datatype-splits         1185
;  :decisions               1815
;  :del-clause              3711
;  :final-checks            287
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6016
;  :mk-clause               3716
;  :num-allocs              6964937
;  :num-checks              837
;  :propagations            1370
;  :quant-instantiations    477
;  :rlimit-count            348757)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))
  diz@310@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@315@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Write_a_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@316@01 $Ref)
(declare-const globals@317@01 $Ref)
(declare-const diz@318@01 $Ref)
(declare-const globals@319@01 $Ref)
(push) ; 1
(declare-const $t@320@01 $Snap)
(assert (= $t@320@01 ($Snap.combine ($Snap.first $t@320@01) ($Snap.second $t@320@01))))
(assert (= ($Snap.first $t@320@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@318@01 $Ref.null)))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@321@01 $Snap)
(assert (= $t@321@01 ($Snap.combine ($Snap.first $t@321@01) ($Snap.second $t@321@01))))
(assert (=
  ($Snap.second $t@321@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@321@01))
    ($Snap.second ($Snap.second $t@321@01)))))
(declare-const $k@322@01 $Perm)
(assert ($Perm.isReadVar $k@322@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@322@01 $Perm.No) (< $Perm.No $k@322@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8847
;  :arith-add-rows          115
;  :arith-assert-diseq      506
;  :arith-assert-lower      1302
;  :arith-assert-upper      807
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    370
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   690
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3715
;  :final-checks            291
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6031
;  :mk-clause               3718
;  :num-allocs              6964937
;  :num-checks              840
;  :propagations            1371
;  :quant-instantiations    478
;  :rlimit-count            350010)
(assert (<= $Perm.No $k@322@01))
(assert (<= $k@322@01 $Perm.Write))
(assert (implies (< $Perm.No $k@322@01) (not (= diz@318@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@321@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@321@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@321@01))) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@322@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8853
;  :arith-add-rows          115
;  :arith-assert-diseq      506
;  :arith-assert-lower      1302
;  :arith-assert-upper      808
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   690
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3715
;  :final-checks            291
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6034
;  :mk-clause               3718
;  :num-allocs              6964937
;  :num-checks              841
;  :propagations            1371
;  :quant-instantiations    478
;  :rlimit-count            350263)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@321@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@321@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))
(push) ; 3
(assert (not (< $Perm.No $k@322@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8859
;  :arith-add-rows          115
;  :arith-assert-diseq      506
;  :arith-assert-lower      1302
;  :arith-assert-upper      808
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        724
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   690
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3715
;  :final-checks            291
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6037
;  :mk-clause               3718
;  :num-allocs              6964937
;  :num-checks              842
;  :propagations            1371
;  :quant-instantiations    479
;  :rlimit-count            350547)
(declare-const $k@323@01 $Perm)
(assert ($Perm.isReadVar $k@323@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@323@01 $Perm.No) (< $Perm.No $k@323@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8859
;  :arith-add-rows          115
;  :arith-assert-diseq      507
;  :arith-assert-lower      1304
;  :arith-assert-upper      809
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   690
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3715
;  :final-checks            291
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6041
;  :mk-clause               3720
;  :num-allocs              6964937
;  :num-checks              843
;  :propagations            1372
;  :quant-instantiations    479
;  :rlimit-count            350746)
(assert (<= $Perm.No $k@323@01))
(assert (<= $k@323@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@323@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@321@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@322@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8860
;  :arith-add-rows          115
;  :arith-assert-diseq      507
;  :arith-assert-lower      1304
;  :arith-assert-upper      810
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   690
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3715
;  :final-checks            291
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6043
;  :mk-clause               3720
;  :num-allocs              6964937
;  :num-checks              844
;  :propagations            1372
;  :quant-instantiations    479
;  :rlimit-count            350932
;  :time                    0.01)
(push) ; 3
(assert (not (< $Perm.No $k@323@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8860
;  :arith-add-rows          115
;  :arith-assert-diseq      507
;  :arith-assert-lower      1304
;  :arith-assert-upper      810
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   690
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3715
;  :final-checks            291
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6043
;  :mk-clause               3720
;  :num-allocs              6964937
;  :num-checks              845
;  :propagations            1372
;  :quant-instantiations    479
;  :rlimit-count            350980)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))
  diz@318@01))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Write_a___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@324@01 $Ref)
(declare-const globals@325@01 $Ref)
(declare-const diz@326@01 $Ref)
(declare-const globals@327@01 $Ref)
(push) ; 1
(declare-const $t@328@01 $Snap)
(assert (= $t@328@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@326@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.Write_a_m, wildcard) && diz.Write_a_m != null && acc(diz.Write_a_m.Main_nand_write_a, wildcard) && diz.Write_a_m.Main_nand_write_a == diz)
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 ($Snap.combine ($Snap.first $t@329@01) ($Snap.second $t@329@01))))
(assert (= ($Snap.first $t@329@01) $Snap.unit))
(assert (=
  ($Snap.second $t@329@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@329@01))
    ($Snap.second ($Snap.second $t@329@01)))))
(declare-const $k@330@01 $Perm)
(assert ($Perm.isReadVar $k@330@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@330@01 $Perm.No) (< $Perm.No $k@330@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8872
;  :arith-add-rows          115
;  :arith-assert-diseq      508
;  :arith-assert-lower      1306
;  :arith-assert-upper      811
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        726
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    375
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   691
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3719
;  :final-checks            292
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6052
;  :mk-clause               3722
;  :num-allocs              6964937
;  :num-checks              847
;  :propagations            1373
;  :quant-instantiations    479
;  :rlimit-count            351755)
(assert (<= $Perm.No $k@330@01))
(assert (<= $k@330@01 $Perm.Write))
(assert (implies (< $Perm.No $k@330@01) (not (= diz@326@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@329@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@329@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@329@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@329@01))) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@330@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8878
;  :arith-add-rows          115
;  :arith-assert-diseq      508
;  :arith-assert-lower      1306
;  :arith-assert-upper      812
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        726
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    376
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   691
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3719
;  :final-checks            292
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6055
;  :mk-clause               3722
;  :num-allocs              6964937
;  :num-checks              848
;  :propagations            1373
;  :quant-instantiations    479
;  :rlimit-count            352008)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@329@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@329@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@329@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@329@01)))))))
(push) ; 3
(assert (not (< $Perm.No $k@330@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8884
;  :arith-add-rows          115
;  :arith-assert-diseq      508
;  :arith-assert-lower      1306
;  :arith-assert-upper      812
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        726
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   691
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3719
;  :final-checks            292
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6058
;  :mk-clause               3722
;  :num-allocs              6964937
;  :num-checks              849
;  :propagations            1373
;  :quant-instantiations    480
;  :rlimit-count            352292)
(declare-const $k@331@01 $Perm)
(assert ($Perm.isReadVar $k@331@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@331@01 $Perm.No) (< $Perm.No $k@331@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8884
;  :arith-add-rows          115
;  :arith-assert-diseq      509
;  :arith-assert-lower      1308
;  :arith-assert-upper      813
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        727
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               579
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   691
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3719
;  :final-checks            292
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6062
;  :mk-clause               3724
;  :num-allocs              6964937
;  :num-checks              850
;  :propagations            1374
;  :quant-instantiations    480
;  :rlimit-count            352491)
(assert (<= $Perm.No $k@331@01))
(assert (<= $k@331@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@331@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@329@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@329@01))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@330@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8885
;  :arith-add-rows          115
;  :arith-assert-diseq      509
;  :arith-assert-lower      1308
;  :arith-assert-upper      814
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        727
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   691
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3719
;  :final-checks            292
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6064
;  :mk-clause               3724
;  :num-allocs              6964937
;  :num-checks              851
;  :propagations            1374
;  :quant-instantiations    480
;  :rlimit-count            352677)
(push) ; 3
(assert (not (< $Perm.No $k@331@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8885
;  :arith-add-rows          115
;  :arith-assert-diseq      509
;  :arith-assert-lower      1308
;  :arith-assert-upper      814
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        727
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1639
;  :datatype-occurs-check   691
;  :datatype-splits         1189
;  :decisions               1819
;  :del-clause              3719
;  :final-checks            292
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6064
;  :mk-clause               3724
;  :num-allocs              6964937
;  :num-checks              852
;  :propagations            1374
;  :quant-instantiations    480
;  :rlimit-count            352725
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@329@01)))))
  diz@326@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Write_a_run_EncodedGlobalVariables ----------
(declare-const diz@332@01 $Ref)
(declare-const globals@333@01 $Ref)
(declare-const diz@334@01 $Ref)
(declare-const globals@335@01 $Ref)
(push) ; 1
(declare-const $t@336@01 $Snap)
(assert (= $t@336@01 ($Snap.combine ($Snap.first $t@336@01) ($Snap.second $t@336@01))))
(assert (= ($Snap.first $t@336@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@334@01 $Ref.null)))
(assert (=
  ($Snap.second $t@336@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@336@01))
    ($Snap.second ($Snap.second $t@336@01)))))
(declare-const $k@337@01 $Perm)
(assert ($Perm.isReadVar $k@337@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@337@01 $Perm.No) (< $Perm.No $k@337@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8922
;  :arith-add-rows          115
;  :arith-assert-diseq      510
;  :arith-assert-lower      1310
;  :arith-assert-upper      815
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        728
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               582
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 1647
;  :datatype-occurs-check   701
;  :datatype-splits         1191
;  :decisions               1827
;  :del-clause              3723
;  :final-checks            297
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6076
;  :mk-clause               3726
;  :num-allocs              6964937
;  :num-checks              857
;  :propagations            1375
;  :quant-instantiations    481
;  :rlimit-count            354440)
(assert (<= $Perm.No $k@337@01))
(assert (<= $k@337@01 $Perm.Write))
(assert (implies (< $Perm.No $k@337@01) (not (= diz@334@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@336@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@336@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@336@01))) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8928
;  :arith-add-rows          115
;  :arith-assert-diseq      510
;  :arith-assert-lower      1310
;  :arith-assert-upper      816
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        728
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1647
;  :datatype-occurs-check   701
;  :datatype-splits         1191
;  :decisions               1827
;  :del-clause              3723
;  :final-checks            297
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6079
;  :mk-clause               3726
;  :num-allocs              6964937
;  :num-checks              858
;  :propagations            1375
;  :quant-instantiations    481
;  :rlimit-count            354693)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@336@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@336@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))))
(push) ; 2
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8934
;  :arith-add-rows          115
;  :arith-assert-diseq      510
;  :arith-assert-lower      1310
;  :arith-assert-upper      816
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        728
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               584
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1647
;  :datatype-occurs-check   701
;  :datatype-splits         1191
;  :decisions               1827
;  :del-clause              3723
;  :final-checks            297
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6082
;  :mk-clause               3726
;  :num-allocs              6964937
;  :num-checks              859
;  :propagations            1375
;  :quant-instantiations    482
;  :rlimit-count            354977
;  :time                    0.00)
(declare-const $k@338@01 $Perm)
(assert ($Perm.isReadVar $k@338@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@338@01 $Perm.No) (< $Perm.No $k@338@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8934
;  :arith-add-rows          115
;  :arith-assert-diseq      511
;  :arith-assert-lower      1312
;  :arith-assert-upper      817
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        729
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               585
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1647
;  :datatype-occurs-check   701
;  :datatype-splits         1191
;  :decisions               1827
;  :del-clause              3723
;  :final-checks            297
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6086
;  :mk-clause               3728
;  :num-allocs              6964937
;  :num-checks              860
;  :propagations            1376
;  :quant-instantiations    482
;  :rlimit-count            355176)
(assert (<= $Perm.No $k@338@01))
(assert (<= $k@338@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@338@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8935
;  :arith-add-rows          115
;  :arith-assert-diseq      511
;  :arith-assert-lower      1312
;  :arith-assert-upper      818
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        729
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1647
;  :datatype-occurs-check   701
;  :datatype-splits         1191
;  :decisions               1827
;  :del-clause              3723
;  :final-checks            297
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6088
;  :mk-clause               3728
;  :num-allocs              6964937
;  :num-checks              861
;  :propagations            1376
;  :quant-instantiations    482
;  :rlimit-count            355362)
(push) ; 2
(assert (not (< $Perm.No $k@338@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8935
;  :arith-add-rows          115
;  :arith-assert-diseq      511
;  :arith-assert-lower      1312
;  :arith-assert-upper      818
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        729
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1647
;  :datatype-occurs-check   701
;  :datatype-splits         1191
;  :decisions               1827
;  :del-clause              3723
;  :final-checks            297
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6088
;  :mk-clause               3728
;  :num-allocs              6964937
;  :num-checks              862
;  :propagations            1376
;  :quant-instantiations    482
;  :rlimit-count            355410)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))
  diz@334@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@339@01 $Snap)
(assert (= $t@339@01 ($Snap.combine ($Snap.first $t@339@01) ($Snap.second $t@339@01))))
(declare-const $k@340@01 $Perm)
(assert ($Perm.isReadVar $k@340@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@340@01 $Perm.No) (< $Perm.No $k@340@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8948
;  :arith-add-rows          115
;  :arith-assert-diseq      512
;  :arith-assert-lower      1314
;  :arith-assert-upper      819
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        730
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    383
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   703
;  :datatype-splits         1193
;  :decisions               1829
;  :del-clause              3727
;  :final-checks            299
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6097
;  :mk-clause               3730
;  :num-allocs              6964937
;  :num-checks              864
;  :propagations            1377
;  :quant-instantiations    483
;  :rlimit-count            356116)
(assert (<= $Perm.No $k@340@01))
(assert (<= $k@340@01 $Perm.Write))
(assert (implies (< $Perm.No $k@340@01) (not (= diz@334@01 $Ref.null))))
(assert (=
  ($Snap.second $t@339@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@339@01))
    ($Snap.second ($Snap.second $t@339@01)))))
(assert (= ($Snap.first ($Snap.second $t@339@01)) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@340@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8954
;  :arith-add-rows          115
;  :arith-assert-diseq      512
;  :arith-assert-lower      1314
;  :arith-assert-upper      820
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        730
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   703
;  :datatype-splits         1193
;  :decisions               1829
;  :del-clause              3727
;  :final-checks            299
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6100
;  :mk-clause               3730
;  :num-allocs              6964937
;  :num-checks              865
;  :propagations            1377
;  :quant-instantiations    483
;  :rlimit-count            356359)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@339@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@339@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@339@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@339@01))))))
(push) ; 3
(assert (not (< $Perm.No $k@340@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8960
;  :arith-add-rows          115
;  :arith-assert-diseq      512
;  :arith-assert-lower      1314
;  :arith-assert-upper      820
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        730
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               590
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   703
;  :datatype-splits         1193
;  :decisions               1829
;  :del-clause              3727
;  :final-checks            299
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6103
;  :mk-clause               3730
;  :num-allocs              6964937
;  :num-checks              866
;  :propagations            1377
;  :quant-instantiations    484
;  :rlimit-count            356631)
(declare-const $k@341@01 $Perm)
(assert ($Perm.isReadVar $k@341@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@341@01 $Perm.No) (< $Perm.No $k@341@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8960
;  :arith-add-rows          115
;  :arith-assert-diseq      513
;  :arith-assert-lower      1316
;  :arith-assert-upper      821
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        731
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   703
;  :datatype-splits         1193
;  :decisions               1829
;  :del-clause              3727
;  :final-checks            299
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6107
;  :mk-clause               3732
;  :num-allocs              6964937
;  :num-checks              867
;  :propagations            1378
;  :quant-instantiations    484
;  :rlimit-count            356829)
(assert (<= $Perm.No $k@341@01))
(assert (<= $k@341@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@341@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@339@01)) $Ref.null))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@339@01))) $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@340@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8961
;  :arith-add-rows          115
;  :arith-assert-diseq      513
;  :arith-assert-lower      1316
;  :arith-assert-upper      822
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        731
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               592
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   703
;  :datatype-splits         1193
;  :decisions               1829
;  :del-clause              3727
;  :final-checks            299
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6109
;  :mk-clause               3732
;  :num-allocs              6964937
;  :num-checks              868
;  :propagations            1378
;  :quant-instantiations    484
;  :rlimit-count            357005)
(push) ; 3
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8961
;  :arith-add-rows          115
;  :arith-assert-diseq      513
;  :arith-assert-lower      1316
;  :arith-assert-upper      822
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        731
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               593
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   703
;  :datatype-splits         1193
;  :decisions               1829
;  :del-clause              3727
;  :final-checks            299
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6109
;  :mk-clause               3732
;  :num-allocs              6964937
;  :num-checks              869
;  :propagations            1378
;  :quant-instantiations    484
;  :rlimit-count            357053)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@339@01))))
  diz@334@01))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_36__29: Ref
(declare-const __flatten_36__29@342@01 $Ref)
; [exec]
; var __flatten_37__30: Ref
(declare-const __flatten_37__30@343@01 $Ref)
; [exec]
; var __flatten_38__31: Bool
(declare-const __flatten_38__31@344@01 Bool)
; [exec]
; var __flatten_39__32: Bool
(declare-const __flatten_39__32@345@01 Bool)
; [exec]
; var __flatten_40__33: Ref
(declare-const __flatten_40__33@346@01 $Ref)
; [exec]
; var __flatten_41__34: Seq[Int]
(declare-const __flatten_41__34@347@01 Seq<Int>)
; [exec]
; var __flatten_42__35: Ref
(declare-const __flatten_42__35@348@01 $Ref)
; [exec]
; var __flatten_43__36: Ref
(declare-const __flatten_43__36@349@01 $Ref)
; [exec]
; var __flatten_44__37: Seq[Int]
(declare-const __flatten_44__37@350@01 Seq<Int>)
; [exec]
; var __flatten_45__38: Ref
(declare-const __flatten_45__38@351@01 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 3
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8961
;  :arith-add-rows          115
;  :arith-assert-diseq      513
;  :arith-assert-lower      1316
;  :arith-assert-upper      822
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        731
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               594
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   703
;  :datatype-splits         1193
;  :decisions               1829
;  :del-clause              3731
;  :final-checks            299
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6109
;  :mk-clause               3732
;  :num-allocs              6964937
;  :num-checks              870
;  :propagations            1378
;  :quant-instantiations    484
;  :rlimit-count            357117
;  :time                    0.00)
(declare-const $t@352@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8967
;  :arith-add-rows          115
;  :arith-assert-diseq      513
;  :arith-assert-lower      1316
;  :arith-assert-upper      822
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        731
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3731
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6109
;  :mk-clause               3732
;  :num-allocs              6964937
;  :num-checks              872
;  :propagations            1378
;  :quant-instantiations    484
;  :rlimit-count            357434)
(assert (= $t@352@01 ($Snap.combine ($Snap.first $t@352@01) ($Snap.second $t@352@01))))
(assert (= ($Snap.first $t@352@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@352@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@352@01))
    ($Snap.second ($Snap.second $t@352@01)))))
(assert (= ($Snap.first ($Snap.second $t@352@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@352@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@352@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@352@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@352@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@353@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 133 | 0 <= i@353@01 | live]
; [else-branch: 133 | !(0 <= i@353@01) | live]
(push) ; 5
; [then-branch: 133 | 0 <= i@353@01]
(assert (<= 0 i@353@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 133 | !(0 <= i@353@01)]
(assert (not (<= 0 i@353@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 134 | i@353@01 < |First:(Second:(Second:(Second:($t@352@01))))| && 0 <= i@353@01 | live]
; [else-branch: 134 | !(i@353@01 < |First:(Second:(Second:(Second:($t@352@01))))| && 0 <= i@353@01) | live]
(push) ; 5
; [then-branch: 134 | i@353@01 < |First:(Second:(Second:(Second:($t@352@01))))| && 0 <= i@353@01]
(assert (and
  (<
    i@353@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  (<= 0 i@353@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@353@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          115
;  :arith-assert-diseq      515
;  :arith-assert-lower      1323
;  :arith-assert-upper      825
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        735
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3731
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6141
;  :mk-clause               3738
;  :num-allocs              6964937
;  :num-checks              873
;  :propagations            1380
;  :quant-instantiations    490
;  :rlimit-count            358784)
; [eval] -1
(push) ; 6
; [then-branch: 135 | First:(Second:(Second:(Second:($t@352@01))))[i@353@01] == -1 | live]
; [else-branch: 135 | First:(Second:(Second:(Second:($t@352@01))))[i@353@01] != -1 | live]
(push) ; 7
; [then-branch: 135 | First:(Second:(Second:(Second:($t@352@01))))[i@353@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    i@353@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 135 | First:(Second:(Second:(Second:($t@352@01))))[i@353@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
      i@353@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@353@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          115
;  :arith-assert-diseq      515
;  :arith-assert-lower      1323
;  :arith-assert-upper      825
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        735
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3731
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6142
;  :mk-clause               3738
;  :num-allocs              6964937
;  :num-checks              874
;  :propagations            1380
;  :quant-instantiations    490
;  :rlimit-count            358959)
(push) ; 8
; [then-branch: 136 | 0 <= First:(Second:(Second:(Second:($t@352@01))))[i@353@01] | live]
; [else-branch: 136 | !(0 <= First:(Second:(Second:(Second:($t@352@01))))[i@353@01]) | live]
(push) ; 9
; [then-branch: 136 | 0 <= First:(Second:(Second:(Second:($t@352@01))))[i@353@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    i@353@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@353@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9018
;  :arith-add-rows          115
;  :arith-assert-diseq      516
;  :arith-assert-lower      1326
;  :arith-assert-upper      825
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        736
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3731
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6145
;  :mk-clause               3739
;  :num-allocs              6964937
;  :num-checks              875
;  :propagations            1380
;  :quant-instantiations    490
;  :rlimit-count            359083)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 136 | !(0 <= First:(Second:(Second:(Second:($t@352@01))))[i@353@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
      i@353@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 134 | !(i@353@01 < |First:(Second:(Second:(Second:($t@352@01))))| && 0 <= i@353@01)]
(assert (not
  (and
    (<
      i@353@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
    (<= 0 i@353@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@353@01 Int)) (!
  (implies
    (and
      (<
        i@353@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
      (<= 0 i@353@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
          i@353@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
            i@353@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
            i@353@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    i@353@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))
(declare-const $k@354@01 $Perm)
(assert ($Perm.isReadVar $k@354@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@354@01 $Perm.No) (< $Perm.No $k@354@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9023
;  :arith-add-rows          115
;  :arith-assert-diseq      517
;  :arith-assert-lower      1328
;  :arith-assert-upper      826
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        737
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6151
;  :mk-clause               3741
;  :num-allocs              6964937
;  :num-checks              876
;  :propagations            1381
;  :quant-instantiations    490
;  :rlimit-count            359851)
(assert (<= $Perm.No $k@354@01))
(assert (<= $k@354@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@354@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9029
;  :arith-add-rows          115
;  :arith-assert-diseq      517
;  :arith-assert-lower      1328
;  :arith-assert-upper      827
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        737
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6154
;  :mk-clause               3741
;  :num-allocs              6964937
;  :num-checks              877
;  :propagations            1381
;  :quant-instantiations    490
;  :rlimit-count            360174
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9035
;  :arith-add-rows          115
;  :arith-assert-diseq      517
;  :arith-assert-lower      1328
;  :arith-assert-upper      827
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        737
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               598
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6157
;  :mk-clause               3741
;  :num-allocs              6964937
;  :num-checks              878
;  :propagations            1381
;  :quant-instantiations    491
;  :rlimit-count            360530)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9040
;  :arith-add-rows          115
;  :arith-assert-diseq      517
;  :arith-assert-lower      1328
;  :arith-assert-upper      827
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        737
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               599
;  :datatype-accessor-ax    397
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6158
;  :mk-clause               3741
;  :num-allocs              6964937
;  :num-checks              879
;  :propagations            1381
;  :quant-instantiations    491
;  :rlimit-count            360787)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9045
;  :arith-add-rows          115
;  :arith-assert-diseq      517
;  :arith-assert-lower      1328
;  :arith-assert-upper      827
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        737
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               600
;  :datatype-accessor-ax    398
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6159
;  :mk-clause               3741
;  :num-allocs              6964937
;  :num-checks              880
;  :propagations            1381
;  :quant-instantiations    491
;  :rlimit-count            361054
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))
(declare-const $k@355@01 $Perm)
(assert ($Perm.isReadVar $k@355@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@355@01 $Perm.No) (< $Perm.No $k@355@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9050
;  :arith-add-rows          115
;  :arith-assert-diseq      518
;  :arith-assert-lower      1330
;  :arith-assert-upper      828
;  :arith-bound-prop        110
;  :arith-conflicts         93
;  :arith-eq-adapter        738
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               601
;  :datatype-accessor-ax    399
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6164
;  :mk-clause               3743
;  :num-allocs              6964937
;  :num-checks              881
;  :propagations            1382
;  :quant-instantiations    491
;  :rlimit-count            361475)
(declare-const $t@356@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@338@01)
    (=
      $t@356@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))))
  (implies
    (< $Perm.No $k@355@01)
    (=
      $t@356@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))
(assert (<= $Perm.No (+ $k@338@01 $k@355@01)))
(assert (<= (+ $k@338@01 $k@355@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@338@01 $k@355@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@338@01 $k@355@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9060
;  :arith-add-rows          115
;  :arith-assert-diseq      518
;  :arith-assert-lower      1331
;  :arith-assert-upper      830
;  :arith-bound-prop        110
;  :arith-conflicts         94
;  :arith-eq-adapter        738
;  :arith-fixed-eqs         185
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               602
;  :datatype-accessor-ax    400
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6172
;  :mk-clause               3743
;  :num-allocs              6964937
;  :num-checks              882
;  :propagations            1382
;  :quant-instantiations    492
;  :rlimit-count            362100)
(assert (not (= $t@356@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@338@01 $k@355@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9066
;  :arith-add-rows          115
;  :arith-assert-diseq      518
;  :arith-assert-lower      1331
;  :arith-assert-upper      831
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        738
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               603
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6175
;  :mk-clause               3743
;  :num-allocs              6964937
;  :num-checks              883
;  :propagations            1382
;  :quant-instantiations    492
;  :rlimit-count            362454)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))))
(declare-const $k@357@01 $Perm)
(assert ($Perm.isReadVar $k@357@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@357@01 $Perm.No) (< $Perm.No $k@357@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9071
;  :arith-add-rows          115
;  :arith-assert-diseq      519
;  :arith-assert-lower      1333
;  :arith-assert-upper      832
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        739
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               604
;  :datatype-accessor-ax    402
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6180
;  :mk-clause               3745
;  :num-allocs              6964937
;  :num-checks              884
;  :propagations            1383
;  :quant-instantiations    492
;  :rlimit-count            362904)
(assert (<= $Perm.No $k@357@01))
(assert (<= $k@357@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@357@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@357@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9077
;  :arith-add-rows          115
;  :arith-assert-diseq      519
;  :arith-assert-lower      1333
;  :arith-assert-upper      833
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        739
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               605
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6183
;  :mk-clause               3745
;  :num-allocs              6964937
;  :num-checks              885
;  :propagations            1383
;  :quant-instantiations    492
;  :rlimit-count            363307)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@357@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9083
;  :arith-add-rows          115
;  :arith-assert-diseq      519
;  :arith-assert-lower      1333
;  :arith-assert-upper      833
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        739
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               606
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6186
;  :mk-clause               3745
;  :num-allocs              6964937
;  :num-checks              886
;  :propagations            1383
;  :quant-instantiations    493
;  :rlimit-count            363743)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))))))
(declare-const $k@358@01 $Perm)
(assert ($Perm.isReadVar $k@358@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@358@01 $Perm.No) (< $Perm.No $k@358@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9088
;  :arith-add-rows          115
;  :arith-assert-diseq      520
;  :arith-assert-lower      1335
;  :arith-assert-upper      834
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        740
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               607
;  :datatype-accessor-ax    405
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6191
;  :mk-clause               3747
;  :num-allocs              6964937
;  :num-checks              887
;  :propagations            1384
;  :quant-instantiations    493
;  :rlimit-count            364224)
(assert (<= $Perm.No $k@358@01))
(assert (<= $k@358@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@358@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9094
;  :arith-add-rows          115
;  :arith-assert-diseq      520
;  :arith-assert-lower      1335
;  :arith-assert-upper      835
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        740
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               608
;  :datatype-accessor-ax    406
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6194
;  :mk-clause               3747
;  :num-allocs              6964937
;  :num-checks              888
;  :propagations            1384
;  :quant-instantiations    493
;  :rlimit-count            364657)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9100
;  :arith-add-rows          115
;  :arith-assert-diseq      520
;  :arith-assert-lower      1335
;  :arith-assert-upper      835
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        740
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               609
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6197
;  :mk-clause               3747
;  :num-allocs              6964937
;  :num-checks              889
;  :propagations            1384
;  :quant-instantiations    494
;  :rlimit-count            365123)
(declare-const $k@359@01 $Perm)
(assert ($Perm.isReadVar $k@359@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@359@01 $Perm.No) (< $Perm.No $k@359@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9100
;  :arith-add-rows          115
;  :arith-assert-diseq      521
;  :arith-assert-lower      1337
;  :arith-assert-upper      836
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        741
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               610
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6201
;  :mk-clause               3749
;  :num-allocs              6964937
;  :num-checks              890
;  :propagations            1385
;  :quant-instantiations    494
;  :rlimit-count            365321)
(assert (<= $Perm.No $k@359@01))
(assert (<= $k@359@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@359@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9101
;  :arith-add-rows          115
;  :arith-assert-diseq      521
;  :arith-assert-lower      1337
;  :arith-assert-upper      837
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        741
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               611
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6203
;  :mk-clause               3749
;  :num-allocs              6964937
;  :num-checks              891
;  :propagations            1385
;  :quant-instantiations    494
;  :rlimit-count            365687)
(push) ; 3
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9101
;  :arith-add-rows          115
;  :arith-assert-diseq      521
;  :arith-assert-lower      1337
;  :arith-assert-upper      837
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        741
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               612
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 1651
;  :datatype-occurs-check   704
;  :datatype-splits         1193
;  :decisions               1831
;  :del-clause              3732
;  :final-checks            300
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6203
;  :mk-clause               3749
;  :num-allocs              6964937
;  :num-checks              892
;  :propagations            1385
;  :quant-instantiations    494
;  :rlimit-count            365735)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@352@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01))) globals@335@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9142
;  :arith-add-rows          115
;  :arith-assert-diseq      521
;  :arith-assert-lower      1337
;  :arith-assert-upper      837
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        741
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               613
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 1663
;  :datatype-occurs-check   709
;  :datatype-splits         1203
;  :decisions               1843
;  :del-clause              3748
;  :final-checks            302
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6216
;  :mk-clause               3749
;  :num-allocs              6964937
;  :num-checks              894
;  :propagations            1385
;  :quant-instantiations    495
;  :rlimit-count            366675)
(declare-const $t@360@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz.Write_a_a := true
(set-option :timeout 10)
(push) ; 3
(assert (not (= $t@356@01 diz@334@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9180
;  :arith-add-rows          115
;  :arith-assert-diseq      521
;  :arith-assert-lower      1337
;  :arith-assert-upper      837
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        741
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               614
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6226
;  :mk-clause               3749
;  :num-allocs              6964937
;  :num-checks              896
;  :propagations            1385
;  :quant-instantiations    495
;  :rlimit-count            367212
;  :time                    0.01)
(declare-const __flatten_37__30@361@01 $Ref)
(declare-const __flatten_36__29@362@01 $Ref)
(declare-const __flatten_38__31@363@01 Bool)
(declare-const __flatten_39__32@364@01 Bool)
(declare-const __flatten_40__33@365@01 $Ref)
(declare-const __flatten_42__35@366@01 $Ref)
(declare-const __flatten_41__34@367@01 Seq<Int>)
(declare-const __flatten_43__36@368@01 $Ref)
(declare-const __flatten_45__38@369@01 $Ref)
(declare-const __flatten_44__37@370@01 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@371@01 $Snap)
(assert (= $t@371@01 ($Snap.combine ($Snap.first $t@371@01) ($Snap.second $t@371@01))))
(declare-const $k@372@01 $Perm)
(assert ($Perm.isReadVar $k@372@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@372@01 $Perm.No) (< $Perm.No $k@372@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9185
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1339
;  :arith-assert-upper      838
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        742
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               615
;  :datatype-accessor-ax    408
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6231
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              897
;  :propagations            1386
;  :quant-instantiations    495
;  :rlimit-count            367503)
(assert (<= $Perm.No $k@372@01))
(assert (<= $k@372@01 $Perm.Write))
(assert (implies (< $Perm.No $k@372@01) (not (= diz@334@01 $Ref.null))))
(assert (=
  ($Snap.second $t@371@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@371@01))
    ($Snap.second ($Snap.second $t@371@01)))))
(assert (= ($Snap.first ($Snap.second $t@371@01)) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9191
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1339
;  :arith-assert-upper      839
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        742
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               616
;  :datatype-accessor-ax    409
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6234
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              898
;  :propagations            1386
;  :quant-instantiations    495
;  :rlimit-count            367746)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@371@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@371@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9197
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1339
;  :arith-assert-upper      839
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        742
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               617
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6237
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              899
;  :propagations            1386
;  :quant-instantiations    496
;  :rlimit-count            368018)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@371@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9202
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1339
;  :arith-assert-upper      839
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        742
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               618
;  :datatype-accessor-ax    411
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6238
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              900
;  :propagations            1386
;  :quant-instantiations    496
;  :rlimit-count            368195)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
  $Snap.unit))
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9208
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1339
;  :arith-assert-upper      839
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        742
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               619
;  :datatype-accessor-ax    412
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6240
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              901
;  :propagations            1386
;  :quant-instantiations    496
;  :rlimit-count            368414)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9215
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1341
;  :arith-assert-upper      840
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        743
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               620
;  :datatype-accessor-ax    413
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6246
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              902
;  :propagations            1386
;  :quant-instantiations    498
;  :rlimit-count            368744)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
  $Snap.unit))
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9221
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1341
;  :arith-assert-upper      840
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        743
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               621
;  :datatype-accessor-ax    414
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6248
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              903
;  :propagations            1386
;  :quant-instantiations    498
;  :rlimit-count            368983
;  :time                    0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
  $Snap.unit))
; [eval] (forall i__39: Int :: { diz.Write_a_m.Main_process_state[i__39] } 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|)
(declare-const i__39@373@01 Int)
(push) ; 4
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__39
(push) ; 5
; [then-branch: 137 | 0 <= i__39@373@01 | live]
; [else-branch: 137 | !(0 <= i__39@373@01) | live]
(push) ; 6
; [then-branch: 137 | 0 <= i__39@373@01]
(assert (<= 0 i__39@373@01))
; [eval] i__39 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9229
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1344
;  :arith-assert-upper      841
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        744
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               622
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6256
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              904
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            369422)
(pop) ; 6
(push) ; 6
; [else-branch: 137 | !(0 <= i__39@373@01)]
(assert (not (<= 0 i__39@373@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 138 | i__39@373@01 < |First:(Second:(Second:(Second:($t@371@01))))| && 0 <= i__39@373@01 | live]
; [else-branch: 138 | !(i__39@373@01 < |First:(Second:(Second:(Second:($t@371@01))))| && 0 <= i__39@373@01) | live]
(push) ; 6
; [then-branch: 138 | i__39@373@01 < |First:(Second:(Second:(Second:($t@371@01))))| && 0 <= i__39@373@01]
(assert (and
  (<
    i__39@373@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
  (<= 0 i__39@373@01)))
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1
; [eval] diz.Write_a_m.Main_process_state[i__39]
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9229
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1345
;  :arith-assert-upper      842
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        744
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               623
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6258
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              905
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            369579)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__39@373@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9229
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1345
;  :arith-assert-upper      842
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        744
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               623
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6258
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              906
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            369588)
; [eval] -1
(push) ; 7
; [then-branch: 139 | First:(Second:(Second:(Second:($t@371@01))))[i__39@373@01] == -1 | live]
; [else-branch: 139 | First:(Second:(Second:(Second:($t@371@01))))[i__39@373@01] != -1 | live]
(push) ; 8
; [then-branch: 139 | First:(Second:(Second:(Second:($t@371@01))))[i__39@373@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
    i__39@373@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 139 | First:(Second:(Second:(Second:($t@371@01))))[i__39@373@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
      i__39@373@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39]
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9229
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1345
;  :arith-assert-upper      842
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        744
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               624
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6259
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              907
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            369802)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__39@373@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9229
;  :arith-add-rows          115
;  :arith-assert-diseq      522
;  :arith-assert-lower      1345
;  :arith-assert-upper      842
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        744
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               624
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6259
;  :mk-clause               3751
;  :num-allocs              6964937
;  :num-checks              908
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            369811)
(push) ; 9
; [then-branch: 140 | 0 <= First:(Second:(Second:(Second:($t@371@01))))[i__39@373@01] | live]
; [else-branch: 140 | !(0 <= First:(Second:(Second:(Second:($t@371@01))))[i__39@373@01]) | live]
(push) ; 10
; [then-branch: 140 | 0 <= First:(Second:(Second:(Second:($t@371@01))))[i__39@373@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
    i__39@373@01)))
; [eval] diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9229
;  :arith-add-rows          115
;  :arith-assert-diseq      523
;  :arith-assert-lower      1348
;  :arith-assert-upper      842
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        745
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               625
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6262
;  :mk-clause               3752
;  :num-allocs              6964937
;  :num-checks              909
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            369974
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__39@373@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9229
;  :arith-add-rows          115
;  :arith-assert-diseq      523
;  :arith-assert-lower      1348
;  :arith-assert-upper      842
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        745
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               625
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6262
;  :mk-clause               3752
;  :num-allocs              6964937
;  :num-checks              910
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            369983)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9229
;  :arith-add-rows          115
;  :arith-assert-diseq      523
;  :arith-assert-lower      1348
;  :arith-assert-upper      842
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        745
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               626
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3748
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6262
;  :mk-clause               3752
;  :num-allocs              6964937
;  :num-checks              911
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            370031)
(pop) ; 10
(push) ; 10
; [else-branch: 140 | !(0 <= First:(Second:(Second:(Second:($t@371@01))))[i__39@373@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
      i__39@373@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 138 | !(i__39@373@01 < |First:(Second:(Second:(Second:($t@371@01))))| && 0 <= i__39@373@01)]
(assert (not
  (and
    (<
      i__39@373@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
    (<= 0 i__39@373@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__39@373@01 Int)) (!
  (implies
    (and
      (<
        i__39@373@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
      (<= 0 i__39@373@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
          i__39@373@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
            i__39@373@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
            i__39@373@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
    i__39@373@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9234
;  :arith-add-rows          115
;  :arith-assert-diseq      523
;  :arith-assert-lower      1348
;  :arith-assert-upper      842
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        745
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               627
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6264
;  :mk-clause               3752
;  :num-allocs              6964937
;  :num-checks              912
;  :propagations            1386
;  :quant-instantiations    500
;  :rlimit-count            370656)
(declare-const $k@374@01 $Perm)
(assert ($Perm.isReadVar $k@374@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@374@01 $Perm.No) (< $Perm.No $k@374@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9234
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      843
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               628
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6268
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              913
;  :propagations            1387
;  :quant-instantiations    500
;  :rlimit-count            370855)
(assert (<= $Perm.No $k@374@01))
(assert (<= $k@374@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@374@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9240
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               629
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6271
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              914
;  :propagations            1387
;  :quant-instantiations    500
;  :rlimit-count            371178)
(push) ; 4
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9240
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               630
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6271
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              915
;  :propagations            1387
;  :quant-instantiations    500
;  :rlimit-count            371226)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9246
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               631
;  :datatype-accessor-ax    418
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6274
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              916
;  :propagations            1387
;  :quant-instantiations    501
;  :rlimit-count            371582)
(push) ; 4
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9246
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               632
;  :datatype-accessor-ax    418
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6274
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              917
;  :propagations            1387
;  :quant-instantiations    501
;  :rlimit-count            371630)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9251
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               633
;  :datatype-accessor-ax    419
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6275
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              918
;  :propagations            1387
;  :quant-instantiations    501
;  :rlimit-count            371887)
(push) ; 4
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9251
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               634
;  :datatype-accessor-ax    419
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6275
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              919
;  :propagations            1387
;  :quant-instantiations    501
;  :rlimit-count            371935
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9256
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               635
;  :datatype-accessor-ax    420
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6276
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              920
;  :propagations            1387
;  :quant-instantiations    501
;  :rlimit-count            372202)
(push) ; 4
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9256
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               636
;  :datatype-accessor-ax    420
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6276
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              921
;  :propagations            1387
;  :quant-instantiations    501
;  :rlimit-count            372250)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          115
;  :arith-assert-diseq      524
;  :arith-assert-lower      1350
;  :arith-assert-upper      844
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               637
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6277
;  :mk-clause               3754
;  :num-allocs              6964937
;  :num-checks              922
;  :propagations            1387
;  :quant-instantiations    501
;  :rlimit-count            372527)
(declare-const $k@375@01 $Perm)
(assert ($Perm.isReadVar $k@375@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@375@01 $Perm.No) (< $Perm.No $k@375@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          115
;  :arith-assert-diseq      525
;  :arith-assert-lower      1352
;  :arith-assert-upper      845
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        747
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               638
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6281
;  :mk-clause               3756
;  :num-allocs              6964937
;  :num-checks              923
;  :propagations            1388
;  :quant-instantiations    501
;  :rlimit-count            372725)
(assert (<= $Perm.No $k@375@01))
(assert (<= $k@375@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@375@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9267
;  :arith-add-rows          115
;  :arith-assert-diseq      525
;  :arith-assert-lower      1352
;  :arith-assert-upper      846
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        747
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6284
;  :mk-clause               3756
;  :num-allocs              6964937
;  :num-checks              924
;  :propagations            1388
;  :quant-instantiations    501
;  :rlimit-count            373098)
(push) ; 4
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9267
;  :arith-add-rows          115
;  :arith-assert-diseq      525
;  :arith-assert-lower      1352
;  :arith-assert-upper      846
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        747
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               640
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6284
;  :mk-clause               3756
;  :num-allocs              6964937
;  :num-checks              925
;  :propagations            1388
;  :quant-instantiations    501
;  :rlimit-count            373146
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9273
;  :arith-add-rows          115
;  :arith-assert-diseq      525
;  :arith-assert-lower      1352
;  :arith-assert-upper      846
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        747
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               641
;  :datatype-accessor-ax    423
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6287
;  :mk-clause               3756
;  :num-allocs              6964937
;  :num-checks              926
;  :propagations            1388
;  :quant-instantiations    502
;  :rlimit-count            373556)
(push) ; 4
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9273
;  :arith-add-rows          115
;  :arith-assert-diseq      525
;  :arith-assert-lower      1352
;  :arith-assert-upper      846
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        747
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               642
;  :datatype-accessor-ax    423
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6287
;  :mk-clause               3756
;  :num-allocs              6964937
;  :num-checks              927
;  :propagations            1388
;  :quant-instantiations    502
;  :rlimit-count            373604)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9278
;  :arith-add-rows          115
;  :arith-assert-diseq      525
;  :arith-assert-lower      1352
;  :arith-assert-upper      846
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        747
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               643
;  :datatype-accessor-ax    424
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6288
;  :mk-clause               3756
;  :num-allocs              6964937
;  :num-checks              928
;  :propagations            1388
;  :quant-instantiations    502
;  :rlimit-count            373911
;  :time                    0.01)
(declare-const $k@376@01 $Perm)
(assert ($Perm.isReadVar $k@376@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@376@01 $Perm.No) (< $Perm.No $k@376@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9278
;  :arith-add-rows          115
;  :arith-assert-diseq      526
;  :arith-assert-lower      1354
;  :arith-assert-upper      847
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        748
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               644
;  :datatype-accessor-ax    424
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6292
;  :mk-clause               3758
;  :num-allocs              6964937
;  :num-checks              929
;  :propagations            1389
;  :quant-instantiations    502
;  :rlimit-count            374110)
(assert (<= $Perm.No $k@376@01))
(assert (<= $k@376@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@376@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9284
;  :arith-add-rows          115
;  :arith-assert-diseq      526
;  :arith-assert-lower      1354
;  :arith-assert-upper      848
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        748
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               645
;  :datatype-accessor-ax    425
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6295
;  :mk-clause               3758
;  :num-allocs              6964937
;  :num-checks              930
;  :propagations            1389
;  :quant-instantiations    502
;  :rlimit-count            374513)
(push) ; 4
(assert (not (< $Perm.No $k@376@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9284
;  :arith-add-rows          115
;  :arith-assert-diseq      526
;  :arith-assert-lower      1354
;  :arith-assert-upper      848
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        748
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               646
;  :datatype-accessor-ax    425
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6295
;  :mk-clause               3758
;  :num-allocs              6964937
;  :num-checks              931
;  :propagations            1389
;  :quant-instantiations    502
;  :rlimit-count            374561)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9290
;  :arith-add-rows          115
;  :arith-assert-diseq      526
;  :arith-assert-lower      1354
;  :arith-assert-upper      848
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        748
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6298
;  :mk-clause               3758
;  :num-allocs              6964937
;  :num-checks              932
;  :propagations            1389
;  :quant-instantiations    503
;  :rlimit-count            374997)
(push) ; 4
(assert (not (< $Perm.No $k@376@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9290
;  :arith-add-rows          115
;  :arith-assert-diseq      526
;  :arith-assert-lower      1354
;  :arith-assert-upper      848
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        748
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               648
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6298
;  :mk-clause               3758
;  :num-allocs              6964937
;  :num-checks              933
;  :propagations            1389
;  :quant-instantiations    503
;  :rlimit-count            375045)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9295
;  :arith-add-rows          115
;  :arith-assert-diseq      526
;  :arith-assert-lower      1354
;  :arith-assert-upper      848
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        748
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               649
;  :datatype-accessor-ax    427
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6299
;  :mk-clause               3758
;  :num-allocs              6964937
;  :num-checks              934
;  :propagations            1389
;  :quant-instantiations    503
;  :rlimit-count            375382)
(declare-const $k@377@01 $Perm)
(assert ($Perm.isReadVar $k@377@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@377@01 $Perm.No) (< $Perm.No $k@377@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9295
;  :arith-add-rows          115
;  :arith-assert-diseq      527
;  :arith-assert-lower      1356
;  :arith-assert-upper      849
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        749
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               650
;  :datatype-accessor-ax    427
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6303
;  :mk-clause               3760
;  :num-allocs              6964937
;  :num-checks              935
;  :propagations            1390
;  :quant-instantiations    503
;  :rlimit-count            375581)
(assert (<= $Perm.No $k@377@01))
(assert (<= $k@377@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@377@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9301
;  :arith-add-rows          115
;  :arith-assert-diseq      527
;  :arith-assert-lower      1356
;  :arith-assert-upper      850
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        749
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               651
;  :datatype-accessor-ax    428
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6306
;  :mk-clause               3760
;  :num-allocs              6964937
;  :num-checks              936
;  :propagations            1390
;  :quant-instantiations    503
;  :rlimit-count            376014)
(push) ; 4
(assert (not (< $Perm.No $k@377@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9301
;  :arith-add-rows          115
;  :arith-assert-diseq      527
;  :arith-assert-lower      1356
;  :arith-assert-upper      850
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        749
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               652
;  :datatype-accessor-ax    428
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6306
;  :mk-clause               3760
;  :num-allocs              6964937
;  :num-checks              937
;  :propagations            1390
;  :quant-instantiations    503
;  :rlimit-count            376062)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9307
;  :arith-add-rows          115
;  :arith-assert-diseq      527
;  :arith-assert-lower      1356
;  :arith-assert-upper      850
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        749
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               653
;  :datatype-accessor-ax    429
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6309
;  :mk-clause               3760
;  :num-allocs              6964937
;  :num-checks              938
;  :propagations            1390
;  :quant-instantiations    504
;  :rlimit-count            376528
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9307
;  :arith-add-rows          115
;  :arith-assert-diseq      527
;  :arith-assert-lower      1356
;  :arith-assert-upper      850
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        749
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               654
;  :datatype-accessor-ax    429
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6309
;  :mk-clause               3760
;  :num-allocs              6964937
;  :num-checks              939
;  :propagations            1390
;  :quant-instantiations    504
;  :rlimit-count            376576)
(declare-const $k@378@01 $Perm)
(assert ($Perm.isReadVar $k@378@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@378@01 $Perm.No) (< $Perm.No $k@378@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9307
;  :arith-add-rows          115
;  :arith-assert-diseq      528
;  :arith-assert-lower      1358
;  :arith-assert-upper      851
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        750
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               655
;  :datatype-accessor-ax    429
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6313
;  :mk-clause               3762
;  :num-allocs              6964937
;  :num-checks              940
;  :propagations            1391
;  :quant-instantiations    504
;  :rlimit-count            376774)
(assert (<= $Perm.No $k@378@01))
(assert (<= $k@378@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@378@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9313
;  :arith-add-rows          115
;  :arith-assert-diseq      528
;  :arith-assert-lower      1358
;  :arith-assert-upper      852
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        750
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               656
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6316
;  :mk-clause               3762
;  :num-allocs              6964937
;  :num-checks              941
;  :propagations            1391
;  :quant-instantiations    504
;  :rlimit-count            377227)
(push) ; 4
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9313
;  :arith-add-rows          115
;  :arith-assert-diseq      528
;  :arith-assert-lower      1358
;  :arith-assert-upper      852
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        750
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               657
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6316
;  :mk-clause               3762
;  :num-allocs              6964937
;  :num-checks              942
;  :propagations            1391
;  :quant-instantiations    504
;  :rlimit-count            377275)
(push) ; 4
(assert (not (< $Perm.No $k@378@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9313
;  :arith-add-rows          115
;  :arith-assert-diseq      528
;  :arith-assert-lower      1358
;  :arith-assert-upper      852
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        750
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               658
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6316
;  :mk-clause               3762
;  :num-allocs              6964937
;  :num-checks              943
;  :propagations            1391
;  :quant-instantiations    504
;  :rlimit-count            377323
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9313
;  :arith-add-rows          115
;  :arith-assert-diseq      528
;  :arith-assert-lower      1358
;  :arith-assert-upper      852
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        750
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               659
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6316
;  :mk-clause               3762
;  :num-allocs              6964937
;  :num-checks              944
;  :propagations            1391
;  :quant-instantiations    504
;  :rlimit-count            377371)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 4
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9317
;  :arith-add-rows          115
;  :arith-assert-diseq      528
;  :arith-assert-lower      1358
;  :arith-assert-upper      852
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        750
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               660
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6319
;  :mk-clause               3762
;  :num-allocs              6964937
;  :num-checks              945
;  :propagations            1391
;  :quant-instantiations    505
;  :rlimit-count            377802
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9317
;  :arith-add-rows          115
;  :arith-assert-diseq      528
;  :arith-assert-lower      1358
;  :arith-assert-upper      852
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        750
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               661
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3749
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6319
;  :mk-clause               3762
;  :num-allocs              6964937
;  :num-checks              946
;  :propagations            1391
;  :quant-instantiations    505
;  :rlimit-count            377850)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
  diz@334@01))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@379@01 $Perm)
(assert ($Perm.isReadVar $k@379@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@379@01 $Perm.No) (< $Perm.No $k@379@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1360
;  :arith-assert-upper      853
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               662
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6324
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              947
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378256)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@337@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1360
;  :arith-assert-upper      853
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               662
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6324
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              948
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378267
;  :time                    0.01)
(assert (< $k@379@01 $k@337@01))
(assert (<= $Perm.No (- $k@337@01 $k@379@01)))
(assert (<= (- $k@337@01 $k@379@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@337@01 $k@379@01)) (not (= diz@334@01 $Ref.null))))
; [eval] diz.Write_a_m != null
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1361
;  :arith-assert-upper      855
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               663
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6327
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              949
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378487)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1361
;  :arith-assert-upper      855
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               664
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6327
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              950
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378535)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1361
;  :arith-assert-upper      855
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               665
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6327
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              951
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378583)
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1361
;  :arith-assert-upper      855
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               666
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6327
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              952
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378631)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1361
;  :arith-assert-upper      855
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               667
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6327
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              953
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378679)
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1361
;  :arith-assert-upper      855
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               668
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6327
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              954
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378727)
; [eval] (forall i__39: Int :: { diz.Write_a_m.Main_process_state[i__39] } 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|)
(declare-const i__39@380@01 Int)
(push) ; 4
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__39
(push) ; 5
; [then-branch: 141 | 0 <= i__39@380@01 | live]
; [else-branch: 141 | !(0 <= i__39@380@01) | live]
(push) ; 6
; [then-branch: 141 | 0 <= i__39@380@01]
(assert (<= 0 i__39@380@01))
; [eval] i__39 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1362
;  :arith-assert-upper      855
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               669
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6328
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              955
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378827)
(pop) ; 6
(push) ; 6
; [else-branch: 141 | !(0 <= i__39@380@01)]
(assert (not (<= 0 i__39@380@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 142 | i__39@380@01 < |First:(Second:(Second:(Second:($t@352@01))))| && 0 <= i__39@380@01 | live]
; [else-branch: 142 | !(i__39@380@01 < |First:(Second:(Second:(Second:($t@352@01))))| && 0 <= i__39@380@01) | live]
(push) ; 6
; [then-branch: 142 | i__39@380@01 < |First:(Second:(Second:(Second:($t@352@01))))| && 0 <= i__39@380@01]
(assert (and
  (<
    i__39@380@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  (<= 0 i__39@380@01)))
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1
; [eval] diz.Write_a_m.Main_process_state[i__39]
(push) ; 7
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1363
;  :arith-assert-upper      856
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               670
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6330
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              956
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378984)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__39@380@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      529
;  :arith-assert-lower      1363
;  :arith-assert-upper      856
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        751
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               670
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6330
;  :mk-clause               3764
;  :num-allocs              6964937
;  :num-checks              957
;  :propagations            1392
;  :quant-instantiations    505
;  :rlimit-count            378993)
; [eval] -1
(push) ; 7
; [then-branch: 143 | First:(Second:(Second:(Second:($t@352@01))))[i__39@380@01] == -1 | live]
; [else-branch: 143 | First:(Second:(Second:(Second:($t@352@01))))[i__39@380@01] != -1 | live]
(push) ; 8
; [then-branch: 143 | First:(Second:(Second:(Second:($t@352@01))))[i__39@380@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    i__39@380@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 143 | First:(Second:(Second:(Second:($t@352@01))))[i__39@380@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
      i__39@380@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39]
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      530
;  :arith-assert-lower      1366
;  :arith-assert-upper      857
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        752
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               671
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6336
;  :mk-clause               3768
;  :num-allocs              6964937
;  :num-checks              958
;  :propagations            1394
;  :quant-instantiations    506
;  :rlimit-count            379264)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__39@380@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      530
;  :arith-assert-lower      1366
;  :arith-assert-upper      857
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        752
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               671
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6336
;  :mk-clause               3768
;  :num-allocs              6964937
;  :num-checks              959
;  :propagations            1394
;  :quant-instantiations    506
;  :rlimit-count            379273)
(push) ; 9
; [then-branch: 144 | 0 <= First:(Second:(Second:(Second:($t@352@01))))[i__39@380@01] | live]
; [else-branch: 144 | !(0 <= First:(Second:(Second:(Second:($t@352@01))))[i__39@380@01]) | live]
(push) ; 10
; [then-branch: 144 | 0 <= First:(Second:(Second:(Second:($t@352@01))))[i__39@380@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    i__39@380@01)))
; [eval] diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      530
;  :arith-assert-lower      1366
;  :arith-assert-upper      857
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        752
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               672
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6336
;  :mk-clause               3768
;  :num-allocs              6964937
;  :num-checks              960
;  :propagations            1394
;  :quant-instantiations    506
;  :rlimit-count            379426)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__39@380@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      530
;  :arith-assert-lower      1366
;  :arith-assert-upper      857
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        752
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               672
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6336
;  :mk-clause               3768
;  :num-allocs              6964937
;  :num-checks              961
;  :propagations            1394
;  :quant-instantiations    506
;  :rlimit-count            379435)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      530
;  :arith-assert-lower      1366
;  :arith-assert-upper      857
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        752
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               673
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3761
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6336
;  :mk-clause               3768
;  :num-allocs              6964937
;  :num-checks              962
;  :propagations            1394
;  :quant-instantiations    506
;  :rlimit-count            379483)
(pop) ; 10
(push) ; 10
; [else-branch: 144 | !(0 <= First:(Second:(Second:(Second:($t@352@01))))[i__39@380@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
      i__39@380@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 142 | !(i__39@380@01 < |First:(Second:(Second:(Second:($t@352@01))))| && 0 <= i__39@380@01)]
(assert (not
  (and
    (<
      i__39@380@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
    (<= 0 i__39@380@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__39@380@01 Int)) (!
  (implies
    (and
      (<
        i__39@380@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
      (<= 0 i__39@380@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
          i__39@380@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
            i__39@380@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
            i__39@380@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    i__39@380@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      531
;  :arith-assert-lower      1367
;  :arith-assert-upper      858
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        753
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               674
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6344
;  :mk-clause               3780
;  :num-allocs              6964937
;  :num-checks              963
;  :propagations            1396
;  :quant-instantiations    507
;  :rlimit-count            379929)
(assert (forall ((i__39@380@01 Int)) (!
  (implies
    (and
      (<
        i__39@380@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
      (<= 0 i__39@380@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
          i__39@380@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
            i__39@380@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
            i__39@380@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    i__39@380@01))
  :qid |prog.l<no position>|)))
(declare-const $k@381@01 $Perm)
(assert ($Perm.isReadVar $k@381@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1369
;  :arith-assert-upper      859
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               675
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6349
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              964
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380488)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@381@01 $Perm.No) (< $Perm.No $k@381@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1369
;  :arith-assert-upper      859
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               676
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6349
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              965
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380538)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@354@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1369
;  :arith-assert-upper      859
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               676
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6349
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              966
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380549)
(assert (< $k@381@01 $k@354@01))
(assert (<= $Perm.No (- $k@354@01 $k@381@01)))
(assert (<= (- $k@354@01 $k@381@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@354@01 $k@381@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand != null
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1371
;  :arith-assert-upper      860
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               677
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6352
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              967
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380757)
(push) ; 4
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1371
;  :arith-assert-upper      860
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               678
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6352
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              968
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380805
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1371
;  :arith-assert-upper      860
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               679
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6352
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              969
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380853)
(push) ; 4
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1371
;  :arith-assert-upper      860
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               680
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6352
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              970
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380901)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1371
;  :arith-assert-upper      860
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               681
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6352
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              971
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380949)
(push) ; 4
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1371
;  :arith-assert-upper      860
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               682
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6352
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              972
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            380997)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1371
;  :arith-assert-upper      860
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               683
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6352
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              973
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            381045
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      532
;  :arith-assert-lower      1371
;  :arith-assert-upper      860
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        754
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               684
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6352
;  :mk-clause               3782
;  :num-allocs              6964937
;  :num-checks              974
;  :propagations            1397
;  :quant-instantiations    507
;  :rlimit-count            381093)
(declare-const $k@382@01 $Perm)
(assert ($Perm.isReadVar $k@382@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      533
;  :arith-assert-lower      1373
;  :arith-assert-upper      861
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        755
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               685
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6356
;  :mk-clause               3784
;  :num-allocs              6964937
;  :num-checks              975
;  :propagations            1398
;  :quant-instantiations    507
;  :rlimit-count            381289)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@382@01 $Perm.No) (< $Perm.No $k@382@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9320
;  :arith-add-rows          115
;  :arith-assert-diseq      533
;  :arith-assert-lower      1373
;  :arith-assert-upper      861
;  :arith-bound-prop        110
;  :arith-conflicts         95
;  :arith-eq-adapter        755
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               686
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3777
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6356
;  :mk-clause               3784
;  :num-allocs              6964937
;  :num-checks              976
;  :propagations            1398
;  :quant-instantiations    507
;  :rlimit-count            381339)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@338@01 $k@355@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      533
;  :arith-assert-lower      1373
;  :arith-assert-upper      862
;  :arith-bound-prop        110
;  :arith-conflicts         96
;  :arith-eq-adapter        756
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               687
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6358
;  :mk-clause               3786
;  :num-allocs              6964937
;  :num-checks              977
;  :propagations            1399
;  :quant-instantiations    507
;  :rlimit-count            381399)
(assert (< $k@382@01 (+ $k@338@01 $k@355@01)))
(assert (<= $Perm.No (- (+ $k@338@01 $k@355@01) $k@382@01)))
(assert (<= (- (+ $k@338@01 $k@355@01) $k@382@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@338@01 $k@355@01) $k@382@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      533
;  :arith-assert-lower      1375
;  :arith-assert-upper      863
;  :arith-bound-prop        110
;  :arith-conflicts         96
;  :arith-eq-adapter        756
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        9
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               688
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6361
;  :mk-clause               3786
;  :num-allocs              6964937
;  :num-checks              978
;  :propagations            1399
;  :quant-instantiations    507
;  :rlimit-count            381622
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No (+ $k@338@01 $k@355@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      533
;  :arith-assert-lower      1375
;  :arith-assert-upper      864
;  :arith-bound-prop        110
;  :arith-conflicts         97
;  :arith-eq-adapter        756
;  :arith-fixed-eqs         187
;  :arith-offset-eqs        9
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               689
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6362
;  :mk-clause               3786
;  :num-allocs              6964937
;  :num-checks              979
;  :propagations            1399
;  :quant-instantiations    507
;  :rlimit-count            381682)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      533
;  :arith-assert-lower      1375
;  :arith-assert-upper      864
;  :arith-bound-prop        110
;  :arith-conflicts         97
;  :arith-eq-adapter        756
;  :arith-fixed-eqs         187
;  :arith-offset-eqs        9
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6362
;  :mk-clause               3786
;  :num-allocs              6964937
;  :num-checks              980
;  :propagations            1399
;  :quant-instantiations    507
;  :rlimit-count            381730
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No (+ $k@338@01 $k@355@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      533
;  :arith-assert-lower      1375
;  :arith-assert-upper      865
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        756
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               691
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6363
;  :mk-clause               3786
;  :num-allocs              6964937
;  :num-checks              981
;  :propagations            1399
;  :quant-instantiations    507
;  :rlimit-count            381790)
(push) ; 4
(assert (not (= diz@334@01 $t@356@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      533
;  :arith-assert-lower      1375
;  :arith-assert-upper      865
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        756
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               692
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6364
;  :mk-clause               3786
;  :num-allocs              6964937
;  :num-checks              982
;  :propagations            1399
;  :quant-instantiations    507
;  :rlimit-count            381850)
(declare-const $k@383@01 $Perm)
(assert ($Perm.isReadVar $k@383@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      534
;  :arith-assert-lower      1377
;  :arith-assert-upper      866
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        757
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               693
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6368
;  :mk-clause               3788
;  :num-allocs              6964937
;  :num-checks              983
;  :propagations            1400
;  :quant-instantiations    507
;  :rlimit-count            382046)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@383@01 $Perm.No) (< $Perm.No $k@383@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      534
;  :arith-assert-lower      1377
;  :arith-assert-upper      866
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        757
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               694
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6368
;  :mk-clause               3788
;  :num-allocs              6964937
;  :num-checks              984
;  :propagations            1400
;  :quant-instantiations    507
;  :rlimit-count            382096)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@357@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      534
;  :arith-assert-lower      1377
;  :arith-assert-upper      866
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        757
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               694
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6368
;  :mk-clause               3788
;  :num-allocs              6964937
;  :num-checks              985
;  :propagations            1400
;  :quant-instantiations    507
;  :rlimit-count            382107)
(assert (< $k@383@01 $k@357@01))
(assert (<= $Perm.No (- $k@357@01 $k@383@01)))
(assert (<= (- $k@357@01 $k@383@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@357@01 $k@383@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      534
;  :arith-assert-lower      1379
;  :arith-assert-upper      867
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        757
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            279
;  :binary-propagations     22
;  :conflicts               695
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6371
;  :mk-clause               3788
;  :num-allocs              6964937
;  :num-checks              986
;  :propagations            1400
;  :quant-instantiations    507
;  :rlimit-count            382321)
(push) ; 4
(assert (not (< $Perm.No $k@357@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      534
;  :arith-assert-lower      1379
;  :arith-assert-upper      867
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        757
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            279
;  :binary-propagations     22
;  :conflicts               696
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6371
;  :mk-clause               3788
;  :num-allocs              6964937
;  :num-checks              987
;  :propagations            1400
;  :quant-instantiations    507
;  :rlimit-count            382369)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      534
;  :arith-assert-lower      1379
;  :arith-assert-upper      867
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        757
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            279
;  :binary-propagations     22
;  :conflicts               697
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6371
;  :mk-clause               3788
;  :num-allocs              6964937
;  :num-checks              988
;  :propagations            1400
;  :quant-instantiations    507
;  :rlimit-count            382417
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@357@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      534
;  :arith-assert-lower      1379
;  :arith-assert-upper      867
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        757
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            279
;  :binary-propagations     22
;  :conflicts               698
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6371
;  :mk-clause               3788
;  :num-allocs              6964937
;  :num-checks              989
;  :propagations            1400
;  :quant-instantiations    507
;  :rlimit-count            382465)
(declare-const $k@384@01 $Perm)
(assert ($Perm.isReadVar $k@384@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      535
;  :arith-assert-lower      1381
;  :arith-assert-upper      868
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            279
;  :binary-propagations     22
;  :conflicts               699
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6375
;  :mk-clause               3790
;  :num-allocs              6964937
;  :num-checks              990
;  :propagations            1401
;  :quant-instantiations    507
;  :rlimit-count            382662
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@384@01 $Perm.No) (< $Perm.No $k@384@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      535
;  :arith-assert-lower      1381
;  :arith-assert-upper      868
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            279
;  :binary-propagations     22
;  :conflicts               700
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6375
;  :mk-clause               3790
;  :num-allocs              6964937
;  :num-checks              991
;  :propagations            1401
;  :quant-instantiations    507
;  :rlimit-count            382712)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@358@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      535
;  :arith-assert-lower      1381
;  :arith-assert-upper      868
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            279
;  :binary-propagations     22
;  :conflicts               700
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6375
;  :mk-clause               3790
;  :num-allocs              6964937
;  :num-checks              992
;  :propagations            1401
;  :quant-instantiations    507
;  :rlimit-count            382723
;  :time                    0.01)
(assert (< $k@384@01 $k@358@01))
(assert (<= $Perm.No (- $k@358@01 $k@384@01)))
(assert (<= (- $k@358@01 $k@384@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@358@01 $k@384@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_read != null
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      535
;  :arith-assert-lower      1382
;  :arith-assert-upper      870
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               701
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6378
;  :mk-clause               3790
;  :num-allocs              6964937
;  :num-checks              993
;  :propagations            1401
;  :quant-instantiations    507
;  :rlimit-count            382937)
(push) ; 4
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      535
;  :arith-assert-lower      1382
;  :arith-assert-upper      870
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        758
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               702
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6378
;  :mk-clause               3790
;  :num-allocs              6964937
;  :num-checks              994
;  :propagations            1401
;  :quant-instantiations    507
;  :rlimit-count            382985)
(declare-const $k@385@01 $Perm)
(assert ($Perm.isReadVar $k@385@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1384
;  :arith-assert-upper      871
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               703
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6382
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              995
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383182)
(push) ; 4
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1384
;  :arith-assert-upper      871
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               704
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6382
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              996
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383230)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@385@01 $Perm.No) (< $Perm.No $k@385@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1384
;  :arith-assert-upper      871
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               705
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6382
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              997
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383280)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@359@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1384
;  :arith-assert-upper      871
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               705
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6382
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              998
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383291)
(assert (< $k@385@01 $k@359@01))
(assert (<= $Perm.No (- $k@359@01 $k@385@01)))
(assert (<= (- $k@359@01 $k@385@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@359@01 $k@385@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1386
;  :arith-assert-upper      872
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               706
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6385
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              999
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383499)
(push) ; 4
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1386
;  :arith-assert-upper      872
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               707
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6385
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              1000
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383547
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1386
;  :arith-assert-upper      872
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               708
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6385
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              1001
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383595)
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1386
;  :arith-assert-upper      872
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               709
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6385
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              1002
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383643)
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 4
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1386
;  :arith-assert-upper      872
;  :arith-bound-prop        110
;  :arith-conflicts         98
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               710
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6385
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              1003
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383691)
(push) ; 4
(assert (not (< $Perm.No (+ $k@338@01 $k@355@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1386
;  :arith-assert-upper      873
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               711
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6386
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              1004
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383751)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@356@01 diz@334@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9321
;  :arith-add-rows          115
;  :arith-assert-diseq      536
;  :arith-assert-lower      1386
;  :arith-assert-upper      873
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        759
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               712
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 1675
;  :datatype-occurs-check   714
;  :datatype-splits         1213
;  :decisions               1855
;  :del-clause              3779
;  :final-checks            304
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.09
;  :minimized-lits          2
;  :mk-bool-var             6386
;  :mk-clause               3792
;  :num-allocs              6964937
;  :num-checks              1005
;  :propagations            1402
;  :quant-instantiations    507
;  :rlimit-count            383803)
(assert (= $t@356@01 diz@334@01))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@372@01 $Perm.Write))
(assert ($Perm.isReadVar $k@374@01 $Perm.Write))
(assert ($Perm.isReadVar $k@375@01 $Perm.Write))
(assert ($Perm.isReadVar $k@376@01 $Perm.Write))
(assert ($Perm.isReadVar $k@377@01 $Perm.Write))
(assert ($Perm.isReadVar $k@378@01 $Perm.Write))
(assert (= $t@371@01 ($Snap.combine ($Snap.first $t@371@01) ($Snap.second $t@371@01))))
(assert (<= $Perm.No $k@372@01))
(assert (<= $k@372@01 $Perm.Write))
(assert (implies (< $Perm.No $k@372@01) (not (= diz@334@01 $Ref.null))))
(assert (=
  ($Snap.second $t@371@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@371@01))
    ($Snap.second ($Snap.second $t@371@01)))))
(assert (= ($Snap.first ($Snap.second $t@371@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@371@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@371@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@371@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
  $Snap.unit))
(assert (forall ((i__39@373@01 Int)) (!
  (implies
    (and
      (<
        i__39@373@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
      (<= 0 i__39@373@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
          i__39@373@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
            i__39@373@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
            i__39@373@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
    i__39@373@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))
(assert (<= $Perm.No $k@374@01))
(assert (<= $k@374@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@374@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))
(assert (<= $Perm.No $k@375@01))
(assert (<= $k@375@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@375@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))
(assert (<= $Perm.No $k@376@01))
(assert (<= $k@376@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@376@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
(assert (<= $Perm.No $k@377@01))
(assert (<= $k@377@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@377@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))))
(assert (<= $Perm.No $k@378@01))
(assert (<= $k@378@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@378@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))
  diz@334@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9742
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               712
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6538
;  :mk-clause               3806
;  :num-allocs              7307051
;  :num-checks              1008
;  :propagations            1408
;  :quant-instantiations    517
;  :rlimit-count            390668)
; [then-branch: 145 | True | live]
; [else-branch: 145 | False | dead]
(push) ; 5
; [then-branch: 145 | True]
; [exec]
; __flatten_37__30 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9742
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               713
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6538
;  :mk-clause               3806
;  :num-allocs              7307051
;  :num-checks              1009
;  :propagations            1408
;  :quant-instantiations    517
;  :rlimit-count            390721
;  :time                    0.00)
(declare-const __flatten_37__30@386@01 $Ref)
(assert (= __flatten_37__30@386@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))
; [exec]
; __flatten_36__29 := __flatten_37__30.Main_nand
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) __flatten_37__30@386@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9743
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               713
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6539
;  :mk-clause               3806
;  :num-allocs              7307051
;  :num-checks              1010
;  :propagations            1408
;  :quant-instantiations    517
;  :rlimit-count            390789)
(push) ; 6
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9743
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               714
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6539
;  :mk-clause               3806
;  :num-allocs              7307051
;  :num-checks              1011
;  :propagations            1408
;  :quant-instantiations    517
;  :rlimit-count            390837)
(declare-const __flatten_36__29@387@01 $Ref)
(assert (=
  __flatten_36__29@387@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))
; [exec]
; __flatten_38__31 := diz.Write_a_a
(declare-const __flatten_38__31@388@01 Bool)
(assert (=
  __flatten_38__31@388@01
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))
; [exec]
; __flatten_36__29.Nand_gate_A := __flatten_38__31
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
  __flatten_36__29@387@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9746
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               714
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6545
;  :mk-clause               3812
;  :num-allocs              7307051
;  :num-checks              1012
;  :propagations            1408
;  :quant-instantiations    519
;  :rlimit-count            391161)
(assert (not (= __flatten_36__29@387@01 $Ref.null)))
; [exec]
; __flatten_39__32 := !diz.Write_a_a
; [eval] !diz.Write_a_a
(declare-const __flatten_39__32@389@01 Bool)
(assert (=
  __flatten_39__32@389@01
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))
; [exec]
; diz.Write_a_a := __flatten_39__32
; [exec]
; __flatten_40__33 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9747
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               715
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6547
;  :mk-clause               3814
;  :num-allocs              7307051
;  :num-checks              1013
;  :propagations            1408
;  :quant-instantiations    519
;  :rlimit-count            391311)
(declare-const __flatten_40__33@390@01 $Ref)
(assert (= __flatten_40__33@390@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))
; [exec]
; __flatten_42__35 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9748
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6548
;  :mk-clause               3814
;  :num-allocs              7307051
;  :num-checks              1014
;  :propagations            1408
;  :quant-instantiations    519
;  :rlimit-count            391396)
(declare-const __flatten_42__35@391@01 $Ref)
(assert (= __flatten_42__35@391@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))
; [exec]
; __flatten_41__34 := __flatten_42__35.Main_process_state[0 := 0]
; [eval] __flatten_42__35.Main_process_state[0 := 0]
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) __flatten_42__35@391@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9749
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6549
;  :mk-clause               3814
;  :num-allocs              7307051
;  :num-checks              1015
;  :propagations            1408
;  :quant-instantiations    519
;  :rlimit-count            391444
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9749
;  :arith-add-rows          115
;  :arith-assert-diseq      542
;  :arith-assert-lower      1402
;  :arith-assert-upper      887
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        767
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        9
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6549
;  :mk-clause               3814
;  :num-allocs              7307051
;  :num-checks              1016
;  :propagations            1408
;  :quant-instantiations    519
;  :rlimit-count            391459)
(declare-const __flatten_41__34@392@01 Seq<Int>)
(assert (Seq_equal
  __flatten_41__34@392@01
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))
    0
    0)))
; [exec]
; __flatten_40__33.Main_process_state := __flatten_41__34
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) __flatten_40__33@390@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9760
;  :arith-add-rows          118
;  :arith-assert-diseq      543
;  :arith-assert-lower      1406
;  :arith-assert-upper      889
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        770
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        9
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6573
;  :mk-clause               3835
;  :num-allocs              7307051
;  :num-checks              1017
;  :propagations            1417
;  :quant-instantiations    524
;  :rlimit-count            391935)
(assert (not (= __flatten_40__33@390@01 $Ref.null)))
; [exec]
; __flatten_43__36 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9761
;  :arith-add-rows          118
;  :arith-assert-diseq      543
;  :arith-assert-lower      1406
;  :arith-assert-upper      889
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        770
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        9
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               717
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6574
;  :mk-clause               3835
;  :num-allocs              7307051
;  :num-checks              1018
;  :propagations            1417
;  :quant-instantiations    524
;  :rlimit-count            392039)
(declare-const __flatten_43__36@393@01 $Ref)
(assert (= __flatten_43__36@393@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))
; [exec]
; __flatten_45__38 := diz.Write_a_m
(push) ; 6
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9762
;  :arith-add-rows          118
;  :arith-assert-diseq      543
;  :arith-assert-lower      1406
;  :arith-assert-upper      889
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        770
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        9
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               718
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6575
;  :mk-clause               3835
;  :num-allocs              7307051
;  :num-checks              1019
;  :propagations            1417
;  :quant-instantiations    524
;  :rlimit-count            392124)
(declare-const __flatten_45__38@394@01 $Ref)
(assert (= __flatten_45__38@394@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))
; [exec]
; __flatten_44__37 := __flatten_45__38.Main_event_state[0 := 5000]
; [eval] __flatten_45__38.Main_event_state[0 := 5000]
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) __flatten_45__38@394@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9763
;  :arith-add-rows          118
;  :arith-assert-diseq      543
;  :arith-assert-lower      1406
;  :arith-assert-upper      889
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        770
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        9
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               718
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6576
;  :mk-clause               3835
;  :num-allocs              7307051
;  :num-checks              1020
;  :propagations            1417
;  :quant-instantiations    524
;  :rlimit-count            392172
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9763
;  :arith-add-rows          118
;  :arith-assert-diseq      543
;  :arith-assert-lower      1406
;  :arith-assert-upper      889
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        770
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        9
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               718
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6576
;  :mk-clause               3835
;  :num-allocs              7307051
;  :num-checks              1021
;  :propagations            1417
;  :quant-instantiations    524
;  :rlimit-count            392187)
(declare-const __flatten_44__37@395@01 Seq<Int>)
(assert (Seq_equal
  __flatten_44__37@395@01
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))
    0
    5000)))
; [exec]
; __flatten_43__36.Main_event_state := __flatten_44__37
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) __flatten_43__36@393@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9774
;  :arith-add-rows          121
;  :arith-assert-diseq      544
;  :arith-assert-lower      1410
;  :arith-assert-upper      891
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        773
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               718
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6600
;  :mk-clause               3855
;  :num-allocs              7307051
;  :num-checks              1022
;  :propagations            1426
;  :quant-instantiations    529
;  :rlimit-count            392694
;  :time                    0.00)
(assert (not (= __flatten_43__36@393@01 $Ref.null)))
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@396@01 $Snap)
(assert (= $t@396@01 ($Snap.combine ($Snap.first $t@396@01) ($Snap.second $t@396@01))))
(declare-const $k@397@01 $Perm)
(assert ($Perm.isReadVar $k@397@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@397@01 $Perm.No) (< $Perm.No $k@397@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9779
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1412
;  :arith-assert-upper      892
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        774
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               719
;  :datatype-accessor-ax    454
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6605
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1023
;  :propagations            1427
;  :quant-instantiations    529
;  :rlimit-count            393005)
(assert (<= $Perm.No $k@397@01))
(assert (<= $k@397@01 $Perm.Write))
(assert (implies (< $Perm.No $k@397@01) (not (= diz@334@01 $Ref.null))))
(assert (=
  ($Snap.second $t@396@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@396@01))
    ($Snap.second ($Snap.second $t@396@01)))))
(assert (= ($Snap.first ($Snap.second $t@396@01)) $Snap.unit))
; [eval] diz.Write_a_m != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9785
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1412
;  :arith-assert-upper      893
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        774
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               720
;  :datatype-accessor-ax    455
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6608
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1024
;  :propagations            1427
;  :quant-instantiations    529
;  :rlimit-count            393248)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@396@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@396@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9791
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1412
;  :arith-assert-upper      893
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        774
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               721
;  :datatype-accessor-ax    456
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6611
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1025
;  :propagations            1427
;  :quant-instantiations    530
;  :rlimit-count            393520)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@396@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9796
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1412
;  :arith-assert-upper      893
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        774
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               722
;  :datatype-accessor-ax    457
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6612
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1026
;  :propagations            1427
;  :quant-instantiations    530
;  :rlimit-count            393697
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
  $Snap.unit))
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9802
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1412
;  :arith-assert-upper      893
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        774
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               723
;  :datatype-accessor-ax    458
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6614
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1027
;  :propagations            1427
;  :quant-instantiations    530
;  :rlimit-count            393916)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9809
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1414
;  :arith-assert-upper      894
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        775
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               724
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6620
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1028
;  :propagations            1427
;  :quant-instantiations    532
;  :rlimit-count            394246
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
  $Snap.unit))
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9815
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1414
;  :arith-assert-upper      894
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        775
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               725
;  :datatype-accessor-ax    460
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6622
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1029
;  :propagations            1427
;  :quant-instantiations    532
;  :rlimit-count            394485)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
  $Snap.unit))
; [eval] (forall i__40: Int :: { diz.Write_a_m.Main_process_state[i__40] } 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|)
(declare-const i__40@398@01 Int)
(push) ; 7
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__40
(push) ; 8
; [then-branch: 146 | 0 <= i__40@398@01 | live]
; [else-branch: 146 | !(0 <= i__40@398@01) | live]
(push) ; 9
; [then-branch: 146 | 0 <= i__40@398@01]
(assert (<= 0 i__40@398@01))
; [eval] i__40 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9823
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1417
;  :arith-assert-upper      895
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        776
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               726
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6630
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1030
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            394923)
(pop) ; 9
(push) ; 9
; [else-branch: 146 | !(0 <= i__40@398@01)]
(assert (not (<= 0 i__40@398@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 147 | i__40@398@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i__40@398@01 | live]
; [else-branch: 147 | !(i__40@398@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i__40@398@01) | live]
(push) ; 9
; [then-branch: 147 | i__40@398@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i__40@398@01]
(assert (and
  (<
    i__40@398@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
  (<= 0 i__40@398@01)))
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1
; [eval] diz.Write_a_m.Main_process_state[i__40]
(push) ; 10
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9823
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1418
;  :arith-assert-upper      896
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        776
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               727
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6632
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1031
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            395080)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__40@398@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9823
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1418
;  :arith-assert-upper      896
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        776
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               727
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6632
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1032
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            395089)
; [eval] -1
(push) ; 10
; [then-branch: 148 | First:(Second:(Second:(Second:($t@396@01))))[i__40@398@01] == -1 | live]
; [else-branch: 148 | First:(Second:(Second:(Second:($t@396@01))))[i__40@398@01] != -1 | live]
(push) ; 11
; [then-branch: 148 | First:(Second:(Second:(Second:($t@396@01))))[i__40@398@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i__40@398@01)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 148 | First:(Second:(Second:(Second:($t@396@01))))[i__40@398@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      i__40@398@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40]
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9823
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1418
;  :arith-assert-upper      896
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        776
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               728
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6633
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1033
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            395303)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__40@398@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9823
;  :arith-add-rows          121
;  :arith-assert-diseq      545
;  :arith-assert-lower      1418
;  :arith-assert-upper      896
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        776
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               728
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6633
;  :mk-clause               3857
;  :num-allocs              7307051
;  :num-checks              1034
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            395312)
(push) ; 12
; [then-branch: 149 | 0 <= First:(Second:(Second:(Second:($t@396@01))))[i__40@398@01] | live]
; [else-branch: 149 | !(0 <= First:(Second:(Second:(Second:($t@396@01))))[i__40@398@01]) | live]
(push) ; 13
; [then-branch: 149 | 0 <= First:(Second:(Second:(Second:($t@396@01))))[i__40@398@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i__40@398@01)))
; [eval] diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9823
;  :arith-add-rows          121
;  :arith-assert-diseq      546
;  :arith-assert-lower      1421
;  :arith-assert-upper      896
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        777
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               729
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6636
;  :mk-clause               3858
;  :num-allocs              7307051
;  :num-checks              1035
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            395474)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__40@398@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9823
;  :arith-add-rows          121
;  :arith-assert-diseq      546
;  :arith-assert-lower      1421
;  :arith-assert-upper      896
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        777
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               729
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6636
;  :mk-clause               3858
;  :num-allocs              7307051
;  :num-checks              1036
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            395483)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9823
;  :arith-add-rows          121
;  :arith-assert-diseq      546
;  :arith-assert-lower      1421
;  :arith-assert-upper      896
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        777
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               730
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3793
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6636
;  :mk-clause               3858
;  :num-allocs              7307051
;  :num-checks              1037
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            395531)
(pop) ; 13
(push) ; 13
; [else-branch: 149 | !(0 <= First:(Second:(Second:(Second:($t@396@01))))[i__40@398@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      i__40@398@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 147 | !(i__40@398@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i__40@398@01)]
(assert (not
  (and
    (<
      i__40@398@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
    (<= 0 i__40@398@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__40@398@01 Int)) (!
  (implies
    (and
      (<
        i__40@398@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
      (<= 0 i__40@398@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          i__40@398@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i__40@398@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i__40@398@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i__40@398@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9828
;  :arith-add-rows          121
;  :arith-assert-diseq      546
;  :arith-assert-lower      1421
;  :arith-assert-upper      896
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        777
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               731
;  :datatype-accessor-ax    462
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6638
;  :mk-clause               3858
;  :num-allocs              7307051
;  :num-checks              1038
;  :propagations            1427
;  :quant-instantiations    534
;  :rlimit-count            396156)
(declare-const $k@399@01 $Perm)
(assert ($Perm.isReadVar $k@399@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@399@01 $Perm.No) (< $Perm.No $k@399@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9828
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      897
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    462
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6642
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1039
;  :propagations            1428
;  :quant-instantiations    534
;  :rlimit-count            396355)
(assert (<= $Perm.No $k@399@01))
(assert (<= $k@399@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@399@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9834
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               733
;  :datatype-accessor-ax    463
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6645
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1040
;  :propagations            1428
;  :quant-instantiations    534
;  :rlimit-count            396678)
(push) ; 7
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9834
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               734
;  :datatype-accessor-ax    463
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6645
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1041
;  :propagations            1428
;  :quant-instantiations    534
;  :rlimit-count            396726
;  :time                    0.02)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9840
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               735
;  :datatype-accessor-ax    464
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6648
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1042
;  :propagations            1428
;  :quant-instantiations    535
;  :rlimit-count            397082)
(push) ; 7
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9840
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               736
;  :datatype-accessor-ax    464
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6648
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1043
;  :propagations            1428
;  :quant-instantiations    535
;  :rlimit-count            397130)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9845
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               737
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6649
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1044
;  :propagations            1428
;  :quant-instantiations    535
;  :rlimit-count            397387)
(push) ; 7
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9845
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               738
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6649
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1045
;  :propagations            1428
;  :quant-instantiations    535
;  :rlimit-count            397435)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9850
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               739
;  :datatype-accessor-ax    466
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6650
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1046
;  :propagations            1428
;  :quant-instantiations    535
;  :rlimit-count            397702)
(push) ; 7
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9850
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               740
;  :datatype-accessor-ax    466
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6650
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1047
;  :propagations            1428
;  :quant-instantiations    535
;  :rlimit-count            397750)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9855
;  :arith-add-rows          121
;  :arith-assert-diseq      547
;  :arith-assert-lower      1423
;  :arith-assert-upper      898
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        778
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               741
;  :datatype-accessor-ax    467
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6651
;  :mk-clause               3860
;  :num-allocs              7307051
;  :num-checks              1048
;  :propagations            1428
;  :quant-instantiations    535
;  :rlimit-count            398027)
(declare-const $k@400@01 $Perm)
(assert ($Perm.isReadVar $k@400@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@400@01 $Perm.No) (< $Perm.No $k@400@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9855
;  :arith-add-rows          121
;  :arith-assert-diseq      548
;  :arith-assert-lower      1425
;  :arith-assert-upper      899
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        779
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               742
;  :datatype-accessor-ax    467
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6655
;  :mk-clause               3862
;  :num-allocs              7307051
;  :num-checks              1049
;  :propagations            1429
;  :quant-instantiations    535
;  :rlimit-count            398225)
(assert (<= $Perm.No $k@400@01))
(assert (<= $k@400@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@400@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9861
;  :arith-add-rows          121
;  :arith-assert-diseq      548
;  :arith-assert-lower      1425
;  :arith-assert-upper      900
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        779
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               743
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6658
;  :mk-clause               3862
;  :num-allocs              7307051
;  :num-checks              1050
;  :propagations            1429
;  :quant-instantiations    535
;  :rlimit-count            398598)
(push) ; 7
(assert (not (< $Perm.No $k@400@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9861
;  :arith-add-rows          121
;  :arith-assert-diseq      548
;  :arith-assert-lower      1425
;  :arith-assert-upper      900
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        779
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               744
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6658
;  :mk-clause               3862
;  :num-allocs              7307051
;  :num-checks              1051
;  :propagations            1429
;  :quant-instantiations    535
;  :rlimit-count            398646)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9867
;  :arith-add-rows          121
;  :arith-assert-diseq      548
;  :arith-assert-lower      1425
;  :arith-assert-upper      900
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        779
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               745
;  :datatype-accessor-ax    469
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6661
;  :mk-clause               3862
;  :num-allocs              7307051
;  :num-checks              1052
;  :propagations            1429
;  :quant-instantiations    536
;  :rlimit-count            399056)
(push) ; 7
(assert (not (< $Perm.No $k@400@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9867
;  :arith-add-rows          121
;  :arith-assert-diseq      548
;  :arith-assert-lower      1425
;  :arith-assert-upper      900
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        779
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               746
;  :datatype-accessor-ax    469
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6661
;  :mk-clause               3862
;  :num-allocs              7307051
;  :num-checks              1053
;  :propagations            1429
;  :quant-instantiations    536
;  :rlimit-count            399104
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9872
;  :arith-add-rows          121
;  :arith-assert-diseq      548
;  :arith-assert-lower      1425
;  :arith-assert-upper      900
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        779
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               747
;  :datatype-accessor-ax    470
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6662
;  :mk-clause               3862
;  :num-allocs              7307051
;  :num-checks              1054
;  :propagations            1429
;  :quant-instantiations    536
;  :rlimit-count            399411)
(declare-const $k@401@01 $Perm)
(assert ($Perm.isReadVar $k@401@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@401@01 $Perm.No) (< $Perm.No $k@401@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9872
;  :arith-add-rows          121
;  :arith-assert-diseq      549
;  :arith-assert-lower      1427
;  :arith-assert-upper      901
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        780
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               748
;  :datatype-accessor-ax    470
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6666
;  :mk-clause               3864
;  :num-allocs              7307051
;  :num-checks              1055
;  :propagations            1430
;  :quant-instantiations    536
;  :rlimit-count            399610)
(assert (<= $Perm.No $k@401@01))
(assert (<= $k@401@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@401@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9878
;  :arith-add-rows          121
;  :arith-assert-diseq      549
;  :arith-assert-lower      1427
;  :arith-assert-upper      902
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        780
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               749
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6669
;  :mk-clause               3864
;  :num-allocs              7307051
;  :num-checks              1056
;  :propagations            1430
;  :quant-instantiations    536
;  :rlimit-count            400013)
(push) ; 7
(assert (not (< $Perm.No $k@401@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9878
;  :arith-add-rows          121
;  :arith-assert-diseq      549
;  :arith-assert-lower      1427
;  :arith-assert-upper      902
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        780
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               750
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6669
;  :mk-clause               3864
;  :num-allocs              7307051
;  :num-checks              1057
;  :propagations            1430
;  :quant-instantiations    536
;  :rlimit-count            400061)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9884
;  :arith-add-rows          121
;  :arith-assert-diseq      549
;  :arith-assert-lower      1427
;  :arith-assert-upper      902
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        780
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               751
;  :datatype-accessor-ax    472
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6672
;  :mk-clause               3864
;  :num-allocs              7307051
;  :num-checks              1058
;  :propagations            1430
;  :quant-instantiations    537
;  :rlimit-count            400497)
(push) ; 7
(assert (not (< $Perm.No $k@401@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9884
;  :arith-add-rows          121
;  :arith-assert-diseq      549
;  :arith-assert-lower      1427
;  :arith-assert-upper      902
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        780
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               752
;  :datatype-accessor-ax    472
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6672
;  :mk-clause               3864
;  :num-allocs              7307051
;  :num-checks              1059
;  :propagations            1430
;  :quant-instantiations    537
;  :rlimit-count            400545)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9889
;  :arith-add-rows          121
;  :arith-assert-diseq      549
;  :arith-assert-lower      1427
;  :arith-assert-upper      902
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        780
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               753
;  :datatype-accessor-ax    473
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6673
;  :mk-clause               3864
;  :num-allocs              7307051
;  :num-checks              1060
;  :propagations            1430
;  :quant-instantiations    537
;  :rlimit-count            400882)
(declare-const $k@402@01 $Perm)
(assert ($Perm.isReadVar $k@402@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@402@01 $Perm.No) (< $Perm.No $k@402@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9889
;  :arith-add-rows          121
;  :arith-assert-diseq      550
;  :arith-assert-lower      1429
;  :arith-assert-upper      903
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        781
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               754
;  :datatype-accessor-ax    473
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6677
;  :mk-clause               3866
;  :num-allocs              7307051
;  :num-checks              1061
;  :propagations            1431
;  :quant-instantiations    537
;  :rlimit-count            401080)
(assert (<= $Perm.No $k@402@01))
(assert (<= $k@402@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@402@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9895
;  :arith-add-rows          121
;  :arith-assert-diseq      550
;  :arith-assert-lower      1429
;  :arith-assert-upper      904
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        781
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               755
;  :datatype-accessor-ax    474
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6680
;  :mk-clause               3866
;  :num-allocs              7307051
;  :num-checks              1062
;  :propagations            1431
;  :quant-instantiations    537
;  :rlimit-count            401513)
(push) ; 7
(assert (not (< $Perm.No $k@402@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9895
;  :arith-add-rows          121
;  :arith-assert-diseq      550
;  :arith-assert-lower      1429
;  :arith-assert-upper      904
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        781
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               756
;  :datatype-accessor-ax    474
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6680
;  :mk-clause               3866
;  :num-allocs              7307051
;  :num-checks              1063
;  :propagations            1431
;  :quant-instantiations    537
;  :rlimit-count            401561)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9901
;  :arith-add-rows          121
;  :arith-assert-diseq      550
;  :arith-assert-lower      1429
;  :arith-assert-upper      904
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        781
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               757
;  :datatype-accessor-ax    475
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6683
;  :mk-clause               3866
;  :num-allocs              7307051
;  :num-checks              1064
;  :propagations            1431
;  :quant-instantiations    538
;  :rlimit-count            402027)
(push) ; 7
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9901
;  :arith-add-rows          121
;  :arith-assert-diseq      550
;  :arith-assert-lower      1429
;  :arith-assert-upper      904
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        781
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               758
;  :datatype-accessor-ax    475
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6683
;  :mk-clause               3866
;  :num-allocs              7307051
;  :num-checks              1065
;  :propagations            1431
;  :quant-instantiations    538
;  :rlimit-count            402075)
(declare-const $k@403@01 $Perm)
(assert ($Perm.isReadVar $k@403@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@403@01 $Perm.No) (< $Perm.No $k@403@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9901
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      905
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               759
;  :datatype-accessor-ax    475
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6687
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1066
;  :propagations            1432
;  :quant-instantiations    538
;  :rlimit-count            402273)
(assert (<= $Perm.No $k@403@01))
(assert (<= $k@403@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@403@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9907
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               760
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6690
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1067
;  :propagations            1432
;  :quant-instantiations    538
;  :rlimit-count            402726)
(push) ; 7
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9907
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               761
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6690
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1068
;  :propagations            1432
;  :quant-instantiations    538
;  :rlimit-count            402774)
(push) ; 7
(assert (not (< $Perm.No $k@403@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9907
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               762
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6690
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1069
;  :propagations            1432
;  :quant-instantiations    538
;  :rlimit-count            402822)
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9907
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               763
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6690
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1070
;  :propagations            1432
;  :quant-instantiations    538
;  :rlimit-count            402870)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 7
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9912
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               764
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6693
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1071
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            403302)
(push) ; 7
(assert (not (< $Perm.No $k@400@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9912
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               765
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6693
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1072
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            403350)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
  diz@334@01))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_process_state[0] != -1
; [eval] diz.Write_a_m.Main_process_state[0]
(push) ; 8
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9915
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               766
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6694
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1073
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            403596)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9915
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               766
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6694
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1074
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            403611)
; [eval] -1
(push) ; 8
; [then-branch: 150 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1 | live]
; [else-branch: 150 | First:(Second:(Second:(Second:($t@396@01))))[0] == -1 | live]
(push) ; 9
; [then-branch: 150 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 150 | First:(Second:(Second:(Second:($t@396@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    0)
  (- 0 1)))
; [eval] diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9916
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               767
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6695
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1075
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            403806)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9916
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               767
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6695
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1076
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            403821)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !(diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2)
; [eval] diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_process_state[0] != -1
; [eval] diz.Write_a_m.Main_process_state[0]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9916
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               768
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6695
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1077
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            403874)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9916
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               768
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6695
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1078
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            403889)
; [eval] -1
(push) ; 8
; [then-branch: 151 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1 | live]
; [else-branch: 151 | First:(Second:(Second:(Second:($t@396@01))))[0] == -1 | live]
(push) ; 9
; [then-branch: 151 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 151 | First:(Second:(Second:(Second:($t@396@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    0)
  (- 0 1)))
; [eval] diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               769
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6696
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1079
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            404080)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      551
;  :arith-assert-lower      1431
;  :arith-assert-upper      906
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        782
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               769
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3794
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6696
;  :mk-clause               3868
;  :num-allocs              7307051
;  :num-checks              1080
;  :propagations            1432
;  :quant-instantiations    539
;  :rlimit-count            404095)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(declare-const $k@404@01 $Perm)
(assert ($Perm.isReadVar $k@404@01 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@404@01 $Perm.No) (< $Perm.No $k@404@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1433
;  :arith-assert-upper      907
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        783
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6700
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1081
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404298)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@372@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1433
;  :arith-assert-upper      907
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        783
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6700
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1082
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404309
;  :time                    0.01)
(assert (< $k@404@01 $k@372@01))
(assert (<= $Perm.No (- $k@372@01 $k@404@01)))
(assert (<= (- $k@372@01 $k@404@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@372@01 $k@404@01)) (not (= diz@334@01 $Ref.null))))
; [eval] diz.Write_a_m != null
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1435
;  :arith-assert-upper      908
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        783
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               771
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6703
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1083
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404529)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1435
;  :arith-assert-upper      908
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        783
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               772
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6703
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1084
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404577)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1435
;  :arith-assert-upper      908
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        783
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               773
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6703
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1085
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404625)
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1435
;  :arith-assert-upper      908
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        783
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               774
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6703
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1086
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404673)
(set-option :timeout 0)
(push) ; 7
(assert (not (= (Seq_length __flatten_41__34@392@01) 3)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9917
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1435
;  :arith-assert-upper      908
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        784
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               775
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6706
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1087
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404747)
(assert (= (Seq_length __flatten_41__34@392@01) 3))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9918
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1436
;  :arith-assert-upper      909
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        785
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               776
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6709
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1088
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404846)
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9918
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1436
;  :arith-assert-upper      909
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        785
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               777
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6709
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1089
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404894
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 7
(assert (not (= (Seq_length __flatten_44__37@395@01) 3)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9918
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1436
;  :arith-assert-upper      909
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        786
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6712
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1090
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            404968)
(assert (= (Seq_length __flatten_44__37@395@01) 3))
; [eval] (forall i__40: Int :: { diz.Write_a_m.Main_process_state[i__40] } 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|)
(declare-const i__40@405@01 Int)
(push) ; 7
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__40
(push) ; 8
; [then-branch: 152 | 0 <= i__40@405@01 | live]
; [else-branch: 152 | !(0 <= i__40@405@01) | live]
(push) ; 9
; [then-branch: 152 | 0 <= i__40@405@01]
(assert (<= 0 i__40@405@01))
; [eval] i__40 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9919
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1438
;  :arith-assert-upper      910
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        787
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               779
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6716
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1091
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            405119)
(pop) ; 9
(push) ; 9
; [else-branch: 152 | !(0 <= i__40@405@01)]
(assert (not (<= 0 i__40@405@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 153 | i__40@405@01 < |__flatten_41__34@392@01| && 0 <= i__40@405@01 | live]
; [else-branch: 153 | !(i__40@405@01 < |__flatten_41__34@392@01| && 0 <= i__40@405@01) | live]
(push) ; 9
; [then-branch: 153 | i__40@405@01 < |__flatten_41__34@392@01| && 0 <= i__40@405@01]
(assert (and (< i__40@405@01 (Seq_length __flatten_41__34@392@01)) (<= 0 i__40@405@01)))
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1
; [eval] diz.Write_a_m.Main_process_state[i__40]
(push) ; 10
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9919
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1439
;  :arith-assert-upper      911
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        787
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               780
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6718
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1092
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            405276)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__40@405@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9919
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1439
;  :arith-assert-upper      911
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        787
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               780
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6718
;  :mk-clause               3870
;  :num-allocs              7307051
;  :num-checks              1093
;  :propagations            1433
;  :quant-instantiations    539
;  :rlimit-count            405285)
; [eval] -1
(push) ; 10
; [then-branch: 154 | __flatten_41__34@392@01[i__40@405@01] == -1 | live]
; [else-branch: 154 | __flatten_41__34@392@01[i__40@405@01] != -1 | live]
(push) ; 11
; [then-branch: 154 | __flatten_41__34@392@01[i__40@405@01] == -1]
(assert (= (Seq_index __flatten_41__34@392@01 i__40@405@01) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 154 | __flatten_41__34@392@01[i__40@405@01] != -1]
(assert (not (= (Seq_index __flatten_41__34@392@01 i__40@405@01) (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40]
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9920
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1439
;  :arith-assert-upper      911
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        788
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               781
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6725
;  :mk-clause               3878
;  :num-allocs              7307051
;  :num-checks              1094
;  :propagations            1433
;  :quant-instantiations    540
;  :rlimit-count            405487)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__40@405@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9920
;  :arith-add-rows          121
;  :arith-assert-diseq      552
;  :arith-assert-lower      1439
;  :arith-assert-upper      911
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        788
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               781
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6725
;  :mk-clause               3878
;  :num-allocs              7307051
;  :num-checks              1095
;  :propagations            1433
;  :quant-instantiations    540
;  :rlimit-count            405496)
(push) ; 12
; [then-branch: 155 | 0 <= __flatten_41__34@392@01[i__40@405@01] | live]
; [else-branch: 155 | !(0 <= __flatten_41__34@392@01[i__40@405@01]) | live]
(push) ; 13
; [then-branch: 155 | 0 <= __flatten_41__34@392@01[i__40@405@01]]
(assert (<= 0 (Seq_index __flatten_41__34@392@01 i__40@405@01)))
; [eval] diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9920
;  :arith-add-rows          121
;  :arith-assert-diseq      553
;  :arith-assert-lower      1442
;  :arith-assert-upper      911
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        789
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               782
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6728
;  :mk-clause               3879
;  :num-allocs              7307051
;  :num-checks              1096
;  :propagations            1433
;  :quant-instantiations    540
;  :rlimit-count            405608)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__40@405@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9920
;  :arith-add-rows          121
;  :arith-assert-diseq      553
;  :arith-assert-lower      1442
;  :arith-assert-upper      911
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        789
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               782
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6728
;  :mk-clause               3879
;  :num-allocs              7307051
;  :num-checks              1097
;  :propagations            1433
;  :quant-instantiations    540
;  :rlimit-count            405617)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9920
;  :arith-add-rows          121
;  :arith-assert-diseq      553
;  :arith-assert-lower      1442
;  :arith-assert-upper      911
;  :arith-bound-prop        110
;  :arith-conflicts         99
;  :arith-eq-adapter        789
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        9
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               783
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1747
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1927
;  :del-clause              3806
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6728
;  :mk-clause               3879
;  :num-allocs              7307051
;  :num-checks              1098
;  :propagations            1433
;  :quant-instantiations    540
;  :rlimit-count            405665
;  :time                    0.00)
(pop) ; 13
(push) ; 13
; [else-branch: 155 | !(0 <= __flatten_41__34@392@01[i__40@405@01])]
(assert (not (<= 0 (Seq_index __flatten_41__34@392@01 i__40@405@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 153 | !(i__40@405@01 < |__flatten_41__34@392@01| && 0 <= i__40@405@01)]
(assert (not
  (and (< i__40@405@01 (Seq_length __flatten_41__34@392@01)) (<= 0 i__40@405@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__40@405@01 Int)) (!
  (implies
    (and
      (< i__40@405@01 (Seq_length __flatten_41__34@392@01))
      (<= 0 i__40@405@01))
    (or
      (= (Seq_index __flatten_41__34@392@01 i__40@405@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_41__34@392@01 i__40@405@01)
          (Seq_length __flatten_44__37@395@01))
        (<= 0 (Seq_index __flatten_41__34@392@01 i__40@405@01)))))
  :pattern ((Seq_index __flatten_41__34@392@01 i__40@405@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      560
;  :arith-assert-lower      1458
;  :arith-assert-upper      922
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        799
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            290
;  :binary-propagations     22
;  :conflicts               790
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6771
;  :mk-clause               3944
;  :num-allocs              7307051
;  :num-checks              1099
;  :propagations            1466
;  :quant-instantiations    544
;  :rlimit-count            406373)
(assert (forall ((i__40@405@01 Int)) (!
  (implies
    (and
      (< i__40@405@01 (Seq_length __flatten_41__34@392@01))
      (<= 0 i__40@405@01))
    (or
      (= (Seq_index __flatten_41__34@392@01 i__40@405@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_41__34@392@01 i__40@405@01)
          (Seq_length __flatten_44__37@395@01))
        (<= 0 (Seq_index __flatten_41__34@392@01 i__40@405@01)))))
  :pattern ((Seq_index __flatten_41__34@392@01 i__40@405@01))
  :qid |prog.l<no position>|)))
(declare-const $k@406@01 $Perm)
(assert ($Perm.isReadVar $k@406@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1460
;  :arith-assert-upper      923
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            290
;  :binary-propagations     22
;  :conflicts               791
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6776
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1100
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            406842)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@406@01 $Perm.No) (< $Perm.No $k@406@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1460
;  :arith-assert-upper      923
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            290
;  :binary-propagations     22
;  :conflicts               792
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6776
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1101
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            406892)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@374@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1460
;  :arith-assert-upper      923
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            290
;  :binary-propagations     22
;  :conflicts               792
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6776
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1102
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            406903)
(assert (< $k@406@01 $k@374@01))
(assert (<= $Perm.No (- $k@374@01 $k@406@01)))
(assert (<= (- $k@374@01 $k@406@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@374@01 $k@406@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand != null
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1462
;  :arith-assert-upper      924
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               793
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6779
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1103
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            407117)
(push) ; 7
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1462
;  :arith-assert-upper      924
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               794
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6779
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1104
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            407165
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1462
;  :arith-assert-upper      924
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               795
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6779
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1105
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            407213)
(push) ; 7
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1462
;  :arith-assert-upper      924
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               796
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6779
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1106
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            407261
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1462
;  :arith-assert-upper      924
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               797
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6779
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1107
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            407309)
(push) ; 7
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1462
;  :arith-assert-upper      924
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               798
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6779
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1108
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            407357)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1462
;  :arith-assert-upper      924
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               799
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6779
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1109
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            407405
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      561
;  :arith-assert-lower      1462
;  :arith-assert-upper      924
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               800
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6779
;  :mk-clause               3946
;  :num-allocs              7307051
;  :num-checks              1110
;  :propagations            1467
;  :quant-instantiations    544
;  :rlimit-count            407453
;  :time                    0.01)
(declare-const $k@407@01 $Perm)
(assert ($Perm.isReadVar $k@407@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      562
;  :arith-assert-lower      1464
;  :arith-assert-upper      925
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        801
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               801
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6783
;  :mk-clause               3948
;  :num-allocs              7307051
;  :num-checks              1111
;  :propagations            1468
;  :quant-instantiations    544
;  :rlimit-count            407649)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@407@01 $Perm.No) (< $Perm.No $k@407@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      562
;  :arith-assert-lower      1464
;  :arith-assert-upper      925
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        801
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               802
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6783
;  :mk-clause               3948
;  :num-allocs              7307051
;  :num-checks              1112
;  :propagations            1468
;  :quant-instantiations    544
;  :rlimit-count            407699)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@375@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      562
;  :arith-assert-lower      1464
;  :arith-assert-upper      925
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        801
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               802
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6783
;  :mk-clause               3948
;  :num-allocs              7307051
;  :num-checks              1113
;  :propagations            1468
;  :quant-instantiations    544
;  :rlimit-count            407710)
(assert (< $k@407@01 $k@375@01))
(assert (<= $Perm.No (- $k@375@01 $k@407@01)))
(assert (<= (- $k@375@01 $k@407@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@375@01 $k@407@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      562
;  :arith-assert-lower      1466
;  :arith-assert-upper      926
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        801
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6786
;  :mk-clause               3948
;  :num-allocs              7307051
;  :num-checks              1114
;  :propagations            1468
;  :quant-instantiations    544
;  :rlimit-count            407930)
(push) ; 7
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      562
;  :arith-assert-lower      1466
;  :arith-assert-upper      926
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        801
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               804
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6786
;  :mk-clause               3948
;  :num-allocs              7307051
;  :num-checks              1115
;  :propagations            1468
;  :quant-instantiations    544
;  :rlimit-count            407978)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      562
;  :arith-assert-lower      1466
;  :arith-assert-upper      926
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        801
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               805
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6786
;  :mk-clause               3948
;  :num-allocs              7307051
;  :num-checks              1116
;  :propagations            1468
;  :quant-instantiations    544
;  :rlimit-count            408026
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      562
;  :arith-assert-lower      1466
;  :arith-assert-upper      926
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        801
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               806
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6786
;  :mk-clause               3948
;  :num-allocs              7307051
;  :num-checks              1117
;  :propagations            1468
;  :quant-instantiations    544
;  :rlimit-count            408074)
(push) ; 7
(assert (not (=
  diz@334@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      562
;  :arith-assert-lower      1466
;  :arith-assert-upper      926
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        801
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               806
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6786
;  :mk-clause               3948
;  :num-allocs              7307051
;  :num-checks              1118
;  :propagations            1468
;  :quant-instantiations    544
;  :rlimit-count            408085)
(declare-const $k@408@01 $Perm)
(assert ($Perm.isReadVar $k@408@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      563
;  :arith-assert-lower      1468
;  :arith-assert-upper      927
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        802
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               807
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6790
;  :mk-clause               3950
;  :num-allocs              7307051
;  :num-checks              1119
;  :propagations            1469
;  :quant-instantiations    544
;  :rlimit-count            408282)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@408@01 $Perm.No) (< $Perm.No $k@408@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      563
;  :arith-assert-lower      1468
;  :arith-assert-upper      927
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        802
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6790
;  :mk-clause               3950
;  :num-allocs              7307051
;  :num-checks              1120
;  :propagations            1469
;  :quant-instantiations    544
;  :rlimit-count            408332)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@376@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      563
;  :arith-assert-lower      1468
;  :arith-assert-upper      927
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        802
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6790
;  :mk-clause               3950
;  :num-allocs              7307051
;  :num-checks              1121
;  :propagations            1469
;  :quant-instantiations    544
;  :rlimit-count            408343)
(assert (< $k@408@01 $k@376@01))
(assert (<= $Perm.No (- $k@376@01 $k@408@01)))
(assert (<= (- $k@376@01 $k@408@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@376@01 $k@408@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      563
;  :arith-assert-lower      1470
;  :arith-assert-upper      928
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        802
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               809
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6793
;  :mk-clause               3950
;  :num-allocs              7307051
;  :num-checks              1122
;  :propagations            1469
;  :quant-instantiations    544
;  :rlimit-count            408551
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@376@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      563
;  :arith-assert-lower      1470
;  :arith-assert-upper      928
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        802
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               810
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6793
;  :mk-clause               3950
;  :num-allocs              7307051
;  :num-checks              1123
;  :propagations            1469
;  :quant-instantiations    544
;  :rlimit-count            408599)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      563
;  :arith-assert-lower      1470
;  :arith-assert-upper      928
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        802
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               811
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6793
;  :mk-clause               3950
;  :num-allocs              7307051
;  :num-checks              1124
;  :propagations            1469
;  :quant-instantiations    544
;  :rlimit-count            408647)
(push) ; 7
(assert (not (< $Perm.No $k@376@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      563
;  :arith-assert-lower      1470
;  :arith-assert-upper      928
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        802
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               812
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6793
;  :mk-clause               3950
;  :num-allocs              7307051
;  :num-checks              1125
;  :propagations            1469
;  :quant-instantiations    544
;  :rlimit-count            408695)
(declare-const $k@409@01 $Perm)
(assert ($Perm.isReadVar $k@409@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      564
;  :arith-assert-lower      1472
;  :arith-assert-upper      929
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        803
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               813
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6797
;  :mk-clause               3952
;  :num-allocs              7307051
;  :num-checks              1126
;  :propagations            1470
;  :quant-instantiations    544
;  :rlimit-count            408891)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@409@01 $Perm.No) (< $Perm.No $k@409@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      564
;  :arith-assert-lower      1472
;  :arith-assert-upper      929
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        803
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               814
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6797
;  :mk-clause               3952
;  :num-allocs              7307051
;  :num-checks              1127
;  :propagations            1470
;  :quant-instantiations    544
;  :rlimit-count            408941)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@377@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      564
;  :arith-assert-lower      1472
;  :arith-assert-upper      929
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        803
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               814
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6797
;  :mk-clause               3952
;  :num-allocs              7307051
;  :num-checks              1128
;  :propagations            1470
;  :quant-instantiations    544
;  :rlimit-count            408952)
(assert (< $k@409@01 $k@377@01))
(assert (<= $Perm.No (- $k@377@01 $k@409@01)))
(assert (<= (- $k@377@01 $k@409@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@377@01 $k@409@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_read != null
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      564
;  :arith-assert-lower      1474
;  :arith-assert-upper      930
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        803
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            295
;  :binary-propagations     22
;  :conflicts               815
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6800
;  :mk-clause               3952
;  :num-allocs              7307051
;  :num-checks              1129
;  :propagations            1470
;  :quant-instantiations    544
;  :rlimit-count            409172)
(push) ; 7
(assert (not (< $Perm.No $k@377@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      564
;  :arith-assert-lower      1474
;  :arith-assert-upper      930
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        803
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            295
;  :binary-propagations     22
;  :conflicts               816
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6800
;  :mk-clause               3952
;  :num-allocs              7307051
;  :num-checks              1130
;  :propagations            1470
;  :quant-instantiations    544
;  :rlimit-count            409220
;  :time                    0.01)
(declare-const $k@410@01 $Perm)
(assert ($Perm.isReadVar $k@410@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1476
;  :arith-assert-upper      931
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            295
;  :binary-propagations     22
;  :conflicts               817
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6804
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1131
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409416)
(push) ; 7
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1476
;  :arith-assert-upper      931
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            295
;  :binary-propagations     22
;  :conflicts               818
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6804
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1132
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409464)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@410@01 $Perm.No) (< $Perm.No $k@410@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1476
;  :arith-assert-upper      931
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            295
;  :binary-propagations     22
;  :conflicts               819
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6804
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1133
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409514)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@378@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1476
;  :arith-assert-upper      931
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            295
;  :binary-propagations     22
;  :conflicts               819
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6804
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1134
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409525)
(assert (< $k@410@01 $k@378@01))
(assert (<= $Perm.No (- $k@378@01 $k@410@01)))
(assert (<= (- $k@378@01 $k@410@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@378@01 $k@410@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1478
;  :arith-assert-upper      932
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               820
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6807
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1135
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409739)
(push) ; 7
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1478
;  :arith-assert-upper      932
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               821
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6807
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1136
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409787)
(push) ; 7
(assert (not (< $Perm.No $k@378@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1478
;  :arith-assert-upper      932
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               822
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6807
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1137
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409835)
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1478
;  :arith-assert-upper      932
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               823
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6807
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1138
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409883)
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 7
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1478
;  :arith-assert-upper      932
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               824
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6807
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1139
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409931
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9943
;  :arith-add-rows          121
;  :arith-assert-diseq      565
;  :arith-assert-lower      1478
;  :arith-assert-upper      932
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        804
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               825
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 1749
;  :datatype-occurs-check   735
;  :datatype-splits         1279
;  :decisions               1933
;  :del-clause              3880
;  :final-checks            310
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6807
;  :mk-clause               3954
;  :num-allocs              7307051
;  :num-checks              1140
;  :propagations            1471
;  :quant-instantiations    544
;  :rlimit-count            409979)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@397@01 $Perm.Write))
(assert ($Perm.isReadVar $k@399@01 $Perm.Write))
(assert ($Perm.isReadVar $k@400@01 $Perm.Write))
(assert ($Perm.isReadVar $k@401@01 $Perm.Write))
(assert ($Perm.isReadVar $k@402@01 $Perm.Write))
(assert ($Perm.isReadVar $k@403@01 $Perm.Write))
(assert (= $t@396@01 ($Snap.combine ($Snap.first $t@396@01) ($Snap.second $t@396@01))))
(assert (<= $Perm.No $k@397@01))
(assert (<= $k@397@01 $Perm.Write))
(assert (implies (< $Perm.No $k@397@01) (not (= diz@334@01 $Ref.null))))
(assert (=
  ($Snap.second $t@396@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@396@01))
    ($Snap.second ($Snap.second $t@396@01)))))
(assert (= ($Snap.first ($Snap.second $t@396@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@396@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@396@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@396@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
  $Snap.unit))
(assert (forall ((i__40@398@01 Int)) (!
  (implies
    (and
      (<
        i__40@398@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
      (<= 0 i__40@398@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          i__40@398@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i__40@398@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i__40@398@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i__40@398@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))
(assert (<= $Perm.No $k@399@01))
(assert (<= $k@399@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@399@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
(assert (<= $Perm.No $k@400@01))
(assert (<= $k@400@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@400@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
(assert (<= $Perm.No $k@401@01))
(assert (<= $k@401@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@401@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
(assert (<= $Perm.No $k@402@01))
(assert (<= $k@402@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@402@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))))
(assert (<= $Perm.No $k@403@01))
(assert (<= $k@403@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@403@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
  diz@334@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_process_state[0] != -1
; [eval] diz.Write_a_m.Main_process_state[0]
(push) ; 8
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10382
;  :arith-add-rows          121
;  :arith-assert-diseq      571
;  :arith-assert-lower      1494
;  :arith-assert-upper      946
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        812
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    498
;  :datatype-constructor-ax 1821
;  :datatype-occurs-check   753
;  :datatype-splits         1347
;  :decisions               2007
;  :del-clause              3894
;  :final-checks            314
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6961
;  :mk-clause               3968
;  :num-allocs              7307051
;  :num-checks              1143
;  :propagations            1483
;  :quant-instantiations    554
;  :rlimit-count            416706)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10382
;  :arith-add-rows          121
;  :arith-assert-diseq      571
;  :arith-assert-lower      1494
;  :arith-assert-upper      946
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        812
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    498
;  :datatype-constructor-ax 1821
;  :datatype-occurs-check   753
;  :datatype-splits         1347
;  :decisions               2007
;  :del-clause              3894
;  :final-checks            314
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6961
;  :mk-clause               3968
;  :num-allocs              7307051
;  :num-checks              1144
;  :propagations            1483
;  :quant-instantiations    554
;  :rlimit-count            416721)
; [eval] -1
(push) ; 8
; [then-branch: 156 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1 | live]
; [else-branch: 156 | First:(Second:(Second:(Second:($t@396@01))))[0] == -1 | live]
(push) ; 9
; [then-branch: 156 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 156 | First:(Second:(Second:(Second:($t@396@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    0)
  (- 0 1)))
; [eval] diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10383
;  :arith-add-rows          121
;  :arith-assert-diseq      571
;  :arith-assert-lower      1494
;  :arith-assert-upper      946
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        812
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               827
;  :datatype-accessor-ax    498
;  :datatype-constructor-ax 1821
;  :datatype-occurs-check   753
;  :datatype-splits         1347
;  :decisions               2007
;  :del-clause              3894
;  :final-checks            314
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6962
;  :mk-clause               3968
;  :num-allocs              7307051
;  :num-checks              1145
;  :propagations            1483
;  :quant-instantiations    554
;  :rlimit-count            416912)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10383
;  :arith-add-rows          121
;  :arith-assert-diseq      571
;  :arith-assert-lower      1494
;  :arith-assert-upper      946
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        812
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        9
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               827
;  :datatype-accessor-ax    498
;  :datatype-constructor-ax 1821
;  :datatype-occurs-check   753
;  :datatype-splits         1347
;  :decisions               2007
;  :del-clause              3894
;  :final-checks            314
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             6962
;  :mk-clause               3968
;  :num-allocs              7307051
;  :num-checks              1146
;  :propagations            1483
;  :quant-instantiations    554
;  :rlimit-count            416927)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10543
;  :arith-add-rows          122
;  :arith-assert-diseq      574
;  :arith-assert-lower      1505
;  :arith-assert-upper      951
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        817
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               827
;  :datatype-accessor-ax    498
;  :datatype-constructor-ax 1857
;  :datatype-occurs-check   762
;  :datatype-splits         1381
;  :decisions               2045
;  :del-clause              3919
;  :final-checks            316
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7021
;  :mk-clause               3993
;  :num-allocs              7307051
;  :num-checks              1147
;  :propagations            1496
;  :quant-instantiations    558
;  :rlimit-count            418501
;  :time                    0.00)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      574
;  :arith-assert-lower      1505
;  :arith-assert-upper      951
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        817
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               828
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3920
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7063
;  :mk-clause               3994
;  :num-allocs              7307051
;  :num-checks              1148
;  :propagations            1499
;  :quant-instantiations    558
;  :rlimit-count            419846
;  :time                    0.00)
; [then-branch: 157 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@396@01))))))[0] != -2 | live]
; [else-branch: 157 | !(First:(Second:(Second:(Second:($t@396@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@396@01))))))[0] != -2) | live]
(push) ; 8
; [then-branch: 157 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@396@01))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
        0)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      574
;  :arith-assert-lower      1505
;  :arith-assert-upper      951
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        817
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               829
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3920
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7065
;  :mk-clause               3995
;  :num-allocs              7307051
;  :num-checks              1149
;  :propagations            1499
;  :quant-instantiations    558
;  :rlimit-count            420124)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      574
;  :arith-assert-lower      1505
;  :arith-assert-upper      951
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        817
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               830
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3920
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7065
;  :mk-clause               3995
;  :num-allocs              7307051
;  :num-checks              1150
;  :propagations            1499
;  :quant-instantiations    558
;  :rlimit-count            420172
;  :time                    0.01)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@411@01 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 158 | 0 <= i@411@01 | live]
; [else-branch: 158 | !(0 <= i@411@01) | live]
(push) ; 11
; [then-branch: 158 | 0 <= i@411@01]
(assert (<= 0 i@411@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 158 | !(0 <= i@411@01)]
(assert (not (<= 0 i@411@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 159 | i@411@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i@411@01 | live]
; [else-branch: 159 | !(i@411@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i@411@01) | live]
(push) ; 11
; [then-branch: 159 | i@411@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i@411@01]
(assert (and
  (<
    i@411@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
  (<= 0 i@411@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@411@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      574
;  :arith-assert-lower      1506
;  :arith-assert-upper      952
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        817
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               830
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3920
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7067
;  :mk-clause               3995
;  :num-allocs              7307051
;  :num-checks              1151
;  :propagations            1499
;  :quant-instantiations    558
;  :rlimit-count            420308)
; [eval] -1
(push) ; 12
; [then-branch: 160 | First:(Second:(Second:(Second:($t@396@01))))[i@411@01] == -1 | live]
; [else-branch: 160 | First:(Second:(Second:(Second:($t@396@01))))[i@411@01] != -1 | live]
(push) ; 13
; [then-branch: 160 | First:(Second:(Second:(Second:($t@396@01))))[i@411@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i@411@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 160 | First:(Second:(Second:(Second:($t@396@01))))[i@411@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      i@411@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@411@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      575
;  :arith-assert-lower      1509
;  :arith-assert-upper      953
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        818
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               830
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3920
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7073
;  :mk-clause               3999
;  :num-allocs              7307051
;  :num-checks              1152
;  :propagations            1501
;  :quant-instantiations    559
;  :rlimit-count            420540)
(push) ; 14
; [then-branch: 161 | 0 <= First:(Second:(Second:(Second:($t@396@01))))[i@411@01] | live]
; [else-branch: 161 | !(0 <= First:(Second:(Second:(Second:($t@396@01))))[i@411@01]) | live]
(push) ; 15
; [then-branch: 161 | 0 <= First:(Second:(Second:(Second:($t@396@01))))[i@411@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i@411@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@411@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      575
;  :arith-assert-lower      1509
;  :arith-assert-upper      953
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        818
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               830
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3920
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7073
;  :mk-clause               3999
;  :num-allocs              7307051
;  :num-checks              1153
;  :propagations            1501
;  :quant-instantiations    559
;  :rlimit-count            420654)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 161 | !(0 <= First:(Second:(Second:(Second:($t@396@01))))[i@411@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      i@411@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 159 | !(i@411@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i@411@01)]
(assert (not
  (and
    (<
      i@411@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
    (<= 0 i@411@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i@411@01 Int)) (!
  (implies
    (and
      (<
        i@411@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
      (<= 0 i@411@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          i@411@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i@411@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i@411@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i@411@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      577
;  :arith-assert-lower      1510
;  :arith-assert-upper      954
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        819
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               831
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7081
;  :mk-clause               4013
;  :num-allocs              7307051
;  :num-checks              1154
;  :propagations            1503
;  :quant-instantiations    560
;  :rlimit-count            421100)
(assert (forall ((i@411@01 Int)) (!
  (implies
    (and
      (<
        i@411@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
      (<= 0 i@411@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          i@411@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i@411@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i@411@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i@411@01))
  :qid |prog.l<no position>|)))
(declare-const $k@412@01 $Perm)
(assert ($Perm.isReadVar $k@412@01 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@412@01 $Perm.No) (< $Perm.No $k@412@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      578
;  :arith-assert-lower      1512
;  :arith-assert-upper      955
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               832
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7086
;  :mk-clause               4015
;  :num-allocs              7307051
;  :num-checks              1155
;  :propagations            1504
;  :quant-instantiations    560
;  :rlimit-count            421660)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@399@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      578
;  :arith-assert-lower      1512
;  :arith-assert-upper      955
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               832
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7086
;  :mk-clause               4015
;  :num-allocs              7307051
;  :num-checks              1156
;  :propagations            1504
;  :quant-instantiations    560
;  :rlimit-count            421671)
(assert (< $k@412@01 $k@399@01))
(assert (<= $Perm.No (- $k@399@01 $k@412@01)))
(assert (<= (- $k@399@01 $k@412@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@399@01 $k@412@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      578
;  :arith-assert-lower      1514
;  :arith-assert-upper      956
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               833
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7089
;  :mk-clause               4015
;  :num-allocs              7307051
;  :num-checks              1157
;  :propagations            1504
;  :quant-instantiations    560
;  :rlimit-count            421891)
(push) ; 9
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      578
;  :arith-assert-lower      1514
;  :arith-assert-upper      956
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               834
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7089
;  :mk-clause               4015
;  :num-allocs              7307051
;  :num-checks              1158
;  :propagations            1504
;  :quant-instantiations    560
;  :rlimit-count            421939)
(push) ; 9
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      578
;  :arith-assert-lower      1514
;  :arith-assert-upper      956
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               835
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7089
;  :mk-clause               4015
;  :num-allocs              7307051
;  :num-checks              1159
;  :propagations            1504
;  :quant-instantiations    560
;  :rlimit-count            421987)
(push) ; 9
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      578
;  :arith-assert-lower      1514
;  :arith-assert-upper      956
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               836
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7089
;  :mk-clause               4015
;  :num-allocs              7307051
;  :num-checks              1160
;  :propagations            1504
;  :quant-instantiations    560
;  :rlimit-count            422035)
(declare-const $k@413@01 $Perm)
(assert ($Perm.isReadVar $k@413@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@413@01 $Perm.No) (< $Perm.No $k@413@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      579
;  :arith-assert-lower      1516
;  :arith-assert-upper      957
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        821
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               837
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7093
;  :mk-clause               4017
;  :num-allocs              7307051
;  :num-checks              1161
;  :propagations            1505
;  :quant-instantiations    560
;  :rlimit-count            422233)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@400@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      579
;  :arith-assert-lower      1516
;  :arith-assert-upper      957
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        821
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               837
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7093
;  :mk-clause               4017
;  :num-allocs              7307051
;  :num-checks              1162
;  :propagations            1505
;  :quant-instantiations    560
;  :rlimit-count            422244
;  :time                    0.00)
(assert (< $k@413@01 $k@400@01))
(assert (<= $Perm.No (- $k@400@01 $k@413@01)))
(assert (<= (- $k@400@01 $k@413@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@400@01 $k@413@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@400@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      579
;  :arith-assert-lower      1518
;  :arith-assert-upper      958
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        821
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            304
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7096
;  :mk-clause               4017
;  :num-allocs              7307051
;  :num-checks              1163
;  :propagations            1505
;  :quant-instantiations    560
;  :rlimit-count            422464)
(push) ; 9
(assert (not (< $Perm.No $k@400@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      579
;  :arith-assert-lower      1518
;  :arith-assert-upper      958
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        821
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            304
;  :binary-propagations     22
;  :conflicts               839
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7096
;  :mk-clause               4017
;  :num-allocs              7307051
;  :num-checks              1164
;  :propagations            1505
;  :quant-instantiations    560
;  :rlimit-count            422512)
(declare-const $k@414@01 $Perm)
(assert ($Perm.isReadVar $k@414@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@414@01 $Perm.No) (< $Perm.No $k@414@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      580
;  :arith-assert-lower      1520
;  :arith-assert-upper      959
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        822
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            304
;  :binary-propagations     22
;  :conflicts               840
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7100
;  :mk-clause               4019
;  :num-allocs              7307051
;  :num-checks              1165
;  :propagations            1506
;  :quant-instantiations    560
;  :rlimit-count            422710)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@401@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      580
;  :arith-assert-lower      1520
;  :arith-assert-upper      959
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        822
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            304
;  :binary-propagations     22
;  :conflicts               840
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7100
;  :mk-clause               4019
;  :num-allocs              7307051
;  :num-checks              1166
;  :propagations            1506
;  :quant-instantiations    560
;  :rlimit-count            422721)
(assert (< $k@414@01 $k@401@01))
(assert (<= $Perm.No (- $k@401@01 $k@414@01)))
(assert (<= (- $k@401@01 $k@414@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@401@01 $k@414@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@401@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      580
;  :arith-assert-lower      1522
;  :arith-assert-upper      960
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        822
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            305
;  :binary-propagations     22
;  :conflicts               841
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7103
;  :mk-clause               4019
;  :num-allocs              7307051
;  :num-checks              1167
;  :propagations            1506
;  :quant-instantiations    560
;  :rlimit-count            422935)
(push) ; 9
(assert (not (< $Perm.No $k@401@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      580
;  :arith-assert-lower      1522
;  :arith-assert-upper      960
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        822
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            305
;  :binary-propagations     22
;  :conflicts               842
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7103
;  :mk-clause               4019
;  :num-allocs              7307051
;  :num-checks              1168
;  :propagations            1506
;  :quant-instantiations    560
;  :rlimit-count            422983)
(declare-const $k@415@01 $Perm)
(assert ($Perm.isReadVar $k@415@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@415@01 $Perm.No) (< $Perm.No $k@415@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      581
;  :arith-assert-lower      1524
;  :arith-assert-upper      961
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        823
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            305
;  :binary-propagations     22
;  :conflicts               843
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7107
;  :mk-clause               4021
;  :num-allocs              7307051
;  :num-checks              1169
;  :propagations            1507
;  :quant-instantiations    560
;  :rlimit-count            423181)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@402@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      581
;  :arith-assert-lower      1524
;  :arith-assert-upper      961
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        823
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            305
;  :binary-propagations     22
;  :conflicts               843
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7107
;  :mk-clause               4021
;  :num-allocs              7307051
;  :num-checks              1170
;  :propagations            1507
;  :quant-instantiations    560
;  :rlimit-count            423192)
(assert (< $k@415@01 $k@402@01))
(assert (<= $Perm.No (- $k@402@01 $k@415@01)))
(assert (<= (- $k@402@01 $k@415@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@402@01 $k@415@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@402@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      581
;  :arith-assert-lower      1526
;  :arith-assert-upper      962
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        823
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               844
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7110
;  :mk-clause               4021
;  :num-allocs              7307051
;  :num-checks              1171
;  :propagations            1507
;  :quant-instantiations    560
;  :rlimit-count            423412)
(declare-const $k@416@01 $Perm)
(assert ($Perm.isReadVar $k@416@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      582
;  :arith-assert-lower      1528
;  :arith-assert-upper      963
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        824
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               845
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7114
;  :mk-clause               4023
;  :num-allocs              7307051
;  :num-checks              1172
;  :propagations            1508
;  :quant-instantiations    560
;  :rlimit-count            423609)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@416@01 $Perm.No) (< $Perm.No $k@416@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      582
;  :arith-assert-lower      1528
;  :arith-assert-upper      963
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        824
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               846
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7114
;  :mk-clause               4023
;  :num-allocs              7307051
;  :num-checks              1173
;  :propagations            1508
;  :quant-instantiations    560
;  :rlimit-count            423659)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@403@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      582
;  :arith-assert-lower      1528
;  :arith-assert-upper      963
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        824
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               846
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7114
;  :mk-clause               4023
;  :num-allocs              7307051
;  :num-checks              1174
;  :propagations            1508
;  :quant-instantiations    560
;  :rlimit-count            423670)
(assert (< $k@416@01 $k@403@01))
(assert (<= $Perm.No (- $k@403@01 $k@416@01)))
(assert (<= (- $k@403@01 $k@416@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@403@01 $k@416@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
      $Ref.null))))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No $k@399@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      582
;  :arith-assert-lower      1530
;  :arith-assert-upper      964
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        824
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               847
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7117
;  :mk-clause               4023
;  :num-allocs              7307051
;  :num-checks              1175
;  :propagations            1508
;  :quant-instantiations    560
;  :rlimit-count            423878)
(push) ; 9
(assert (not (< $Perm.No $k@403@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10701
;  :arith-add-rows          122
;  :arith-assert-diseq      582
;  :arith-assert-lower      1530
;  :arith-assert-upper      964
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        824
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               848
;  :datatype-accessor-ax    499
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7117
;  :mk-clause               4023
;  :num-allocs              7307051
;  :num-checks              1176
;  :propagations            1508
;  :quant-instantiations    560
;  :rlimit-count            423926)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))))
                                            $Snap.unit)))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) globals@335@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10745
;  :arith-add-rows          122
;  :arith-assert-diseq      582
;  :arith-assert-lower      1530
;  :arith-assert-upper      964
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        824
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               849
;  :datatype-accessor-ax    521
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7118
;  :mk-clause               4023
;  :num-allocs              7307051
;  :num-checks              1177
;  :propagations            1508
;  :quant-instantiations    560
;  :rlimit-count            424821
;  :time                    0.01)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10745
;  :arith-add-rows          122
;  :arith-assert-diseq      582
;  :arith-assert-lower      1530
;  :arith-assert-upper      964
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        824
;  :arith-fixed-eqs         197
;  :arith-offset-eqs        9
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               850
;  :datatype-accessor-ax    521
;  :datatype-constructor-ax 1896
;  :datatype-occurs-check   776
;  :datatype-splits         1417
;  :decisions               2084
;  :del-clause              3938
;  :final-checks            319
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7118
;  :mk-clause               4023
;  :num-allocs              7307051
;  :num-checks              1178
;  :propagations            1508
;  :quant-instantiations    560
;  :rlimit-count            424869)
(declare-const $t@417@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10928
;  :arith-add-rows          123
;  :arith-assert-diseq      585
;  :arith-assert-lower      1541
;  :arith-assert-upper      969
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        829
;  :arith-fixed-eqs         199
;  :arith-offset-eqs        9
;  :arith-pivots            311
;  :binary-propagations     22
;  :conflicts               851
;  :datatype-accessor-ax    521
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3972
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7175
;  :mk-clause               4047
;  :num-allocs              7307051
;  :num-checks              1180
;  :propagations            1521
;  :quant-instantiations    565
;  :rlimit-count            426301)
(assert (= $t@417@01 ($Snap.combine ($Snap.first $t@417@01) ($Snap.second $t@417@01))))
(assert (= ($Snap.first $t@417@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@417@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@417@01))
    ($Snap.second ($Snap.second $t@417@01)))))
(assert (= ($Snap.first ($Snap.second $t@417@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@417@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@417@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@417@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@417@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@418@01 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 162 | 0 <= i@418@01 | live]
; [else-branch: 162 | !(0 <= i@418@01) | live]
(push) ; 11
; [then-branch: 162 | 0 <= i@418@01]
(assert (<= 0 i@418@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 162 | !(0 <= i@418@01)]
(assert (not (<= 0 i@418@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 163 | i@418@01 < |First:(Second:(Second:(Second:($t@417@01))))| && 0 <= i@418@01 | live]
; [else-branch: 163 | !(i@418@01 < |First:(Second:(Second:(Second:($t@417@01))))| && 0 <= i@418@01) | live]
(push) ; 11
; [then-branch: 163 | i@418@01 < |First:(Second:(Second:(Second:($t@417@01))))| && 0 <= i@418@01]
(assert (and
  (<
    i@418@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
  (<= 0 i@418@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@418@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10978
;  :arith-add-rows          123
;  :arith-assert-diseq      585
;  :arith-assert-lower      1546
;  :arith-assert-upper      972
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        831
;  :arith-fixed-eqs         199
;  :arith-offset-eqs        9
;  :arith-pivots            311
;  :binary-propagations     22
;  :conflicts               851
;  :datatype-accessor-ax    529
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3972
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7201
;  :mk-clause               4047
;  :num-allocs              7307051
;  :num-checks              1181
;  :propagations            1521
;  :quant-instantiations    569
;  :rlimit-count            427604)
; [eval] -1
(push) ; 12
; [then-branch: 164 | First:(Second:(Second:(Second:($t@417@01))))[i@418@01] == -1 | live]
; [else-branch: 164 | First:(Second:(Second:(Second:($t@417@01))))[i@418@01] != -1 | live]
(push) ; 13
; [then-branch: 164 | First:(Second:(Second:(Second:($t@417@01))))[i@418@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    i@418@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 164 | First:(Second:(Second:(Second:($t@417@01))))[i@418@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
      i@418@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@418@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10978
;  :arith-add-rows          123
;  :arith-assert-diseq      585
;  :arith-assert-lower      1546
;  :arith-assert-upper      972
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        831
;  :arith-fixed-eqs         199
;  :arith-offset-eqs        9
;  :arith-pivots            311
;  :binary-propagations     22
;  :conflicts               851
;  :datatype-accessor-ax    529
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3972
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7202
;  :mk-clause               4047
;  :num-allocs              7307051
;  :num-checks              1182
;  :propagations            1521
;  :quant-instantiations    569
;  :rlimit-count            427779)
(push) ; 14
; [then-branch: 165 | 0 <= First:(Second:(Second:(Second:($t@417@01))))[i@418@01] | live]
; [else-branch: 165 | !(0 <= First:(Second:(Second:(Second:($t@417@01))))[i@418@01]) | live]
(push) ; 15
; [then-branch: 165 | 0 <= First:(Second:(Second:(Second:($t@417@01))))[i@418@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    i@418@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@418@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10978
;  :arith-add-rows          123
;  :arith-assert-diseq      586
;  :arith-assert-lower      1549
;  :arith-assert-upper      972
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        832
;  :arith-fixed-eqs         199
;  :arith-offset-eqs        9
;  :arith-pivots            311
;  :binary-propagations     22
;  :conflicts               851
;  :datatype-accessor-ax    529
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3972
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7205
;  :mk-clause               4048
;  :num-allocs              7307051
;  :num-checks              1183
;  :propagations            1521
;  :quant-instantiations    569
;  :rlimit-count            427903)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 165 | !(0 <= First:(Second:(Second:(Second:($t@417@01))))[i@418@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
      i@418@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 163 | !(i@418@01 < |First:(Second:(Second:(Second:($t@417@01))))| && 0 <= i@418@01)]
(assert (not
  (and
    (<
      i@418@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
    (<= 0 i@418@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@418@01 Int)) (!
  (implies
    (and
      (<
        i@418@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
      (<= 0 i@418@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
          i@418@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
            i@418@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
            i@418@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    i@418@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))
(declare-const $k@419@01 $Perm)
(assert ($Perm.isReadVar $k@419@01 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@419@01 $Perm.No) (< $Perm.No $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10983
;  :arith-add-rows          123
;  :arith-assert-diseq      587
;  :arith-assert-lower      1551
;  :arith-assert-upper      973
;  :arith-bound-prop        110
;  :arith-conflicts         102
;  :arith-eq-adapter        833
;  :arith-fixed-eqs         199
;  :arith-offset-eqs        9
;  :arith-pivots            311
;  :binary-propagations     22
;  :conflicts               852
;  :datatype-accessor-ax    530
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7211
;  :mk-clause               4050
;  :num-allocs              7307051
;  :num-checks              1184
;  :propagations            1522
;  :quant-instantiations    569
;  :rlimit-count            428671)
(declare-const $t@420@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@399@01 $k@412@01))
    (=
      $t@420@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))
  (implies
    (< $Perm.No $k@419@01)
    (=
      $t@420@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))
(assert (<= $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01)))
(assert (<= (+ (- $k@399@01 $k@412@01) $k@419@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10993
;  :arith-add-rows          124
;  :arith-assert-diseq      587
;  :arith-assert-lower      1552
;  :arith-assert-upper      975
;  :arith-bound-prop        110
;  :arith-conflicts         103
;  :arith-eq-adapter        833
;  :arith-fixed-eqs         200
;  :arith-offset-eqs        9
;  :arith-pivots            312
;  :binary-propagations     22
;  :conflicts               853
;  :datatype-accessor-ax    531
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7219
;  :mk-clause               4050
;  :num-allocs              7307051
;  :num-checks              1185
;  :propagations            1522
;  :quant-instantiations    570
;  :rlimit-count            429357)
(assert (not (= $t@420@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10999
;  :arith-add-rows          124
;  :arith-assert-diseq      587
;  :arith-assert-lower      1552
;  :arith-assert-upper      976
;  :arith-bound-prop        110
;  :arith-conflicts         104
;  :arith-eq-adapter        833
;  :arith-fixed-eqs         201
;  :arith-offset-eqs        9
;  :arith-pivots            312
;  :binary-propagations     22
;  :conflicts               854
;  :datatype-accessor-ax    532
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7222
;  :mk-clause               4050
;  :num-allocs              7307051
;  :num-checks              1186
;  :propagations            1522
;  :quant-instantiations    570
;  :rlimit-count            429681)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11004
;  :arith-add-rows          124
;  :arith-assert-diseq      587
;  :arith-assert-lower      1552
;  :arith-assert-upper      977
;  :arith-bound-prop        110
;  :arith-conflicts         105
;  :arith-eq-adapter        833
;  :arith-fixed-eqs         202
;  :arith-offset-eqs        9
;  :arith-pivots            312
;  :binary-propagations     22
;  :conflicts               855
;  :datatype-accessor-ax    533
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7224
;  :mk-clause               4050
;  :num-allocs              7307051
;  :num-checks              1187
;  :propagations            1522
;  :quant-instantiations    570
;  :rlimit-count            429970
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          124
;  :arith-assert-diseq      587
;  :arith-assert-lower      1552
;  :arith-assert-upper      978
;  :arith-bound-prop        110
;  :arith-conflicts         106
;  :arith-eq-adapter        833
;  :arith-fixed-eqs         203
;  :arith-offset-eqs        9
;  :arith-pivots            312
;  :binary-propagations     22
;  :conflicts               856
;  :datatype-accessor-ax    534
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7226
;  :mk-clause               4050
;  :num-allocs              7307051
;  :num-checks              1188
;  :propagations            1522
;  :quant-instantiations    570
;  :rlimit-count            430269
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))
(declare-const $k@421@01 $Perm)
(assert ($Perm.isReadVar $k@421@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@421@01 $Perm.No) (< $Perm.No $k@421@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11014
;  :arith-add-rows          124
;  :arith-assert-diseq      588
;  :arith-assert-lower      1554
;  :arith-assert-upper      979
;  :arith-bound-prop        110
;  :arith-conflicts         106
;  :arith-eq-adapter        834
;  :arith-fixed-eqs         203
;  :arith-offset-eqs        9
;  :arith-pivots            312
;  :binary-propagations     22
;  :conflicts               857
;  :datatype-accessor-ax    535
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7231
;  :mk-clause               4052
;  :num-allocs              7307051
;  :num-checks              1189
;  :propagations            1523
;  :quant-instantiations    570
;  :rlimit-count            430689)
(declare-const $t@422@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@400@01 $k@413@01))
    (=
      $t@422@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
  (implies
    (< $Perm.No $k@421@01)
    (=
      $t@422@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@400@01 $k@413@01) $k@421@01)))
(assert (<= (+ (- $k@400@01 $k@413@01) $k@421@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@400@01 $k@413@01) $k@421@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@400@01 $k@413@01) $k@421@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11024
;  :arith-add-rows          125
;  :arith-assert-diseq      588
;  :arith-assert-lower      1555
;  :arith-assert-upper      981
;  :arith-bound-prop        110
;  :arith-conflicts         107
;  :arith-eq-adapter        834
;  :arith-fixed-eqs         204
;  :arith-offset-eqs        9
;  :arith-pivots            313
;  :binary-propagations     22
;  :conflicts               858
;  :datatype-accessor-ax    536
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7239
;  :mk-clause               4052
;  :num-allocs              7307051
;  :num-checks              1190
;  :propagations            1523
;  :quant-instantiations    571
;  :rlimit-count            431335)
(assert (not (= $t@422@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@400@01 $k@413@01) $k@421@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11029
;  :arith-add-rows          125
;  :arith-assert-diseq      588
;  :arith-assert-lower      1555
;  :arith-assert-upper      982
;  :arith-bound-prop        110
;  :arith-conflicts         108
;  :arith-eq-adapter        834
;  :arith-fixed-eqs         205
;  :arith-offset-eqs        9
;  :arith-pivots            313
;  :binary-propagations     22
;  :conflicts               859
;  :datatype-accessor-ax    537
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7241
;  :mk-clause               4052
;  :num-allocs              7307051
;  :num-checks              1191
;  :propagations            1523
;  :quant-instantiations    571
;  :rlimit-count            431682)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))))
(declare-const $k@423@01 $Perm)
(assert ($Perm.isReadVar $k@423@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@423@01 $Perm.No) (< $Perm.No $k@423@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11034
;  :arith-add-rows          125
;  :arith-assert-diseq      589
;  :arith-assert-lower      1557
;  :arith-assert-upper      983
;  :arith-bound-prop        110
;  :arith-conflicts         108
;  :arith-eq-adapter        835
;  :arith-fixed-eqs         205
;  :arith-offset-eqs        9
;  :arith-pivots            313
;  :binary-propagations     22
;  :conflicts               860
;  :datatype-accessor-ax    538
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7246
;  :mk-clause               4054
;  :num-allocs              7307051
;  :num-checks              1192
;  :propagations            1524
;  :quant-instantiations    571
;  :rlimit-count            432132)
(declare-const $t@424@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@401@01 $k@414@01))
    (=
      $t@424@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
  (implies
    (< $Perm.No $k@423@01)
    (=
      $t@424@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@401@01 $k@414@01) $k@423@01)))
(assert (<= (+ (- $k@401@01 $k@414@01) $k@423@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@401@01 $k@414@01) $k@423@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@401@01 $k@414@01) $k@423@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11044
;  :arith-add-rows          126
;  :arith-assert-diseq      589
;  :arith-assert-lower      1558
;  :arith-assert-upper      985
;  :arith-bound-prop        110
;  :arith-conflicts         109
;  :arith-eq-adapter        835
;  :arith-fixed-eqs         206
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               861
;  :datatype-accessor-ax    539
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7254
;  :mk-clause               4054
;  :num-allocs              7307051
;  :num-checks              1193
;  :propagations            1524
;  :quant-instantiations    572
;  :rlimit-count            432978)
(assert (not (= $t@424@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@401@01 $k@414@01) $k@423@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11050
;  :arith-add-rows          126
;  :arith-assert-diseq      589
;  :arith-assert-lower      1558
;  :arith-assert-upper      986
;  :arith-bound-prop        110
;  :arith-conflicts         110
;  :arith-eq-adapter        835
;  :arith-fixed-eqs         207
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               862
;  :datatype-accessor-ax    540
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7257
;  :mk-clause               4054
;  :num-allocs              7307051
;  :num-checks              1194
;  :propagations            1524
;  :quant-instantiations    572
;  :rlimit-count            433382)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))))))
(declare-const $k@425@01 $Perm)
(assert ($Perm.isReadVar $k@425@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@425@01 $Perm.No) (< $Perm.No $k@425@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11055
;  :arith-add-rows          126
;  :arith-assert-diseq      590
;  :arith-assert-lower      1560
;  :arith-assert-upper      987
;  :arith-bound-prop        110
;  :arith-conflicts         110
;  :arith-eq-adapter        836
;  :arith-fixed-eqs         207
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               863
;  :datatype-accessor-ax    541
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7262
;  :mk-clause               4056
;  :num-allocs              7307051
;  :num-checks              1195
;  :propagations            1525
;  :quant-instantiations    572
;  :rlimit-count            433863)
(declare-const $t@426@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@402@01 $k@415@01))
    (=
      $t@426@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@425@01)
    (=
      $t@426@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@402@01 $k@415@01) $k@425@01)))
(assert (<= (+ (- $k@402@01 $k@415@01) $k@425@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@402@01 $k@415@01) $k@425@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@402@01 $k@415@01) $k@425@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11065
;  :arith-add-rows          127
;  :arith-assert-diseq      590
;  :arith-assert-lower      1561
;  :arith-assert-upper      989
;  :arith-bound-prop        110
;  :arith-conflicts         111
;  :arith-eq-adapter        836
;  :arith-fixed-eqs         208
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               864
;  :datatype-accessor-ax    542
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7270
;  :mk-clause               4056
;  :num-allocs              7307051
;  :num-checks              1196
;  :propagations            1525
;  :quant-instantiations    573
;  :rlimit-count            434763)
(assert (not (= $t@426@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11071
;  :arith-add-rows          127
;  :arith-assert-diseq      590
;  :arith-assert-lower      1561
;  :arith-assert-upper      990
;  :arith-bound-prop        110
;  :arith-conflicts         112
;  :arith-eq-adapter        836
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               865
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7273
;  :mk-clause               4056
;  :num-allocs              7307051
;  :num-checks              1197
;  :propagations            1525
;  :quant-instantiations    573
;  :rlimit-count            435197
;  :time                    0.01)
(declare-const $k@427@01 $Perm)
(assert ($Perm.isReadVar $k@427@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@427@01 $Perm.No) (< $Perm.No $k@427@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11071
;  :arith-add-rows          127
;  :arith-assert-diseq      591
;  :arith-assert-lower      1563
;  :arith-assert-upper      991
;  :arith-bound-prop        110
;  :arith-conflicts         112
;  :arith-eq-adapter        837
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               866
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7277
;  :mk-clause               4058
;  :num-allocs              7307051
;  :num-checks              1198
;  :propagations            1526
;  :quant-instantiations    573
;  :rlimit-count            435396)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  $t@420@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11071
;  :arith-add-rows          127
;  :arith-assert-diseq      591
;  :arith-assert-lower      1563
;  :arith-assert-upper      991
;  :arith-bound-prop        110
;  :arith-conflicts         112
;  :arith-eq-adapter        837
;  :arith-fixed-eqs         209
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               866
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7277
;  :mk-clause               4058
;  :num-allocs              7307051
;  :num-checks              1199
;  :propagations            1526
;  :quant-instantiations    573
;  :rlimit-count            435407)
(declare-const $t@428@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@403@01 $k@416@01))
    (=
      $t@428@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@427@01)
    (=
      $t@428@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@403@01 $k@416@01) $k@427@01)))
(assert (<= (+ (- $k@403@01 $k@416@01) $k@427@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@403@01 $k@416@01) $k@427@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11079
;  :arith-add-rows          127
;  :arith-assert-diseq      591
;  :arith-assert-lower      1564
;  :arith-assert-upper      993
;  :arith-bound-prop        110
;  :arith-conflicts         113
;  :arith-eq-adapter        837
;  :arith-fixed-eqs         210
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               867
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7284
;  :mk-clause               4058
;  :num-allocs              7307051
;  :num-checks              1200
;  :propagations            1526
;  :quant-instantiations    574
;  :rlimit-count            436033)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  $t@420@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11079
;  :arith-add-rows          127
;  :arith-assert-diseq      591
;  :arith-assert-lower      1564
;  :arith-assert-upper      993
;  :arith-bound-prop        110
;  :arith-conflicts         113
;  :arith-eq-adapter        837
;  :arith-fixed-eqs         210
;  :arith-offset-eqs        9
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               867
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7284
;  :mk-clause               4058
;  :num-allocs              7307051
;  :num-checks              1201
;  :propagations            1526
;  :quant-instantiations    574
;  :rlimit-count            436044)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@403@01 $k@416@01) $k@427@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11079
;  :arith-add-rows          128
;  :arith-assert-diseq      591
;  :arith-assert-lower      1564
;  :arith-assert-upper      994
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        837
;  :arith-fixed-eqs         211
;  :arith-offset-eqs        9
;  :arith-pivots            316
;  :binary-propagations     22
;  :conflicts               868
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   807
;  :datatype-splits         1451
;  :decisions               2122
;  :del-clause              3973
;  :final-checks            321
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.24
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             7285
;  :mk-clause               4058
;  :num-allocs              7307051
;  :num-checks              1202
;  :propagations            1526
;  :quant-instantiations    574
;  :rlimit-count            436151)
(assert (= $t@428@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@417@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) globals@335@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_a_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11301
;  :arith-add-rows          132
;  :arith-assert-diseq      595
;  :arith-assert-lower      1579
;  :arith-assert-upper      1001
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        844
;  :arith-fixed-eqs         214
;  :arith-offset-eqs        9
;  :arith-pivots            322
;  :binary-propagations     22
;  :conflicts               869
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 1975
;  :datatype-occurs-check   836
;  :datatype-splits         1492
;  :decisions               2167
;  :del-clause              4013
;  :final-checks            323
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7359
;  :mk-clause               4088
;  :num-allocs              7687155
;  :num-checks              1204
;  :propagations            1542
;  :quant-instantiations    580
;  :rlimit-count            437930
;  :time                    0.01)
(declare-const $t@429@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@430@01 $Perm)
(assert ($Perm.isReadVar $k@430@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@430@01 $Perm.No) (< $Perm.No $k@430@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1596
;  :arith-assert-upper      1009
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            328
;  :binary-propagations     22
;  :conflicts               870
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7436
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1206
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            439807)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@397@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1596
;  :arith-assert-upper      1009
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            328
;  :binary-propagations     22
;  :conflicts               870
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7436
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1207
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            439818)
(assert (< $k@430@01 $k@397@01))
(assert (<= $Perm.No (- $k@397@01 $k@430@01)))
(assert (<= (- $k@397@01 $k@430@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@397@01 $k@430@01)) (not (= diz@334@01 $Ref.null))))
; [eval] diz.Write_a_m != null
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1598
;  :arith-assert-upper      1010
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               871
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7439
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1208
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440038)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1598
;  :arith-assert-upper      1010
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               872
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7439
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1209
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440086)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1598
;  :arith-assert-upper      1010
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               873
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7439
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1210
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440134)
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1598
;  :arith-assert-upper      1010
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               874
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7439
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1211
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440182)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1598
;  :arith-assert-upper      1010
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7439
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1212
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440230
;  :time                    0.00)
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1598
;  :arith-assert-upper      1010
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               876
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7439
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1213
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440278)
; [eval] (forall i__40: Int :: { diz.Write_a_m.Main_process_state[i__40] } 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|)
(declare-const i__40@431@01 Int)
(push) ; 9
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__40 && i__40 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__40
(push) ; 10
; [then-branch: 166 | 0 <= i__40@431@01 | live]
; [else-branch: 166 | !(0 <= i__40@431@01) | live]
(push) ; 11
; [then-branch: 166 | 0 <= i__40@431@01]
(assert (<= 0 i__40@431@01))
; [eval] i__40 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1599
;  :arith-assert-upper      1010
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               877
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7440
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1214
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440378)
(pop) ; 11
(push) ; 11
; [else-branch: 166 | !(0 <= i__40@431@01)]
(assert (not (<= 0 i__40@431@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 167 | i__40@431@01 < |First:(Second:(Second:(Second:($t@417@01))))| && 0 <= i__40@431@01 | live]
; [else-branch: 167 | !(i__40@431@01 < |First:(Second:(Second:(Second:($t@417@01))))| && 0 <= i__40@431@01) | live]
(push) ; 11
; [then-branch: 167 | i__40@431@01 < |First:(Second:(Second:(Second:($t@417@01))))| && 0 <= i__40@431@01]
(assert (and
  (<
    i__40@431@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
  (<= 0 i__40@431@01)))
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40] == -1
; [eval] diz.Write_a_m.Main_process_state[i__40]
(push) ; 12
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1600
;  :arith-assert-upper      1011
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               878
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7442
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1215
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440535)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__40@431@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      600
;  :arith-assert-lower      1600
;  :arith-assert-upper      1011
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        852
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               878
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7442
;  :mk-clause               4120
;  :num-allocs              7687155
;  :num-checks              1216
;  :propagations            1559
;  :quant-instantiations    586
;  :rlimit-count            440544)
; [eval] -1
(push) ; 12
; [then-branch: 168 | First:(Second:(Second:(Second:($t@417@01))))[i__40@431@01] == -1 | live]
; [else-branch: 168 | First:(Second:(Second:(Second:($t@417@01))))[i__40@431@01] != -1 | live]
(push) ; 13
; [then-branch: 168 | First:(Second:(Second:(Second:($t@417@01))))[i__40@431@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    i__40@431@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 168 | First:(Second:(Second:(Second:($t@417@01))))[i__40@431@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
      i__40@431@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40] && diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__40]
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      601
;  :arith-assert-lower      1603
;  :arith-assert-upper      1012
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               879
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7448
;  :mk-clause               4124
;  :num-allocs              7687155
;  :num-checks              1217
;  :propagations            1561
;  :quant-instantiations    587
;  :rlimit-count            440815)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__40@431@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      601
;  :arith-assert-lower      1603
;  :arith-assert-upper      1012
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               879
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7448
;  :mk-clause               4124
;  :num-allocs              7687155
;  :num-checks              1218
;  :propagations            1561
;  :quant-instantiations    587
;  :rlimit-count            440824)
(push) ; 14
; [then-branch: 169 | 0 <= First:(Second:(Second:(Second:($t@417@01))))[i__40@431@01] | live]
; [else-branch: 169 | !(0 <= First:(Second:(Second:(Second:($t@417@01))))[i__40@431@01]) | live]
(push) ; 15
; [then-branch: 169 | 0 <= First:(Second:(Second:(Second:($t@417@01))))[i__40@431@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    i__40@431@01)))
; [eval] diz.Write_a_m.Main_process_state[i__40] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__40]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      601
;  :arith-assert-lower      1603
;  :arith-assert-upper      1012
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               880
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7448
;  :mk-clause               4124
;  :num-allocs              7687155
;  :num-checks              1219
;  :propagations            1561
;  :quant-instantiations    587
;  :rlimit-count            440977)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__40@431@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      601
;  :arith-assert-lower      1603
;  :arith-assert-upper      1012
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               880
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7448
;  :mk-clause               4124
;  :num-allocs              7687155
;  :num-checks              1220
;  :propagations            1561
;  :quant-instantiations    587
;  :rlimit-count            440986)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      601
;  :arith-assert-lower      1603
;  :arith-assert-upper      1012
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        853
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               881
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4043
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7448
;  :mk-clause               4124
;  :num-allocs              7687155
;  :num-checks              1221
;  :propagations            1561
;  :quant-instantiations    587
;  :rlimit-count            441034)
(pop) ; 15
(push) ; 15
; [else-branch: 169 | !(0 <= First:(Second:(Second:(Second:($t@417@01))))[i__40@431@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
      i__40@431@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 167 | !(i__40@431@01 < |First:(Second:(Second:(Second:($t@417@01))))| && 0 <= i__40@431@01)]
(assert (not
  (and
    (<
      i__40@431@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
    (<= 0 i__40@431@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__40@431@01 Int)) (!
  (implies
    (and
      (<
        i__40@431@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
      (<= 0 i__40@431@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
          i__40@431@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
            i__40@431@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
            i__40@431@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    i__40@431@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      603
;  :arith-assert-lower      1604
;  :arith-assert-upper      1013
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        854
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               882
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4061
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7456
;  :mk-clause               4138
;  :num-allocs              7687155
;  :num-checks              1222
;  :propagations            1563
;  :quant-instantiations    588
;  :rlimit-count            441480)
(assert (forall ((i__40@431@01 Int)) (!
  (implies
    (and
      (<
        i__40@431@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
      (<= 0 i__40@431@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
          i__40@431@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
            i__40@431@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
            i__40@431@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    i__40@431@01))
  :qid |prog.l<no position>|)))
(declare-const $k@432@01 $Perm)
(assert ($Perm.isReadVar $k@432@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      604
;  :arith-assert-lower      1606
;  :arith-assert-upper      1014
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        855
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               883
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4061
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7461
;  :mk-clause               4140
;  :num-allocs              7687155
;  :num-checks              1223
;  :propagations            1564
;  :quant-instantiations    588
;  :rlimit-count            442038)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@432@01 $Perm.No) (< $Perm.No $k@432@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11524
;  :arith-add-rows          136
;  :arith-assert-diseq      604
;  :arith-assert-lower      1606
;  :arith-assert-upper      1014
;  :arith-bound-prop        110
;  :arith-conflicts         114
;  :arith-eq-adapter        855
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               884
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4061
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7461
;  :mk-clause               4140
;  :num-allocs              7687155
;  :num-checks              1224
;  :propagations            1564
;  :quant-instantiations    588
;  :rlimit-count            442088)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@399@01 $k@412@01) $k@419@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          136
;  :arith-assert-diseq      604
;  :arith-assert-lower      1606
;  :arith-assert-upper      1015
;  :arith-bound-prop        110
;  :arith-conflicts         115
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               885
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7463
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1225
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442168
;  :time                    0.01)
(assert (< $k@432@01 (+ (- $k@399@01 $k@412@01) $k@419@01)))
(assert (<= $Perm.No (- (+ (- $k@399@01 $k@412@01) $k@419@01) $k@432@01)))
(assert (<= (- (+ (- $k@399@01 $k@412@01) $k@419@01) $k@432@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@399@01 $k@412@01) $k@419@01) $k@432@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      604
;  :arith-assert-lower      1608
;  :arith-assert-upper      1016
;  :arith-bound-prop        110
;  :arith-conflicts         115
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         217
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               886
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7466
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1226
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442404)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      604
;  :arith-assert-lower      1608
;  :arith-assert-upper      1017
;  :arith-bound-prop        110
;  :arith-conflicts         116
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         218
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               887
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7467
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1227
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442485
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      604
;  :arith-assert-lower      1608
;  :arith-assert-upper      1017
;  :arith-bound-prop        110
;  :arith-conflicts         116
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         218
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               888
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7467
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1228
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442533)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      604
;  :arith-assert-lower      1608
;  :arith-assert-upper      1018
;  :arith-bound-prop        110
;  :arith-conflicts         117
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         219
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               889
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7468
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1229
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442614)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      604
;  :arith-assert-lower      1608
;  :arith-assert-upper      1018
;  :arith-bound-prop        110
;  :arith-conflicts         117
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         219
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               890
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7468
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1230
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442662)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      604
;  :arith-assert-lower      1608
;  :arith-assert-upper      1019
;  :arith-bound-prop        110
;  :arith-conflicts         118
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         220
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               891
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7469
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1231
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442743
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      604
;  :arith-assert-lower      1608
;  :arith-assert-upper      1019
;  :arith-bound-prop        110
;  :arith-conflicts         118
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         220
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               892
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7469
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1232
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442791
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      604
;  :arith-assert-lower      1608
;  :arith-assert-upper      1020
;  :arith-bound-prop        110
;  :arith-conflicts         119
;  :arith-eq-adapter        856
;  :arith-fixed-eqs         221
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               893
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7470
;  :mk-clause               4142
;  :num-allocs              7687155
;  :num-checks              1233
;  :propagations            1565
;  :quant-instantiations    588
;  :rlimit-count            442872
;  :time                    0.01)
(declare-const $k@433@01 $Perm)
(assert ($Perm.isReadVar $k@433@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      605
;  :arith-assert-lower      1610
;  :arith-assert-upper      1021
;  :arith-bound-prop        110
;  :arith-conflicts         119
;  :arith-eq-adapter        857
;  :arith-fixed-eqs         221
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               894
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7474
;  :mk-clause               4144
;  :num-allocs              7687155
;  :num-checks              1234
;  :propagations            1566
;  :quant-instantiations    588
;  :rlimit-count            443069)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@433@01 $Perm.No) (< $Perm.No $k@433@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11525
;  :arith-add-rows          138
;  :arith-assert-diseq      605
;  :arith-assert-lower      1610
;  :arith-assert-upper      1021
;  :arith-bound-prop        110
;  :arith-conflicts         119
;  :arith-eq-adapter        857
;  :arith-fixed-eqs         221
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               895
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4063
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7474
;  :mk-clause               4144
;  :num-allocs              7687155
;  :num-checks              1235
;  :propagations            1566
;  :quant-instantiations    588
;  :rlimit-count            443119)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@400@01 $k@413@01) $k@421@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11526
;  :arith-add-rows          138
;  :arith-assert-diseq      605
;  :arith-assert-lower      1610
;  :arith-assert-upper      1022
;  :arith-bound-prop        110
;  :arith-conflicts         120
;  :arith-eq-adapter        858
;  :arith-fixed-eqs         221
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               896
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4065
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7476
;  :mk-clause               4146
;  :num-allocs              7687155
;  :num-checks              1236
;  :propagations            1567
;  :quant-instantiations    588
;  :rlimit-count            443199)
(assert (< $k@433@01 (+ (- $k@400@01 $k@413@01) $k@421@01)))
(assert (<= $Perm.No (- (+ (- $k@400@01 $k@413@01) $k@421@01) $k@433@01)))
(assert (<= (- (+ (- $k@400@01 $k@413@01) $k@421@01) $k@433@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@400@01 $k@413@01) $k@421@01) $k@433@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11526
;  :arith-add-rows          140
;  :arith-assert-diseq      605
;  :arith-assert-lower      1612
;  :arith-assert-upper      1023
;  :arith-bound-prop        110
;  :arith-conflicts         120
;  :arith-eq-adapter        858
;  :arith-fixed-eqs         221
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               897
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4065
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7479
;  :mk-clause               4146
;  :num-allocs              7687155
;  :num-checks              1237
;  :propagations            1567
;  :quant-instantiations    588
;  :rlimit-count            443435)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@400@01 $k@413@01) $k@421@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11526
;  :arith-add-rows          140
;  :arith-assert-diseq      605
;  :arith-assert-lower      1612
;  :arith-assert-upper      1024
;  :arith-bound-prop        110
;  :arith-conflicts         121
;  :arith-eq-adapter        858
;  :arith-fixed-eqs         222
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               898
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4065
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7480
;  :mk-clause               4146
;  :num-allocs              7687155
;  :num-checks              1238
;  :propagations            1567
;  :quant-instantiations    588
;  :rlimit-count            443516)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11526
;  :arith-add-rows          140
;  :arith-assert-diseq      605
;  :arith-assert-lower      1612
;  :arith-assert-upper      1024
;  :arith-bound-prop        110
;  :arith-conflicts         121
;  :arith-eq-adapter        858
;  :arith-fixed-eqs         222
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               899
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4065
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7480
;  :mk-clause               4146
;  :num-allocs              7687155
;  :num-checks              1239
;  :propagations            1567
;  :quant-instantiations    588
;  :rlimit-count            443564)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@400@01 $k@413@01) $k@421@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11526
;  :arith-add-rows          140
;  :arith-assert-diseq      605
;  :arith-assert-lower      1612
;  :arith-assert-upper      1025
;  :arith-bound-prop        110
;  :arith-conflicts         122
;  :arith-eq-adapter        858
;  :arith-fixed-eqs         223
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               900
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4065
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7481
;  :mk-clause               4146
;  :num-allocs              7687155
;  :num-checks              1240
;  :propagations            1567
;  :quant-instantiations    588
;  :rlimit-count            443645)
(declare-const $k@434@01 $Perm)
(assert ($Perm.isReadVar $k@434@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11526
;  :arith-add-rows          140
;  :arith-assert-diseq      606
;  :arith-assert-lower      1614
;  :arith-assert-upper      1026
;  :arith-bound-prop        110
;  :arith-conflicts         122
;  :arith-eq-adapter        859
;  :arith-fixed-eqs         223
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               901
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4065
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7485
;  :mk-clause               4148
;  :num-allocs              7687155
;  :num-checks              1241
;  :propagations            1568
;  :quant-instantiations    588
;  :rlimit-count            443841)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@434@01 $Perm.No) (< $Perm.No $k@434@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11526
;  :arith-add-rows          140
;  :arith-assert-diseq      606
;  :arith-assert-lower      1614
;  :arith-assert-upper      1026
;  :arith-bound-prop        110
;  :arith-conflicts         122
;  :arith-eq-adapter        859
;  :arith-fixed-eqs         223
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               902
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4065
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7485
;  :mk-clause               4148
;  :num-allocs              7687155
;  :num-checks              1242
;  :propagations            1568
;  :quant-instantiations    588
;  :rlimit-count            443891)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@401@01 $k@414@01) $k@423@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11527
;  :arith-add-rows          140
;  :arith-assert-diseq      606
;  :arith-assert-lower      1614
;  :arith-assert-upper      1027
;  :arith-bound-prop        110
;  :arith-conflicts         123
;  :arith-eq-adapter        860
;  :arith-fixed-eqs         223
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               903
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4067
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7487
;  :mk-clause               4150
;  :num-allocs              7687155
;  :num-checks              1243
;  :propagations            1569
;  :quant-instantiations    588
;  :rlimit-count            443971)
(assert (< $k@434@01 (+ (- $k@401@01 $k@414@01) $k@423@01)))
(assert (<= $Perm.No (- (+ (- $k@401@01 $k@414@01) $k@423@01) $k@434@01)))
(assert (<= (- (+ (- $k@401@01 $k@414@01) $k@423@01) $k@434@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@401@01 $k@414@01) $k@423@01) $k@434@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11527
;  :arith-add-rows          142
;  :arith-assert-diseq      606
;  :arith-assert-lower      1616
;  :arith-assert-upper      1028
;  :arith-bound-prop        110
;  :arith-conflicts         123
;  :arith-eq-adapter        860
;  :arith-fixed-eqs         223
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               904
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4067
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7490
;  :mk-clause               4150
;  :num-allocs              7687155
;  :num-checks              1244
;  :propagations            1569
;  :quant-instantiations    588
;  :rlimit-count            444207
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@401@01 $k@414@01) $k@423@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11527
;  :arith-add-rows          142
;  :arith-assert-diseq      606
;  :arith-assert-lower      1616
;  :arith-assert-upper      1029
;  :arith-bound-prop        110
;  :arith-conflicts         124
;  :arith-eq-adapter        860
;  :arith-fixed-eqs         224
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               905
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4067
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7491
;  :mk-clause               4150
;  :num-allocs              7687155
;  :num-checks              1245
;  :propagations            1569
;  :quant-instantiations    588
;  :rlimit-count            444288)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11527
;  :arith-add-rows          142
;  :arith-assert-diseq      606
;  :arith-assert-lower      1616
;  :arith-assert-upper      1029
;  :arith-bound-prop        110
;  :arith-conflicts         124
;  :arith-eq-adapter        860
;  :arith-fixed-eqs         224
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               906
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4067
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7491
;  :mk-clause               4150
;  :num-allocs              7687155
;  :num-checks              1246
;  :propagations            1569
;  :quant-instantiations    588
;  :rlimit-count            444336
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@401@01 $k@414@01) $k@423@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11527
;  :arith-add-rows          142
;  :arith-assert-diseq      606
;  :arith-assert-lower      1616
;  :arith-assert-upper      1030
;  :arith-bound-prop        110
;  :arith-conflicts         125
;  :arith-eq-adapter        860
;  :arith-fixed-eqs         225
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               907
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4067
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7492
;  :mk-clause               4150
;  :num-allocs              7687155
;  :num-checks              1247
;  :propagations            1569
;  :quant-instantiations    588
;  :rlimit-count            444417)
(declare-const $k@435@01 $Perm)
(assert ($Perm.isReadVar $k@435@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11527
;  :arith-add-rows          142
;  :arith-assert-diseq      607
;  :arith-assert-lower      1618
;  :arith-assert-upper      1031
;  :arith-bound-prop        110
;  :arith-conflicts         125
;  :arith-eq-adapter        861
;  :arith-fixed-eqs         225
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               908
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4067
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7496
;  :mk-clause               4152
;  :num-allocs              7687155
;  :num-checks              1248
;  :propagations            1570
;  :quant-instantiations    588
;  :rlimit-count            444613)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@435@01 $Perm.No) (< $Perm.No $k@435@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11527
;  :arith-add-rows          142
;  :arith-assert-diseq      607
;  :arith-assert-lower      1618
;  :arith-assert-upper      1031
;  :arith-bound-prop        110
;  :arith-conflicts         125
;  :arith-eq-adapter        861
;  :arith-fixed-eqs         225
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               909
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4067
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7496
;  :mk-clause               4152
;  :num-allocs              7687155
;  :num-checks              1249
;  :propagations            1570
;  :quant-instantiations    588
;  :rlimit-count            444663)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@402@01 $k@415@01) $k@425@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11528
;  :arith-add-rows          142
;  :arith-assert-diseq      607
;  :arith-assert-lower      1618
;  :arith-assert-upper      1032
;  :arith-bound-prop        110
;  :arith-conflicts         126
;  :arith-eq-adapter        862
;  :arith-fixed-eqs         225
;  :arith-offset-eqs        9
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               910
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4069
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7498
;  :mk-clause               4154
;  :num-allocs              7687155
;  :num-checks              1250
;  :propagations            1571
;  :quant-instantiations    588
;  :rlimit-count            444741)
(assert (< $k@435@01 (+ (- $k@402@01 $k@415@01) $k@425@01)))
(assert (<= $Perm.No (- (+ (- $k@402@01 $k@415@01) $k@425@01) $k@435@01)))
(assert (<= (- (+ (- $k@402@01 $k@415@01) $k@425@01) $k@435@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@402@01 $k@415@01) $k@425@01) $k@435@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11528
;  :arith-add-rows          143
;  :arith-assert-diseq      607
;  :arith-assert-lower      1620
;  :arith-assert-upper      1033
;  :arith-bound-prop        110
;  :arith-conflicts         126
;  :arith-eq-adapter        862
;  :arith-fixed-eqs         225
;  :arith-offset-eqs        9
;  :arith-pivots            331
;  :binary-propagations     22
;  :conflicts               911
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4069
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7501
;  :mk-clause               4154
;  :num-allocs              7687155
;  :num-checks              1251
;  :propagations            1571
;  :quant-instantiations    588
;  :rlimit-count            444983)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@402@01 $k@415@01) $k@425@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11528
;  :arith-add-rows          143
;  :arith-assert-diseq      607
;  :arith-assert-lower      1620
;  :arith-assert-upper      1034
;  :arith-bound-prop        110
;  :arith-conflicts         127
;  :arith-eq-adapter        862
;  :arith-fixed-eqs         226
;  :arith-offset-eqs        9
;  :arith-pivots            331
;  :binary-propagations     22
;  :conflicts               912
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4069
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7502
;  :mk-clause               4154
;  :num-allocs              7687155
;  :num-checks              1252
;  :propagations            1571
;  :quant-instantiations    588
;  :rlimit-count            445061
;  :time                    0.01)
(declare-const $k@436@01 $Perm)
(assert ($Perm.isReadVar $k@436@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11528
;  :arith-add-rows          143
;  :arith-assert-diseq      608
;  :arith-assert-lower      1622
;  :arith-assert-upper      1035
;  :arith-bound-prop        110
;  :arith-conflicts         127
;  :arith-eq-adapter        863
;  :arith-fixed-eqs         226
;  :arith-offset-eqs        9
;  :arith-pivots            331
;  :binary-propagations     22
;  :conflicts               913
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4069
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7506
;  :mk-clause               4156
;  :num-allocs              7687155
;  :num-checks              1253
;  :propagations            1572
;  :quant-instantiations    588
;  :rlimit-count            445258)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11528
;  :arith-add-rows          143
;  :arith-assert-diseq      608
;  :arith-assert-lower      1622
;  :arith-assert-upper      1036
;  :arith-bound-prop        110
;  :arith-conflicts         128
;  :arith-eq-adapter        863
;  :arith-fixed-eqs         227
;  :arith-offset-eqs        9
;  :arith-pivots            331
;  :binary-propagations     22
;  :conflicts               914
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4069
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7507
;  :mk-clause               4156
;  :num-allocs              7687155
;  :num-checks              1254
;  :propagations            1572
;  :quant-instantiations    588
;  :rlimit-count            445339)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@436@01 $Perm.No) (< $Perm.No $k@436@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11528
;  :arith-add-rows          143
;  :arith-assert-diseq      608
;  :arith-assert-lower      1622
;  :arith-assert-upper      1036
;  :arith-bound-prop        110
;  :arith-conflicts         128
;  :arith-eq-adapter        863
;  :arith-fixed-eqs         227
;  :arith-offset-eqs        9
;  :arith-pivots            331
;  :binary-propagations     22
;  :conflicts               915
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4069
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7507
;  :mk-clause               4156
;  :num-allocs              7687155
;  :num-checks              1255
;  :propagations            1572
;  :quant-instantiations    588
;  :rlimit-count            445389)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  $t@420@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11528
;  :arith-add-rows          143
;  :arith-assert-diseq      608
;  :arith-assert-lower      1622
;  :arith-assert-upper      1036
;  :arith-bound-prop        110
;  :arith-conflicts         128
;  :arith-eq-adapter        863
;  :arith-fixed-eqs         227
;  :arith-offset-eqs        9
;  :arith-pivots            331
;  :binary-propagations     22
;  :conflicts               915
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4069
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7507
;  :mk-clause               4156
;  :num-allocs              7687155
;  :num-checks              1256
;  :propagations            1572
;  :quant-instantiations    588
;  :rlimit-count            445400
;  :time                    0.04)
(push) ; 9
(assert (not (not (= (+ (- $k@403@01 $k@416@01) $k@427@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          143
;  :arith-assert-diseq      608
;  :arith-assert-lower      1622
;  :arith-assert-upper      1037
;  :arith-bound-prop        110
;  :arith-conflicts         129
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         227
;  :arith-offset-eqs        9
;  :arith-pivots            332
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7509
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1257
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            445488)
(assert (< $k@436@01 (+ (- $k@403@01 $k@416@01) $k@427@01)))
(assert (<= $Perm.No (- (+ (- $k@403@01 $k@416@01) $k@427@01) $k@436@01)))
(assert (<= (- (+ (- $k@403@01 $k@416@01) $k@427@01) $k@436@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@403@01 $k@416@01) $k@427@01) $k@436@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          144
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1038
;  :arith-bound-prop        110
;  :arith-conflicts         129
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         227
;  :arith-offset-eqs        9
;  :arith-pivots            332
;  :binary-propagations     22
;  :conflicts               917
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7512
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1258
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            445723)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@399@01 $k@412@01) $k@419@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          144
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1039
;  :arith-bound-prop        110
;  :arith-conflicts         130
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         228
;  :arith-offset-eqs        9
;  :arith-pivots            332
;  :binary-propagations     22
;  :conflicts               918
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7513
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1259
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            445804)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  $t@420@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          144
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1039
;  :arith-bound-prop        110
;  :arith-conflicts         130
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         228
;  :arith-offset-eqs        9
;  :arith-pivots            332
;  :binary-propagations     22
;  :conflicts               918
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7513
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1260
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            445815
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@403@01 $k@416@01) $k@427@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          144
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1040
;  :arith-bound-prop        110
;  :arith-conflicts         131
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         229
;  :arith-offset-eqs        9
;  :arith-pivots            333
;  :binary-propagations     22
;  :conflicts               919
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7514
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1261
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            445904)
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          144
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1040
;  :arith-bound-prop        110
;  :arith-conflicts         131
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         229
;  :arith-offset-eqs        9
;  :arith-pivots            333
;  :binary-propagations     22
;  :conflicts               920
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7514
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1262
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            445952)
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(push) ; 9
(assert (not (< $Perm.No $k@397@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          144
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1040
;  :arith-bound-prop        110
;  :arith-conflicts         131
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         229
;  :arith-offset-eqs        9
;  :arith-pivots            333
;  :binary-propagations     22
;  :conflicts               921
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7514
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1263
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            446000)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@400@01 $k@413@01) $k@421@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          144
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1041
;  :arith-bound-prop        110
;  :arith-conflicts         132
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         230
;  :arith-offset-eqs        9
;  :arith-pivots            333
;  :binary-propagations     22
;  :conflicts               922
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7515
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1264
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            446081)
(set-option :timeout 0)
(push) ; 9
(assert (not (= $t@422@01 diz@334@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11529
;  :arith-add-rows          144
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1041
;  :arith-bound-prop        110
;  :arith-conflicts         132
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         230
;  :arith-offset-eqs        9
;  :arith-pivots            333
;  :binary-propagations     22
;  :conflicts               922
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2018
;  :datatype-occurs-check   865
;  :datatype-splits         1533
;  :decisions               2212
;  :del-clause              4071
;  :final-checks            325
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7515
;  :mk-clause               4158
;  :num-allocs              7687155
;  :num-checks              1265
;  :propagations            1573
;  :quant-instantiations    588
;  :rlimit-count            446092)
(assert (= $t@422@01 diz@334@01))
(pop) ; 8
(push) ; 8
; [else-branch: 157 | !(First:(Second:(Second:(Second:($t@396@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@396@01))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
          0)
        (- 0 2))))))
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11731
;  :arith-add-rows          145
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1041
;  :arith-bound-prop        110
;  :arith-conflicts         132
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         230
;  :arith-offset-eqs        9
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               923
;  :datatype-accessor-ax    544
;  :datatype-constructor-ax 2068
;  :datatype-occurs-check   879
;  :datatype-splits         1569
;  :decisions               2262
;  :del-clause              4085
;  :final-checks            328
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7555
;  :mk-clause               4159
;  :num-allocs              7687155
;  :num-checks              1266
;  :propagations            1576
;  :quant-instantiations    588
;  :rlimit-count            447641
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11899
;  :arith-add-rows          145
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1041
;  :arith-bound-prop        110
;  :arith-conflicts         132
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         230
;  :arith-offset-eqs        9
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               924
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2118
;  :datatype-occurs-check   893
;  :datatype-splits         1605
;  :decisions               2312
;  :del-clause              4086
;  :final-checks            331
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7595
;  :mk-clause               4160
;  :num-allocs              7687155
;  :num-checks              1267
;  :propagations            1579
;  :quant-instantiations    588
;  :rlimit-count            448975
;  :time                    0.01)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12067
;  :arith-add-rows          145
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1041
;  :arith-bound-prop        110
;  :arith-conflicts         132
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         230
;  :arith-offset-eqs        9
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               925
;  :datatype-accessor-ax    546
;  :datatype-constructor-ax 2168
;  :datatype-occurs-check   907
;  :datatype-splits         1641
;  :decisions               2362
;  :del-clause              4087
;  :final-checks            334
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7635
;  :mk-clause               4161
;  :num-allocs              7687155
;  :num-checks              1268
;  :propagations            1582
;  :quant-instantiations    588
;  :rlimit-count            450309
;  :time                    0.01)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12235
;  :arith-add-rows          145
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1041
;  :arith-bound-prop        110
;  :arith-conflicts         132
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         230
;  :arith-offset-eqs        9
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               926
;  :datatype-accessor-ax    547
;  :datatype-constructor-ax 2218
;  :datatype-occurs-check   921
;  :datatype-splits         1677
;  :decisions               2412
;  :del-clause              4088
;  :final-checks            337
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7675
;  :mk-clause               4162
;  :num-allocs              7687155
;  :num-checks              1269
;  :propagations            1585
;  :quant-instantiations    588
;  :rlimit-count            451643
;  :time                    0.02)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12403
;  :arith-add-rows          145
;  :arith-assert-diseq      608
;  :arith-assert-lower      1624
;  :arith-assert-upper      1041
;  :arith-bound-prop        110
;  :arith-conflicts         132
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         230
;  :arith-offset-eqs        9
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               927
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2268
;  :datatype-occurs-check   935
;  :datatype-splits         1713
;  :decisions               2462
;  :del-clause              4089
;  :final-checks            340
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7715
;  :mk-clause               4163
;  :num-allocs              7687155
;  :num-checks              1270
;  :propagations            1588
;  :quant-instantiations    588
;  :rlimit-count            452977
;  :time                    0.00)
(declare-const $t@437@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@397@01)
    (= $t@437@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))))
  (implies
    (< $Perm.No (- $k@372@01 $k@404@01))
    (= $t@437@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))))
(assert (<= $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01))))
(assert (<= (+ $k@397@01 (- $k@372@01 $k@404@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))
  (not (= diz@334@01 $Ref.null))))
; [eval] !(diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2)
; [eval] diz.Write_a_m.Main_process_state[0] != -1 || diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_process_state[0] != -1
; [eval] diz.Write_a_m.Main_process_state[0]
(push) ; 8
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12409
;  :arith-add-rows          146
;  :arith-assert-diseq      608
;  :arith-assert-lower      1625
;  :arith-assert-upper      1043
;  :arith-bound-prop        110
;  :arith-conflicts         133
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         231
;  :arith-offset-eqs        9
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               928
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2268
;  :datatype-occurs-check   935
;  :datatype-splits         1713
;  :decisions               2462
;  :del-clause              4089
;  :final-checks            340
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7720
;  :mk-clause               4163
;  :num-allocs              7687155
;  :num-checks              1271
;  :propagations            1588
;  :quant-instantiations    588
;  :rlimit-count            453301)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12409
;  :arith-add-rows          146
;  :arith-assert-diseq      608
;  :arith-assert-lower      1625
;  :arith-assert-upper      1043
;  :arith-bound-prop        110
;  :arith-conflicts         133
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         231
;  :arith-offset-eqs        9
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               929
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2268
;  :datatype-occurs-check   935
;  :datatype-splits         1713
;  :decisions               2462
;  :del-clause              4089
;  :final-checks            340
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7721
;  :mk-clause               4163
;  :num-allocs              7687155
;  :num-checks              1272
;  :propagations            1588
;  :quant-instantiations    588
;  :rlimit-count            453381)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12409
;  :arith-add-rows          146
;  :arith-assert-diseq      608
;  :arith-assert-lower      1625
;  :arith-assert-upper      1043
;  :arith-bound-prop        110
;  :arith-conflicts         133
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         231
;  :arith-offset-eqs        9
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               929
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2268
;  :datatype-occurs-check   935
;  :datatype-splits         1713
;  :decisions               2462
;  :del-clause              4089
;  :final-checks            340
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7721
;  :mk-clause               4163
;  :num-allocs              7687155
;  :num-checks              1273
;  :propagations            1588
;  :quant-instantiations    588
;  :rlimit-count            453396)
; [eval] -1
(push) ; 8
; [then-branch: 170 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1 | live]
; [else-branch: 170 | First:(Second:(Second:(Second:($t@396@01))))[0] == -1 | live]
(push) ; 9
; [then-branch: 170 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      0)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 170 | First:(Second:(Second:(Second:($t@396@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    0)
  (- 0 1)))
; [eval] diz.Write_a_m.Main_event_state[0] != -2
; [eval] diz.Write_a_m.Main_event_state[0]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12410
;  :arith-add-rows          146
;  :arith-assert-diseq      608
;  :arith-assert-lower      1625
;  :arith-assert-upper      1044
;  :arith-bound-prop        110
;  :arith-conflicts         134
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         232
;  :arith-offset-eqs        9
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               930
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2268
;  :datatype-occurs-check   935
;  :datatype-splits         1713
;  :decisions               2462
;  :del-clause              4089
;  :final-checks            340
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7723
;  :mk-clause               4163
;  :num-allocs              7687155
;  :num-checks              1274
;  :propagations            1588
;  :quant-instantiations    588
;  :rlimit-count            453619
;  :time                    0.00)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12410
;  :arith-add-rows          146
;  :arith-assert-diseq      608
;  :arith-assert-lower      1625
;  :arith-assert-upper      1044
;  :arith-bound-prop        110
;  :arith-conflicts         134
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         232
;  :arith-offset-eqs        9
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               931
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2268
;  :datatype-occurs-check   935
;  :datatype-splits         1713
;  :decisions               2462
;  :del-clause              4089
;  :final-checks            340
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7724
;  :mk-clause               4163
;  :num-allocs              7687155
;  :num-checks              1275
;  :propagations            1588
;  :quant-instantiations    588
;  :rlimit-count            453699)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12410
;  :arith-add-rows          146
;  :arith-assert-diseq      608
;  :arith-assert-lower      1625
;  :arith-assert-upper      1044
;  :arith-bound-prop        110
;  :arith-conflicts         134
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         232
;  :arith-offset-eqs        9
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               931
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2268
;  :datatype-occurs-check   935
;  :datatype-splits         1713
;  :decisions               2462
;  :del-clause              4089
;  :final-checks            340
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7724
;  :mk-clause               4163
;  :num-allocs              7687155
;  :num-checks              1276
;  :propagations            1588
;  :quant-instantiations    588
;  :rlimit-count            453714)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12562
;  :arith-add-rows          146
;  :arith-assert-diseq      608
;  :arith-assert-lower      1625
;  :arith-assert-upper      1044
;  :arith-bound-prop        110
;  :arith-conflicts         134
;  :arith-eq-adapter        864
;  :arith-fixed-eqs         232
;  :arith-offset-eqs        9
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               932
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2306
;  :datatype-occurs-check   947
;  :datatype-splits         1748
;  :decisions               2500
;  :del-clause              4090
;  :final-checks            343
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7765
;  :mk-clause               4164
;  :num-allocs              7687155
;  :num-checks              1277
;  :propagations            1591
;  :quant-instantiations    588
;  :rlimit-count            455047
;  :time                    0.00)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12716
;  :arith-add-rows          146
;  :arith-assert-diseq      611
;  :arith-assert-lower      1636
;  :arith-assert-upper      1049
;  :arith-bound-prop        110
;  :arith-conflicts         134
;  :arith-eq-adapter        869
;  :arith-fixed-eqs         234
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               932
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4115
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7823
;  :mk-clause               4189
;  :num-allocs              7687155
;  :num-checks              1278
;  :propagations            1604
;  :quant-instantiations    592
;  :rlimit-count            456555
;  :time                    0.00)
; [then-branch: 171 | !(First:(Second:(Second:(Second:($t@396@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@396@01))))))[0] != -2) | live]
; [else-branch: 171 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@396@01))))))[0] != -2 | live]
(push) ; 8
; [then-branch: 171 | !(First:(Second:(Second:(Second:($t@396@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@396@01))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
          0)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(declare-const $k@438@01 $Perm)
(assert ($Perm.isReadVar $k@438@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@438@01 $Perm.No) (< $Perm.No $k@438@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12718
;  :arith-add-rows          146
;  :arith-assert-diseq      612
;  :arith-assert-lower      1638
;  :arith-assert-upper      1050
;  :arith-bound-prop        110
;  :arith-conflicts         134
;  :arith-eq-adapter        870
;  :arith-fixed-eqs         234
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               933
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4115
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7829
;  :mk-clause               4191
;  :num-allocs              7687155
;  :num-checks              1279
;  :propagations            1605
;  :quant-instantiations    592
;  :rlimit-count            456951)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ $k@397@01 (- $k@372@01 $k@404@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12719
;  :arith-add-rows          146
;  :arith-assert-diseq      612
;  :arith-assert-lower      1638
;  :arith-assert-upper      1051
;  :arith-bound-prop        110
;  :arith-conflicts         135
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         234
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               934
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7831
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1280
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457031)
(assert (< $k@438@01 (+ $k@397@01 (- $k@372@01 $k@404@01))))
(assert (<= $Perm.No (- (+ $k@397@01 (- $k@372@01 $k@404@01)) $k@438@01)))
(assert (<= (- (+ $k@397@01 (- $k@372@01 $k@404@01)) $k@438@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@397@01 (- $k@372@01 $k@404@01)) $k@438@01))
  (not (= diz@334@01 $Ref.null))))
; [eval] diz.Write_a_m != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12719
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1053
;  :arith-bound-prop        110
;  :arith-conflicts         136
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         235
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               935
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7835
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1281
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457300)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= $t@437@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12720
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1053
;  :arith-bound-prop        110
;  :arith-conflicts         136
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         235
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               936
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7836
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1282
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457348)
(assert (not (= $t@437@01 $Ref.null)))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1054
;  :arith-bound-prop        110
;  :arith-conflicts         137
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         236
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               937
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7838
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1283
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457485)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1054
;  :arith-bound-prop        110
;  :arith-conflicts         137
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         236
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7839
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1284
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457565
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1055
;  :arith-bound-prop        110
;  :arith-conflicts         138
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         237
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               939
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7840
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1285
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457646)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1055
;  :arith-bound-prop        110
;  :arith-conflicts         138
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         237
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               940
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7841
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1286
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457726)
; [eval] |diz.Write_a_m.Main_process_state| == 3
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1056
;  :arith-bound-prop        110
;  :arith-conflicts         139
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         238
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               941
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7842
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1287
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457807
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1056
;  :arith-bound-prop        110
;  :arith-conflicts         139
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         238
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               942
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7843
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1288
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457887)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1057
;  :arith-bound-prop        110
;  :arith-conflicts         140
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               943
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7844
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1289
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            457968
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1057
;  :arith-bound-prop        110
;  :arith-conflicts         140
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               944
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7845
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1290
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            458048)
; [eval] |diz.Write_a_m.Main_event_state| == 3
; [eval] |diz.Write_a_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1058
;  :arith-bound-prop        110
;  :arith-conflicts         141
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         240
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               945
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7846
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1291
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            458129)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1640
;  :arith-assert-upper      1058
;  :arith-bound-prop        110
;  :arith-conflicts         141
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         240
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               946
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7847
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1292
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            458209
;  :time                    0.00)
; [eval] (forall i__39: Int :: { diz.Write_a_m.Main_process_state[i__39] } 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|)
(declare-const i__39@439@01 Int)
(push) ; 9
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state| ==> diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= i__39 && i__39 < |diz.Write_a_m.Main_process_state|
; [eval] 0 <= i__39
(push) ; 10
; [then-branch: 172 | 0 <= i__39@439@01 | live]
; [else-branch: 172 | !(0 <= i__39@439@01) | live]
(push) ; 11
; [then-branch: 172 | 0 <= i__39@439@01]
(assert (<= 0 i__39@439@01))
; [eval] i__39 < |diz.Write_a_m.Main_process_state|
; [eval] |diz.Write_a_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1641
;  :arith-assert-upper      1059
;  :arith-bound-prop        110
;  :arith-conflicts         142
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         241
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               947
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7849
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1293
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            458343)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1641
;  :arith-assert-upper      1059
;  :arith-bound-prop        110
;  :arith-conflicts         142
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         241
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               948
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7850
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1294
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            458423
;  :time                    0.01)
(pop) ; 11
(push) ; 11
; [else-branch: 172 | !(0 <= i__39@439@01)]
(assert (not (<= 0 i__39@439@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 173 | i__39@439@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i__39@439@01 | live]
; [else-branch: 173 | !(i__39@439@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i__39@439@01) | live]
(push) ; 11
; [then-branch: 173 | i__39@439@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i__39@439@01]
(assert (and
  (<
    i__39@439@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
  (<= 0 i__39@439@01)))
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1 || 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39] == -1
; [eval] diz.Write_a_m.Main_process_state[i__39]
(push) ; 12
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1642
;  :arith-assert-upper      1061
;  :arith-bound-prop        110
;  :arith-conflicts         143
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         242
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               949
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7853
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1295
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            458613)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1642
;  :arith-assert-upper      1061
;  :arith-bound-prop        110
;  :arith-conflicts         143
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         242
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               950
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7854
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1296
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            458693)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__39@439@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      612
;  :arith-assert-lower      1642
;  :arith-assert-upper      1061
;  :arith-bound-prop        110
;  :arith-conflicts         143
;  :arith-eq-adapter        871
;  :arith-fixed-eqs         242
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               950
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7854
;  :mk-clause               4193
;  :num-allocs              7687155
;  :num-checks              1297
;  :propagations            1606
;  :quant-instantiations    592
;  :rlimit-count            458702)
; [eval] -1
(push) ; 12
; [then-branch: 174 | First:(Second:(Second:(Second:($t@396@01))))[i__39@439@01] == -1 | live]
; [else-branch: 174 | First:(Second:(Second:(Second:($t@396@01))))[i__39@439@01] != -1 | live]
(push) ; 13
; [then-branch: 174 | First:(Second:(Second:(Second:($t@396@01))))[i__39@439@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i__39@439@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 174 | First:(Second:(Second:(Second:($t@396@01))))[i__39@439@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      i__39@439@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39] && diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] 0 <= diz.Write_a_m.Main_process_state[i__39]
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      613
;  :arith-assert-lower      1645
;  :arith-assert-upper      1063
;  :arith-bound-prop        110
;  :arith-conflicts         144
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         243
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               951
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7861
;  :mk-clause               4197
;  :num-allocs              7687155
;  :num-checks              1298
;  :propagations            1608
;  :quant-instantiations    593
;  :rlimit-count            459006)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      613
;  :arith-assert-lower      1645
;  :arith-assert-upper      1063
;  :arith-bound-prop        110
;  :arith-conflicts         144
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         243
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               952
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7862
;  :mk-clause               4197
;  :num-allocs              7687155
;  :num-checks              1299
;  :propagations            1608
;  :quant-instantiations    593
;  :rlimit-count            459086)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__39@439@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      613
;  :arith-assert-lower      1645
;  :arith-assert-upper      1063
;  :arith-bound-prop        110
;  :arith-conflicts         144
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         243
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               952
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7862
;  :mk-clause               4197
;  :num-allocs              7687155
;  :num-checks              1300
;  :propagations            1608
;  :quant-instantiations    593
;  :rlimit-count            459095)
(push) ; 14
; [then-branch: 175 | 0 <= First:(Second:(Second:(Second:($t@396@01))))[i__39@439@01] | live]
; [else-branch: 175 | !(0 <= First:(Second:(Second:(Second:($t@396@01))))[i__39@439@01]) | live]
(push) ; 15
; [then-branch: 175 | 0 <= First:(Second:(Second:(Second:($t@396@01))))[i__39@439@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i__39@439@01)))
; [eval] diz.Write_a_m.Main_process_state[i__39] < |diz.Write_a_m.Main_event_state|
; [eval] diz.Write_a_m.Main_process_state[i__39]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      613
;  :arith-assert-lower      1645
;  :arith-assert-upper      1064
;  :arith-bound-prop        110
;  :arith-conflicts         145
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         244
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               953
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7863
;  :mk-clause               4197
;  :num-allocs              7687155
;  :num-checks              1301
;  :propagations            1608
;  :quant-instantiations    593
;  :rlimit-count            459281)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      613
;  :arith-assert-lower      1645
;  :arith-assert-upper      1064
;  :arith-bound-prop        110
;  :arith-conflicts         145
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         244
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               954
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7864
;  :mk-clause               4197
;  :num-allocs              7687155
;  :num-checks              1302
;  :propagations            1608
;  :quant-instantiations    593
;  :rlimit-count            459361)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__39@439@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      613
;  :arith-assert-lower      1645
;  :arith-assert-upper      1064
;  :arith-bound-prop        110
;  :arith-conflicts         145
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         244
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               954
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7864
;  :mk-clause               4197
;  :num-allocs              7687155
;  :num-checks              1303
;  :propagations            1608
;  :quant-instantiations    593
;  :rlimit-count            459370)
; [eval] |diz.Write_a_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      613
;  :arith-assert-lower      1645
;  :arith-assert-upper      1065
;  :arith-bound-prop        110
;  :arith-conflicts         146
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         245
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               955
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7865
;  :mk-clause               4197
;  :num-allocs              7687155
;  :num-checks              1304
;  :propagations            1608
;  :quant-instantiations    593
;  :rlimit-count            459451)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      613
;  :arith-assert-lower      1645
;  :arith-assert-upper      1065
;  :arith-bound-prop        110
;  :arith-conflicts         146
;  :arith-eq-adapter        872
;  :arith-fixed-eqs         245
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               956
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4117
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7866
;  :mk-clause               4197
;  :num-allocs              7687155
;  :num-checks              1305
;  :propagations            1608
;  :quant-instantiations    593
;  :rlimit-count            459531)
(pop) ; 15
(push) ; 15
; [else-branch: 175 | !(0 <= First:(Second:(Second:(Second:($t@396@01))))[i__39@439@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
      i__39@439@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 173 | !(i__39@439@01 < |First:(Second:(Second:(Second:($t@396@01))))| && 0 <= i__39@439@01)]
(assert (not
  (and
    (<
      i__39@439@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
    (<= 0 i__39@439@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__39@439@01 Int)) (!
  (implies
    (and
      (<
        i__39@439@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
      (<= 0 i__39@439@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          i__39@439@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i__39@439@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i__39@439@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i__39@439@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      615
;  :arith-assert-lower      1646
;  :arith-assert-upper      1066
;  :arith-bound-prop        110
;  :arith-conflicts         146
;  :arith-eq-adapter        873
;  :arith-fixed-eqs         245
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7874
;  :mk-clause               4211
;  :num-allocs              7687155
;  :num-checks              1306
;  :propagations            1610
;  :quant-instantiations    594
;  :rlimit-count            459977)
(assert (forall ((i__39@439@01 Int)) (!
  (implies
    (and
      (<
        i__39@439@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
      (<= 0 i__39@439@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
          i__39@439@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i__39@439@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
            i__39@439@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    i__39@439@01))
  :qid |prog.l<no position>|)))
(declare-const $k@440@01 $Perm)
(assert ($Perm.isReadVar $k@440@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      616
;  :arith-assert-lower      1648
;  :arith-assert-upper      1068
;  :arith-bound-prop        110
;  :arith-conflicts         147
;  :arith-eq-adapter        874
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               958
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7880
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1307
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            460569)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@440@01 $Perm.No) (< $Perm.No $k@440@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      616
;  :arith-assert-lower      1648
;  :arith-assert-upper      1068
;  :arith-bound-prop        110
;  :arith-conflicts         147
;  :arith-eq-adapter        874
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               959
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7880
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1308
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            460619)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      616
;  :arith-assert-lower      1648
;  :arith-assert-upper      1068
;  :arith-bound-prop        110
;  :arith-conflicts         147
;  :arith-eq-adapter        874
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               959
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7880
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1309
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            460638)
(push) ; 9
(assert (not (not (= (- $k@374@01 $k@406@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          148
;  :arith-assert-diseq      616
;  :arith-assert-lower      1648
;  :arith-assert-upper      1068
;  :arith-bound-prop        110
;  :arith-conflicts         147
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        9
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               960
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7881
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1310
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            460706)
(assert (< $k@440@01 (- $k@374@01 $k@406@01)))
(assert (<= $Perm.No (- (- $k@374@01 $k@406@01) $k@440@01)))
(assert (<= (- (- $k@374@01 $k@406@01) $k@440@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@374@01 $k@406@01) $k@440@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1070
;  :arith-bound-prop        110
;  :arith-conflicts         148
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         247
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7885
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1311
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            460999)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1070
;  :arith-bound-prop        110
;  :arith-conflicts         148
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         247
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7885
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1312
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            461018)
(push) ; 9
(assert (not (< $Perm.No (- $k@374@01 $k@406@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1070
;  :arith-bound-prop        110
;  :arith-conflicts         148
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         247
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7885
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1313
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            461037)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               962
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7886
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1314
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            461118
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               962
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7886
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1315
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            461137)
(push) ; 9
(assert (not (< $Perm.No (- $k@374@01 $k@406@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12721
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               962
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2341
;  :datatype-occurs-check   954
;  :datatype-splits         1781
;  :decisions               2537
;  :del-clause              4135
;  :final-checks            345
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7886
;  :mk-clause               4213
;  :num-allocs              7687155
;  :num-checks              1316
;  :propagations            1611
;  :quant-instantiations    594
;  :rlimit-count            461156)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12905
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               964
;  :datatype-accessor-ax    552
;  :datatype-constructor-ax 2392
;  :datatype-occurs-check   966
;  :datatype-splits         1818
;  :decisions               2586
;  :del-clause              4137
;  :final-checks            348
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             7932
;  :mk-clause               4215
;  :num-allocs              7687155
;  :num-checks              1317
;  :propagations            1615
;  :quant-instantiations    594
;  :rlimit-count            462629
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13201
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               966
;  :datatype-accessor-ax    554
;  :datatype-constructor-ax 2467
;  :datatype-occurs-check   990
;  :datatype-splits         1888
;  :decisions               2661
;  :del-clause              4141
;  :final-checks            354
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8004
;  :mk-clause               4216
;  :num-allocs              7687155
;  :num-checks              1320
;  :propagations            1622
;  :quant-instantiations    594
;  :rlimit-count            464966
;  :time                    0.01)
(declare-const $t@441@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13373
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               967
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8043
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1321
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            466383
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13373
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               968
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8044
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1322
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            466468)
(declare-const $t@442@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13373
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8045
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1323
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            466553)
(declare-const $t@443@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13373
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8046
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1324
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            466638)
(declare-const $t@444@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@374@01 $k@406@01) $k@440@01))
    (=
      $t@441@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))
  (implies
    (< $Perm.No $k@399@01)
    (=
      $t@441@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@402@01)
    (=
      $t@442@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@377@01 $k@409@01))
    (=
      $t@442@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@401@01)
    (=
      $t@443@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@376@01 $k@408@01))
    (=
      $t@443@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@400@01)
    (=
      $t@444@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))
  (implies
    (< $Perm.No (- $k@375@01 $k@407@01))
    (=
      $t@444@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13387
;  :arith-add-rows          150
;  :arith-assert-diseq      616
;  :arith-assert-lower      1650
;  :arith-assert-upper      1071
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            350
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8053
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1325
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            467700)
(declare-const $t@445@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@378@01 $k@410@01))
    (=
      $t@445@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@403@01)
    (=
      $t@445@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@400@01 (- $k@375@01 $k@407@01))))
(assert (<= (+ $k@400@01 (- $k@375@01 $k@407@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@400@01 (- $k@375@01 $k@407@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (<= $Perm.No (+ $k@401@01 (- $k@376@01 $k@408@01))))
(assert (<= (+ $k@401@01 (- $k@376@01 $k@408@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@401@01 (- $k@376@01 $k@408@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (<= $Perm.No (+ $k@402@01 (- $k@377@01 $k@409@01))))
(assert (<= (+ $k@402@01 (- $k@377@01 $k@409@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@402@01 (- $k@377@01 $k@409@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@374@01 $k@406@01) $k@440@01) $k@399@01)))
(assert (<= (+ (- (- $k@374@01 $k@406@01) $k@440@01) $k@399@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@374@01 $k@406@01) $k@440@01) $k@399@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@378@01 $k@410@01) $k@403@01)))
(assert (<= (+ (- $k@378@01 $k@410@01) $k@403@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@378@01 $k@410@01) $k@403@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
      $Ref.null))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1076
;  :arith-bound-prop        110
;  :arith-conflicts         149
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               972
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8065
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1326
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            468585)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1077
;  :arith-bound-prop        110
;  :arith-conflicts         150
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         249
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8066
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1327
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            468666
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1077
;  :arith-bound-prop        110
;  :arith-conflicts         150
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         249
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8066
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1328
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            468685)
(push) ; 9
(assert (not (< $Perm.No (- $k@374@01 $k@406@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1077
;  :arith-bound-prop        110
;  :arith-conflicts         150
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         249
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8066
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1329
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            468704)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1077
;  :arith-bound-prop        110
;  :arith-conflicts         150
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         249
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               974
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8067
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1330
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            468869)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1078
;  :arith-bound-prop        110
;  :arith-conflicts         151
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         250
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8068
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1331
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            468950
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1078
;  :arith-bound-prop        110
;  :arith-conflicts         151
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         250
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8068
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1332
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            468969)
(push) ; 9
(assert (not (< $Perm.No (- $k@374@01 $k@406@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1078
;  :arith-bound-prop        110
;  :arith-conflicts         151
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         250
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8068
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1333
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            468988)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      616
;  :arith-assert-lower      1655
;  :arith-assert-upper      1078
;  :arith-bound-prop        110
;  :arith-conflicts         151
;  :arith-eq-adapter        875
;  :arith-fixed-eqs         250
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8069
;  :mk-clause               4217
;  :num-allocs              7687155
;  :num-checks              1334
;  :propagations            1626
;  :quant-instantiations    594
;  :rlimit-count            469153)
(declare-const $k@446@01 $Perm)
(assert ($Perm.isReadVar $k@446@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      617
;  :arith-assert-lower      1657
;  :arith-assert-upper      1080
;  :arith-bound-prop        110
;  :arith-conflicts         152
;  :arith-eq-adapter        876
;  :arith-fixed-eqs         251
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               977
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8074
;  :mk-clause               4219
;  :num-allocs              7687155
;  :num-checks              1335
;  :propagations            1627
;  :quant-instantiations    594
;  :rlimit-count            469383)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@446@01 $Perm.No) (< $Perm.No $k@446@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      617
;  :arith-assert-lower      1657
;  :arith-assert-upper      1080
;  :arith-bound-prop        110
;  :arith-conflicts         152
;  :arith-eq-adapter        876
;  :arith-fixed-eqs         251
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               978
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8074
;  :mk-clause               4219
;  :num-allocs              7687155
;  :num-checks              1336
;  :propagations            1627
;  :quant-instantiations    594
;  :rlimit-count            469433)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13388
;  :arith-add-rows          154
;  :arith-assert-diseq      617
;  :arith-assert-lower      1657
;  :arith-assert-upper      1080
;  :arith-bound-prop        110
;  :arith-conflicts         152
;  :arith-eq-adapter        876
;  :arith-fixed-eqs         251
;  :arith-offset-eqs        9
;  :arith-pivots            351
;  :binary-propagations     22
;  :conflicts               979
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4142
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8075
;  :mk-clause               4219
;  :num-allocs              7687155
;  :num-checks              1337
;  :propagations            1627
;  :quant-instantiations    594
;  :rlimit-count            469513)
(push) ; 9
(assert (not (not (= (+ $k@400@01 (- $k@375@01 $k@407@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          154
;  :arith-assert-diseq      617
;  :arith-assert-lower      1657
;  :arith-assert-upper      1081
;  :arith-bound-prop        110
;  :arith-conflicts         153
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         251
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               980
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8077
;  :mk-clause               4221
;  :num-allocs              7687155
;  :num-checks              1338
;  :propagations            1628
;  :quant-instantiations    594
;  :rlimit-count            469597)
(assert (< $k@446@01 (+ $k@400@01 (- $k@375@01 $k@407@01))))
(assert (<= $Perm.No (- (+ $k@400@01 (- $k@375@01 $k@407@01)) $k@446@01)))
(assert (<= (- (+ $k@400@01 (- $k@375@01 $k@407@01)) $k@446@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@400@01 (- $k@375@01 $k@407@01)) $k@446@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      617
;  :arith-assert-lower      1659
;  :arith-assert-upper      1083
;  :arith-bound-prop        110
;  :arith-conflicts         154
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         252
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8081
;  :mk-clause               4221
;  :num-allocs              7687155
;  :num-checks              1339
;  :propagations            1628
;  :quant-instantiations    594
;  :rlimit-count            469866
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      617
;  :arith-assert-lower      1659
;  :arith-assert-upper      1083
;  :arith-bound-prop        110
;  :arith-conflicts         154
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         252
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8081
;  :mk-clause               4221
;  :num-allocs              7687155
;  :num-checks              1340
;  :propagations            1628
;  :quant-instantiations    594
;  :rlimit-count            469885)
(push) ; 9
(assert (not (< $Perm.No (- $k@375@01 $k@407@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      617
;  :arith-assert-lower      1659
;  :arith-assert-upper      1083
;  :arith-bound-prop        110
;  :arith-conflicts         154
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         252
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8081
;  :mk-clause               4221
;  :num-allocs              7687155
;  :num-checks              1341
;  :propagations            1628
;  :quant-instantiations    594
;  :rlimit-count            469904)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      617
;  :arith-assert-lower      1659
;  :arith-assert-upper      1084
;  :arith-bound-prop        110
;  :arith-conflicts         155
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         253
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8082
;  :mk-clause               4221
;  :num-allocs              7687155
;  :num-checks              1342
;  :propagations            1628
;  :quant-instantiations    594
;  :rlimit-count            469985)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      617
;  :arith-assert-lower      1659
;  :arith-assert-upper      1084
;  :arith-bound-prop        110
;  :arith-conflicts         155
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         253
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8082
;  :mk-clause               4221
;  :num-allocs              7687155
;  :num-checks              1343
;  :propagations            1628
;  :quant-instantiations    594
;  :rlimit-count            470004)
(push) ; 9
(assert (not (< $Perm.No (- $k@375@01 $k@407@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      617
;  :arith-assert-lower      1659
;  :arith-assert-upper      1084
;  :arith-bound-prop        110
;  :arith-conflicts         155
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         253
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8082
;  :mk-clause               4221
;  :num-allocs              7687155
;  :num-checks              1344
;  :propagations            1628
;  :quant-instantiations    594
;  :rlimit-count            470023)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      617
;  :arith-assert-lower      1659
;  :arith-assert-upper      1084
;  :arith-bound-prop        110
;  :arith-conflicts         155
;  :arith-eq-adapter        877
;  :arith-fixed-eqs         253
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8082
;  :mk-clause               4221
;  :num-allocs              7687155
;  :num-checks              1345
;  :propagations            1628
;  :quant-instantiations    594
;  :rlimit-count            470034
;  :time                    0.01)
(declare-const $k@447@01 $Perm)
(assert ($Perm.isReadVar $k@447@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      618
;  :arith-assert-lower      1661
;  :arith-assert-upper      1086
;  :arith-bound-prop        110
;  :arith-conflicts         156
;  :arith-eq-adapter        878
;  :arith-fixed-eqs         254
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               983
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8087
;  :mk-clause               4223
;  :num-allocs              7687155
;  :num-checks              1346
;  :propagations            1629
;  :quant-instantiations    594
;  :rlimit-count            470263)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@447@01 $Perm.No) (< $Perm.No $k@447@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      618
;  :arith-assert-lower      1661
;  :arith-assert-upper      1086
;  :arith-bound-prop        110
;  :arith-conflicts         156
;  :arith-eq-adapter        878
;  :arith-fixed-eqs         254
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               984
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8087
;  :mk-clause               4223
;  :num-allocs              7687155
;  :num-checks              1347
;  :propagations            1629
;  :quant-instantiations    594
;  :rlimit-count            470313)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13389
;  :arith-add-rows          156
;  :arith-assert-diseq      618
;  :arith-assert-lower      1661
;  :arith-assert-upper      1086
;  :arith-bound-prop        110
;  :arith-conflicts         156
;  :arith-eq-adapter        878
;  :arith-fixed-eqs         254
;  :arith-offset-eqs        9
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4144
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8088
;  :mk-clause               4223
;  :num-allocs              7687155
;  :num-checks              1348
;  :propagations            1629
;  :quant-instantiations    594
;  :rlimit-count            470393)
(push) ; 9
(assert (not (not (= (+ $k@401@01 (- $k@376@01 $k@408@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          157
;  :arith-assert-diseq      618
;  :arith-assert-lower      1661
;  :arith-assert-upper      1087
;  :arith-bound-prop        110
;  :arith-conflicts         157
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         254
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               986
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8090
;  :mk-clause               4225
;  :num-allocs              7687155
;  :num-checks              1349
;  :propagations            1630
;  :quant-instantiations    594
;  :rlimit-count            470502)
(assert (< $k@447@01 (+ $k@401@01 (- $k@376@01 $k@408@01))))
(assert (<= $Perm.No (- (+ $k@401@01 (- $k@376@01 $k@408@01)) $k@447@01)))
(assert (<= (- (+ $k@401@01 (- $k@376@01 $k@408@01)) $k@447@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@401@01 (- $k@376@01 $k@408@01)) $k@447@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      618
;  :arith-assert-lower      1663
;  :arith-assert-upper      1089
;  :arith-bound-prop        110
;  :arith-conflicts         158
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         255
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8094
;  :mk-clause               4225
;  :num-allocs              7687155
;  :num-checks              1350
;  :propagations            1630
;  :quant-instantiations    594
;  :rlimit-count            470770)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      618
;  :arith-assert-lower      1663
;  :arith-assert-upper      1089
;  :arith-bound-prop        110
;  :arith-conflicts         158
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         255
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8094
;  :mk-clause               4225
;  :num-allocs              7687155
;  :num-checks              1351
;  :propagations            1630
;  :quant-instantiations    594
;  :rlimit-count            470789)
(push) ; 9
(assert (not (< $Perm.No (- $k@376@01 $k@408@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      618
;  :arith-assert-lower      1663
;  :arith-assert-upper      1089
;  :arith-bound-prop        110
;  :arith-conflicts         158
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         255
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8094
;  :mk-clause               4225
;  :num-allocs              7687155
;  :num-checks              1352
;  :propagations            1630
;  :quant-instantiations    594
;  :rlimit-count            470808)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      618
;  :arith-assert-lower      1663
;  :arith-assert-upper      1090
;  :arith-bound-prop        110
;  :arith-conflicts         159
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         256
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               988
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8095
;  :mk-clause               4225
;  :num-allocs              7687155
;  :num-checks              1353
;  :propagations            1630
;  :quant-instantiations    594
;  :rlimit-count            470889)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      618
;  :arith-assert-lower      1663
;  :arith-assert-upper      1090
;  :arith-bound-prop        110
;  :arith-conflicts         159
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         256
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               988
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8095
;  :mk-clause               4225
;  :num-allocs              7687155
;  :num-checks              1354
;  :propagations            1630
;  :quant-instantiations    594
;  :rlimit-count            470908
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (- $k@376@01 $k@408@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      618
;  :arith-assert-lower      1663
;  :arith-assert-upper      1090
;  :arith-bound-prop        110
;  :arith-conflicts         159
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         256
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               988
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8095
;  :mk-clause               4225
;  :num-allocs              7687155
;  :num-checks              1355
;  :propagations            1630
;  :quant-instantiations    594
;  :rlimit-count            470927)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      618
;  :arith-assert-lower      1663
;  :arith-assert-upper      1090
;  :arith-bound-prop        110
;  :arith-conflicts         159
;  :arith-eq-adapter        879
;  :arith-fixed-eqs         256
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               989
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8096
;  :mk-clause               4225
;  :num-allocs              7687155
;  :num-checks              1356
;  :propagations            1630
;  :quant-instantiations    594
;  :rlimit-count            471167
;  :time                    0.00)
(declare-const $k@448@01 $Perm)
(assert ($Perm.isReadVar $k@448@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      619
;  :arith-assert-lower      1665
;  :arith-assert-upper      1092
;  :arith-bound-prop        110
;  :arith-conflicts         160
;  :arith-eq-adapter        880
;  :arith-fixed-eqs         257
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               990
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8101
;  :mk-clause               4227
;  :num-allocs              7687155
;  :num-checks              1357
;  :propagations            1631
;  :quant-instantiations    594
;  :rlimit-count            471396)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@448@01 $Perm.No) (< $Perm.No $k@448@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      619
;  :arith-assert-lower      1665
;  :arith-assert-upper      1092
;  :arith-bound-prop        110
;  :arith-conflicts         160
;  :arith-eq-adapter        880
;  :arith-fixed-eqs         257
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8101
;  :mk-clause               4227
;  :num-allocs              7687155
;  :num-checks              1358
;  :propagations            1631
;  :quant-instantiations    594
;  :rlimit-count            471446)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13390
;  :arith-add-rows          158
;  :arith-assert-diseq      619
;  :arith-assert-lower      1665
;  :arith-assert-upper      1092
;  :arith-bound-prop        110
;  :arith-conflicts         160
;  :arith-eq-adapter        880
;  :arith-fixed-eqs         257
;  :arith-offset-eqs        9
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               992
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4146
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8102
;  :mk-clause               4227
;  :num-allocs              7687155
;  :num-checks              1359
;  :propagations            1631
;  :quant-instantiations    594
;  :rlimit-count            471526)
(push) ; 9
(assert (not (not (= (+ $k@402@01 (- $k@377@01 $k@409@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13391
;  :arith-add-rows          158
;  :arith-assert-diseq      619
;  :arith-assert-lower      1665
;  :arith-assert-upper      1093
;  :arith-bound-prop        110
;  :arith-conflicts         161
;  :arith-eq-adapter        881
;  :arith-fixed-eqs         257
;  :arith-offset-eqs        9
;  :arith-pivots            355
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4148
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8104
;  :mk-clause               4229
;  :num-allocs              7687155
;  :num-checks              1360
;  :propagations            1632
;  :quant-instantiations    594
;  :rlimit-count            471610)
(assert (< $k@448@01 (+ $k@402@01 (- $k@377@01 $k@409@01))))
(assert (<= $Perm.No (- (+ $k@402@01 (- $k@377@01 $k@409@01)) $k@448@01)))
(assert (<= (- (+ $k@402@01 (- $k@377@01 $k@409@01)) $k@448@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@402@01 (- $k@377@01 $k@409@01)) $k@448@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@396@01)) $Ref.null))))
; [eval] diz.Write_a_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13391
;  :arith-add-rows          160
;  :arith-assert-diseq      619
;  :arith-assert-lower      1667
;  :arith-assert-upper      1095
;  :arith-bound-prop        110
;  :arith-conflicts         162
;  :arith-eq-adapter        881
;  :arith-fixed-eqs         258
;  :arith-offset-eqs        9
;  :arith-pivots            355
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4148
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8108
;  :mk-clause               4229
;  :num-allocs              7687155
;  :num-checks              1361
;  :propagations            1632
;  :quant-instantiations    594
;  :rlimit-count            471879)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13391
;  :arith-add-rows          160
;  :arith-assert-diseq      619
;  :arith-assert-lower      1667
;  :arith-assert-upper      1095
;  :arith-bound-prop        110
;  :arith-conflicts         162
;  :arith-eq-adapter        881
;  :arith-fixed-eqs         258
;  :arith-offset-eqs        9
;  :arith-pivots            355
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4148
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8108
;  :mk-clause               4229
;  :num-allocs              7687155
;  :num-checks              1362
;  :propagations            1632
;  :quant-instantiations    594
;  :rlimit-count            471898)
(push) ; 9
(assert (not (< $Perm.No (- $k@377@01 $k@409@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13391
;  :arith-add-rows          160
;  :arith-assert-diseq      619
;  :arith-assert-lower      1667
;  :arith-assert-upper      1095
;  :arith-bound-prop        110
;  :arith-conflicts         162
;  :arith-eq-adapter        881
;  :arith-fixed-eqs         258
;  :arith-offset-eqs        9
;  :arith-pivots            355
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4148
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8108
;  :mk-clause               4229
;  :num-allocs              7687155
;  :num-checks              1363
;  :propagations            1632
;  :quant-instantiations    594
;  :rlimit-count            471917
;  :time                    0.01)
(declare-const $k@449@01 $Perm)
(assert ($Perm.isReadVar $k@449@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13391
;  :arith-add-rows          160
;  :arith-assert-diseq      620
;  :arith-assert-lower      1669
;  :arith-assert-upper      1097
;  :arith-bound-prop        110
;  :arith-conflicts         163
;  :arith-eq-adapter        882
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        9
;  :arith-pivots            355
;  :binary-propagations     22
;  :conflicts               995
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4148
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8113
;  :mk-clause               4231
;  :num-allocs              7687155
;  :num-checks              1364
;  :propagations            1633
;  :quant-instantiations    594
;  :rlimit-count            472146)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13391
;  :arith-add-rows          160
;  :arith-assert-diseq      620
;  :arith-assert-lower      1669
;  :arith-assert-upper      1097
;  :arith-bound-prop        110
;  :arith-conflicts         163
;  :arith-eq-adapter        882
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        9
;  :arith-pivots            355
;  :binary-propagations     22
;  :conflicts               995
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4148
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8113
;  :mk-clause               4231
;  :num-allocs              7687155
;  :num-checks              1365
;  :propagations            1633
;  :quant-instantiations    594
;  :rlimit-count            472165)
(push) ; 9
(assert (not (< $Perm.No (- $k@374@01 $k@406@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13391
;  :arith-add-rows          160
;  :arith-assert-diseq      620
;  :arith-assert-lower      1669
;  :arith-assert-upper      1097
;  :arith-bound-prop        110
;  :arith-conflicts         163
;  :arith-eq-adapter        882
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        9
;  :arith-pivots            355
;  :binary-propagations     22
;  :conflicts               995
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4148
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8113
;  :mk-clause               4231
;  :num-allocs              7687155
;  :num-checks              1366
;  :propagations            1633
;  :quant-instantiations    594
;  :rlimit-count            472184)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@449@01 $Perm.No) (< $Perm.No $k@449@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13391
;  :arith-add-rows          160
;  :arith-assert-diseq      620
;  :arith-assert-lower      1669
;  :arith-assert-upper      1097
;  :arith-bound-prop        110
;  :arith-conflicts         163
;  :arith-eq-adapter        882
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        9
;  :arith-pivots            355
;  :binary-propagations     22
;  :conflicts               996
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4148
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8113
;  :mk-clause               4231
;  :num-allocs              7687155
;  :num-checks              1367
;  :propagations            1633
;  :quant-instantiations    594
;  :rlimit-count            472234)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@378@01 $k@410@01) $k@403@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          160
;  :arith-assert-diseq      620
;  :arith-assert-lower      1669
;  :arith-assert-upper      1098
;  :arith-bound-prop        110
;  :arith-conflicts         164
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               997
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8115
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1368
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472318)
(assert (< $k@449@01 (+ (- $k@378@01 $k@410@01) $k@403@01)))
(assert (<= $Perm.No (- (+ (- $k@378@01 $k@410@01) $k@403@01) $k@449@01)))
(assert (<= (- (+ (- $k@378@01 $k@410@01) $k@403@01) $k@449@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@378@01 $k@410@01) $k@403@01) $k@449@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
      $Ref.null))))
; [eval] diz.Write_a_m.Main_nand.Nand_gate_m == diz.Write_a_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1100
;  :arith-bound-prop        110
;  :arith-conflicts         165
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         260
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8119
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1369
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472587)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1100
;  :arith-bound-prop        110
;  :arith-conflicts         165
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         260
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8119
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1370
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472606
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (- $k@374@01 $k@406@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1100
;  :arith-bound-prop        110
;  :arith-conflicts         165
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         260
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8119
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1371
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472625)
(push) ; 9
(assert (not (< $Perm.No (- $k@378@01 $k@410@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1100
;  :arith-bound-prop        110
;  :arith-conflicts         165
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         260
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8119
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1372
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472644)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1101
;  :arith-bound-prop        110
;  :arith-conflicts         166
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         261
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               999
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8120
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1373
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472725)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
  $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1101
;  :arith-bound-prop        110
;  :arith-conflicts         166
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         261
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               999
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8120
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1374
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472747)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01)))))))))))))))))))))))
  $t@437@01))
; [eval] diz.Write_a_m.Main_nand_write_a == diz
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@397@01 (- $k@372@01 $k@404@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1102
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8121
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1375
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472847
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01)) $t@437@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1102
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8121
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1376
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472866)
(push) ; 9
(assert (not (< $Perm.No (- $k@375@01 $k@407@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13392
;  :arith-add-rows          162
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1102
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2515
;  :datatype-occurs-check   1002
;  :datatype-splits         1925
;  :decisions               2708
;  :del-clause              4150
;  :final-checks            357
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8121
;  :mk-clause               4233
;  :num-allocs              7687155
;  :num-checks              1377
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            472885)
(pop) ; 8
(push) ; 8
; [else-branch: 171 | First:(Second:(Second:(Second:($t@396@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@396@01))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
        0)
      (- 0 2)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13515
;  :arith-add-rows          166
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1102
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            371
;  :binary-propagations     22
;  :conflicts               1001
;  :datatype-accessor-ax    557
;  :datatype-constructor-ax 2552
;  :datatype-occurs-check   1013
;  :datatype-splits         1949
;  :decisions               2744
;  :del-clause              4221
;  :final-checks            360
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8149
;  :mk-clause               4234
;  :num-allocs              7687155
;  :num-checks              1378
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            474244
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13663
;  :arith-add-rows          166
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1102
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            371
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    558
;  :datatype-constructor-ax 2601
;  :datatype-occurs-check   1023
;  :datatype-splits         1994
;  :decisions               2792
;  :del-clause              4222
;  :final-checks            363
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8198
;  :mk-clause               4235
;  :num-allocs              7687155
;  :num-checks              1379
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            475444
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13811
;  :arith-add-rows          166
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1102
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            371
;  :binary-propagations     22
;  :conflicts               1003
;  :datatype-accessor-ax    559
;  :datatype-constructor-ax 2650
;  :datatype-occurs-check   1033
;  :datatype-splits         2039
;  :decisions               2840
;  :del-clause              4223
;  :final-checks            366
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8247
;  :mk-clause               4236
;  :num-allocs              7687155
;  :num-checks              1380
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            476644
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13959
;  :arith-add-rows          166
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1102
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            371
;  :binary-propagations     22
;  :conflicts               1004
;  :datatype-accessor-ax    560
;  :datatype-constructor-ax 2699
;  :datatype-occurs-check   1043
;  :datatype-splits         2084
;  :decisions               2888
;  :del-clause              4224
;  :final-checks            369
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8296
;  :mk-clause               4237
;  :num-allocs              7687155
;  :num-checks              1381
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            477844
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14107
;  :arith-add-rows          166
;  :arith-assert-diseq      620
;  :arith-assert-lower      1671
;  :arith-assert-upper      1102
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        883
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            371
;  :binary-propagations     22
;  :conflicts               1005
;  :datatype-accessor-ax    561
;  :datatype-constructor-ax 2748
;  :datatype-occurs-check   1053
;  :datatype-splits         2129
;  :decisions               2936
;  :del-clause              4225
;  :final-checks            372
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8345
;  :mk-clause               4238
;  :num-allocs              7687155
;  :num-checks              1382
;  :propagations            1634
;  :quant-instantiations    594
;  :rlimit-count            479044
;  :time                    0.00)
(declare-const $t@450@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@372@01)
    (= $t@450@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@371@01))))
  (implies
    (< $Perm.No (- $k@337@01 $k@379@01))
    (=
      $t@450@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@336@01)))))))
(assert (<= $Perm.No (+ $k@372@01 (- $k@337@01 $k@379@01))))
(assert (<= (+ $k@372@01 (- $k@337@01 $k@379@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@372@01 (- $k@337@01 $k@379@01)))
  (not (= diz@334@01 $Ref.null))))
; [eval] !true
; [then-branch: 176 | False | dead]
; [else-branch: 176 | True | live]
(push) ; 5
; [else-branch: 176 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Write_b___contract_unsatisfiable__Write_b_EncodedGlobalVariables_Main ----------
(declare-const diz@451@01 $Ref)
(declare-const globals@452@01 $Ref)
(declare-const m_param@453@01 $Ref)
(declare-const diz@454@01 $Ref)
(declare-const globals@455@01 $Ref)
(declare-const m_param@456@01 $Ref)
(push) ; 1
(declare-const $t@457@01 $Snap)
(assert (= $t@457@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@454@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 ($Snap.combine ($Snap.first $t@458@01) ($Snap.second $t@458@01))))
(assert (= ($Snap.first $t@458@01) $Snap.unit))
(assert (= ($Snap.second $t@458@01) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Write_b_Write_b_EncodedGlobalVariables_Main ----------
(declare-const globals@459@01 $Ref)
(declare-const m_param@460@01 $Ref)
(declare-const sys__result@461@01 $Ref)
(declare-const globals@462@01 $Ref)
(declare-const m_param@463@01 $Ref)
(declare-const sys__result@464@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@465@01 $Snap)
(assert (= $t@465@01 ($Snap.combine ($Snap.first $t@465@01) ($Snap.second $t@465@01))))
(assert (= ($Snap.first $t@465@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@464@01 $Ref.null)))
(assert (=
  ($Snap.second $t@465@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@465@01))
    ($Snap.second ($Snap.second $t@465@01)))))
(assert (= ($Snap.first ($Snap.second $t@465@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Write_b()
; [eval] type_of(sys__result)
; [eval] class_Write_b()
(assert (= (type_of<TYPE> sys__result@464@01) (as class_Write_b<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@465@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@465@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@465@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@465@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@465@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@465@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))
  $Snap.unit))
; [eval] sys__result.Write_b_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@465@01)))))
  m_param@463@01))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__41: Ref
(declare-const diz__41@466@01 $Ref)
; [exec]
; diz__41 := new(Write_b_m, Write_b_b)
(declare-const diz__41@467@01 $Ref)
(assert (not (= diz__41@467@01 $Ref.null)))
(declare-const Write_b_m@468@01 $Ref)
(declare-const Write_b_b@469@01 Bool)
(assert (not (= diz__41@467@01 sys__result@464@01)))
(assert (not (= diz__41@467@01 diz__41@466@01)))
(assert (not (= diz__41@467@01 m_param@463@01)))
(assert (not (= diz__41@467@01 globals@462@01)))
; [exec]
; inhale type_of(diz__41) == class_Write_b()
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 $Snap.unit))
; [eval] type_of(diz__41) == class_Write_b()
; [eval] type_of(diz__41)
; [eval] class_Write_b()
(assert (= (type_of<TYPE> diz__41@467@01) (as class_Write_b<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__41.Write_b_m := m_param
; [exec]
; inhale acc(Write_b_idleToken_EncodedGlobalVariables(diz__41, globals), write)
(declare-const $t@471@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__41
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Write_b() && acc(Write_b_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Write_b_m, write) && acc(sys__result.Write_b_b, write) && sys__result.Write_b_m == m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Write_b()
; [eval] type_of(sys__result)
; [eval] class_Write_b()
; [eval] sys__result.Write_b_m == m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Write_b_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@472@01 $Ref)
(declare-const globals@473@01 $Ref)
(declare-const diz@474@01 $Ref)
(declare-const globals@475@01 $Ref)
(push) ; 1
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 ($Snap.combine ($Snap.first $t@476@01) ($Snap.second $t@476@01))))
(assert (= ($Snap.first $t@476@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@474@01 $Ref.null)))
(assert (=
  ($Snap.second $t@476@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@476@01))
    ($Snap.second ($Snap.second $t@476@01)))))
(declare-const $k@477@01 $Perm)
(assert ($Perm.isReadVar $k@477@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@477@01 $Perm.No) (< $Perm.No $k@477@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14132
;  :arith-add-rows          167
;  :arith-assert-diseq      621
;  :arith-assert-lower      1674
;  :arith-assert-upper      1104
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        884
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1006
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 2748
;  :datatype-occurs-check   1064
;  :datatype-splits         2129
;  :decisions               2936
;  :del-clause              4237
;  :final-checks            380
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8369
;  :mk-clause               4240
;  :num-allocs              8105774
;  :num-checks              1391
;  :propagations            1635
;  :quant-instantiations    594
;  :rlimit-count            482349)
(assert (<= $Perm.No $k@477@01))
(assert (<= $k@477@01 $Perm.Write))
(assert (implies (< $Perm.No $k@477@01) (not (= diz@474@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@476@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@476@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@476@01))) $Snap.unit))
; [eval] diz.Write_b_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@477@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14138
;  :arith-add-rows          167
;  :arith-assert-diseq      621
;  :arith-assert-lower      1674
;  :arith-assert-upper      1105
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        884
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1007
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 2748
;  :datatype-occurs-check   1064
;  :datatype-splits         2129
;  :decisions               2936
;  :del-clause              4237
;  :final-checks            380
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8372
;  :mk-clause               4240
;  :num-allocs              8105774
;  :num-checks              1392
;  :propagations            1635
;  :quant-instantiations    594
;  :rlimit-count            482602
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@476@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@476@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))))
(push) ; 2
(assert (not (< $Perm.No $k@477@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14144
;  :arith-add-rows          167
;  :arith-assert-diseq      621
;  :arith-assert-lower      1674
;  :arith-assert-upper      1105
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        884
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1008
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 2748
;  :datatype-occurs-check   1064
;  :datatype-splits         2129
;  :decisions               2936
;  :del-clause              4237
;  :final-checks            380
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8375
;  :mk-clause               4240
;  :num-allocs              8105774
;  :num-checks              1393
;  :propagations            1635
;  :quant-instantiations    595
;  :rlimit-count            482886)
(declare-const $k@478@01 $Perm)
(assert ($Perm.isReadVar $k@478@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@478@01 $Perm.No) (< $Perm.No $k@478@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14144
;  :arith-add-rows          167
;  :arith-assert-diseq      622
;  :arith-assert-lower      1676
;  :arith-assert-upper      1106
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        885
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1009
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 2748
;  :datatype-occurs-check   1064
;  :datatype-splits         2129
;  :decisions               2936
;  :del-clause              4237
;  :final-checks            380
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8379
;  :mk-clause               4242
;  :num-allocs              8105774
;  :num-checks              1394
;  :propagations            1636
;  :quant-instantiations    595
;  :rlimit-count            483084)
(assert (<= $Perm.No $k@478@01))
(assert (<= $k@478@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@478@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@476@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@477@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14150
;  :arith-add-rows          167
;  :arith-assert-diseq      622
;  :arith-assert-lower      1676
;  :arith-assert-upper      1107
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        885
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1010
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2748
;  :datatype-occurs-check   1064
;  :datatype-splits         2129
;  :decisions               2936
;  :del-clause              4237
;  :final-checks            380
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8382
;  :mk-clause               4242
;  :num-allocs              8105774
;  :num-checks              1395
;  :propagations            1636
;  :quant-instantiations    595
;  :rlimit-count            483357)
(push) ; 2
(assert (not (< $Perm.No $k@478@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14150
;  :arith-add-rows          167
;  :arith-assert-diseq      622
;  :arith-assert-lower      1676
;  :arith-assert-upper      1107
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        885
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1011
;  :datatype-accessor-ax    570
;  :datatype-constructor-ax 2748
;  :datatype-occurs-check   1064
;  :datatype-splits         2129
;  :decisions               2936
;  :del-clause              4237
;  :final-checks            380
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8382
;  :mk-clause               4242
;  :num-allocs              8105774
;  :num-checks              1396
;  :propagations            1636
;  :quant-instantiations    595
;  :rlimit-count            483405
;  :time                    0.01)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@476@01)))))
  diz@474@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@479@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Write_b_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@480@01 $Ref)
(declare-const globals@481@01 $Ref)
(declare-const diz@482@01 $Ref)
(declare-const globals@483@01 $Ref)
(push) ; 1
(declare-const $t@484@01 $Snap)
(assert (= $t@484@01 ($Snap.combine ($Snap.first $t@484@01) ($Snap.second $t@484@01))))
(assert (= ($Snap.first $t@484@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@482@01 $Ref.null)))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@485@01 $Snap)
(assert (= $t@485@01 ($Snap.combine ($Snap.first $t@485@01) ($Snap.second $t@485@01))))
(assert (=
  ($Snap.second $t@485@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@485@01))
    ($Snap.second ($Snap.second $t@485@01)))))
(declare-const $k@486@01 $Perm)
(assert ($Perm.isReadVar $k@486@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@486@01 $Perm.No) (< $Perm.No $k@486@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14178
;  :arith-add-rows          167
;  :arith-assert-diseq      623
;  :arith-assert-lower      1678
;  :arith-assert-upper      1108
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        886
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1012
;  :datatype-accessor-ax    574
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1068
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4241
;  :final-checks            384
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8397
;  :mk-clause               4244
;  :num-allocs              8105774
;  :num-checks              1399
;  :propagations            1637
;  :quant-instantiations    596
;  :rlimit-count            484658)
(assert (<= $Perm.No $k@486@01))
(assert (<= $k@486@01 $Perm.Write))
(assert (implies (< $Perm.No $k@486@01) (not (= diz@482@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@485@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@485@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@485@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@485@01))) $Snap.unit))
; [eval] diz.Write_b_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@486@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14184
;  :arith-add-rows          167
;  :arith-assert-diseq      623
;  :arith-assert-lower      1678
;  :arith-assert-upper      1109
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        886
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1013
;  :datatype-accessor-ax    575
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1068
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4241
;  :final-checks            384
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8400
;  :mk-clause               4244
;  :num-allocs              8105774
;  :num-checks              1400
;  :propagations            1637
;  :quant-instantiations    596
;  :rlimit-count            484911)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@485@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@485@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@485@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@485@01)))))))
(push) ; 3
(assert (not (< $Perm.No $k@486@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14190
;  :arith-add-rows          167
;  :arith-assert-diseq      623
;  :arith-assert-lower      1678
;  :arith-assert-upper      1109
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        886
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1014
;  :datatype-accessor-ax    576
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1068
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4241
;  :final-checks            384
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8403
;  :mk-clause               4244
;  :num-allocs              8105774
;  :num-checks              1401
;  :propagations            1637
;  :quant-instantiations    597
;  :rlimit-count            485195)
(declare-const $k@487@01 $Perm)
(assert ($Perm.isReadVar $k@487@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@487@01 $Perm.No) (< $Perm.No $k@487@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14190
;  :arith-add-rows          167
;  :arith-assert-diseq      624
;  :arith-assert-lower      1680
;  :arith-assert-upper      1110
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        887
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1015
;  :datatype-accessor-ax    576
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1068
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4241
;  :final-checks            384
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8407
;  :mk-clause               4246
;  :num-allocs              8105774
;  :num-checks              1402
;  :propagations            1638
;  :quant-instantiations    597
;  :rlimit-count            485393)
(assert (<= $Perm.No $k@487@01))
(assert (<= $k@487@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@487@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@485@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@485@01))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@486@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14191
;  :arith-add-rows          167
;  :arith-assert-diseq      624
;  :arith-assert-lower      1680
;  :arith-assert-upper      1111
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        887
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1016
;  :datatype-accessor-ax    576
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1068
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4241
;  :final-checks            384
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8409
;  :mk-clause               4246
;  :num-allocs              8105774
;  :num-checks              1403
;  :propagations            1638
;  :quant-instantiations    597
;  :rlimit-count            485579
;  :time                    0.01)
(push) ; 3
(assert (not (< $Perm.No $k@487@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14191
;  :arith-add-rows          167
;  :arith-assert-diseq      624
;  :arith-assert-lower      1680
;  :arith-assert-upper      1111
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        887
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1017
;  :datatype-accessor-ax    576
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1068
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4241
;  :final-checks            384
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8409
;  :mk-clause               4246
;  :num-allocs              8105774
;  :num-checks              1404
;  :propagations            1638
;  :quant-instantiations    597
;  :rlimit-count            485627)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@485@01)))))
  diz@482@01))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Write_b___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@488@01 $Ref)
(declare-const globals@489@01 $Ref)
(declare-const diz@490@01 $Ref)
(declare-const globals@491@01 $Ref)
(push) ; 1
(declare-const $t@492@01 $Snap)
(assert (= $t@492@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@490@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.Write_b_m, wildcard) && diz.Write_b_m != null && acc(diz.Write_b_m.Main_nand_write_b, wildcard) && diz.Write_b_m.Main_nand_write_b == diz)
(declare-const $t@493@01 $Snap)
(assert (= $t@493@01 ($Snap.combine ($Snap.first $t@493@01) ($Snap.second $t@493@01))))
(assert (= ($Snap.first $t@493@01) $Snap.unit))
(assert (=
  ($Snap.second $t@493@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@493@01))
    ($Snap.second ($Snap.second $t@493@01)))))
(declare-const $k@494@01 $Perm)
(assert ($Perm.isReadVar $k@494@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@494@01 $Perm.No) (< $Perm.No $k@494@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14203
;  :arith-add-rows          167
;  :arith-assert-diseq      625
;  :arith-assert-lower      1682
;  :arith-assert-upper      1112
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        888
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1018
;  :datatype-accessor-ax    579
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1069
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4245
;  :final-checks            385
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8418
;  :mk-clause               4248
;  :num-allocs              8105774
;  :num-checks              1406
;  :propagations            1639
;  :quant-instantiations    597
;  :rlimit-count            486402)
(assert (<= $Perm.No $k@494@01))
(assert (<= $k@494@01 $Perm.Write))
(assert (implies (< $Perm.No $k@494@01) (not (= diz@490@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@493@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@493@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@493@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@493@01))) $Snap.unit))
; [eval] diz.Write_b_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@494@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14209
;  :arith-add-rows          167
;  :arith-assert-diseq      625
;  :arith-assert-lower      1682
;  :arith-assert-upper      1113
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        888
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1019
;  :datatype-accessor-ax    580
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1069
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4245
;  :final-checks            385
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8421
;  :mk-clause               4248
;  :num-allocs              8105774
;  :num-checks              1407
;  :propagations            1639
;  :quant-instantiations    597
;  :rlimit-count            486655)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@493@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@493@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@493@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@493@01)))))))
(push) ; 3
(assert (not (< $Perm.No $k@494@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14215
;  :arith-add-rows          167
;  :arith-assert-diseq      625
;  :arith-assert-lower      1682
;  :arith-assert-upper      1113
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        888
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    581
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1069
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4245
;  :final-checks            385
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8424
;  :mk-clause               4248
;  :num-allocs              8105774
;  :num-checks              1408
;  :propagations            1639
;  :quant-instantiations    598
;  :rlimit-count            486939
;  :time                    0.00)
(declare-const $k@495@01 $Perm)
(assert ($Perm.isReadVar $k@495@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@495@01 $Perm.No) (< $Perm.No $k@495@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14215
;  :arith-add-rows          167
;  :arith-assert-diseq      626
;  :arith-assert-lower      1684
;  :arith-assert-upper      1114
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        889
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1021
;  :datatype-accessor-ax    581
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1069
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4245
;  :final-checks            385
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8428
;  :mk-clause               4250
;  :num-allocs              8105774
;  :num-checks              1409
;  :propagations            1640
;  :quant-instantiations    598
;  :rlimit-count            487137)
(assert (<= $Perm.No $k@495@01))
(assert (<= $k@495@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@495@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@493@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@493@01))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@494@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14216
;  :arith-add-rows          167
;  :arith-assert-diseq      626
;  :arith-assert-lower      1684
;  :arith-assert-upper      1115
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        889
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1022
;  :datatype-accessor-ax    581
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1069
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4245
;  :final-checks            385
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8430
;  :mk-clause               4250
;  :num-allocs              8105774
;  :num-checks              1410
;  :propagations            1640
;  :quant-instantiations    598
;  :rlimit-count            487323
;  :time                    0.01)
(push) ; 3
(assert (not (< $Perm.No $k@495@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14216
;  :arith-add-rows          167
;  :arith-assert-diseq      626
;  :arith-assert-lower      1684
;  :arith-assert-upper      1115
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        889
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1023
;  :datatype-accessor-ax    581
;  :datatype-constructor-ax 2752
;  :datatype-occurs-check   1069
;  :datatype-splits         2133
;  :decisions               2940
;  :del-clause              4245
;  :final-checks            385
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8430
;  :mk-clause               4250
;  :num-allocs              8105774
;  :num-checks              1411
;  :propagations            1640
;  :quant-instantiations    598
;  :rlimit-count            487371)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@493@01)))))
  diz@490@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Write_b_run_EncodedGlobalVariables ----------
(declare-const diz@496@01 $Ref)
(declare-const globals@497@01 $Ref)
(declare-const diz@498@01 $Ref)
(declare-const globals@499@01 $Ref)
(push) ; 1
(declare-const $t@500@01 $Snap)
(assert (= $t@500@01 ($Snap.combine ($Snap.first $t@500@01) ($Snap.second $t@500@01))))
(assert (= ($Snap.first $t@500@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@498@01 $Ref.null)))
(assert (=
  ($Snap.second $t@500@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@500@01))
    ($Snap.second ($Snap.second $t@500@01)))))
(declare-const $k@501@01 $Perm)
(assert ($Perm.isReadVar $k@501@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@501@01 $Perm.No) (< $Perm.No $k@501@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14253
;  :arith-add-rows          167
;  :arith-assert-diseq      627
;  :arith-assert-lower      1686
;  :arith-assert-upper      1116
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        890
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1024
;  :datatype-accessor-ax    584
;  :datatype-constructor-ax 2760
;  :datatype-occurs-check   1079
;  :datatype-splits         2135
;  :decisions               2948
;  :del-clause              4249
;  :final-checks            390
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8442
;  :mk-clause               4252
;  :num-allocs              8105774
;  :num-checks              1416
;  :propagations            1641
;  :quant-instantiations    599
;  :rlimit-count            489085)
(assert (<= $Perm.No $k@501@01))
(assert (<= $k@501@01 $Perm.Write))
(assert (implies (< $Perm.No $k@501@01) (not (= diz@498@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@500@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@500@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@500@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@500@01))) $Snap.unit))
; [eval] diz.Write_b_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14259
;  :arith-add-rows          167
;  :arith-assert-diseq      627
;  :arith-assert-lower      1686
;  :arith-assert-upper      1117
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        890
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1025
;  :datatype-accessor-ax    585
;  :datatype-constructor-ax 2760
;  :datatype-occurs-check   1079
;  :datatype-splits         2135
;  :decisions               2948
;  :del-clause              4249
;  :final-checks            390
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8445
;  :mk-clause               4252
;  :num-allocs              8105774
;  :num-checks              1417
;  :propagations            1641
;  :quant-instantiations    599
;  :rlimit-count            489338
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@500@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@500@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@500@01)))))))
(push) ; 2
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14265
;  :arith-add-rows          167
;  :arith-assert-diseq      627
;  :arith-assert-lower      1686
;  :arith-assert-upper      1117
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        890
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1026
;  :datatype-accessor-ax    586
;  :datatype-constructor-ax 2760
;  :datatype-occurs-check   1079
;  :datatype-splits         2135
;  :decisions               2948
;  :del-clause              4249
;  :final-checks            390
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8448
;  :mk-clause               4252
;  :num-allocs              8105774
;  :num-checks              1418
;  :propagations            1641
;  :quant-instantiations    600
;  :rlimit-count            489622)
(declare-const $k@502@01 $Perm)
(assert ($Perm.isReadVar $k@502@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@502@01 $Perm.No) (< $Perm.No $k@502@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14265
;  :arith-add-rows          167
;  :arith-assert-diseq      628
;  :arith-assert-lower      1688
;  :arith-assert-upper      1118
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        891
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1027
;  :datatype-accessor-ax    586
;  :datatype-constructor-ax 2760
;  :datatype-occurs-check   1079
;  :datatype-splits         2135
;  :decisions               2948
;  :del-clause              4249
;  :final-checks            390
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8452
;  :mk-clause               4254
;  :num-allocs              8105774
;  :num-checks              1419
;  :propagations            1642
;  :quant-instantiations    600
;  :rlimit-count            489821)
(assert (<= $Perm.No $k@502@01))
(assert (<= $k@502@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@502@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@500@01))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14266
;  :arith-add-rows          167
;  :arith-assert-diseq      628
;  :arith-assert-lower      1688
;  :arith-assert-upper      1119
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        891
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    586
;  :datatype-constructor-ax 2760
;  :datatype-occurs-check   1079
;  :datatype-splits         2135
;  :decisions               2948
;  :del-clause              4249
;  :final-checks            390
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8454
;  :mk-clause               4254
;  :num-allocs              8105774
;  :num-checks              1420
;  :propagations            1642
;  :quant-instantiations    600
;  :rlimit-count            490007)
(push) ; 2
(assert (not (< $Perm.No $k@502@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14266
;  :arith-add-rows          167
;  :arith-assert-diseq      628
;  :arith-assert-lower      1688
;  :arith-assert-upper      1119
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        891
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1029
;  :datatype-accessor-ax    586
;  :datatype-constructor-ax 2760
;  :datatype-occurs-check   1079
;  :datatype-splits         2135
;  :decisions               2948
;  :del-clause              4249
;  :final-checks            390
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8454
;  :mk-clause               4254
;  :num-allocs              8105774
;  :num-checks              1421
;  :propagations            1642
;  :quant-instantiations    600
;  :rlimit-count            490055)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@500@01)))))
  diz@498@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@503@01 $Snap)
(assert (= $t@503@01 ($Snap.combine ($Snap.first $t@503@01) ($Snap.second $t@503@01))))
(declare-const $k@504@01 $Perm)
(assert ($Perm.isReadVar $k@504@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@504@01 $Perm.No) (< $Perm.No $k@504@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14279
;  :arith-add-rows          167
;  :arith-assert-diseq      629
;  :arith-assert-lower      1690
;  :arith-assert-upper      1120
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        892
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1030
;  :datatype-accessor-ax    587
;  :datatype-constructor-ax 2762
;  :datatype-occurs-check   1081
;  :datatype-splits         2137
;  :decisions               2950
;  :del-clause              4253
;  :final-checks            392
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8463
;  :mk-clause               4256
;  :num-allocs              8105774
;  :num-checks              1423
;  :propagations            1643
;  :quant-instantiations    601
;  :rlimit-count            490761)
(assert (<= $Perm.No $k@504@01))
(assert (<= $k@504@01 $Perm.Write))
(assert (implies (< $Perm.No $k@504@01) (not (= diz@498@01 $Ref.null))))
(assert (=
  ($Snap.second $t@503@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@503@01))
    ($Snap.second ($Snap.second $t@503@01)))))
(assert (= ($Snap.first ($Snap.second $t@503@01)) $Snap.unit))
; [eval] diz.Write_b_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@504@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14285
;  :arith-add-rows          167
;  :arith-assert-diseq      629
;  :arith-assert-lower      1690
;  :arith-assert-upper      1121
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        892
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1031
;  :datatype-accessor-ax    588
;  :datatype-constructor-ax 2762
;  :datatype-occurs-check   1081
;  :datatype-splits         2137
;  :decisions               2950
;  :del-clause              4253
;  :final-checks            392
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8466
;  :mk-clause               4256
;  :num-allocs              8105774
;  :num-checks              1424
;  :propagations            1643
;  :quant-instantiations    601
;  :rlimit-count            491004)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@503@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@503@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@503@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@503@01))))))
(push) ; 3
(assert (not (< $Perm.No $k@504@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14291
;  :arith-add-rows          167
;  :arith-assert-diseq      629
;  :arith-assert-lower      1690
;  :arith-assert-upper      1121
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        892
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1032
;  :datatype-accessor-ax    589
;  :datatype-constructor-ax 2762
;  :datatype-occurs-check   1081
;  :datatype-splits         2137
;  :decisions               2950
;  :del-clause              4253
;  :final-checks            392
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8469
;  :mk-clause               4256
;  :num-allocs              8105774
;  :num-checks              1425
;  :propagations            1643
;  :quant-instantiations    602
;  :rlimit-count            491276)
(declare-const $k@505@01 $Perm)
(assert ($Perm.isReadVar $k@505@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@505@01 $Perm.No) (< $Perm.No $k@505@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14291
;  :arith-add-rows          167
;  :arith-assert-diseq      630
;  :arith-assert-lower      1692
;  :arith-assert-upper      1122
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        893
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    589
;  :datatype-constructor-ax 2762
;  :datatype-occurs-check   1081
;  :datatype-splits         2137
;  :decisions               2950
;  :del-clause              4253
;  :final-checks            392
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8473
;  :mk-clause               4258
;  :num-allocs              8105774
;  :num-checks              1426
;  :propagations            1644
;  :quant-instantiations    602
;  :rlimit-count            491475)
(assert (<= $Perm.No $k@505@01))
(assert (<= $k@505@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@505@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@503@01)) $Ref.null))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@503@01))) $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@504@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14292
;  :arith-add-rows          167
;  :arith-assert-diseq      630
;  :arith-assert-lower      1692
;  :arith-assert-upper      1123
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        893
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1034
;  :datatype-accessor-ax    589
;  :datatype-constructor-ax 2762
;  :datatype-occurs-check   1081
;  :datatype-splits         2137
;  :decisions               2950
;  :del-clause              4253
;  :final-checks            392
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8475
;  :mk-clause               4258
;  :num-allocs              8105774
;  :num-checks              1427
;  :propagations            1644
;  :quant-instantiations    602
;  :rlimit-count            491651
;  :time                    0.01)
(push) ; 3
(assert (not (< $Perm.No $k@505@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14292
;  :arith-add-rows          167
;  :arith-assert-diseq      630
;  :arith-assert-lower      1692
;  :arith-assert-upper      1123
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        893
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    589
;  :datatype-constructor-ax 2762
;  :datatype-occurs-check   1081
;  :datatype-splits         2137
;  :decisions               2950
;  :del-clause              4253
;  :final-checks            392
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8475
;  :mk-clause               4258
;  :num-allocs              8105774
;  :num-checks              1428
;  :propagations            1644
;  :quant-instantiations    602
;  :rlimit-count            491699)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@503@01))))
  diz@498@01))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_46__42: Ref
(declare-const __flatten_46__42@506@01 $Ref)
; [exec]
; var __flatten_47__43: Ref
(declare-const __flatten_47__43@507@01 $Ref)
; [exec]
; var __flatten_48__44: Bool
(declare-const __flatten_48__44@508@01 Bool)
; [exec]
; var __flatten_49__45: Bool
(declare-const __flatten_49__45@509@01 Bool)
; [exec]
; var __flatten_50__46: Ref
(declare-const __flatten_50__46@510@01 $Ref)
; [exec]
; var __flatten_51__47: Seq[Int]
(declare-const __flatten_51__47@511@01 Seq<Int>)
; [exec]
; var __flatten_52__48: Ref
(declare-const __flatten_52__48@512@01 $Ref)
; [exec]
; var __flatten_53__49: Ref
(declare-const __flatten_53__49@513@01 $Ref)
; [exec]
; var __flatten_54__50: Seq[Int]
(declare-const __flatten_54__50@514@01 Seq<Int>)
; [exec]
; var __flatten_55__51: Ref
(declare-const __flatten_55__51@515@01 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(push) ; 3
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14292
;  :arith-add-rows          167
;  :arith-assert-diseq      630
;  :arith-assert-lower      1692
;  :arith-assert-upper      1123
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        893
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1036
;  :datatype-accessor-ax    589
;  :datatype-constructor-ax 2762
;  :datatype-occurs-check   1081
;  :datatype-splits         2137
;  :decisions               2950
;  :del-clause              4257
;  :final-checks            392
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8475
;  :mk-clause               4258
;  :num-allocs              8105774
;  :num-checks              1429
;  :propagations            1644
;  :quant-instantiations    602
;  :rlimit-count            491763
;  :time                    0.01)
(declare-const $t@516@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14298
;  :arith-add-rows          167
;  :arith-assert-diseq      630
;  :arith-assert-lower      1692
;  :arith-assert-upper      1123
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        893
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    589
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4257
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8475
;  :mk-clause               4258
;  :num-allocs              8105774
;  :num-checks              1431
;  :propagations            1644
;  :quant-instantiations    602
;  :rlimit-count            492080)
(assert (= $t@516@01 ($Snap.combine ($Snap.first $t@516@01) ($Snap.second $t@516@01))))
(assert (= ($Snap.first $t@516@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@516@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@516@01))
    ($Snap.second ($Snap.second $t@516@01)))))
(assert (= ($Snap.first ($Snap.second $t@516@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@516@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@516@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@516@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@516@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@517@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 177 | 0 <= i@517@01 | live]
; [else-branch: 177 | !(0 <= i@517@01) | live]
(push) ; 5
; [then-branch: 177 | 0 <= i@517@01]
(assert (<= 0 i@517@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 177 | !(0 <= i@517@01)]
(assert (not (<= 0 i@517@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 178 | i@517@01 < |First:(Second:(Second:(Second:($t@516@01))))| && 0 <= i@517@01 | live]
; [else-branch: 178 | !(i@517@01 < |First:(Second:(Second:(Second:($t@516@01))))| && 0 <= i@517@01) | live]
(push) ; 5
; [then-branch: 178 | i@517@01 < |First:(Second:(Second:(Second:($t@516@01))))| && 0 <= i@517@01]
(assert (and
  (<
    i@517@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
  (<= 0 i@517@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@517@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14349
;  :arith-add-rows          167
;  :arith-assert-diseq      632
;  :arith-assert-lower      1699
;  :arith-assert-upper      1126
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        897
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    597
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4257
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8507
;  :mk-clause               4264
;  :num-allocs              8105774
;  :num-checks              1432
;  :propagations            1646
;  :quant-instantiations    608
;  :rlimit-count            493430)
; [eval] -1
(push) ; 6
; [then-branch: 179 | First:(Second:(Second:(Second:($t@516@01))))[i@517@01] == -1 | live]
; [else-branch: 179 | First:(Second:(Second:(Second:($t@516@01))))[i@517@01] != -1 | live]
(push) ; 7
; [then-branch: 179 | First:(Second:(Second:(Second:($t@516@01))))[i@517@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
    i@517@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 179 | First:(Second:(Second:(Second:($t@516@01))))[i@517@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
      i@517@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@517@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14349
;  :arith-add-rows          167
;  :arith-assert-diseq      632
;  :arith-assert-lower      1699
;  :arith-assert-upper      1126
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        897
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    597
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4257
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8508
;  :mk-clause               4264
;  :num-allocs              8105774
;  :num-checks              1433
;  :propagations            1646
;  :quant-instantiations    608
;  :rlimit-count            493605)
(push) ; 8
; [then-branch: 180 | 0 <= First:(Second:(Second:(Second:($t@516@01))))[i@517@01] | live]
; [else-branch: 180 | !(0 <= First:(Second:(Second:(Second:($t@516@01))))[i@517@01]) | live]
(push) ; 9
; [then-branch: 180 | 0 <= First:(Second:(Second:(Second:($t@516@01))))[i@517@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
    i@517@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@517@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14349
;  :arith-add-rows          167
;  :arith-assert-diseq      633
;  :arith-assert-lower      1702
;  :arith-assert-upper      1126
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        898
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    597
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4257
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8511
;  :mk-clause               4265
;  :num-allocs              8105774
;  :num-checks              1434
;  :propagations            1646
;  :quant-instantiations    608
;  :rlimit-count            493728)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 180 | !(0 <= First:(Second:(Second:(Second:($t@516@01))))[i@517@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
      i@517@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 178 | !(i@517@01 < |First:(Second:(Second:(Second:($t@516@01))))| && 0 <= i@517@01)]
(assert (not
  (and
    (<
      i@517@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
    (<= 0 i@517@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@517@01 Int)) (!
  (implies
    (and
      (<
        i@517@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
      (<= 0 i@517@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
          i@517@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
            i@517@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
            i@517@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
    i@517@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))
(declare-const $k@518@01 $Perm)
(assert ($Perm.isReadVar $k@518@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@518@01 $Perm.No) (< $Perm.No $k@518@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14354
;  :arith-add-rows          167
;  :arith-assert-diseq      634
;  :arith-assert-lower      1704
;  :arith-assert-upper      1127
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        899
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1038
;  :datatype-accessor-ax    598
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8517
;  :mk-clause               4267
;  :num-allocs              8105774
;  :num-checks              1435
;  :propagations            1647
;  :quant-instantiations    608
;  :rlimit-count            494497)
(assert (<= $Perm.No $k@518@01))
(assert (<= $k@518@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@518@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14360
;  :arith-add-rows          167
;  :arith-assert-diseq      634
;  :arith-assert-lower      1704
;  :arith-assert-upper      1128
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        899
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1039
;  :datatype-accessor-ax    599
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8520
;  :mk-clause               4267
;  :num-allocs              8105774
;  :num-checks              1436
;  :propagations            1647
;  :quant-instantiations    608
;  :rlimit-count            494820
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14366
;  :arith-add-rows          167
;  :arith-assert-diseq      634
;  :arith-assert-lower      1704
;  :arith-assert-upper      1128
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        899
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1040
;  :datatype-accessor-ax    600
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8523
;  :mk-clause               4267
;  :num-allocs              8105774
;  :num-checks              1437
;  :propagations            1647
;  :quant-instantiations    609
;  :rlimit-count            495176
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14371
;  :arith-add-rows          167
;  :arith-assert-diseq      634
;  :arith-assert-lower      1704
;  :arith-assert-upper      1128
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        899
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8524
;  :mk-clause               4267
;  :num-allocs              8105774
;  :num-checks              1438
;  :propagations            1647
;  :quant-instantiations    609
;  :rlimit-count            495433)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14376
;  :arith-add-rows          167
;  :arith-assert-diseq      634
;  :arith-assert-lower      1704
;  :arith-assert-upper      1128
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        899
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1042
;  :datatype-accessor-ax    602
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8525
;  :mk-clause               4267
;  :num-allocs              8105774
;  :num-checks              1439
;  :propagations            1647
;  :quant-instantiations    609
;  :rlimit-count            495700)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))
(declare-const $k@519@01 $Perm)
(assert ($Perm.isReadVar $k@519@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@519@01 $Perm.No) (< $Perm.No $k@519@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14381
;  :arith-add-rows          167
;  :arith-assert-diseq      635
;  :arith-assert-lower      1706
;  :arith-assert-upper      1129
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        900
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1043
;  :datatype-accessor-ax    603
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8530
;  :mk-clause               4269
;  :num-allocs              8105774
;  :num-checks              1440
;  :propagations            1648
;  :quant-instantiations    609
;  :rlimit-count            496120)
(assert (<= $Perm.No $k@519@01))
(assert (<= $k@519@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@519@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@519@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14387
;  :arith-add-rows          167
;  :arith-assert-diseq      635
;  :arith-assert-lower      1706
;  :arith-assert-upper      1130
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        900
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1044
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8533
;  :mk-clause               4269
;  :num-allocs              8105774
;  :num-checks              1441
;  :propagations            1648
;  :quant-instantiations    609
;  :rlimit-count            496493)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@519@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14393
;  :arith-add-rows          167
;  :arith-assert-diseq      635
;  :arith-assert-lower      1706
;  :arith-assert-upper      1130
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        900
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1045
;  :datatype-accessor-ax    605
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8536
;  :mk-clause               4269
;  :num-allocs              8105774
;  :num-checks              1442
;  :propagations            1648
;  :quant-instantiations    610
;  :rlimit-count            496903
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))))
(declare-const $k@520@01 $Perm)
(assert ($Perm.isReadVar $k@520@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@520@01 $Perm.No) (< $Perm.No $k@520@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14398
;  :arith-add-rows          167
;  :arith-assert-diseq      636
;  :arith-assert-lower      1708
;  :arith-assert-upper      1131
;  :arith-bound-prop        110
;  :arith-conflicts         167
;  :arith-eq-adapter        901
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        9
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1046
;  :datatype-accessor-ax    606
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8541
;  :mk-clause               4271
;  :num-allocs              8105774
;  :num-checks              1443
;  :propagations            1649
;  :quant-instantiations    610
;  :rlimit-count            497353)
(declare-const $t@521@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@502@01)
    (=
      $t@521@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@500@01)))))))
  (implies
    (< $Perm.No $k@520@01)
    (=
      $t@521@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@502@01 $k@520@01)))
(assert (<= (+ $k@502@01 $k@520@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@502@01 $k@520@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@502@01 $k@520@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14408
;  :arith-add-rows          167
;  :arith-assert-diseq      636
;  :arith-assert-lower      1709
;  :arith-assert-upper      1133
;  :arith-bound-prop        110
;  :arith-conflicts         168
;  :arith-eq-adapter        901
;  :arith-fixed-eqs         263
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1047
;  :datatype-accessor-ax    607
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8549
;  :mk-clause               4271
;  :num-allocs              8105774
;  :num-checks              1444
;  :propagations            1649
;  :quant-instantiations    611
;  :rlimit-count            498010)
(assert (not (= $t@521@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@502@01 $k@520@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14414
;  :arith-add-rows          167
;  :arith-assert-diseq      636
;  :arith-assert-lower      1709
;  :arith-assert-upper      1134
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        901
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1048
;  :datatype-accessor-ax    608
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8552
;  :mk-clause               4271
;  :num-allocs              8105774
;  :num-checks              1445
;  :propagations            1649
;  :quant-instantiations    611
;  :rlimit-count            498396)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))))))
(declare-const $k@522@01 $Perm)
(assert ($Perm.isReadVar $k@522@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@522@01 $Perm.No) (< $Perm.No $k@522@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14419
;  :arith-add-rows          167
;  :arith-assert-diseq      637
;  :arith-assert-lower      1711
;  :arith-assert-upper      1135
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        902
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1049
;  :datatype-accessor-ax    609
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8557
;  :mk-clause               4273
;  :num-allocs              8105774
;  :num-checks              1446
;  :propagations            1650
;  :quant-instantiations    611
;  :rlimit-count            498876)
(assert (<= $Perm.No $k@522@01))
(assert (<= $k@522@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@522@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@522@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14425
;  :arith-add-rows          167
;  :arith-assert-diseq      637
;  :arith-assert-lower      1711
;  :arith-assert-upper      1136
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        902
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1050
;  :datatype-accessor-ax    610
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8560
;  :mk-clause               4273
;  :num-allocs              8105774
;  :num-checks              1447
;  :propagations            1650
;  :quant-instantiations    611
;  :rlimit-count            499309)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14431
;  :arith-add-rows          167
;  :arith-assert-diseq      637
;  :arith-assert-lower      1711
;  :arith-assert-upper      1136
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        902
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1051
;  :datatype-accessor-ax    611
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8563
;  :mk-clause               4273
;  :num-allocs              8105774
;  :num-checks              1448
;  :propagations            1650
;  :quant-instantiations    612
;  :rlimit-count            499775)
(declare-const $k@523@01 $Perm)
(assert ($Perm.isReadVar $k@523@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@523@01 $Perm.No) (< $Perm.No $k@523@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14431
;  :arith-add-rows          167
;  :arith-assert-diseq      638
;  :arith-assert-lower      1713
;  :arith-assert-upper      1137
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        903
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1052
;  :datatype-accessor-ax    611
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8567
;  :mk-clause               4275
;  :num-allocs              8105774
;  :num-checks              1449
;  :propagations            1651
;  :quant-instantiations    612
;  :rlimit-count            499973)
(assert (<= $Perm.No $k@523@01))
(assert (<= $k@523@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@523@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14432
;  :arith-add-rows          167
;  :arith-assert-diseq      638
;  :arith-assert-lower      1713
;  :arith-assert-upper      1138
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        903
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1053
;  :datatype-accessor-ax    611
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8569
;  :mk-clause               4275
;  :num-allocs              8105774
;  :num-checks              1450
;  :propagations            1651
;  :quant-instantiations    612
;  :rlimit-count            500339)
(push) ; 3
(assert (not (< $Perm.No $k@523@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14432
;  :arith-add-rows          167
;  :arith-assert-diseq      638
;  :arith-assert-lower      1713
;  :arith-assert-upper      1138
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        903
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1054
;  :datatype-accessor-ax    611
;  :datatype-constructor-ax 2764
;  :datatype-occurs-check   1082
;  :datatype-splits         2137
;  :decisions               2952
;  :del-clause              4258
;  :final-checks            393
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8569
;  :mk-clause               4275
;  :num-allocs              8105774
;  :num-checks              1451
;  :propagations            1651
;  :quant-instantiations    612
;  :rlimit-count            500387)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@516@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01))) globals@499@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14473
;  :arith-add-rows          167
;  :arith-assert-diseq      638
;  :arith-assert-lower      1713
;  :arith-assert-upper      1138
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        903
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1055
;  :datatype-accessor-ax    611
;  :datatype-constructor-ax 2776
;  :datatype-occurs-check   1087
;  :datatype-splits         2147
;  :decisions               2964
;  :del-clause              4274
;  :final-checks            395
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8582
;  :mk-clause               4275
;  :num-allocs              8105774
;  :num-checks              1453
;  :propagations            1651
;  :quant-instantiations    613
;  :rlimit-count            501327)
(declare-const $t@524@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz.Write_b_b := true
(set-option :timeout 10)
(push) ; 3
(assert (not (= $t@521@01 diz@498@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14511
;  :arith-add-rows          167
;  :arith-assert-diseq      638
;  :arith-assert-lower      1713
;  :arith-assert-upper      1138
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        903
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1056
;  :datatype-accessor-ax    611
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8592
;  :mk-clause               4275
;  :num-allocs              8105774
;  :num-checks              1455
;  :propagations            1651
;  :quant-instantiations    613
;  :rlimit-count            501864)
(declare-const __flatten_47__43@525@01 $Ref)
(declare-const __flatten_46__42@526@01 $Ref)
(declare-const __flatten_48__44@527@01 Bool)
(declare-const __flatten_49__45@528@01 Bool)
(declare-const __flatten_50__46@529@01 $Ref)
(declare-const __flatten_52__48@530@01 $Ref)
(declare-const __flatten_51__47@531@01 Seq<Int>)
(declare-const __flatten_53__49@532@01 $Ref)
(declare-const __flatten_55__51@533@01 $Ref)
(declare-const __flatten_54__50@534@01 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@535@01 $Snap)
(assert (= $t@535@01 ($Snap.combine ($Snap.first $t@535@01) ($Snap.second $t@535@01))))
(declare-const $k@536@01 $Perm)
(assert ($Perm.isReadVar $k@536@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@536@01 $Perm.No) (< $Perm.No $k@536@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14516
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1715
;  :arith-assert-upper      1139
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        904
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1057
;  :datatype-accessor-ax    612
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8597
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1456
;  :propagations            1652
;  :quant-instantiations    613
;  :rlimit-count            502156)
(assert (<= $Perm.No $k@536@01))
(assert (<= $k@536@01 $Perm.Write))
(assert (implies (< $Perm.No $k@536@01) (not (= diz@498@01 $Ref.null))))
(assert (=
  ($Snap.second $t@535@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@535@01))
    ($Snap.second ($Snap.second $t@535@01)))))
(assert (= ($Snap.first ($Snap.second $t@535@01)) $Snap.unit))
; [eval] diz.Write_b_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14522
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1715
;  :arith-assert-upper      1140
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        904
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1058
;  :datatype-accessor-ax    613
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8600
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1457
;  :propagations            1652
;  :quant-instantiations    613
;  :rlimit-count            502399)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@535@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@535@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14528
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1715
;  :arith-assert-upper      1140
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        904
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1059
;  :datatype-accessor-ax    614
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8603
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1458
;  :propagations            1652
;  :quant-instantiations    614
;  :rlimit-count            502671)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@535@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14533
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1715
;  :arith-assert-upper      1140
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        904
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1060
;  :datatype-accessor-ax    615
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8604
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1459
;  :propagations            1652
;  :quant-instantiations    614
;  :rlimit-count            502848)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
  $Snap.unit))
; [eval] |diz.Write_b_m.Main_process_state| == 3
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14539
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1715
;  :arith-assert-upper      1140
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        904
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1061
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8606
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1460
;  :propagations            1652
;  :quant-instantiations    614
;  :rlimit-count            503067)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14546
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1717
;  :arith-assert-upper      1141
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        905
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1062
;  :datatype-accessor-ax    617
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8612
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1461
;  :propagations            1652
;  :quant-instantiations    616
;  :rlimit-count            503397)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
  $Snap.unit))
; [eval] |diz.Write_b_m.Main_event_state| == 3
; [eval] |diz.Write_b_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14552
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1717
;  :arith-assert-upper      1141
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        905
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1063
;  :datatype-accessor-ax    618
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8614
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1462
;  :propagations            1652
;  :quant-instantiations    616
;  :rlimit-count            503636)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
  $Snap.unit))
; [eval] (forall i__52: Int :: { diz.Write_b_m.Main_process_state[i__52] } 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|)
(declare-const i__52@537@01 Int)
(push) ; 4
; [eval] 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state|
; [eval] 0 <= i__52
(push) ; 5
; [then-branch: 181 | 0 <= i__52@537@01 | live]
; [else-branch: 181 | !(0 <= i__52@537@01) | live]
(push) ; 6
; [then-branch: 181 | 0 <= i__52@537@01]
(assert (<= 0 i__52@537@01))
; [eval] i__52 < |diz.Write_b_m.Main_process_state|
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14560
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1720
;  :arith-assert-upper      1142
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        906
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1064
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8622
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1463
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            504075)
(pop) ; 6
(push) ; 6
; [else-branch: 181 | !(0 <= i__52@537@01)]
(assert (not (<= 0 i__52@537@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 182 | i__52@537@01 < |First:(Second:(Second:(Second:($t@535@01))))| && 0 <= i__52@537@01 | live]
; [else-branch: 182 | !(i__52@537@01 < |First:(Second:(Second:(Second:($t@535@01))))| && 0 <= i__52@537@01) | live]
(push) ; 6
; [then-branch: 182 | i__52@537@01 < |First:(Second:(Second:(Second:($t@535@01))))| && 0 <= i__52@537@01]
(assert (and
  (<
    i__52@537@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
  (<= 0 i__52@537@01)))
; [eval] diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__52] == -1
; [eval] diz.Write_b_m.Main_process_state[i__52]
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14560
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1721
;  :arith-assert-upper      1143
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        906
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1065
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8624
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1464
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            504232)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__52@537@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14560
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1721
;  :arith-assert-upper      1143
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        906
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1065
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8624
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1465
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            504241)
; [eval] -1
(push) ; 7
; [then-branch: 183 | First:(Second:(Second:(Second:($t@535@01))))[i__52@537@01] == -1 | live]
; [else-branch: 183 | First:(Second:(Second:(Second:($t@535@01))))[i__52@537@01] != -1 | live]
(push) ; 8
; [then-branch: 183 | First:(Second:(Second:(Second:($t@535@01))))[i__52@537@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
    i__52@537@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 183 | First:(Second:(Second:(Second:($t@535@01))))[i__52@537@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
      i__52@537@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__52]
; [eval] diz.Write_b_m.Main_process_state[i__52]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14560
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1721
;  :arith-assert-upper      1143
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        906
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1066
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8625
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1466
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            504455)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__52@537@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14560
;  :arith-add-rows          167
;  :arith-assert-diseq      639
;  :arith-assert-lower      1721
;  :arith-assert-upper      1143
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        906
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1066
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8625
;  :mk-clause               4277
;  :num-allocs              8105774
;  :num-checks              1467
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            504464)
(push) ; 9
; [then-branch: 184 | 0 <= First:(Second:(Second:(Second:($t@535@01))))[i__52@537@01] | live]
; [else-branch: 184 | !(0 <= First:(Second:(Second:(Second:($t@535@01))))[i__52@537@01]) | live]
(push) ; 10
; [then-branch: 184 | 0 <= First:(Second:(Second:(Second:($t@535@01))))[i__52@537@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
    i__52@537@01)))
; [eval] diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__52]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14560
;  :arith-add-rows          167
;  :arith-assert-diseq      640
;  :arith-assert-lower      1724
;  :arith-assert-upper      1143
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        907
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1067
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8628
;  :mk-clause               4278
;  :num-allocs              8105774
;  :num-checks              1468
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            504627)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__52@537@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14560
;  :arith-add-rows          167
;  :arith-assert-diseq      640
;  :arith-assert-lower      1724
;  :arith-assert-upper      1143
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        907
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1067
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8628
;  :mk-clause               4278
;  :num-allocs              8105774
;  :num-checks              1469
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            504636)
; [eval] |diz.Write_b_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14560
;  :arith-add-rows          167
;  :arith-assert-diseq      640
;  :arith-assert-lower      1724
;  :arith-assert-upper      1143
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        907
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1068
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4274
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8628
;  :mk-clause               4278
;  :num-allocs              8105774
;  :num-checks              1470
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            504684
;  :time                    0.01)
(pop) ; 10
(push) ; 10
; [else-branch: 184 | !(0 <= First:(Second:(Second:(Second:($t@535@01))))[i__52@537@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
      i__52@537@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 182 | !(i__52@537@01 < |First:(Second:(Second:(Second:($t@535@01))))| && 0 <= i__52@537@01)]
(assert (not
  (and
    (<
      i__52@537@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
    (<= 0 i__52@537@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__52@537@01 Int)) (!
  (implies
    (and
      (<
        i__52@537@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
      (<= 0 i__52@537@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
          i__52@537@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
            i__52@537@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
            i__52@537@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
    i__52@537@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14565
;  :arith-add-rows          167
;  :arith-assert-diseq      640
;  :arith-assert-lower      1724
;  :arith-assert-upper      1143
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        907
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1069
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8630
;  :mk-clause               4278
;  :num-allocs              8105774
;  :num-checks              1471
;  :propagations            1652
;  :quant-instantiations    618
;  :rlimit-count            505309)
(declare-const $k@538@01 $Perm)
(assert ($Perm.isReadVar $k@538@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@538@01 $Perm.No) (< $Perm.No $k@538@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14565
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1144
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1070
;  :datatype-accessor-ax    620
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8634
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1472
;  :propagations            1653
;  :quant-instantiations    618
;  :rlimit-count            505508)
(assert (<= $Perm.No $k@538@01))
(assert (<= $k@538@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@538@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14571
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1071
;  :datatype-accessor-ax    621
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8637
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1473
;  :propagations            1653
;  :quant-instantiations    618
;  :rlimit-count            505831
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14571
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1072
;  :datatype-accessor-ax    621
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8637
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1474
;  :propagations            1653
;  :quant-instantiations    618
;  :rlimit-count            505879)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14577
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1073
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8640
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1475
;  :propagations            1653
;  :quant-instantiations    619
;  :rlimit-count            506235)
(push) ; 4
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14577
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1074
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8640
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1476
;  :propagations            1653
;  :quant-instantiations    619
;  :rlimit-count            506283)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14582
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1075
;  :datatype-accessor-ax    623
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8641
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1477
;  :propagations            1653
;  :quant-instantiations    619
;  :rlimit-count            506540
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14582
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1076
;  :datatype-accessor-ax    623
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8641
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1478
;  :propagations            1653
;  :quant-instantiations    619
;  :rlimit-count            506588)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14587
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1077
;  :datatype-accessor-ax    624
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8642
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1479
;  :propagations            1653
;  :quant-instantiations    619
;  :rlimit-count            506855)
(push) ; 4
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14587
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1078
;  :datatype-accessor-ax    624
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8642
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1480
;  :propagations            1653
;  :quant-instantiations    619
;  :rlimit-count            506903)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14592
;  :arith-add-rows          167
;  :arith-assert-diseq      641
;  :arith-assert-lower      1726
;  :arith-assert-upper      1145
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        908
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1079
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8643
;  :mk-clause               4280
;  :num-allocs              8105774
;  :num-checks              1481
;  :propagations            1653
;  :quant-instantiations    619
;  :rlimit-count            507180
;  :time                    0.01)
(declare-const $k@539@01 $Perm)
(assert ($Perm.isReadVar $k@539@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@539@01 $Perm.No) (< $Perm.No $k@539@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14592
;  :arith-add-rows          167
;  :arith-assert-diseq      642
;  :arith-assert-lower      1728
;  :arith-assert-upper      1146
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        909
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1080
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8647
;  :mk-clause               4282
;  :num-allocs              8105774
;  :num-checks              1482
;  :propagations            1654
;  :quant-instantiations    619
;  :rlimit-count            507379)
(assert (<= $Perm.No $k@539@01))
(assert (<= $k@539@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@539@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14598
;  :arith-add-rows          167
;  :arith-assert-diseq      642
;  :arith-assert-lower      1728
;  :arith-assert-upper      1147
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        909
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1081
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8650
;  :mk-clause               4282
;  :num-allocs              8105774
;  :num-checks              1483
;  :propagations            1654
;  :quant-instantiations    619
;  :rlimit-count            507752)
(push) ; 4
(assert (not (< $Perm.No $k@539@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14598
;  :arith-add-rows          167
;  :arith-assert-diseq      642
;  :arith-assert-lower      1728
;  :arith-assert-upper      1147
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        909
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1082
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8650
;  :mk-clause               4282
;  :num-allocs              8105774
;  :num-checks              1484
;  :propagations            1654
;  :quant-instantiations    619
;  :rlimit-count            507800
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14604
;  :arith-add-rows          167
;  :arith-assert-diseq      642
;  :arith-assert-lower      1728
;  :arith-assert-upper      1147
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        909
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1083
;  :datatype-accessor-ax    627
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8653
;  :mk-clause               4282
;  :num-allocs              8105774
;  :num-checks              1485
;  :propagations            1654
;  :quant-instantiations    620
;  :rlimit-count            508210)
(push) ; 4
(assert (not (< $Perm.No $k@539@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14604
;  :arith-add-rows          167
;  :arith-assert-diseq      642
;  :arith-assert-lower      1728
;  :arith-assert-upper      1147
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        909
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1084
;  :datatype-accessor-ax    627
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8653
;  :mk-clause               4282
;  :num-allocs              8105774
;  :num-checks              1486
;  :propagations            1654
;  :quant-instantiations    620
;  :rlimit-count            508258)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14609
;  :arith-add-rows          167
;  :arith-assert-diseq      642
;  :arith-assert-lower      1728
;  :arith-assert-upper      1147
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        909
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1085
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8654
;  :mk-clause               4282
;  :num-allocs              8105774
;  :num-checks              1487
;  :propagations            1654
;  :quant-instantiations    620
;  :rlimit-count            508565)
(declare-const $k@540@01 $Perm)
(assert ($Perm.isReadVar $k@540@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@540@01 $Perm.No) (< $Perm.No $k@540@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14609
;  :arith-add-rows          167
;  :arith-assert-diseq      643
;  :arith-assert-lower      1730
;  :arith-assert-upper      1148
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        910
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1086
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8658
;  :mk-clause               4284
;  :num-allocs              8105774
;  :num-checks              1488
;  :propagations            1655
;  :quant-instantiations    620
;  :rlimit-count            508764)
(assert (<= $Perm.No $k@540@01))
(assert (<= $k@540@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@540@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14615
;  :arith-add-rows          167
;  :arith-assert-diseq      643
;  :arith-assert-lower      1730
;  :arith-assert-upper      1149
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        910
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    629
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8661
;  :mk-clause               4284
;  :num-allocs              8105774
;  :num-checks              1489
;  :propagations            1655
;  :quant-instantiations    620
;  :rlimit-count            509167
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@540@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14615
;  :arith-add-rows          167
;  :arith-assert-diseq      643
;  :arith-assert-lower      1730
;  :arith-assert-upper      1149
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        910
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1088
;  :datatype-accessor-ax    629
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8661
;  :mk-clause               4284
;  :num-allocs              8105774
;  :num-checks              1490
;  :propagations            1655
;  :quant-instantiations    620
;  :rlimit-count            509215)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14621
;  :arith-add-rows          167
;  :arith-assert-diseq      643
;  :arith-assert-lower      1730
;  :arith-assert-upper      1149
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        910
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1089
;  :datatype-accessor-ax    630
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8664
;  :mk-clause               4284
;  :num-allocs              8105774
;  :num-checks              1491
;  :propagations            1655
;  :quant-instantiations    621
;  :rlimit-count            509651
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@540@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14621
;  :arith-add-rows          167
;  :arith-assert-diseq      643
;  :arith-assert-lower      1730
;  :arith-assert-upper      1149
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        910
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    630
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8664
;  :mk-clause               4284
;  :num-allocs              8105774
;  :num-checks              1492
;  :propagations            1655
;  :quant-instantiations    621
;  :rlimit-count            509699)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14626
;  :arith-add-rows          167
;  :arith-assert-diseq      643
;  :arith-assert-lower      1730
;  :arith-assert-upper      1149
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        910
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1091
;  :datatype-accessor-ax    631
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8665
;  :mk-clause               4284
;  :num-allocs              8105774
;  :num-checks              1493
;  :propagations            1655
;  :quant-instantiations    621
;  :rlimit-count            510036)
(declare-const $k@541@01 $Perm)
(assert ($Perm.isReadVar $k@541@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@541@01 $Perm.No) (< $Perm.No $k@541@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14626
;  :arith-add-rows          167
;  :arith-assert-diseq      644
;  :arith-assert-lower      1732
;  :arith-assert-upper      1150
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        911
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    631
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8669
;  :mk-clause               4286
;  :num-allocs              8105774
;  :num-checks              1494
;  :propagations            1656
;  :quant-instantiations    621
;  :rlimit-count            510234)
(assert (<= $Perm.No $k@541@01))
(assert (<= $k@541@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@541@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14632
;  :arith-add-rows          167
;  :arith-assert-diseq      644
;  :arith-assert-lower      1732
;  :arith-assert-upper      1151
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        911
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1093
;  :datatype-accessor-ax    632
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8672
;  :mk-clause               4286
;  :num-allocs              8105774
;  :num-checks              1495
;  :propagations            1656
;  :quant-instantiations    621
;  :rlimit-count            510667
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@541@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14632
;  :arith-add-rows          167
;  :arith-assert-diseq      644
;  :arith-assert-lower      1732
;  :arith-assert-upper      1151
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        911
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1094
;  :datatype-accessor-ax    632
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8672
;  :mk-clause               4286
;  :num-allocs              8105774
;  :num-checks              1496
;  :propagations            1656
;  :quant-instantiations    621
;  :rlimit-count            510715)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14638
;  :arith-add-rows          167
;  :arith-assert-diseq      644
;  :arith-assert-lower      1732
;  :arith-assert-upper      1151
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        911
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1095
;  :datatype-accessor-ax    633
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8675
;  :mk-clause               4286
;  :num-allocs              8105774
;  :num-checks              1497
;  :propagations            1656
;  :quant-instantiations    622
;  :rlimit-count            511181)
(push) ; 4
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14638
;  :arith-add-rows          167
;  :arith-assert-diseq      644
;  :arith-assert-lower      1732
;  :arith-assert-upper      1151
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        911
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1096
;  :datatype-accessor-ax    633
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8675
;  :mk-clause               4286
;  :num-allocs              8105774
;  :num-checks              1498
;  :propagations            1656
;  :quant-instantiations    622
;  :rlimit-count            511229
;  :time                    0.01)
(declare-const $k@542@01 $Perm)
(assert ($Perm.isReadVar $k@542@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@542@01 $Perm.No) (< $Perm.No $k@542@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14638
;  :arith-add-rows          167
;  :arith-assert-diseq      645
;  :arith-assert-lower      1734
;  :arith-assert-upper      1152
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        912
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1097
;  :datatype-accessor-ax    633
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8679
;  :mk-clause               4288
;  :num-allocs              8105774
;  :num-checks              1499
;  :propagations            1657
;  :quant-instantiations    622
;  :rlimit-count            511428)
(assert (<= $Perm.No $k@542@01))
(assert (<= $k@542@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@542@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand.Nand_gate_m == diz.Write_b_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14644
;  :arith-add-rows          167
;  :arith-assert-diseq      645
;  :arith-assert-lower      1734
;  :arith-assert-upper      1153
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        912
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1098
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8682
;  :mk-clause               4288
;  :num-allocs              8105774
;  :num-checks              1500
;  :propagations            1657
;  :quant-instantiations    622
;  :rlimit-count            511881)
(push) ; 4
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14644
;  :arith-add-rows          167
;  :arith-assert-diseq      645
;  :arith-assert-lower      1734
;  :arith-assert-upper      1153
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        912
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1099
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8682
;  :mk-clause               4288
;  :num-allocs              8105774
;  :num-checks              1501
;  :propagations            1657
;  :quant-instantiations    622
;  :rlimit-count            511929)
(push) ; 4
(assert (not (< $Perm.No $k@542@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14644
;  :arith-add-rows          167
;  :arith-assert-diseq      645
;  :arith-assert-lower      1734
;  :arith-assert-upper      1153
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        912
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1100
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8682
;  :mk-clause               4288
;  :num-allocs              8105774
;  :num-checks              1502
;  :propagations            1657
;  :quant-instantiations    622
;  :rlimit-count            511977)
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14644
;  :arith-add-rows          167
;  :arith-assert-diseq      645
;  :arith-assert-lower      1734
;  :arith-assert-upper      1153
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        912
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1101
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8682
;  :mk-clause               4288
;  :num-allocs              8105774
;  :num-checks              1503
;  :propagations            1657
;  :quant-instantiations    622
;  :rlimit-count            512025
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(push) ; 4
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14648
;  :arith-add-rows          167
;  :arith-assert-diseq      645
;  :arith-assert-lower      1734
;  :arith-assert-upper      1153
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        912
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1102
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8685
;  :mk-clause               4288
;  :num-allocs              8105774
;  :num-checks              1504
;  :propagations            1657
;  :quant-instantiations    623
;  :rlimit-count            512456)
(push) ; 4
(assert (not (< $Perm.No $k@540@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14648
;  :arith-add-rows          167
;  :arith-assert-diseq      645
;  :arith-assert-lower      1734
;  :arith-assert-upper      1153
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        912
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1103
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4275
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8685
;  :mk-clause               4288
;  :num-allocs              8105774
;  :num-checks              1505
;  :propagations            1657
;  :quant-instantiations    623
;  :rlimit-count            512504)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
  diz@498@01))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@543@01 $Perm)
(assert ($Perm.isReadVar $k@543@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@543@01 $Perm.No) (< $Perm.No $k@543@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1736
;  :arith-assert-upper      1154
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1104
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8690
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1506
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            512941)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@501@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1736
;  :arith-assert-upper      1154
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1104
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8690
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1507
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            512952)
(assert (< $k@543@01 $k@501@01))
(assert (<= $Perm.No (- $k@501@01 $k@543@01)))
(assert (<= (- $k@501@01 $k@543@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@501@01 $k@543@01)) (not (= diz@498@01 $Ref.null))))
; [eval] diz.Write_b_m != null
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1737
;  :arith-assert-upper      1156
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1105
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8693
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1508
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513160
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1737
;  :arith-assert-upper      1156
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1106
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8693
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1509
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513208)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1737
;  :arith-assert-upper      1156
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1107
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8693
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1510
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513256)
; [eval] |diz.Write_b_m.Main_process_state| == 3
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1737
;  :arith-assert-upper      1156
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1108
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8693
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1511
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513304)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1737
;  :arith-assert-upper      1156
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1109
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8693
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1512
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513352)
; [eval] |diz.Write_b_m.Main_event_state| == 3
; [eval] |diz.Write_b_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1737
;  :arith-assert-upper      1156
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1110
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8693
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1513
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513400
;  :time                    0.00)
; [eval] (forall i__52: Int :: { diz.Write_b_m.Main_process_state[i__52] } 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|)
(declare-const i__52@544@01 Int)
(push) ; 4
; [eval] 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state|
; [eval] 0 <= i__52
(push) ; 5
; [then-branch: 185 | 0 <= i__52@544@01 | live]
; [else-branch: 185 | !(0 <= i__52@544@01) | live]
(push) ; 6
; [then-branch: 185 | 0 <= i__52@544@01]
(assert (<= 0 i__52@544@01))
; [eval] i__52 < |diz.Write_b_m.Main_process_state|
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1738
;  :arith-assert-upper      1156
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8694
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1514
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513501)
(pop) ; 6
(push) ; 6
; [else-branch: 185 | !(0 <= i__52@544@01)]
(assert (not (<= 0 i__52@544@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 186 | i__52@544@01 < |First:(Second:(Second:(Second:($t@516@01))))| && 0 <= i__52@544@01 | live]
; [else-branch: 186 | !(i__52@544@01 < |First:(Second:(Second:(Second:($t@516@01))))| && 0 <= i__52@544@01) | live]
(push) ; 6
; [then-branch: 186 | i__52@544@01 < |First:(Second:(Second:(Second:($t@516@01))))| && 0 <= i__52@544@01]
(assert (and
  (<
    i__52@544@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
  (<= 0 i__52@544@01)))
; [eval] diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__52] == -1
; [eval] diz.Write_b_m.Main_process_state[i__52]
(push) ; 7
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1739
;  :arith-assert-upper      1157
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1112
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8696
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1515
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513658)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__52@544@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      646
;  :arith-assert-lower      1739
;  :arith-assert-upper      1157
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        913
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1112
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8696
;  :mk-clause               4290
;  :num-allocs              8105774
;  :num-checks              1516
;  :propagations            1658
;  :quant-instantiations    623
;  :rlimit-count            513667)
; [eval] -1
(push) ; 7
; [then-branch: 187 | First:(Second:(Second:(Second:($t@516@01))))[i__52@544@01] == -1 | live]
; [else-branch: 187 | First:(Second:(Second:(Second:($t@516@01))))[i__52@544@01] != -1 | live]
(push) ; 8
; [then-branch: 187 | First:(Second:(Second:(Second:($t@516@01))))[i__52@544@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
    i__52@544@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 187 | First:(Second:(Second:(Second:($t@516@01))))[i__52@544@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
      i__52@544@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__52]
; [eval] diz.Write_b_m.Main_process_state[i__52]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      647
;  :arith-assert-lower      1742
;  :arith-assert-upper      1158
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8702
;  :mk-clause               4294
;  :num-allocs              8105774
;  :num-checks              1517
;  :propagations            1660
;  :quant-instantiations    624
;  :rlimit-count            513938)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__52@544@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      647
;  :arith-assert-lower      1742
;  :arith-assert-upper      1158
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8702
;  :mk-clause               4294
;  :num-allocs              8105774
;  :num-checks              1518
;  :propagations            1660
;  :quant-instantiations    624
;  :rlimit-count            513947)
(push) ; 9
; [then-branch: 188 | 0 <= First:(Second:(Second:(Second:($t@516@01))))[i__52@544@01] | live]
; [else-branch: 188 | !(0 <= First:(Second:(Second:(Second:($t@516@01))))[i__52@544@01]) | live]
(push) ; 10
; [then-branch: 188 | 0 <= First:(Second:(Second:(Second:($t@516@01))))[i__52@544@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
    i__52@544@01)))
; [eval] diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__52]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      647
;  :arith-assert-lower      1742
;  :arith-assert-upper      1158
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1114
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8702
;  :mk-clause               4294
;  :num-allocs              8105774
;  :num-checks              1519
;  :propagations            1660
;  :quant-instantiations    624
;  :rlimit-count            514100)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__52@544@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      647
;  :arith-assert-lower      1742
;  :arith-assert-upper      1158
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1114
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8702
;  :mk-clause               4294
;  :num-allocs              8105774
;  :num-checks              1520
;  :propagations            1660
;  :quant-instantiations    624
;  :rlimit-count            514109)
; [eval] |diz.Write_b_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      647
;  :arith-assert-lower      1742
;  :arith-assert-upper      1158
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1115
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4287
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8702
;  :mk-clause               4294
;  :num-allocs              8105774
;  :num-checks              1521
;  :propagations            1660
;  :quant-instantiations    624
;  :rlimit-count            514157
;  :time                    0.00)
(pop) ; 10
(push) ; 10
; [else-branch: 188 | !(0 <= First:(Second:(Second:(Second:($t@516@01))))[i__52@544@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
      i__52@544@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 186 | !(i__52@544@01 < |First:(Second:(Second:(Second:($t@516@01))))| && 0 <= i__52@544@01)]
(assert (not
  (and
    (<
      i__52@544@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
    (<= 0 i__52@544@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__52@544@01 Int)) (!
  (implies
    (and
      (<
        i__52@544@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
      (<= 0 i__52@544@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
          i__52@544@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
            i__52@544@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
            i__52@544@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
    i__52@544@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      649
;  :arith-assert-lower      1743
;  :arith-assert-upper      1159
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        915
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1116
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8710
;  :mk-clause               4308
;  :num-allocs              8105774
;  :num-checks              1522
;  :propagations            1662
;  :quant-instantiations    625
;  :rlimit-count            514603)
(assert (forall ((i__52@544@01 Int)) (!
  (implies
    (and
      (<
        i__52@544@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))
      (<= 0 i__52@544@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
          i__52@544@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
            i__52@544@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
            i__52@544@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))
    i__52@544@01))
  :qid |prog.l<no position>|)))
(declare-const $k@545@01 $Perm)
(assert ($Perm.isReadVar $k@545@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1745
;  :arith-assert-upper      1160
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1117
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8715
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1523
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515162)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@545@01 $Perm.No) (< $Perm.No $k@545@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1745
;  :arith-assert-upper      1160
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1118
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8715
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1524
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515212)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@518@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1745
;  :arith-assert-upper      1160
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1118
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8715
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1525
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515223)
(assert (< $k@545@01 $k@518@01))
(assert (<= $Perm.No (- $k@518@01 $k@545@01)))
(assert (<= (- $k@518@01 $k@545@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@518@01 $k@545@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
; [eval] diz.Write_b_m.Main_nand != null
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1747
;  :arith-assert-upper      1161
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1119
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8718
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1526
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515437)
(push) ; 4
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1747
;  :arith-assert-upper      1161
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1120
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8718
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1527
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515485)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1747
;  :arith-assert-upper      1161
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1121
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8718
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1528
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515533)
(push) ; 4
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1747
;  :arith-assert-upper      1161
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1122
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8718
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1529
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515581
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1747
;  :arith-assert-upper      1161
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1123
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8718
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1530
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515629)
(push) ; 4
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1747
;  :arith-assert-upper      1161
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1124
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8718
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1531
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515677)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1747
;  :arith-assert-upper      1161
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8718
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1532
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515725
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      650
;  :arith-assert-lower      1747
;  :arith-assert-upper      1161
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        916
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1126
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8718
;  :mk-clause               4310
;  :num-allocs              8105774
;  :num-checks              1533
;  :propagations            1663
;  :quant-instantiations    625
;  :rlimit-count            515773)
(declare-const $k@546@01 $Perm)
(assert ($Perm.isReadVar $k@546@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      651
;  :arith-assert-lower      1749
;  :arith-assert-upper      1162
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        917
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1127
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8722
;  :mk-clause               4312
;  :num-allocs              8105774
;  :num-checks              1534
;  :propagations            1664
;  :quant-instantiations    625
;  :rlimit-count            515970)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@546@01 $Perm.No) (< $Perm.No $k@546@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      651
;  :arith-assert-lower      1749
;  :arith-assert-upper      1162
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        917
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8722
;  :mk-clause               4312
;  :num-allocs              8105774
;  :num-checks              1535
;  :propagations            1664
;  :quant-instantiations    625
;  :rlimit-count            516020)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@519@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      651
;  :arith-assert-lower      1749
;  :arith-assert-upper      1162
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        917
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8722
;  :mk-clause               4312
;  :num-allocs              8105774
;  :num-checks              1536
;  :propagations            1664
;  :quant-instantiations    625
;  :rlimit-count            516031)
(assert (< $k@546@01 $k@519@01))
(assert (<= $Perm.No (- $k@519@01 $k@546@01)))
(assert (<= (- $k@519@01 $k@546@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@519@01 $k@546@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_write_a != null
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      651
;  :arith-assert-lower      1750
;  :arith-assert-upper      1164
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        917
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1129
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8725
;  :mk-clause               4312
;  :num-allocs              8105774
;  :num-checks              1537
;  :propagations            1664
;  :quant-instantiations    625
;  :rlimit-count            516239)
(push) ; 4
(assert (not (< $Perm.No $k@519@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      651
;  :arith-assert-lower      1750
;  :arith-assert-upper      1164
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        917
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1130
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8725
;  :mk-clause               4312
;  :num-allocs              8105774
;  :num-checks              1538
;  :propagations            1664
;  :quant-instantiations    625
;  :rlimit-count            516287)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      651
;  :arith-assert-lower      1750
;  :arith-assert-upper      1164
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        917
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1131
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8725
;  :mk-clause               4312
;  :num-allocs              8105774
;  :num-checks              1539
;  :propagations            1664
;  :quant-instantiations    625
;  :rlimit-count            516335)
(push) ; 4
(assert (not (< $Perm.No $k@519@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      651
;  :arith-assert-lower      1750
;  :arith-assert-upper      1164
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        917
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1132
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8725
;  :mk-clause               4312
;  :num-allocs              8105774
;  :num-checks              1540
;  :propagations            1664
;  :quant-instantiations    625
;  :rlimit-count            516383)
(declare-const $k@547@01 $Perm)
(assert ($Perm.isReadVar $k@547@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      652
;  :arith-assert-lower      1752
;  :arith-assert-upper      1165
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        918
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1133
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8729
;  :mk-clause               4314
;  :num-allocs              8105774
;  :num-checks              1541
;  :propagations            1665
;  :quant-instantiations    625
;  :rlimit-count            516580
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@547@01 $Perm.No) (< $Perm.No $k@547@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14651
;  :arith-add-rows          167
;  :arith-assert-diseq      652
;  :arith-assert-lower      1752
;  :arith-assert-upper      1165
;  :arith-bound-prop        110
;  :arith-conflicts         169
;  :arith-eq-adapter        918
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1134
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4305
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8729
;  :mk-clause               4314
;  :num-allocs              8105774
;  :num-checks              1542
;  :propagations            1665
;  :quant-instantiations    625
;  :rlimit-count            516630)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@502@01 $k@520@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          167
;  :arith-assert-diseq      652
;  :arith-assert-lower      1752
;  :arith-assert-upper      1166
;  :arith-bound-prop        110
;  :arith-conflicts         170
;  :arith-eq-adapter        919
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1135
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8731
;  :mk-clause               4316
;  :num-allocs              8105774
;  :num-checks              1543
;  :propagations            1666
;  :quant-instantiations    625
;  :rlimit-count            516692)
(assert (< $k@547@01 (+ $k@502@01 $k@520@01)))
(assert (<= $Perm.No (- (+ $k@502@01 $k@520@01) $k@547@01)))
(assert (<= (- (+ $k@502@01 $k@520@01) $k@547@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@502@01 $k@520@01) $k@547@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_write_b != null
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      652
;  :arith-assert-lower      1754
;  :arith-assert-upper      1167
;  :arith-bound-prop        110
;  :arith-conflicts         170
;  :arith-eq-adapter        919
;  :arith-fixed-eqs         264
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1136
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8734
;  :mk-clause               4316
;  :num-allocs              8105774
;  :num-checks              1544
;  :propagations            1666
;  :quant-instantiations    625
;  :rlimit-count            516909)
(push) ; 4
(assert (not (< $Perm.No (+ $k@502@01 $k@520@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      652
;  :arith-assert-lower      1754
;  :arith-assert-upper      1168
;  :arith-bound-prop        110
;  :arith-conflicts         171
;  :arith-eq-adapter        919
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1137
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8735
;  :mk-clause               4316
;  :num-allocs              8105774
;  :num-checks              1545
;  :propagations            1666
;  :quant-instantiations    625
;  :rlimit-count            516972)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      652
;  :arith-assert-lower      1754
;  :arith-assert-upper      1168
;  :arith-bound-prop        110
;  :arith-conflicts         171
;  :arith-eq-adapter        919
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1138
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8735
;  :mk-clause               4316
;  :num-allocs              8105774
;  :num-checks              1546
;  :propagations            1666
;  :quant-instantiations    625
;  :rlimit-count            517020)
(push) ; 4
(assert (not (< $Perm.No (+ $k@502@01 $k@520@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      652
;  :arith-assert-lower      1754
;  :arith-assert-upper      1169
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        919
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1139
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8736
;  :mk-clause               4316
;  :num-allocs              8105774
;  :num-checks              1547
;  :propagations            1666
;  :quant-instantiations    625
;  :rlimit-count            517083)
(push) ; 4
(assert (not (= diz@498@01 $t@521@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      652
;  :arith-assert-lower      1754
;  :arith-assert-upper      1169
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        919
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1140
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8737
;  :mk-clause               4316
;  :num-allocs              8105774
;  :num-checks              1548
;  :propagations            1666
;  :quant-instantiations    625
;  :rlimit-count            517143)
(declare-const $k@548@01 $Perm)
(assert ($Perm.isReadVar $k@548@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      653
;  :arith-assert-lower      1756
;  :arith-assert-upper      1170
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        920
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1141
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8741
;  :mk-clause               4318
;  :num-allocs              8105774
;  :num-checks              1549
;  :propagations            1667
;  :quant-instantiations    625
;  :rlimit-count            517339
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@548@01 $Perm.No) (< $Perm.No $k@548@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      653
;  :arith-assert-lower      1756
;  :arith-assert-upper      1170
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        920
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1142
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8741
;  :mk-clause               4318
;  :num-allocs              8105774
;  :num-checks              1550
;  :propagations            1667
;  :quant-instantiations    625
;  :rlimit-count            517389)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@522@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      653
;  :arith-assert-lower      1756
;  :arith-assert-upper      1170
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        920
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1142
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8741
;  :mk-clause               4318
;  :num-allocs              8105774
;  :num-checks              1551
;  :propagations            1667
;  :quant-instantiations    625
;  :rlimit-count            517400)
(assert (< $k@548@01 $k@522@01))
(assert (<= $Perm.No (- $k@522@01 $k@548@01)))
(assert (<= (- $k@522@01 $k@548@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@522@01 $k@548@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))
      $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_read != null
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      653
;  :arith-assert-lower      1758
;  :arith-assert-upper      1171
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        920
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1143
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8744
;  :mk-clause               4318
;  :num-allocs              8105774
;  :num-checks              1552
;  :propagations            1667
;  :quant-instantiations    625
;  :rlimit-count            517614)
(push) ; 4
(assert (not (< $Perm.No $k@522@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      653
;  :arith-assert-lower      1758
;  :arith-assert-upper      1171
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        920
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1144
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8744
;  :mk-clause               4318
;  :num-allocs              8105774
;  :num-checks              1553
;  :propagations            1667
;  :quant-instantiations    625
;  :rlimit-count            517662)
(declare-const $k@549@01 $Perm)
(assert ($Perm.isReadVar $k@549@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1760
;  :arith-assert-upper      1172
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1145
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8748
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1554
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            517858)
(push) ; 4
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1760
;  :arith-assert-upper      1172
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1146
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8748
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1555
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            517906)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@549@01 $Perm.No) (< $Perm.No $k@549@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1760
;  :arith-assert-upper      1172
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8748
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1556
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            517956)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@523@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1760
;  :arith-assert-upper      1172
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8748
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1557
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            517967)
(assert (< $k@549@01 $k@523@01))
(assert (<= $Perm.No (- $k@523@01 $k@549@01)))
(assert (<= (- $k@523@01 $k@549@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@523@01 $k@549@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01))))))))))
      $Ref.null))))
; [eval] diz.Write_b_m.Main_nand.Nand_gate_m == diz.Write_b_m
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1761
;  :arith-assert-upper      1174
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1148
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8751
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1558
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            518181
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@518@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1761
;  :arith-assert-upper      1174
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1149
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8751
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1559
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            518229)
(push) ; 4
(assert (not (< $Perm.No $k@523@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1761
;  :arith-assert-upper      1174
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1150
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8751
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1560
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            518277)
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1761
;  :arith-assert-upper      1174
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1151
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8751
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1561
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            518325)
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(push) ; 4
(assert (not (< $Perm.No $k@501@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1761
;  :arith-assert-upper      1174
;  :arith-bound-prop        110
;  :arith-conflicts         172
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         266
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1152
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8751
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1562
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            518373)
(push) ; 4
(assert (not (< $Perm.No (+ $k@502@01 $k@520@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1761
;  :arith-assert-upper      1175
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1153
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8752
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1563
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            518436)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@521@01 diz@498@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          168
;  :arith-assert-diseq      654
;  :arith-assert-lower      1761
;  :arith-assert-upper      1175
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        921
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1154
;  :datatype-accessor-ax    634
;  :datatype-constructor-ax 2788
;  :datatype-occurs-check   1092
;  :datatype-splits         2157
;  :decisions               2976
;  :del-clause              4307
;  :final-checks            397
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.20
;  :minimized-lits          2
;  :mk-bool-var             8752
;  :mk-clause               4320
;  :num-allocs              8105774
;  :num-checks              1564
;  :propagations            1668
;  :quant-instantiations    625
;  :rlimit-count            518488)
(assert (= $t@521@01 diz@498@01))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@536@01 $Perm.Write))
(assert ($Perm.isReadVar $k@538@01 $Perm.Write))
(assert ($Perm.isReadVar $k@539@01 $Perm.Write))
(assert ($Perm.isReadVar $k@540@01 $Perm.Write))
(assert ($Perm.isReadVar $k@541@01 $Perm.Write))
(assert ($Perm.isReadVar $k@542@01 $Perm.Write))
(assert (= $t@535@01 ($Snap.combine ($Snap.first $t@535@01) ($Snap.second $t@535@01))))
(assert (<= $Perm.No $k@536@01))
(assert (<= $k@536@01 $Perm.Write))
(assert (implies (< $Perm.No $k@536@01) (not (= diz@498@01 $Ref.null))))
(assert (=
  ($Snap.second $t@535@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@535@01))
    ($Snap.second ($Snap.second $t@535@01)))))
(assert (= ($Snap.first ($Snap.second $t@535@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@535@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@535@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@535@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
  $Snap.unit))
(assert (forall ((i__52@537@01 Int)) (!
  (implies
    (and
      (<
        i__52@537@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
      (<= 0 i__52@537@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
          i__52@537@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
            i__52@537@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
            i__52@537@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
    i__52@537@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))
(assert (<= $Perm.No $k@538@01))
(assert (<= $k@538@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@538@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))
(assert (<= $Perm.No $k@539@01))
(assert (<= $k@539@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@539@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))
(assert (<= $Perm.No $k@540@01))
(assert (<= $k@540@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@540@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
(assert (<= $Perm.No $k@541@01))
(assert (<= $k@541@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@541@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))))
(assert (<= $Perm.No $k@542@01))
(assert (<= $k@542@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@542@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
  diz@498@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15073
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1154
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8904
;  :mk-clause               4334
;  :num-allocs              8561823
;  :num-checks              1567
;  :propagations            1674
;  :quant-instantiations    635
;  :rlimit-count            525351
;  :time                    0.01)
; [then-branch: 189 | True | live]
; [else-branch: 189 | False | dead]
(push) ; 5
; [then-branch: 189 | True]
; [exec]
; __flatten_47__43 := diz.Write_b_m
(push) ; 6
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15073
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1155
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8904
;  :mk-clause               4334
;  :num-allocs              8561823
;  :num-checks              1568
;  :propagations            1674
;  :quant-instantiations    635
;  :rlimit-count            525404)
(declare-const __flatten_47__43@550@01 $Ref)
(assert (= __flatten_47__43@550@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))
; [exec]
; __flatten_46__42 := __flatten_47__43.Main_nand
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) __flatten_47__43@550@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15074
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1155
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8905
;  :mk-clause               4334
;  :num-allocs              8561823
;  :num-checks              1569
;  :propagations            1674
;  :quant-instantiations    635
;  :rlimit-count            525472)
(push) ; 6
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15074
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1156
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8905
;  :mk-clause               4334
;  :num-allocs              8561823
;  :num-checks              1570
;  :propagations            1674
;  :quant-instantiations    635
;  :rlimit-count            525520)
(declare-const __flatten_46__42@551@01 $Ref)
(assert (=
  __flatten_46__42@551@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))
; [exec]
; __flatten_48__44 := diz.Write_b_b
(declare-const __flatten_48__44@552@01 Bool)
(assert (=
  __flatten_48__44@552@01
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))
; [exec]
; __flatten_46__42.Nand_gate_B := __flatten_48__44
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
  __flatten_46__42@551@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15077
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1156
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8911
;  :mk-clause               4340
;  :num-allocs              8561823
;  :num-checks              1571
;  :propagations            1674
;  :quant-instantiations    637
;  :rlimit-count            525874)
(assert (not (= __flatten_46__42@551@01 $Ref.null)))
; [exec]
; __flatten_49__45 := !diz.Write_b_b
; [eval] !diz.Write_b_b
(declare-const __flatten_49__45@553@01 Bool)
(assert (=
  __flatten_49__45@553@01
  (not
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
; [exec]
; diz.Write_b_b := __flatten_49__45
; [exec]
; __flatten_50__46 := diz.Write_b_m
(push) ; 6
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15078
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8913
;  :mk-clause               4342
;  :num-allocs              8561823
;  :num-checks              1572
;  :propagations            1674
;  :quant-instantiations    637
;  :rlimit-count            526024
;  :time                    0.00)
(declare-const __flatten_50__46@554@01 $Ref)
(assert (= __flatten_50__46@554@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))
; [exec]
; __flatten_52__48 := diz.Write_b_m
(push) ; 6
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15079
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1158
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8914
;  :mk-clause               4342
;  :num-allocs              8561823
;  :num-checks              1573
;  :propagations            1674
;  :quant-instantiations    637
;  :rlimit-count            526109
;  :time                    0.00)
(declare-const __flatten_52__48@555@01 $Ref)
(assert (= __flatten_52__48@555@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))
; [exec]
; __flatten_51__47 := __flatten_52__48.Main_process_state[1 := 1]
; [eval] __flatten_52__48.Main_process_state[1 := 1]
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) __flatten_52__48@555@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15080
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1158
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8915
;  :mk-clause               4342
;  :num-allocs              8561823
;  :num-checks              1574
;  :propagations            1674
;  :quant-instantiations    637
;  :rlimit-count            526157)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15080
;  :arith-add-rows          168
;  :arith-assert-diseq      660
;  :arith-assert-lower      1777
;  :arith-assert-upper      1189
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        929
;  :arith-fixed-eqs         267
;  :arith-offset-eqs        9
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               1158
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8915
;  :mk-clause               4342
;  :num-allocs              8561823
;  :num-checks              1575
;  :propagations            1674
;  :quant-instantiations    637
;  :rlimit-count            526172)
(declare-const __flatten_51__47@556@01 Seq<Int>)
(assert (Seq_equal
  __flatten_51__47@556@01
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))
    1
    1)))
; [exec]
; __flatten_50__46.Main_process_state := __flatten_51__47
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) __flatten_50__46@554@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15091
;  :arith-add-rows          171
;  :arith-assert-diseq      661
;  :arith-assert-lower      1781
;  :arith-assert-upper      1191
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        932
;  :arith-fixed-eqs         269
;  :arith-offset-eqs        9
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1158
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8939
;  :mk-clause               4363
;  :num-allocs              8561823
;  :num-checks              1576
;  :propagations            1683
;  :quant-instantiations    642
;  :rlimit-count            526655
;  :time                    0.00)
(assert (not (= __flatten_50__46@554@01 $Ref.null)))
; [exec]
; __flatten_53__49 := diz.Write_b_m
(push) ; 6
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15092
;  :arith-add-rows          171
;  :arith-assert-diseq      661
;  :arith-assert-lower      1781
;  :arith-assert-upper      1191
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        932
;  :arith-fixed-eqs         269
;  :arith-offset-eqs        9
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1159
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8940
;  :mk-clause               4363
;  :num-allocs              8561823
;  :num-checks              1577
;  :propagations            1683
;  :quant-instantiations    642
;  :rlimit-count            526759)
(declare-const __flatten_53__49@557@01 $Ref)
(assert (= __flatten_53__49@557@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))
; [exec]
; __flatten_55__51 := diz.Write_b_m
(push) ; 6
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15093
;  :arith-add-rows          171
;  :arith-assert-diseq      661
;  :arith-assert-lower      1781
;  :arith-assert-upper      1191
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        932
;  :arith-fixed-eqs         269
;  :arith-offset-eqs        9
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8941
;  :mk-clause               4363
;  :num-allocs              8561823
;  :num-checks              1578
;  :propagations            1683
;  :quant-instantiations    642
;  :rlimit-count            526844
;  :time                    0.00)
(declare-const __flatten_55__51@558@01 $Ref)
(assert (= __flatten_55__51@558@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))
; [exec]
; __flatten_54__50 := __flatten_55__51.Main_event_state[1 := 3000]
; [eval] __flatten_55__51.Main_event_state[1 := 3000]
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) __flatten_55__51@558@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15094
;  :arith-add-rows          171
;  :arith-assert-diseq      661
;  :arith-assert-lower      1781
;  :arith-assert-upper      1191
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        932
;  :arith-fixed-eqs         269
;  :arith-offset-eqs        9
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8942
;  :mk-clause               4363
;  :num-allocs              8561823
;  :num-checks              1579
;  :propagations            1683
;  :quant-instantiations    642
;  :rlimit-count            526892
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15094
;  :arith-add-rows          171
;  :arith-assert-diseq      661
;  :arith-assert-lower      1781
;  :arith-assert-upper      1191
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        932
;  :arith-fixed-eqs         269
;  :arith-offset-eqs        9
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8942
;  :mk-clause               4363
;  :num-allocs              8561823
;  :num-checks              1580
;  :propagations            1683
;  :quant-instantiations    642
;  :rlimit-count            526907)
(declare-const __flatten_54__50@559@01 Seq<Int>)
(assert (Seq_equal
  __flatten_54__50@559@01
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))
    1
    3000)))
; [exec]
; __flatten_53__49.Main_event_state := __flatten_54__50
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) __flatten_53__49@557@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15104
;  :arith-add-rows          174
;  :arith-assert-diseq      662
;  :arith-assert-lower      1785
;  :arith-assert-upper      1193
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        935
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8965
;  :mk-clause               4384
;  :num-allocs              8561823
;  :num-checks              1581
;  :propagations            1692
;  :quant-instantiations    647
;  :rlimit-count            527405)
(assert (not (= __flatten_53__49@557@01 $Ref.null)))
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 ($Snap.combine ($Snap.first $t@560@01) ($Snap.second $t@560@01))))
(declare-const $k@561@01 $Perm)
(assert ($Perm.isReadVar $k@561@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@561@01 $Perm.No) (< $Perm.No $k@561@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15109
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1787
;  :arith-assert-upper      1194
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        936
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1161
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8970
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1582
;  :propagations            1693
;  :quant-instantiations    647
;  :rlimit-count            527716)
(assert (<= $Perm.No $k@561@01))
(assert (<= $k@561@01 $Perm.Write))
(assert (implies (< $Perm.No $k@561@01) (not (= diz@498@01 $Ref.null))))
(assert (=
  ($Snap.second $t@560@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@560@01))
    ($Snap.second ($Snap.second $t@560@01)))))
(assert (= ($Snap.first ($Snap.second $t@560@01)) $Snap.unit))
; [eval] diz.Write_b_m != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15115
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1787
;  :arith-assert-upper      1195
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        936
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    659
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8973
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1583
;  :propagations            1693
;  :quant-instantiations    647
;  :rlimit-count            527959)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@560@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@560@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15121
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1787
;  :arith-assert-upper      1195
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        936
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1163
;  :datatype-accessor-ax    660
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8976
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1584
;  :propagations            1693
;  :quant-instantiations    648
;  :rlimit-count            528231)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@560@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15126
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1787
;  :arith-assert-upper      1195
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        936
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1164
;  :datatype-accessor-ax    661
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8977
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1585
;  :propagations            1693
;  :quant-instantiations    648
;  :rlimit-count            528408)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  $Snap.unit))
; [eval] |diz.Write_b_m.Main_process_state| == 3
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15132
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1787
;  :arith-assert-upper      1195
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        936
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1165
;  :datatype-accessor-ax    662
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8979
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1586
;  :propagations            1693
;  :quant-instantiations    648
;  :rlimit-count            528627
;  :time                    0.01)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15139
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1789
;  :arith-assert-upper      1196
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        937
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1166
;  :datatype-accessor-ax    663
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8985
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1587
;  :propagations            1693
;  :quant-instantiations    650
;  :rlimit-count            528956)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
  $Snap.unit))
; [eval] |diz.Write_b_m.Main_event_state| == 3
; [eval] |diz.Write_b_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15145
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1789
;  :arith-assert-upper      1196
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        937
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1167
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8987
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1588
;  :propagations            1693
;  :quant-instantiations    650
;  :rlimit-count            529195)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
  $Snap.unit))
; [eval] (forall i__53: Int :: { diz.Write_b_m.Main_process_state[i__53] } 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|)
(declare-const i__53@562@01 Int)
(push) ; 7
; [eval] 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state|
; [eval] 0 <= i__53
(push) ; 8
; [then-branch: 190 | 0 <= i__53@562@01 | live]
; [else-branch: 190 | !(0 <= i__53@562@01) | live]
(push) ; 9
; [then-branch: 190 | 0 <= i__53@562@01]
(assert (<= 0 i__53@562@01))
; [eval] i__53 < |diz.Write_b_m.Main_process_state|
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15153
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1792
;  :arith-assert-upper      1197
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        938
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1168
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8995
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1589
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            529633)
(pop) ; 9
(push) ; 9
; [else-branch: 190 | !(0 <= i__53@562@01)]
(assert (not (<= 0 i__53@562@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 191 | i__53@562@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i__53@562@01 | live]
; [else-branch: 191 | !(i__53@562@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i__53@562@01) | live]
(push) ; 9
; [then-branch: 191 | i__53@562@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i__53@562@01]
(assert (and
  (<
    i__53@562@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
  (<= 0 i__53@562@01)))
; [eval] diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__53] == -1
; [eval] diz.Write_b_m.Main_process_state[i__53]
(push) ; 10
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15153
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1793
;  :arith-assert-upper      1198
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        938
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1169
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8997
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1590
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            529790)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__53@562@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15153
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1793
;  :arith-assert-upper      1198
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        938
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1169
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8997
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1591
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            529799)
; [eval] -1
(push) ; 10
; [then-branch: 192 | First:(Second:(Second:(Second:($t@560@01))))[i__53@562@01] == -1 | live]
; [else-branch: 192 | First:(Second:(Second:(Second:($t@560@01))))[i__53@562@01] != -1 | live]
(push) ; 11
; [then-branch: 192 | First:(Second:(Second:(Second:($t@560@01))))[i__53@562@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i__53@562@01)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 192 | First:(Second:(Second:(Second:($t@560@01))))[i__53@562@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      i__53@562@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__53]
; [eval] diz.Write_b_m.Main_process_state[i__53]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15153
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1793
;  :arith-assert-upper      1198
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        938
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1170
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8998
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1592
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            530013)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__53@562@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15153
;  :arith-add-rows          174
;  :arith-assert-diseq      663
;  :arith-assert-lower      1793
;  :arith-assert-upper      1198
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        938
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1170
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             8998
;  :mk-clause               4386
;  :num-allocs              8561823
;  :num-checks              1593
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            530022)
(push) ; 12
; [then-branch: 193 | 0 <= First:(Second:(Second:(Second:($t@560@01))))[i__53@562@01] | live]
; [else-branch: 193 | !(0 <= First:(Second:(Second:(Second:($t@560@01))))[i__53@562@01]) | live]
(push) ; 13
; [then-branch: 193 | 0 <= First:(Second:(Second:(Second:($t@560@01))))[i__53@562@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i__53@562@01)))
; [eval] diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__53]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15153
;  :arith-add-rows          174
;  :arith-assert-diseq      664
;  :arith-assert-lower      1796
;  :arith-assert-upper      1198
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        939
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1171
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9001
;  :mk-clause               4387
;  :num-allocs              8561823
;  :num-checks              1594
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            530184)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__53@562@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15153
;  :arith-add-rows          174
;  :arith-assert-diseq      664
;  :arith-assert-lower      1796
;  :arith-assert-upper      1198
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        939
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1171
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9001
;  :mk-clause               4387
;  :num-allocs              8561823
;  :num-checks              1595
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            530193)
; [eval] |diz.Write_b_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15153
;  :arith-add-rows          174
;  :arith-assert-diseq      664
;  :arith-assert-lower      1796
;  :arith-assert-upper      1198
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        939
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1172
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4321
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9001
;  :mk-clause               4387
;  :num-allocs              8561823
;  :num-checks              1596
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            530241)
(pop) ; 13
(push) ; 13
; [else-branch: 193 | !(0 <= First:(Second:(Second:(Second:($t@560@01))))[i__53@562@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      i__53@562@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 191 | !(i__53@562@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i__53@562@01)]
(assert (not
  (and
    (<
      i__53@562@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
    (<= 0 i__53@562@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__53@562@01 Int)) (!
  (implies
    (and
      (<
        i__53@562@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
      (<= 0 i__53@562@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          i__53@562@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i__53@562@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i__53@562@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i__53@562@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15158
;  :arith-add-rows          174
;  :arith-assert-diseq      664
;  :arith-assert-lower      1796
;  :arith-assert-upper      1198
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        939
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    666
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9003
;  :mk-clause               4387
;  :num-allocs              8561823
;  :num-checks              1597
;  :propagations            1693
;  :quant-instantiations    652
;  :rlimit-count            530866)
(declare-const $k@563@01 $Perm)
(assert ($Perm.isReadVar $k@563@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@563@01 $Perm.No) (< $Perm.No $k@563@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15158
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1199
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    666
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9007
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1598
;  :propagations            1694
;  :quant-instantiations    652
;  :rlimit-count            531064)
(assert (<= $Perm.No $k@563@01))
(assert (<= $k@563@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@563@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15164
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1175
;  :datatype-accessor-ax    667
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9010
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1599
;  :propagations            1694
;  :quant-instantiations    652
;  :rlimit-count            531387
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15164
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1176
;  :datatype-accessor-ax    667
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9010
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1600
;  :propagations            1694
;  :quant-instantiations    652
;  :rlimit-count            531435
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15170
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1177
;  :datatype-accessor-ax    668
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9013
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1601
;  :propagations            1694
;  :quant-instantiations    653
;  :rlimit-count            531791)
(push) ; 7
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15170
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1178
;  :datatype-accessor-ax    668
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9013
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1602
;  :propagations            1694
;  :quant-instantiations    653
;  :rlimit-count            531839)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15175
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1179
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9014
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1603
;  :propagations            1694
;  :quant-instantiations    653
;  :rlimit-count            532096)
(push) ; 7
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15175
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1180
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9014
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1604
;  :propagations            1694
;  :quant-instantiations    653
;  :rlimit-count            532144)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15180
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1181
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9015
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1605
;  :propagations            1694
;  :quant-instantiations    653
;  :rlimit-count            532411)
(push) ; 7
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15180
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9015
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1606
;  :propagations            1694
;  :quant-instantiations    653
;  :rlimit-count            532459
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15185
;  :arith-add-rows          174
;  :arith-assert-diseq      665
;  :arith-assert-lower      1798
;  :arith-assert-upper      1200
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        940
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1183
;  :datatype-accessor-ax    671
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9016
;  :mk-clause               4389
;  :num-allocs              8561823
;  :num-checks              1607
;  :propagations            1694
;  :quant-instantiations    653
;  :rlimit-count            532736
;  :time                    0.01)
(declare-const $k@564@01 $Perm)
(assert ($Perm.isReadVar $k@564@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@564@01 $Perm.No) (< $Perm.No $k@564@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15185
;  :arith-add-rows          174
;  :arith-assert-diseq      666
;  :arith-assert-lower      1800
;  :arith-assert-upper      1201
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        941
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1184
;  :datatype-accessor-ax    671
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9020
;  :mk-clause               4391
;  :num-allocs              8561823
;  :num-checks              1608
;  :propagations            1695
;  :quant-instantiations    653
;  :rlimit-count            532934)
(assert (<= $Perm.No $k@564@01))
(assert (<= $k@564@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@564@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15191
;  :arith-add-rows          174
;  :arith-assert-diseq      666
;  :arith-assert-lower      1800
;  :arith-assert-upper      1202
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        941
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1185
;  :datatype-accessor-ax    672
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9023
;  :mk-clause               4391
;  :num-allocs              8561823
;  :num-checks              1609
;  :propagations            1695
;  :quant-instantiations    653
;  :rlimit-count            533307)
(push) ; 7
(assert (not (< $Perm.No $k@564@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15191
;  :arith-add-rows          174
;  :arith-assert-diseq      666
;  :arith-assert-lower      1800
;  :arith-assert-upper      1202
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        941
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1186
;  :datatype-accessor-ax    672
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9023
;  :mk-clause               4391
;  :num-allocs              8561823
;  :num-checks              1610
;  :propagations            1695
;  :quant-instantiations    653
;  :rlimit-count            533355)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15197
;  :arith-add-rows          174
;  :arith-assert-diseq      666
;  :arith-assert-lower      1800
;  :arith-assert-upper      1202
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        941
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1187
;  :datatype-accessor-ax    673
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9026
;  :mk-clause               4391
;  :num-allocs              8561823
;  :num-checks              1611
;  :propagations            1695
;  :quant-instantiations    654
;  :rlimit-count            533765)
(push) ; 7
(assert (not (< $Perm.No $k@564@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15197
;  :arith-add-rows          174
;  :arith-assert-diseq      666
;  :arith-assert-lower      1800
;  :arith-assert-upper      1202
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        941
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1188
;  :datatype-accessor-ax    673
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9026
;  :mk-clause               4391
;  :num-allocs              8561823
;  :num-checks              1612
;  :propagations            1695
;  :quant-instantiations    654
;  :rlimit-count            533813)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15202
;  :arith-add-rows          174
;  :arith-assert-diseq      666
;  :arith-assert-lower      1800
;  :arith-assert-upper      1202
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        941
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1189
;  :datatype-accessor-ax    674
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9027
;  :mk-clause               4391
;  :num-allocs              8561823
;  :num-checks              1613
;  :propagations            1695
;  :quant-instantiations    654
;  :rlimit-count            534120)
(declare-const $k@565@01 $Perm)
(assert ($Perm.isReadVar $k@565@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@565@01 $Perm.No) (< $Perm.No $k@565@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15202
;  :arith-add-rows          174
;  :arith-assert-diseq      667
;  :arith-assert-lower      1802
;  :arith-assert-upper      1203
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        942
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1190
;  :datatype-accessor-ax    674
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9031
;  :mk-clause               4393
;  :num-allocs              8561823
;  :num-checks              1614
;  :propagations            1696
;  :quant-instantiations    654
;  :rlimit-count            534319)
(assert (<= $Perm.No $k@565@01))
(assert (<= $k@565@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@565@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15208
;  :arith-add-rows          174
;  :arith-assert-diseq      667
;  :arith-assert-lower      1802
;  :arith-assert-upper      1204
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        942
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1191
;  :datatype-accessor-ax    675
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9034
;  :mk-clause               4393
;  :num-allocs              8561823
;  :num-checks              1615
;  :propagations            1696
;  :quant-instantiations    654
;  :rlimit-count            534722
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@565@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15208
;  :arith-add-rows          174
;  :arith-assert-diseq      667
;  :arith-assert-lower      1802
;  :arith-assert-upper      1204
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        942
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1192
;  :datatype-accessor-ax    675
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9034
;  :mk-clause               4393
;  :num-allocs              8561823
;  :num-checks              1616
;  :propagations            1696
;  :quant-instantiations    654
;  :rlimit-count            534770)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15214
;  :arith-add-rows          174
;  :arith-assert-diseq      667
;  :arith-assert-lower      1802
;  :arith-assert-upper      1204
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        942
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1193
;  :datatype-accessor-ax    676
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9037
;  :mk-clause               4393
;  :num-allocs              8561823
;  :num-checks              1617
;  :propagations            1696
;  :quant-instantiations    655
;  :rlimit-count            535206)
(push) ; 7
(assert (not (< $Perm.No $k@565@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15214
;  :arith-add-rows          174
;  :arith-assert-diseq      667
;  :arith-assert-lower      1802
;  :arith-assert-upper      1204
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        942
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1194
;  :datatype-accessor-ax    676
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9037
;  :mk-clause               4393
;  :num-allocs              8561823
;  :num-checks              1618
;  :propagations            1696
;  :quant-instantiations    655
;  :rlimit-count            535254)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15219
;  :arith-add-rows          174
;  :arith-assert-diseq      667
;  :arith-assert-lower      1802
;  :arith-assert-upper      1204
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        942
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1195
;  :datatype-accessor-ax    677
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9038
;  :mk-clause               4393
;  :num-allocs              8561823
;  :num-checks              1619
;  :propagations            1696
;  :quant-instantiations    655
;  :rlimit-count            535591)
(declare-const $k@566@01 $Perm)
(assert ($Perm.isReadVar $k@566@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@566@01 $Perm.No) (< $Perm.No $k@566@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15219
;  :arith-add-rows          174
;  :arith-assert-diseq      668
;  :arith-assert-lower      1804
;  :arith-assert-upper      1205
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        943
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1196
;  :datatype-accessor-ax    677
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9042
;  :mk-clause               4395
;  :num-allocs              8561823
;  :num-checks              1620
;  :propagations            1697
;  :quant-instantiations    655
;  :rlimit-count            535789)
(assert (<= $Perm.No $k@566@01))
(assert (<= $k@566@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@566@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15225
;  :arith-add-rows          174
;  :arith-assert-diseq      668
;  :arith-assert-lower      1804
;  :arith-assert-upper      1206
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        943
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1197
;  :datatype-accessor-ax    678
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9045
;  :mk-clause               4395
;  :num-allocs              8561823
;  :num-checks              1621
;  :propagations            1697
;  :quant-instantiations    655
;  :rlimit-count            536222
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@566@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15225
;  :arith-add-rows          174
;  :arith-assert-diseq      668
;  :arith-assert-lower      1804
;  :arith-assert-upper      1206
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        943
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1198
;  :datatype-accessor-ax    678
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9045
;  :mk-clause               4395
;  :num-allocs              8561823
;  :num-checks              1622
;  :propagations            1697
;  :quant-instantiations    655
;  :rlimit-count            536270)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15231
;  :arith-add-rows          174
;  :arith-assert-diseq      668
;  :arith-assert-lower      1804
;  :arith-assert-upper      1206
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        943
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1199
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9048
;  :mk-clause               4395
;  :num-allocs              8561823
;  :num-checks              1623
;  :propagations            1697
;  :quant-instantiations    656
;  :rlimit-count            536736)
(push) ; 7
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15231
;  :arith-add-rows          174
;  :arith-assert-diseq      668
;  :arith-assert-lower      1804
;  :arith-assert-upper      1206
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        943
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1200
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9048
;  :mk-clause               4395
;  :num-allocs              8561823
;  :num-checks              1624
;  :propagations            1697
;  :quant-instantiations    656
;  :rlimit-count            536784)
(declare-const $k@567@01 $Perm)
(assert ($Perm.isReadVar $k@567@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@567@01 $Perm.No) (< $Perm.No $k@567@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15231
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1207
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1201
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9052
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1625
;  :propagations            1698
;  :quant-instantiations    656
;  :rlimit-count            536983)
(assert (<= $Perm.No $k@567@01))
(assert (<= $k@567@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@567@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand.Nand_gate_m == diz.Write_b_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15237
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1202
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9055
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1626
;  :propagations            1698
;  :quant-instantiations    656
;  :rlimit-count            537436)
(push) ; 7
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15237
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1203
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9055
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1627
;  :propagations            1698
;  :quant-instantiations    656
;  :rlimit-count            537484)
(push) ; 7
(assert (not (< $Perm.No $k@567@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15237
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1204
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9055
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1628
;  :propagations            1698
;  :quant-instantiations    656
;  :rlimit-count            537532)
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15237
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1205
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9055
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1629
;  :propagations            1698
;  :quant-instantiations    656
;  :rlimit-count            537580
;  :time                    0.01)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(push) ; 7
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15242
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1206
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9058
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1630
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538012)
(push) ; 7
(assert (not (< $Perm.No $k@565@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15242
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1207
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9058
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1631
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538060)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  diz@498@01))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] diz.Write_b_m.Main_process_state[1] != -1 || diz.Write_b_m.Main_event_state[1] != -2
; [eval] diz.Write_b_m.Main_process_state[1] != -1
; [eval] diz.Write_b_m.Main_process_state[1]
(push) ; 8
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15245
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1208
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9059
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1632
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538336)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15245
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1208
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9059
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1633
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538351)
; [eval] -1
(push) ; 8
; [then-branch: 194 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1 | live]
; [else-branch: 194 | First:(Second:(Second:(Second:($t@560@01))))[1] == -1 | live]
(push) ; 9
; [then-branch: 194 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      1)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 194 | First:(Second:(Second:(Second:($t@560@01))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    1)
  (- 0 1)))
; [eval] diz.Write_b_m.Main_event_state[1] != -2
; [eval] diz.Write_b_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15246
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1209
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9060
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1634
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538546)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15246
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1209
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9060
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1635
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538561)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !(diz.Write_b_m.Main_process_state[1] != -1 || diz.Write_b_m.Main_event_state[1] != -2)
; [eval] diz.Write_b_m.Main_process_state[1] != -1 || diz.Write_b_m.Main_event_state[1] != -2
; [eval] diz.Write_b_m.Main_process_state[1] != -1
; [eval] diz.Write_b_m.Main_process_state[1]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15246
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1210
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9060
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1636
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538614)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15246
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1210
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9060
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1637
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538629)
; [eval] -1
(push) ; 8
; [then-branch: 195 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1 | live]
; [else-branch: 195 | First:(Second:(Second:(Second:($t@560@01))))[1] == -1 | live]
(push) ; 9
; [then-branch: 195 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      1)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 195 | First:(Second:(Second:(Second:($t@560@01))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    1)
  (- 0 1)))
; [eval] diz.Write_b_m.Main_event_state[1] != -2
; [eval] diz.Write_b_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1211
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9061
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1638
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538820)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      669
;  :arith-assert-lower      1806
;  :arith-assert-upper      1208
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        944
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1211
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4322
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9061
;  :mk-clause               4397
;  :num-allocs              8561823
;  :num-checks              1639
;  :propagations            1698
;  :quant-instantiations    657
;  :rlimit-count            538835)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(declare-const $k@568@01 $Perm)
(assert ($Perm.isReadVar $k@568@01 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@568@01 $Perm.No) (< $Perm.No $k@568@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1808
;  :arith-assert-upper      1209
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        945
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9065
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1640
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539038)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@536@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1808
;  :arith-assert-upper      1209
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        945
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9065
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1641
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539049)
(assert (< $k@568@01 $k@536@01))
(assert (<= $Perm.No (- $k@536@01 $k@568@01)))
(assert (<= (- $k@536@01 $k@568@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@536@01 $k@568@01)) (not (= diz@498@01 $Ref.null))))
; [eval] diz.Write_b_m != null
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1810
;  :arith-assert-upper      1210
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        945
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1213
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9068
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1642
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539263)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1810
;  :arith-assert-upper      1210
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        945
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1214
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9068
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1643
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539311
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1810
;  :arith-assert-upper      1210
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        945
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1215
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9068
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1644
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539359)
; [eval] |diz.Write_b_m.Main_process_state| == 3
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1810
;  :arith-assert-upper      1210
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        945
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1216
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9068
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1645
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539407)
(set-option :timeout 0)
(push) ; 7
(assert (not (= (Seq_length __flatten_51__47@556@01) 3)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15247
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1810
;  :arith-assert-upper      1210
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        946
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1217
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9071
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1646
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539481)
(assert (= (Seq_length __flatten_51__47@556@01) 3))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15248
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1811
;  :arith-assert-upper      1211
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        947
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1218
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9074
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1647
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539580
;  :time                    0.01)
; [eval] |diz.Write_b_m.Main_event_state| == 3
; [eval] |diz.Write_b_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15248
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1811
;  :arith-assert-upper      1211
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        947
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1219
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9074
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1648
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539628)
(set-option :timeout 0)
(push) ; 7
(assert (not (= (Seq_length __flatten_54__50@559@01) 3)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15248
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1811
;  :arith-assert-upper      1211
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        948
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1220
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9077
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1649
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539702)
(assert (= (Seq_length __flatten_54__50@559@01) 3))
; [eval] (forall i__53: Int :: { diz.Write_b_m.Main_process_state[i__53] } 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|)
(declare-const i__53@569@01 Int)
(push) ; 7
; [eval] 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state|
; [eval] 0 <= i__53
(push) ; 8
; [then-branch: 196 | 0 <= i__53@569@01 | live]
; [else-branch: 196 | !(0 <= i__53@569@01) | live]
(push) ; 9
; [then-branch: 196 | 0 <= i__53@569@01]
(assert (<= 0 i__53@569@01))
; [eval] i__53 < |diz.Write_b_m.Main_process_state|
; [eval] |diz.Write_b_m.Main_process_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15249
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1813
;  :arith-assert-upper      1212
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        949
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1221
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9081
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1650
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            539854)
(pop) ; 9
(push) ; 9
; [else-branch: 196 | !(0 <= i__53@569@01)]
(assert (not (<= 0 i__53@569@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 197 | i__53@569@01 < |__flatten_51__47@556@01| && 0 <= i__53@569@01 | live]
; [else-branch: 197 | !(i__53@569@01 < |__flatten_51__47@556@01| && 0 <= i__53@569@01) | live]
(push) ; 9
; [then-branch: 197 | i__53@569@01 < |__flatten_51__47@556@01| && 0 <= i__53@569@01]
(assert (and (< i__53@569@01 (Seq_length __flatten_51__47@556@01)) (<= 0 i__53@569@01)))
; [eval] diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__53] == -1
; [eval] diz.Write_b_m.Main_process_state[i__53]
(push) ; 10
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15249
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1814
;  :arith-assert-upper      1213
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        949
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1222
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9083
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1651
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            540011)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__53@569@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15249
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1814
;  :arith-assert-upper      1213
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        949
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1222
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9083
;  :mk-clause               4399
;  :num-allocs              8561823
;  :num-checks              1652
;  :propagations            1699
;  :quant-instantiations    657
;  :rlimit-count            540020)
; [eval] -1
(push) ; 10
; [then-branch: 198 | __flatten_51__47@556@01[i__53@569@01] == -1 | live]
; [else-branch: 198 | __flatten_51__47@556@01[i__53@569@01] != -1 | live]
(push) ; 11
; [then-branch: 198 | __flatten_51__47@556@01[i__53@569@01] == -1]
(assert (= (Seq_index __flatten_51__47@556@01 i__53@569@01) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 198 | __flatten_51__47@556@01[i__53@569@01] != -1]
(assert (not (= (Seq_index __flatten_51__47@556@01 i__53@569@01) (- 0 1))))
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__53]
; [eval] diz.Write_b_m.Main_process_state[i__53]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15250
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1814
;  :arith-assert-upper      1213
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        950
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1223
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9091
;  :mk-clause               4409
;  :num-allocs              8561823
;  :num-checks              1653
;  :propagations            1699
;  :quant-instantiations    658
;  :rlimit-count            540222)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__53@569@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15250
;  :arith-add-rows          174
;  :arith-assert-diseq      670
;  :arith-assert-lower      1814
;  :arith-assert-upper      1213
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        950
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1223
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9091
;  :mk-clause               4409
;  :num-allocs              8561823
;  :num-checks              1654
;  :propagations            1699
;  :quant-instantiations    658
;  :rlimit-count            540231)
(push) ; 12
; [then-branch: 199 | 0 <= __flatten_51__47@556@01[i__53@569@01] | live]
; [else-branch: 199 | !(0 <= __flatten_51__47@556@01[i__53@569@01]) | live]
(push) ; 13
; [then-branch: 199 | 0 <= __flatten_51__47@556@01[i__53@569@01]]
(assert (<= 0 (Seq_index __flatten_51__47@556@01 i__53@569@01)))
; [eval] diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__53]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15250
;  :arith-add-rows          174
;  :arith-assert-diseq      671
;  :arith-assert-lower      1817
;  :arith-assert-upper      1213
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        951
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1224
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9094
;  :mk-clause               4410
;  :num-allocs              8561823
;  :num-checks              1655
;  :propagations            1699
;  :quant-instantiations    658
;  :rlimit-count            540343
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__53@569@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15250
;  :arith-add-rows          174
;  :arith-assert-diseq      671
;  :arith-assert-lower      1817
;  :arith-assert-upper      1213
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        951
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1224
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9094
;  :mk-clause               4410
;  :num-allocs              8561823
;  :num-checks              1656
;  :propagations            1699
;  :quant-instantiations    658
;  :rlimit-count            540352)
; [eval] |diz.Write_b_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15250
;  :arith-add-rows          174
;  :arith-assert-diseq      671
;  :arith-assert-lower      1817
;  :arith-assert-upper      1213
;  :arith-bound-prop        110
;  :arith-conflicts         173
;  :arith-eq-adapter        951
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        9
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1225
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2860
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3048
;  :del-clause              4334
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9094
;  :mk-clause               4410
;  :num-allocs              8561823
;  :num-checks              1657
;  :propagations            1699
;  :quant-instantiations    658
;  :rlimit-count            540400)
(pop) ; 13
(push) ; 13
; [else-branch: 199 | !(0 <= __flatten_51__47@556@01[i__53@569@01])]
(assert (not (<= 0 (Seq_index __flatten_51__47@556@01 i__53@569@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 197 | !(i__53@569@01 < |__flatten_51__47@556@01| && 0 <= i__53@569@01)]
(assert (not
  (and (< i__53@569@01 (Seq_length __flatten_51__47@556@01)) (<= 0 i__53@569@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__53@569@01 Int)) (!
  (implies
    (and
      (< i__53@569@01 (Seq_length __flatten_51__47@556@01))
      (<= 0 i__53@569@01))
    (or
      (= (Seq_index __flatten_51__47@556@01 i__53@569@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_51__47@556@01 i__53@569@01)
          (Seq_length __flatten_54__50@559@01))
        (<= 0 (Seq_index __flatten_51__47@556@01 i__53@569@01)))))
  :pattern ((Seq_index __flatten_51__47@556@01 i__53@569@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      677
;  :arith-assert-lower      1831
;  :arith-assert-upper      1222
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        959
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1232
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9132
;  :mk-clause               4459
;  :num-allocs              8561823
;  :num-checks              1658
;  :propagations            1732
;  :quant-instantiations    661
;  :rlimit-count            541052)
(assert (forall ((i__53@569@01 Int)) (!
  (implies
    (and
      (< i__53@569@01 (Seq_length __flatten_51__47@556@01))
      (<= 0 i__53@569@01))
    (or
      (= (Seq_index __flatten_51__47@556@01 i__53@569@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_51__47@556@01 i__53@569@01)
          (Seq_length __flatten_54__50@559@01))
        (<= 0 (Seq_index __flatten_51__47@556@01 i__53@569@01)))))
  :pattern ((Seq_index __flatten_51__47@556@01 i__53@569@01))
  :qid |prog.l<no position>|)))
(declare-const $k@570@01 $Perm)
(assert ($Perm.isReadVar $k@570@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1833
;  :arith-assert-upper      1223
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1233
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9137
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1659
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            541521)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@570@01 $Perm.No) (< $Perm.No $k@570@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1833
;  :arith-assert-upper      1223
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1234
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9137
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1660
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            541571)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@538@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1833
;  :arith-assert-upper      1223
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1234
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9137
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1661
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            541582)
(assert (< $k@570@01 $k@538@01))
(assert (<= $Perm.No (- $k@538@01 $k@570@01)))
(assert (<= (- $k@538@01 $k@570@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@538@01 $k@570@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand != null
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1835
;  :arith-assert-upper      1224
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1235
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9140
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1662
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            541790)
(push) ; 7
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1835
;  :arith-assert-upper      1224
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1236
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9140
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1663
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            541838)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1835
;  :arith-assert-upper      1224
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1237
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9140
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1664
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            541886)
(push) ; 7
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1835
;  :arith-assert-upper      1224
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1238
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9140
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1665
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            541934)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1835
;  :arith-assert-upper      1224
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1239
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9140
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1666
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            541982)
(push) ; 7
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1835
;  :arith-assert-upper      1224
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1240
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9140
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1667
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            542030
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1835
;  :arith-assert-upper      1224
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1241
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9140
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1668
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            542078)
(push) ; 7
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      678
;  :arith-assert-lower      1835
;  :arith-assert-upper      1224
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        960
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1242
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9140
;  :mk-clause               4461
;  :num-allocs              8561823
;  :num-checks              1669
;  :propagations            1733
;  :quant-instantiations    661
;  :rlimit-count            542126)
(declare-const $k@571@01 $Perm)
(assert ($Perm.isReadVar $k@571@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      679
;  :arith-assert-lower      1837
;  :arith-assert-upper      1225
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        961
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1243
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9144
;  :mk-clause               4463
;  :num-allocs              8561823
;  :num-checks              1670
;  :propagations            1734
;  :quant-instantiations    661
;  :rlimit-count            542322)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@571@01 $Perm.No) (< $Perm.No $k@571@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      679
;  :arith-assert-lower      1837
;  :arith-assert-upper      1225
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        961
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1244
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9144
;  :mk-clause               4463
;  :num-allocs              8561823
;  :num-checks              1671
;  :propagations            1734
;  :quant-instantiations    661
;  :rlimit-count            542372)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@539@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      679
;  :arith-assert-lower      1837
;  :arith-assert-upper      1225
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        961
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1244
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9144
;  :mk-clause               4463
;  :num-allocs              8561823
;  :num-checks              1672
;  :propagations            1734
;  :quant-instantiations    661
;  :rlimit-count            542383)
(assert (< $k@571@01 $k@539@01))
(assert (<= $Perm.No (- $k@539@01 $k@571@01)))
(assert (<= (- $k@539@01 $k@571@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@539@01 $k@571@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_write_a != null
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      679
;  :arith-assert-lower      1839
;  :arith-assert-upper      1226
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        961
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            391
;  :binary-propagations     22
;  :conflicts               1245
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9147
;  :mk-clause               4463
;  :num-allocs              8561823
;  :num-checks              1673
;  :propagations            1734
;  :quant-instantiations    661
;  :rlimit-count            542603)
(push) ; 7
(assert (not (< $Perm.No $k@539@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      679
;  :arith-assert-lower      1839
;  :arith-assert-upper      1226
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        961
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            391
;  :binary-propagations     22
;  :conflicts               1246
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9147
;  :mk-clause               4463
;  :num-allocs              8561823
;  :num-checks              1674
;  :propagations            1734
;  :quant-instantiations    661
;  :rlimit-count            542651
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      679
;  :arith-assert-lower      1839
;  :arith-assert-upper      1226
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        961
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            391
;  :binary-propagations     22
;  :conflicts               1247
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9147
;  :mk-clause               4463
;  :num-allocs              8561823
;  :num-checks              1675
;  :propagations            1734
;  :quant-instantiations    661
;  :rlimit-count            542699)
(push) ; 7
(assert (not (< $Perm.No $k@539@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      679
;  :arith-assert-lower      1839
;  :arith-assert-upper      1226
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        961
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            391
;  :binary-propagations     22
;  :conflicts               1248
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9147
;  :mk-clause               4463
;  :num-allocs              8561823
;  :num-checks              1676
;  :propagations            1734
;  :quant-instantiations    661
;  :rlimit-count            542747
;  :time                    0.01)
(declare-const $k@572@01 $Perm)
(assert ($Perm.isReadVar $k@572@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      680
;  :arith-assert-lower      1841
;  :arith-assert-upper      1227
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            391
;  :binary-propagations     22
;  :conflicts               1249
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9151
;  :mk-clause               4465
;  :num-allocs              8561823
;  :num-checks              1677
;  :propagations            1735
;  :quant-instantiations    661
;  :rlimit-count            542944)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@572@01 $Perm.No) (< $Perm.No $k@572@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      680
;  :arith-assert-lower      1841
;  :arith-assert-upper      1227
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            391
;  :binary-propagations     22
;  :conflicts               1250
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9151
;  :mk-clause               4465
;  :num-allocs              8561823
;  :num-checks              1678
;  :propagations            1735
;  :quant-instantiations    661
;  :rlimit-count            542994)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@540@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      680
;  :arith-assert-lower      1841
;  :arith-assert-upper      1227
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            391
;  :binary-propagations     22
;  :conflicts               1250
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9151
;  :mk-clause               4465
;  :num-allocs              8561823
;  :num-checks              1679
;  :propagations            1735
;  :quant-instantiations    661
;  :rlimit-count            543005)
(assert (< $k@572@01 $k@540@01))
(assert (<= $Perm.No (- $k@540@01 $k@572@01)))
(assert (<= (- $k@540@01 $k@572@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@540@01 $k@572@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_write_b != null
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      680
;  :arith-assert-lower      1843
;  :arith-assert-upper      1228
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1251
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9154
;  :mk-clause               4465
;  :num-allocs              8561823
;  :num-checks              1680
;  :propagations            1735
;  :quant-instantiations    661
;  :rlimit-count            543219)
(push) ; 7
(assert (not (< $Perm.No $k@540@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      680
;  :arith-assert-lower      1843
;  :arith-assert-upper      1228
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1252
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9154
;  :mk-clause               4465
;  :num-allocs              8561823
;  :num-checks              1681
;  :propagations            1735
;  :quant-instantiations    661
;  :rlimit-count            543267)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      680
;  :arith-assert-lower      1843
;  :arith-assert-upper      1228
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1253
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9154
;  :mk-clause               4465
;  :num-allocs              8561823
;  :num-checks              1682
;  :propagations            1735
;  :quant-instantiations    661
;  :rlimit-count            543315
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@540@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      680
;  :arith-assert-lower      1843
;  :arith-assert-upper      1228
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9154
;  :mk-clause               4465
;  :num-allocs              8561823
;  :num-checks              1683
;  :propagations            1735
;  :quant-instantiations    661
;  :rlimit-count            543363)
(push) ; 7
(assert (not (=
  diz@498@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      680
;  :arith-assert-lower      1843
;  :arith-assert-upper      1228
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9154
;  :mk-clause               4465
;  :num-allocs              8561823
;  :num-checks              1684
;  :propagations            1735
;  :quant-instantiations    661
;  :rlimit-count            543374)
(declare-const $k@573@01 $Perm)
(assert ($Perm.isReadVar $k@573@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      681
;  :arith-assert-lower      1845
;  :arith-assert-upper      1229
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        963
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1255
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9158
;  :mk-clause               4467
;  :num-allocs              8561823
;  :num-checks              1685
;  :propagations            1736
;  :quant-instantiations    661
;  :rlimit-count            543570
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@573@01 $Perm.No) (< $Perm.No $k@573@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      681
;  :arith-assert-lower      1845
;  :arith-assert-upper      1229
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        963
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1256
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9158
;  :mk-clause               4467
;  :num-allocs              8561823
;  :num-checks              1686
;  :propagations            1736
;  :quant-instantiations    661
;  :rlimit-count            543620)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@541@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      681
;  :arith-assert-lower      1845
;  :arith-assert-upper      1229
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        963
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1256
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9158
;  :mk-clause               4467
;  :num-allocs              8561823
;  :num-checks              1687
;  :propagations            1736
;  :quant-instantiations    661
;  :rlimit-count            543631)
(assert (< $k@573@01 $k@541@01))
(assert (<= $Perm.No (- $k@541@01 $k@573@01)))
(assert (<= (- $k@541@01 $k@573@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@541@01 $k@573@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_read != null
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      681
;  :arith-assert-lower      1847
;  :arith-assert-upper      1230
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        963
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            393
;  :binary-propagations     22
;  :conflicts               1257
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9161
;  :mk-clause               4467
;  :num-allocs              8561823
;  :num-checks              1688
;  :propagations            1736
;  :quant-instantiations    661
;  :rlimit-count            543845)
(push) ; 7
(assert (not (< $Perm.No $k@541@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      681
;  :arith-assert-lower      1847
;  :arith-assert-upper      1230
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        963
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            393
;  :binary-propagations     22
;  :conflicts               1258
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9161
;  :mk-clause               4467
;  :num-allocs              8561823
;  :num-checks              1689
;  :propagations            1736
;  :quant-instantiations    661
;  :rlimit-count            543893
;  :time                    0.00)
(declare-const $k@574@01 $Perm)
(assert ($Perm.isReadVar $k@574@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1849
;  :arith-assert-upper      1231
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            393
;  :binary-propagations     22
;  :conflicts               1259
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9165
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1690
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544089)
(push) ; 7
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1849
;  :arith-assert-upper      1231
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            393
;  :binary-propagations     22
;  :conflicts               1260
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9165
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1691
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544137)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@574@01 $Perm.No) (< $Perm.No $k@574@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1849
;  :arith-assert-upper      1231
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            393
;  :binary-propagations     22
;  :conflicts               1261
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9165
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1692
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544187)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@542@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1849
;  :arith-assert-upper      1231
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            393
;  :binary-propagations     22
;  :conflicts               1261
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9165
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1693
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544198)
(assert (< $k@574@01 $k@542@01))
(assert (<= $Perm.No (- $k@542@01 $k@574@01)))
(assert (<= (- $k@542@01 $k@574@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@542@01 $k@574@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
      $Ref.null))))
; [eval] diz.Write_b_m.Main_nand.Nand_gate_m == diz.Write_b_m
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1851
;  :arith-assert-upper      1232
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1262
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9168
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1694
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544418)
(push) ; 7
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1851
;  :arith-assert-upper      1232
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1263
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9168
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1695
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544466)
(push) ; 7
(assert (not (< $Perm.No $k@542@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1851
;  :arith-assert-upper      1232
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1264
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9168
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1696
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544514)
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1851
;  :arith-assert-upper      1232
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1265
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9168
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1697
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544562
;  :time                    0.01)
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(push) ; 7
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1851
;  :arith-assert-upper      1232
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1266
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9168
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1698
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544610)
(push) ; 7
(assert (not (< $Perm.No $k@540@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15271
;  :arith-add-rows          174
;  :arith-assert-diseq      682
;  :arith-assert-lower      1851
;  :arith-assert-upper      1232
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        964
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1267
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 2862
;  :datatype-occurs-check   1113
;  :datatype-splits         2223
;  :decisions               3054
;  :del-clause              4394
;  :final-checks            403
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9168
;  :mk-clause               4469
;  :num-allocs              8561823
;  :num-checks              1699
;  :propagations            1737
;  :quant-instantiations    661
;  :rlimit-count            544658)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@561@01 $Perm.Write))
(assert ($Perm.isReadVar $k@563@01 $Perm.Write))
(assert ($Perm.isReadVar $k@564@01 $Perm.Write))
(assert ($Perm.isReadVar $k@565@01 $Perm.Write))
(assert ($Perm.isReadVar $k@566@01 $Perm.Write))
(assert ($Perm.isReadVar $k@567@01 $Perm.Write))
(assert (= $t@560@01 ($Snap.combine ($Snap.first $t@560@01) ($Snap.second $t@560@01))))
(assert (<= $Perm.No $k@561@01))
(assert (<= $k@561@01 $Perm.Write))
(assert (implies (< $Perm.No $k@561@01) (not (= diz@498@01 $Ref.null))))
(assert (=
  ($Snap.second $t@560@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@560@01))
    ($Snap.second ($Snap.second $t@560@01)))))
(assert (= ($Snap.first ($Snap.second $t@560@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@560@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@560@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@560@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
  $Snap.unit))
(assert (forall ((i__53@562@01 Int)) (!
  (implies
    (and
      (<
        i__53@562@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
      (<= 0 i__53@562@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          i__53@562@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i__53@562@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i__53@562@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i__53@562@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(assert (<= $Perm.No $k@563@01))
(assert (<= $k@563@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@563@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
(assert (<= $Perm.No $k@564@01))
(assert (<= $k@564@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@564@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
(assert (<= $Perm.No $k@565@01))
(assert (<= $k@565@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@565@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
(assert (<= $Perm.No $k@566@01))
(assert (<= $k@566@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@566@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))))
(assert (<= $Perm.No $k@567@01))
(assert (<= $k@567@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@567@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  diz@498@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Write_b_m.Main_process_state[1] != -1 || diz.Write_b_m.Main_event_state[1] != -2
; [eval] diz.Write_b_m.Main_process_state[1] != -1
; [eval] diz.Write_b_m.Main_process_state[1]
(push) ; 8
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15710
;  :arith-add-rows          174
;  :arith-assert-diseq      688
;  :arith-assert-lower      1867
;  :arith-assert-upper      1246
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        972
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1268
;  :datatype-accessor-ax    702
;  :datatype-constructor-ax 2934
;  :datatype-occurs-check   1131
;  :datatype-splits         2291
;  :decisions               3128
;  :del-clause              4408
;  :final-checks            407
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9322
;  :mk-clause               4483
;  :num-allocs              8561823
;  :num-checks              1702
;  :propagations            1749
;  :quant-instantiations    671
;  :rlimit-count            551388)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15710
;  :arith-add-rows          174
;  :arith-assert-diseq      688
;  :arith-assert-lower      1867
;  :arith-assert-upper      1246
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        972
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1268
;  :datatype-accessor-ax    702
;  :datatype-constructor-ax 2934
;  :datatype-occurs-check   1131
;  :datatype-splits         2291
;  :decisions               3128
;  :del-clause              4408
;  :final-checks            407
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9322
;  :mk-clause               4483
;  :num-allocs              8561823
;  :num-checks              1703
;  :propagations            1749
;  :quant-instantiations    671
;  :rlimit-count            551403)
; [eval] -1
(push) ; 8
; [then-branch: 200 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1 | live]
; [else-branch: 200 | First:(Second:(Second:(Second:($t@560@01))))[1] == -1 | live]
(push) ; 9
; [then-branch: 200 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      1)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 200 | First:(Second:(Second:(Second:($t@560@01))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    1)
  (- 0 1)))
; [eval] diz.Write_b_m.Main_event_state[1] != -2
; [eval] diz.Write_b_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15711
;  :arith-add-rows          174
;  :arith-assert-diseq      688
;  :arith-assert-lower      1867
;  :arith-assert-upper      1246
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        972
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    702
;  :datatype-constructor-ax 2934
;  :datatype-occurs-check   1131
;  :datatype-splits         2291
;  :decisions               3128
;  :del-clause              4408
;  :final-checks            407
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9323
;  :mk-clause               4483
;  :num-allocs              8561823
;  :num-checks              1704
;  :propagations            1749
;  :quant-instantiations    671
;  :rlimit-count            551594)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15711
;  :arith-add-rows          174
;  :arith-assert-diseq      688
;  :arith-assert-lower      1867
;  :arith-assert-upper      1246
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        972
;  :arith-fixed-eqs         273
;  :arith-offset-eqs        9
;  :arith-pivots            395
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    702
;  :datatype-constructor-ax 2934
;  :datatype-occurs-check   1131
;  :datatype-splits         2291
;  :decisions               3128
;  :del-clause              4408
;  :final-checks            407
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9323
;  :mk-clause               4483
;  :num-allocs              8561823
;  :num-checks              1705
;  :propagations            1749
;  :quant-instantiations    671
;  :rlimit-count            551609)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
          1)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15871
;  :arith-add-rows          176
;  :arith-assert-diseq      691
;  :arith-assert-lower      1878
;  :arith-assert-upper      1251
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        977
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    702
;  :datatype-constructor-ax 2970
;  :datatype-occurs-check   1140
;  :datatype-splits         2325
;  :decisions               3166
;  :del-clause              4433
;  :final-checks            409
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9382
;  :mk-clause               4508
;  :num-allocs              8561823
;  :num-checks              1706
;  :propagations            1762
;  :quant-instantiations    675
;  :rlimit-count            553211)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
        1)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      691
;  :arith-assert-lower      1878
;  :arith-assert-upper      1251
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        977
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1270
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4434
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9424
;  :mk-clause               4509
;  :num-allocs              8561823
;  :num-checks              1707
;  :propagations            1765
;  :quant-instantiations    675
;  :rlimit-count            554558)
; [then-branch: 201 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@560@01))))))[1] != -2 | live]
; [else-branch: 201 | !(First:(Second:(Second:(Second:($t@560@01))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@560@01))))))[1] != -2) | live]
(push) ; 8
; [then-branch: 201 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@560@01))))))[1] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
        1)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      691
;  :arith-assert-lower      1878
;  :arith-assert-upper      1251
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        977
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1271
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4434
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9426
;  :mk-clause               4510
;  :num-allocs              8561823
;  :num-checks              1708
;  :propagations            1765
;  :quant-instantiations    675
;  :rlimit-count            554836
;  :time                    0.00)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      691
;  :arith-assert-lower      1878
;  :arith-assert-upper      1251
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        977
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4434
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9426
;  :mk-clause               4510
;  :num-allocs              8561823
;  :num-checks              1709
;  :propagations            1765
;  :quant-instantiations    675
;  :rlimit-count            554884)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@575@01 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 202 | 0 <= i@575@01 | live]
; [else-branch: 202 | !(0 <= i@575@01) | live]
(push) ; 11
; [then-branch: 202 | 0 <= i@575@01]
(assert (<= 0 i@575@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 202 | !(0 <= i@575@01)]
(assert (not (<= 0 i@575@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 203 | i@575@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i@575@01 | live]
; [else-branch: 203 | !(i@575@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i@575@01) | live]
(push) ; 11
; [then-branch: 203 | i@575@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i@575@01]
(assert (and
  (<
    i@575@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
  (<= 0 i@575@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@575@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      691
;  :arith-assert-lower      1879
;  :arith-assert-upper      1252
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        977
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4434
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.30
;  :memory                  5.30
;  :minimized-lits          2
;  :mk-bool-var             9428
;  :mk-clause               4510
;  :num-allocs              8561823
;  :num-checks              1710
;  :propagations            1765
;  :quant-instantiations    675
;  :rlimit-count            555020)
; [eval] -1
(push) ; 12
; [then-branch: 204 | First:(Second:(Second:(Second:($t@560@01))))[i@575@01] == -1 | live]
; [else-branch: 204 | First:(Second:(Second:(Second:($t@560@01))))[i@575@01] != -1 | live]
(push) ; 13
; [then-branch: 204 | First:(Second:(Second:(Second:($t@560@01))))[i@575@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i@575@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 204 | First:(Second:(Second:(Second:($t@560@01))))[i@575@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      i@575@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@575@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      692
;  :arith-assert-lower      1882
;  :arith-assert-upper      1253
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        978
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4434
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9434
;  :mk-clause               4514
;  :num-allocs              9043799
;  :num-checks              1711
;  :propagations            1767
;  :quant-instantiations    676
;  :rlimit-count            555252)
(push) ; 14
; [then-branch: 205 | 0 <= First:(Second:(Second:(Second:($t@560@01))))[i@575@01] | live]
; [else-branch: 205 | !(0 <= First:(Second:(Second:(Second:($t@560@01))))[i@575@01]) | live]
(push) ; 15
; [then-branch: 205 | 0 <= First:(Second:(Second:(Second:($t@560@01))))[i@575@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i@575@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@575@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      692
;  :arith-assert-lower      1882
;  :arith-assert-upper      1253
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        978
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4434
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9434
;  :mk-clause               4514
;  :num-allocs              9043799
;  :num-checks              1712
;  :propagations            1767
;  :quant-instantiations    676
;  :rlimit-count            555366)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 205 | !(0 <= First:(Second:(Second:(Second:($t@560@01))))[i@575@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      i@575@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 203 | !(i@575@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i@575@01)]
(assert (not
  (and
    (<
      i@575@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
    (<= 0 i@575@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i@575@01 Int)) (!
  (implies
    (and
      (<
        i@575@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
      (<= 0 i@575@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          i@575@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i@575@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i@575@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i@575@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      694
;  :arith-assert-lower      1883
;  :arith-assert-upper      1254
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        979
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1273
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9442
;  :mk-clause               4528
;  :num-allocs              9043799
;  :num-checks              1713
;  :propagations            1769
;  :quant-instantiations    677
;  :rlimit-count            555812)
(assert (forall ((i@575@01 Int)) (!
  (implies
    (and
      (<
        i@575@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
      (<= 0 i@575@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          i@575@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i@575@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i@575@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i@575@01))
  :qid |prog.l<no position>|)))
(declare-const $k@576@01 $Perm)
(assert ($Perm.isReadVar $k@576@01 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@576@01 $Perm.No) (< $Perm.No $k@576@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      695
;  :arith-assert-lower      1885
;  :arith-assert-upper      1255
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        980
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1274
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9447
;  :mk-clause               4530
;  :num-allocs              9043799
;  :num-checks              1714
;  :propagations            1770
;  :quant-instantiations    677
;  :rlimit-count            556372)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@563@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      695
;  :arith-assert-lower      1885
;  :arith-assert-upper      1255
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        980
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            399
;  :binary-propagations     22
;  :conflicts               1274
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9447
;  :mk-clause               4530
;  :num-allocs              9043799
;  :num-checks              1715
;  :propagations            1770
;  :quant-instantiations    677
;  :rlimit-count            556383)
(assert (< $k@576@01 $k@563@01))
(assert (<= $Perm.No (- $k@563@01 $k@576@01)))
(assert (<= (- $k@563@01 $k@576@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@563@01 $k@576@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      695
;  :arith-assert-lower      1887
;  :arith-assert-upper      1256
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        980
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            400
;  :binary-propagations     22
;  :conflicts               1275
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9450
;  :mk-clause               4530
;  :num-allocs              9043799
;  :num-checks              1716
;  :propagations            1770
;  :quant-instantiations    677
;  :rlimit-count            556597
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      695
;  :arith-assert-lower      1887
;  :arith-assert-upper      1256
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        980
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            400
;  :binary-propagations     22
;  :conflicts               1276
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9450
;  :mk-clause               4530
;  :num-allocs              9043799
;  :num-checks              1717
;  :propagations            1770
;  :quant-instantiations    677
;  :rlimit-count            556645)
(push) ; 9
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      695
;  :arith-assert-lower      1887
;  :arith-assert-upper      1256
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        980
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            400
;  :binary-propagations     22
;  :conflicts               1277
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9450
;  :mk-clause               4530
;  :num-allocs              9043799
;  :num-checks              1718
;  :propagations            1770
;  :quant-instantiations    677
;  :rlimit-count            556693)
(push) ; 9
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      695
;  :arith-assert-lower      1887
;  :arith-assert-upper      1256
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        980
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            400
;  :binary-propagations     22
;  :conflicts               1278
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9450
;  :mk-clause               4530
;  :num-allocs              9043799
;  :num-checks              1719
;  :propagations            1770
;  :quant-instantiations    677
;  :rlimit-count            556741)
(declare-const $k@577@01 $Perm)
(assert ($Perm.isReadVar $k@577@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@577@01 $Perm.No) (< $Perm.No $k@577@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      696
;  :arith-assert-lower      1889
;  :arith-assert-upper      1257
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        981
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            400
;  :binary-propagations     22
;  :conflicts               1279
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9454
;  :mk-clause               4532
;  :num-allocs              9043799
;  :num-checks              1720
;  :propagations            1771
;  :quant-instantiations    677
;  :rlimit-count            556939)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@564@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      696
;  :arith-assert-lower      1889
;  :arith-assert-upper      1257
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        981
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            400
;  :binary-propagations     22
;  :conflicts               1279
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9454
;  :mk-clause               4532
;  :num-allocs              9043799
;  :num-checks              1721
;  :propagations            1771
;  :quant-instantiations    677
;  :rlimit-count            556950)
(assert (< $k@577@01 $k@564@01))
(assert (<= $Perm.No (- $k@564@01 $k@577@01)))
(assert (<= (- $k@564@01 $k@577@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@564@01 $k@577@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@564@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      696
;  :arith-assert-lower      1891
;  :arith-assert-upper      1258
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        981
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            402
;  :binary-propagations     22
;  :conflicts               1280
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9457
;  :mk-clause               4532
;  :num-allocs              9043799
;  :num-checks              1722
;  :propagations            1771
;  :quant-instantiations    677
;  :rlimit-count            557170)
(push) ; 9
(assert (not (< $Perm.No $k@564@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      696
;  :arith-assert-lower      1891
;  :arith-assert-upper      1258
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        981
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            402
;  :binary-propagations     22
;  :conflicts               1281
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9457
;  :mk-clause               4532
;  :num-allocs              9043799
;  :num-checks              1723
;  :propagations            1771
;  :quant-instantiations    677
;  :rlimit-count            557218
;  :time                    0.00)
(declare-const $k@578@01 $Perm)
(assert ($Perm.isReadVar $k@578@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@578@01 $Perm.No) (< $Perm.No $k@578@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      697
;  :arith-assert-lower      1893
;  :arith-assert-upper      1259
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        982
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            402
;  :binary-propagations     22
;  :conflicts               1282
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9461
;  :mk-clause               4534
;  :num-allocs              9043799
;  :num-checks              1724
;  :propagations            1772
;  :quant-instantiations    677
;  :rlimit-count            557417)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@565@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      697
;  :arith-assert-lower      1893
;  :arith-assert-upper      1259
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        982
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            402
;  :binary-propagations     22
;  :conflicts               1282
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9461
;  :mk-clause               4534
;  :num-allocs              9043799
;  :num-checks              1725
;  :propagations            1772
;  :quant-instantiations    677
;  :rlimit-count            557428)
(assert (< $k@578@01 $k@565@01))
(assert (<= $Perm.No (- $k@565@01 $k@578@01)))
(assert (<= (- $k@565@01 $k@578@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@565@01 $k@578@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@565@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      697
;  :arith-assert-lower      1895
;  :arith-assert-upper      1260
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        982
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               1283
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9464
;  :mk-clause               4534
;  :num-allocs              9043799
;  :num-checks              1726
;  :propagations            1772
;  :quant-instantiations    677
;  :rlimit-count            557642)
(push) ; 9
(assert (not (< $Perm.No $k@565@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      697
;  :arith-assert-lower      1895
;  :arith-assert-upper      1260
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        982
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               1284
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9464
;  :mk-clause               4534
;  :num-allocs              9043799
;  :num-checks              1727
;  :propagations            1772
;  :quant-instantiations    677
;  :rlimit-count            557690)
(declare-const $k@579@01 $Perm)
(assert ($Perm.isReadVar $k@579@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@579@01 $Perm.No) (< $Perm.No $k@579@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      698
;  :arith-assert-lower      1897
;  :arith-assert-upper      1261
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        983
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               1285
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9468
;  :mk-clause               4536
;  :num-allocs              9043799
;  :num-checks              1728
;  :propagations            1773
;  :quant-instantiations    677
;  :rlimit-count            557889)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@566@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      698
;  :arith-assert-lower      1897
;  :arith-assert-upper      1261
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        983
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               1285
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9468
;  :mk-clause               4536
;  :num-allocs              9043799
;  :num-checks              1729
;  :propagations            1773
;  :quant-instantiations    677
;  :rlimit-count            557900)
(assert (< $k@579@01 $k@566@01))
(assert (<= $Perm.No (- $k@566@01 $k@579@01)))
(assert (<= (- $k@566@01 $k@579@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@566@01 $k@579@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@566@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      698
;  :arith-assert-lower      1899
;  :arith-assert-upper      1262
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        983
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               1286
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9471
;  :mk-clause               4536
;  :num-allocs              9043799
;  :num-checks              1730
;  :propagations            1773
;  :quant-instantiations    677
;  :rlimit-count            558108)
(declare-const $k@580@01 $Perm)
(assert ($Perm.isReadVar $k@580@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      699
;  :arith-assert-lower      1901
;  :arith-assert-upper      1263
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        984
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               1287
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9475
;  :mk-clause               4538
;  :num-allocs              9043799
;  :num-checks              1731
;  :propagations            1774
;  :quant-instantiations    677
;  :rlimit-count            558305)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@580@01 $Perm.No) (< $Perm.No $k@580@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      699
;  :arith-assert-lower      1901
;  :arith-assert-upper      1263
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        984
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               1288
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9475
;  :mk-clause               4538
;  :num-allocs              9043799
;  :num-checks              1732
;  :propagations            1774
;  :quant-instantiations    677
;  :rlimit-count            558355)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@567@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      699
;  :arith-assert-lower      1901
;  :arith-assert-upper      1263
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        984
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            403
;  :binary-propagations     22
;  :conflicts               1288
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9475
;  :mk-clause               4538
;  :num-allocs              9043799
;  :num-checks              1733
;  :propagations            1774
;  :quant-instantiations    677
;  :rlimit-count            558366)
(assert (< $k@580@01 $k@567@01))
(assert (<= $Perm.No (- $k@567@01 $k@580@01)))
(assert (<= (- $k@567@01 $k@580@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@567@01 $k@580@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
      $Ref.null))))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      699
;  :arith-assert-lower      1903
;  :arith-assert-upper      1264
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        984
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            404
;  :binary-propagations     22
;  :conflicts               1289
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9478
;  :mk-clause               4538
;  :num-allocs              9043799
;  :num-checks              1734
;  :propagations            1774
;  :quant-instantiations    677
;  :rlimit-count            558580)
(push) ; 9
(assert (not (< $Perm.No $k@567@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16029
;  :arith-add-rows          176
;  :arith-assert-diseq      699
;  :arith-assert-lower      1903
;  :arith-assert-upper      1264
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        984
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            404
;  :binary-propagations     22
;  :conflicts               1290
;  :datatype-accessor-ax    703
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9478
;  :mk-clause               4538
;  :num-allocs              9043799
;  :num-checks              1735
;  :propagations            1774
;  :quant-instantiations    677
;  :rlimit-count            558628)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))
                                            $Snap.unit)))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) globals@499@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16073
;  :arith-add-rows          176
;  :arith-assert-diseq      699
;  :arith-assert-lower      1903
;  :arith-assert-upper      1264
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        984
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            404
;  :binary-propagations     22
;  :conflicts               1291
;  :datatype-accessor-ax    725
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9479
;  :mk-clause               4538
;  :num-allocs              9043799
;  :num-checks              1736
;  :propagations            1774
;  :quant-instantiations    677
;  :rlimit-count            559523)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16073
;  :arith-add-rows          176
;  :arith-assert-diseq      699
;  :arith-assert-lower      1903
;  :arith-assert-upper      1264
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        984
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        9
;  :arith-pivots            404
;  :binary-propagations     22
;  :conflicts               1292
;  :datatype-accessor-ax    725
;  :datatype-constructor-ax 3009
;  :datatype-occurs-check   1154
;  :datatype-splits         2361
;  :decisions               3205
;  :del-clause              4452
;  :final-checks            412
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9479
;  :mk-clause               4538
;  :num-allocs              9043799
;  :num-checks              1737
;  :propagations            1774
;  :quant-instantiations    677
;  :rlimit-count            559571)
(declare-const $t@581@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16256
;  :arith-add-rows          176
;  :arith-assert-diseq      702
;  :arith-assert-lower      1914
;  :arith-assert-upper      1269
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        989
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        9
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1293
;  :datatype-accessor-ax    725
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4486
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9536
;  :mk-clause               4562
;  :num-allocs              9043799
;  :num-checks              1739
;  :propagations            1787
;  :quant-instantiations    682
;  :rlimit-count            560993)
(assert (= $t@581@01 ($Snap.combine ($Snap.first $t@581@01) ($Snap.second $t@581@01))))
(assert (= ($Snap.first $t@581@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@581@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@581@01))
    ($Snap.second ($Snap.second $t@581@01)))))
(assert (= ($Snap.first ($Snap.second $t@581@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@581@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@581@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@581@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@581@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@582@01 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 206 | 0 <= i@582@01 | live]
; [else-branch: 206 | !(0 <= i@582@01) | live]
(push) ; 11
; [then-branch: 206 | 0 <= i@582@01]
(assert (<= 0 i@582@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 206 | !(0 <= i@582@01)]
(assert (not (<= 0 i@582@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 207 | i@582@01 < |First:(Second:(Second:(Second:($t@581@01))))| && 0 <= i@582@01 | live]
; [else-branch: 207 | !(i@582@01 < |First:(Second:(Second:(Second:($t@581@01))))| && 0 <= i@582@01) | live]
(push) ; 11
; [then-branch: 207 | i@582@01 < |First:(Second:(Second:(Second:($t@581@01))))| && 0 <= i@582@01]
(assert (and
  (<
    i@582@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  (<= 0 i@582@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@582@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16306
;  :arith-add-rows          176
;  :arith-assert-diseq      702
;  :arith-assert-lower      1919
;  :arith-assert-upper      1272
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        991
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        9
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1293
;  :datatype-accessor-ax    733
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4486
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9562
;  :mk-clause               4562
;  :num-allocs              9043799
;  :num-checks              1740
;  :propagations            1787
;  :quant-instantiations    686
;  :rlimit-count            562298)
; [eval] -1
(push) ; 12
; [then-branch: 208 | First:(Second:(Second:(Second:($t@581@01))))[i@582@01] == -1 | live]
; [else-branch: 208 | First:(Second:(Second:(Second:($t@581@01))))[i@582@01] != -1 | live]
(push) ; 13
; [then-branch: 208 | First:(Second:(Second:(Second:($t@581@01))))[i@582@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    i@582@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 208 | First:(Second:(Second:(Second:($t@581@01))))[i@582@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
      i@582@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@582@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16306
;  :arith-add-rows          176
;  :arith-assert-diseq      702
;  :arith-assert-lower      1919
;  :arith-assert-upper      1272
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        991
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        9
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1293
;  :datatype-accessor-ax    733
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4486
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9563
;  :mk-clause               4562
;  :num-allocs              9043799
;  :num-checks              1741
;  :propagations            1787
;  :quant-instantiations    686
;  :rlimit-count            562473)
(push) ; 14
; [then-branch: 209 | 0 <= First:(Second:(Second:(Second:($t@581@01))))[i@582@01] | live]
; [else-branch: 209 | !(0 <= First:(Second:(Second:(Second:($t@581@01))))[i@582@01]) | live]
(push) ; 15
; [then-branch: 209 | 0 <= First:(Second:(Second:(Second:($t@581@01))))[i@582@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    i@582@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@582@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16306
;  :arith-add-rows          176
;  :arith-assert-diseq      703
;  :arith-assert-lower      1922
;  :arith-assert-upper      1272
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        992
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        9
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1293
;  :datatype-accessor-ax    733
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4486
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9566
;  :mk-clause               4563
;  :num-allocs              9043799
;  :num-checks              1742
;  :propagations            1787
;  :quant-instantiations    686
;  :rlimit-count            562596)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 209 | !(0 <= First:(Second:(Second:(Second:($t@581@01))))[i@582@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
      i@582@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 207 | !(i@582@01 < |First:(Second:(Second:(Second:($t@581@01))))| && 0 <= i@582@01)]
(assert (not
  (and
    (<
      i@582@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
    (<= 0 i@582@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@582@01 Int)) (!
  (implies
    (and
      (<
        i@582@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
      (<= 0 i@582@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
          i@582@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
            i@582@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
            i@582@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    i@582@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))
(declare-const $k@583@01 $Perm)
(assert ($Perm.isReadVar $k@583@01 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@583@01 $Perm.No) (< $Perm.No $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16311
;  :arith-add-rows          176
;  :arith-assert-diseq      704
;  :arith-assert-lower      1924
;  :arith-assert-upper      1273
;  :arith-bound-prop        110
;  :arith-conflicts         175
;  :arith-eq-adapter        993
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        9
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1294
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9572
;  :mk-clause               4565
;  :num-allocs              9043799
;  :num-checks              1743
;  :propagations            1788
;  :quant-instantiations    686
;  :rlimit-count            563364)
(declare-const $t@584@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@563@01 $k@576@01))
    (=
      $t@584@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
  (implies
    (< $Perm.No $k@583@01)
    (=
      $t@584@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))
(assert (<= $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01)))
(assert (<= (+ (- $k@563@01 $k@576@01) $k@583@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16321
;  :arith-add-rows          177
;  :arith-assert-diseq      704
;  :arith-assert-lower      1925
;  :arith-assert-upper      1275
;  :arith-bound-prop        110
;  :arith-conflicts         176
;  :arith-eq-adapter        993
;  :arith-fixed-eqs         278
;  :arith-offset-eqs        9
;  :arith-pivots            409
;  :binary-propagations     22
;  :conflicts               1295
;  :datatype-accessor-ax    735
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9580
;  :mk-clause               4565
;  :num-allocs              9043799
;  :num-checks              1744
;  :propagations            1788
;  :quant-instantiations    687
;  :rlimit-count            564050)
(assert (not (= $t@584@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16327
;  :arith-add-rows          177
;  :arith-assert-diseq      704
;  :arith-assert-lower      1925
;  :arith-assert-upper      1276
;  :arith-bound-prop        110
;  :arith-conflicts         177
;  :arith-eq-adapter        993
;  :arith-fixed-eqs         279
;  :arith-offset-eqs        9
;  :arith-pivots            409
;  :binary-propagations     22
;  :conflicts               1296
;  :datatype-accessor-ax    736
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9583
;  :mk-clause               4565
;  :num-allocs              9043799
;  :num-checks              1745
;  :propagations            1788
;  :quant-instantiations    687
;  :rlimit-count            564374)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16332
;  :arith-add-rows          177
;  :arith-assert-diseq      704
;  :arith-assert-lower      1925
;  :arith-assert-upper      1277
;  :arith-bound-prop        110
;  :arith-conflicts         178
;  :arith-eq-adapter        993
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        9
;  :arith-pivots            409
;  :binary-propagations     22
;  :conflicts               1297
;  :datatype-accessor-ax    737
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9585
;  :mk-clause               4565
;  :num-allocs              9043799
;  :num-checks              1746
;  :propagations            1788
;  :quant-instantiations    687
;  :rlimit-count            564663)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16337
;  :arith-add-rows          177
;  :arith-assert-diseq      704
;  :arith-assert-lower      1925
;  :arith-assert-upper      1278
;  :arith-bound-prop        110
;  :arith-conflicts         179
;  :arith-eq-adapter        993
;  :arith-fixed-eqs         281
;  :arith-offset-eqs        9
;  :arith-pivots            409
;  :binary-propagations     22
;  :conflicts               1298
;  :datatype-accessor-ax    738
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9587
;  :mk-clause               4565
;  :num-allocs              9043799
;  :num-checks              1747
;  :propagations            1788
;  :quant-instantiations    687
;  :rlimit-count            564962)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))
(declare-const $k@585@01 $Perm)
(assert ($Perm.isReadVar $k@585@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@585@01 $Perm.No) (< $Perm.No $k@585@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16342
;  :arith-add-rows          177
;  :arith-assert-diseq      705
;  :arith-assert-lower      1927
;  :arith-assert-upper      1279
;  :arith-bound-prop        110
;  :arith-conflicts         179
;  :arith-eq-adapter        994
;  :arith-fixed-eqs         281
;  :arith-offset-eqs        9
;  :arith-pivots            409
;  :binary-propagations     22
;  :conflicts               1299
;  :datatype-accessor-ax    739
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9592
;  :mk-clause               4567
;  :num-allocs              9043799
;  :num-checks              1748
;  :propagations            1789
;  :quant-instantiations    687
;  :rlimit-count            565383)
(declare-const $t@586@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@564@01 $k@577@01))
    (=
      $t@586@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
  (implies
    (< $Perm.No $k@585@01)
    (=
      $t@586@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@564@01 $k@577@01) $k@585@01)))
(assert (<= (+ (- $k@564@01 $k@577@01) $k@585@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@564@01 $k@577@01) $k@585@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@564@01 $k@577@01) $k@585@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16352
;  :arith-add-rows          178
;  :arith-assert-diseq      705
;  :arith-assert-lower      1928
;  :arith-assert-upper      1281
;  :arith-bound-prop        110
;  :arith-conflicts         180
;  :arith-eq-adapter        994
;  :arith-fixed-eqs         282
;  :arith-offset-eqs        9
;  :arith-pivots            409
;  :binary-propagations     22
;  :conflicts               1300
;  :datatype-accessor-ax    740
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9600
;  :mk-clause               4567
;  :num-allocs              9043799
;  :num-checks              1749
;  :propagations            1789
;  :quant-instantiations    688
;  :rlimit-count            566167)
(assert (not (= $t@586@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@564@01 $k@577@01) $k@585@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16358
;  :arith-add-rows          178
;  :arith-assert-diseq      705
;  :arith-assert-lower      1928
;  :arith-assert-upper      1282
;  :arith-bound-prop        110
;  :arith-conflicts         181
;  :arith-eq-adapter        994
;  :arith-fixed-eqs         283
;  :arith-offset-eqs        9
;  :arith-pivots            409
;  :binary-propagations     22
;  :conflicts               1301
;  :datatype-accessor-ax    741
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9603
;  :mk-clause               4567
;  :num-allocs              9043799
;  :num-checks              1750
;  :propagations            1789
;  :quant-instantiations    688
;  :rlimit-count            566539)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))))
(declare-const $k@587@01 $Perm)
(assert ($Perm.isReadVar $k@587@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@587@01 $Perm.No) (< $Perm.No $k@587@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16363
;  :arith-add-rows          178
;  :arith-assert-diseq      706
;  :arith-assert-lower      1930
;  :arith-assert-upper      1283
;  :arith-bound-prop        110
;  :arith-conflicts         181
;  :arith-eq-adapter        995
;  :arith-fixed-eqs         283
;  :arith-offset-eqs        9
;  :arith-pivots            409
;  :binary-propagations     22
;  :conflicts               1302
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9608
;  :mk-clause               4569
;  :num-allocs              9043799
;  :num-checks              1751
;  :propagations            1790
;  :quant-instantiations    688
;  :rlimit-count            566989)
(declare-const $t@588@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@565@01 $k@578@01))
    (=
      $t@588@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
  (implies
    (< $Perm.No $k@587@01)
    (=
      $t@588@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@565@01 $k@578@01) $k@587@01)))
(assert (<= (+ (- $k@565@01 $k@578@01) $k@587@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@565@01 $k@578@01) $k@587@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@565@01 $k@578@01) $k@587@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16373
;  :arith-add-rows          179
;  :arith-assert-diseq      706
;  :arith-assert-lower      1931
;  :arith-assert-upper      1285
;  :arith-bound-prop        110
;  :arith-conflicts         182
;  :arith-eq-adapter        995
;  :arith-fixed-eqs         284
;  :arith-offset-eqs        9
;  :arith-pivots            410
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    743
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9616
;  :mk-clause               4569
;  :num-allocs              9043799
;  :num-checks              1752
;  :propagations            1790
;  :quant-instantiations    689
;  :rlimit-count            567661)
(assert (not (= $t@588@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@565@01 $k@578@01) $k@587@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16378
;  :arith-add-rows          179
;  :arith-assert-diseq      706
;  :arith-assert-lower      1931
;  :arith-assert-upper      1286
;  :arith-bound-prop        110
;  :arith-conflicts         183
;  :arith-eq-adapter        995
;  :arith-fixed-eqs         285
;  :arith-offset-eqs        9
;  :arith-pivots            410
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    744
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9618
;  :mk-clause               4569
;  :num-allocs              9043799
;  :num-checks              1753
;  :propagations            1790
;  :quant-instantiations    689
;  :rlimit-count            568038)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))))))
(declare-const $k@589@01 $Perm)
(assert ($Perm.isReadVar $k@589@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@589@01 $Perm.No) (< $Perm.No $k@589@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16383
;  :arith-add-rows          179
;  :arith-assert-diseq      707
;  :arith-assert-lower      1933
;  :arith-assert-upper      1287
;  :arith-bound-prop        110
;  :arith-conflicts         183
;  :arith-eq-adapter        996
;  :arith-fixed-eqs         285
;  :arith-offset-eqs        9
;  :arith-pivots            410
;  :binary-propagations     22
;  :conflicts               1305
;  :datatype-accessor-ax    745
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9623
;  :mk-clause               4571
;  :num-allocs              9043799
;  :num-checks              1754
;  :propagations            1791
;  :quant-instantiations    689
;  :rlimit-count            568518)
(declare-const $t@590@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@566@01 $k@579@01))
    (=
      $t@590@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@589@01)
    (=
      $t@590@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@566@01 $k@579@01) $k@589@01)))
(assert (<= (+ (- $k@566@01 $k@579@01) $k@589@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@566@01 $k@579@01) $k@589@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@566@01 $k@579@01) $k@589@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16393
;  :arith-add-rows          180
;  :arith-assert-diseq      707
;  :arith-assert-lower      1934
;  :arith-assert-upper      1289
;  :arith-bound-prop        110
;  :arith-conflicts         184
;  :arith-eq-adapter        996
;  :arith-fixed-eqs         286
;  :arith-offset-eqs        9
;  :arith-pivots            413
;  :binary-propagations     22
;  :conflicts               1306
;  :datatype-accessor-ax    746
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9631
;  :mk-clause               4571
;  :num-allocs              9043799
;  :num-checks              1755
;  :propagations            1791
;  :quant-instantiations    690
;  :rlimit-count            569455
;  :time                    0.00)
(assert (not (= $t@590@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16399
;  :arith-add-rows          180
;  :arith-assert-diseq      707
;  :arith-assert-lower      1934
;  :arith-assert-upper      1290
;  :arith-bound-prop        110
;  :arith-conflicts         185
;  :arith-eq-adapter        996
;  :arith-fixed-eqs         287
;  :arith-offset-eqs        9
;  :arith-pivots            413
;  :binary-propagations     22
;  :conflicts               1307
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9634
;  :mk-clause               4571
;  :num-allocs              9043799
;  :num-checks              1756
;  :propagations            1791
;  :quant-instantiations    690
;  :rlimit-count            569889)
(declare-const $k@591@01 $Perm)
(assert ($Perm.isReadVar $k@591@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@591@01 $Perm.No) (< $Perm.No $k@591@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16399
;  :arith-add-rows          180
;  :arith-assert-diseq      708
;  :arith-assert-lower      1936
;  :arith-assert-upper      1291
;  :arith-bound-prop        110
;  :arith-conflicts         185
;  :arith-eq-adapter        997
;  :arith-fixed-eqs         287
;  :arith-offset-eqs        9
;  :arith-pivots            413
;  :binary-propagations     22
;  :conflicts               1308
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9638
;  :mk-clause               4573
;  :num-allocs              9043799
;  :num-checks              1757
;  :propagations            1792
;  :quant-instantiations    690
;  :rlimit-count            570088)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  $t@584@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16399
;  :arith-add-rows          180
;  :arith-assert-diseq      708
;  :arith-assert-lower      1936
;  :arith-assert-upper      1291
;  :arith-bound-prop        110
;  :arith-conflicts         185
;  :arith-eq-adapter        997
;  :arith-fixed-eqs         287
;  :arith-offset-eqs        9
;  :arith-pivots            413
;  :binary-propagations     22
;  :conflicts               1308
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9638
;  :mk-clause               4573
;  :num-allocs              9043799
;  :num-checks              1758
;  :propagations            1792
;  :quant-instantiations    690
;  :rlimit-count            570099)
(declare-const $t@592@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@567@01 $k@580@01))
    (=
      $t@592@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@591@01)
    (=
      $t@592@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@567@01 $k@580@01) $k@591@01)))
(assert (<= (+ (- $k@567@01 $k@580@01) $k@591@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@567@01 $k@580@01) $k@591@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16407
;  :arith-add-rows          181
;  :arith-assert-diseq      708
;  :arith-assert-lower      1937
;  :arith-assert-upper      1293
;  :arith-bound-prop        110
;  :arith-conflicts         186
;  :arith-eq-adapter        997
;  :arith-fixed-eqs         288
;  :arith-offset-eqs        9
;  :arith-pivots            413
;  :binary-propagations     22
;  :conflicts               1309
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9645
;  :mk-clause               4573
;  :num-allocs              9043799
;  :num-checks              1759
;  :propagations            1792
;  :quant-instantiations    691
;  :rlimit-count            570726)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  $t@584@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16407
;  :arith-add-rows          181
;  :arith-assert-diseq      708
;  :arith-assert-lower      1937
;  :arith-assert-upper      1293
;  :arith-bound-prop        110
;  :arith-conflicts         186
;  :arith-eq-adapter        997
;  :arith-fixed-eqs         288
;  :arith-offset-eqs        9
;  :arith-pivots            413
;  :binary-propagations     22
;  :conflicts               1309
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9645
;  :mk-clause               4573
;  :num-allocs              9043799
;  :num-checks              1760
;  :propagations            1792
;  :quant-instantiations    691
;  :rlimit-count            570737)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@567@01 $k@580@01) $k@591@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16407
;  :arith-add-rows          181
;  :arith-assert-diseq      708
;  :arith-assert-lower      1937
;  :arith-assert-upper      1294
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        997
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        9
;  :arith-pivots            413
;  :binary-propagations     22
;  :conflicts               1310
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3045
;  :datatype-occurs-check   1185
;  :datatype-splits         2395
;  :decisions               3243
;  :del-clause              4487
;  :final-checks            414
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9646
;  :mk-clause               4573
;  :num-allocs              9043799
;  :num-checks              1761
;  :propagations            1792
;  :quant-instantiations    691
;  :rlimit-count            570815)
(assert (= $t@592@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@581@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) globals@499@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Write_b_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16629
;  :arith-add-rows          184
;  :arith-assert-diseq      712
;  :arith-assert-lower      1952
;  :arith-assert-upper      1301
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1004
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        9
;  :arith-pivots            419
;  :binary-propagations     22
;  :conflicts               1311
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3088
;  :datatype-occurs-check   1214
;  :datatype-splits         2436
;  :decisions               3288
;  :del-clause              4527
;  :final-checks            416
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9720
;  :mk-clause               4603
;  :num-allocs              9043799
;  :num-checks              1763
;  :propagations            1808
;  :quant-instantiations    697
;  :rlimit-count            572584)
(declare-const $t@593@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@594@01 $Perm)
(assert ($Perm.isReadVar $k@594@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@594@01 $Perm.No) (< $Perm.No $k@594@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1969
;  :arith-assert-upper      1309
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            425
;  :binary-propagations     22
;  :conflicts               1312
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9797
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1765
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            574453)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@561@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1969
;  :arith-assert-upper      1309
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            425
;  :binary-propagations     22
;  :conflicts               1312
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9797
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1766
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            574464)
(assert (< $k@594@01 $k@561@01))
(assert (<= $Perm.No (- $k@561@01 $k@594@01)))
(assert (<= (- $k@561@01 $k@594@01) $Perm.Write))
(assert (implies (< $Perm.No (- $k@561@01 $k@594@01)) (not (= diz@498@01 $Ref.null))))
; [eval] diz.Write_b_m != null
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1971
;  :arith-assert-upper      1310
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1313
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9800
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1767
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            574678)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1971
;  :arith-assert-upper      1310
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1314
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9800
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1768
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            574726)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1971
;  :arith-assert-upper      1310
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1315
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9800
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1769
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            574774)
; [eval] |diz.Write_b_m.Main_process_state| == 3
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1971
;  :arith-assert-upper      1310
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1316
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9800
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1770
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            574822)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1971
;  :arith-assert-upper      1310
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1317
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9800
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1771
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            574870)
; [eval] |diz.Write_b_m.Main_event_state| == 3
; [eval] |diz.Write_b_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1971
;  :arith-assert-upper      1310
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1318
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9800
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1772
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            574918)
; [eval] (forall i__53: Int :: { diz.Write_b_m.Main_process_state[i__53] } 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|)
(declare-const i__53@595@01 Int)
(push) ; 9
; [eval] 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= i__53 && i__53 < |diz.Write_b_m.Main_process_state|
; [eval] 0 <= i__53
(push) ; 10
; [then-branch: 210 | 0 <= i__53@595@01 | live]
; [else-branch: 210 | !(0 <= i__53@595@01) | live]
(push) ; 11
; [then-branch: 210 | 0 <= i__53@595@01]
(assert (<= 0 i__53@595@01))
; [eval] i__53 < |diz.Write_b_m.Main_process_state|
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1972
;  :arith-assert-upper      1310
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1319
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9801
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1773
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            575019)
(pop) ; 11
(push) ; 11
; [else-branch: 210 | !(0 <= i__53@595@01)]
(assert (not (<= 0 i__53@595@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 211 | i__53@595@01 < |First:(Second:(Second:(Second:($t@581@01))))| && 0 <= i__53@595@01 | live]
; [else-branch: 211 | !(i__53@595@01 < |First:(Second:(Second:(Second:($t@581@01))))| && 0 <= i__53@595@01) | live]
(push) ; 11
; [then-branch: 211 | i__53@595@01 < |First:(Second:(Second:(Second:($t@581@01))))| && 0 <= i__53@595@01]
(assert (and
  (<
    i__53@595@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  (<= 0 i__53@595@01)))
; [eval] diz.Write_b_m.Main_process_state[i__53] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__53] == -1
; [eval] diz.Write_b_m.Main_process_state[i__53]
(push) ; 12
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1973
;  :arith-assert-upper      1311
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1320
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9803
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1774
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            575176)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__53@595@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      717
;  :arith-assert-lower      1973
;  :arith-assert-upper      1311
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1012
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1320
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9803
;  :mk-clause               4635
;  :num-allocs              9043799
;  :num-checks              1775
;  :propagations            1825
;  :quant-instantiations    703
;  :rlimit-count            575185)
; [eval] -1
(push) ; 12
; [then-branch: 212 | First:(Second:(Second:(Second:($t@581@01))))[i__53@595@01] == -1 | live]
; [else-branch: 212 | First:(Second:(Second:(Second:($t@581@01))))[i__53@595@01] != -1 | live]
(push) ; 13
; [then-branch: 212 | First:(Second:(Second:(Second:($t@581@01))))[i__53@595@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    i__53@595@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 212 | First:(Second:(Second:(Second:($t@581@01))))[i__53@595@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
      i__53@595@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__53] && diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__53]
; [eval] diz.Write_b_m.Main_process_state[i__53]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      718
;  :arith-assert-lower      1976
;  :arith-assert-upper      1312
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1013
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1321
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9809
;  :mk-clause               4639
;  :num-allocs              9043799
;  :num-checks              1776
;  :propagations            1827
;  :quant-instantiations    704
;  :rlimit-count            575456)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__53@595@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      718
;  :arith-assert-lower      1976
;  :arith-assert-upper      1312
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1013
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1321
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9809
;  :mk-clause               4639
;  :num-allocs              9043799
;  :num-checks              1777
;  :propagations            1827
;  :quant-instantiations    704
;  :rlimit-count            575465)
(push) ; 14
; [then-branch: 213 | 0 <= First:(Second:(Second:(Second:($t@581@01))))[i__53@595@01] | live]
; [else-branch: 213 | !(0 <= First:(Second:(Second:(Second:($t@581@01))))[i__53@595@01]) | live]
(push) ; 15
; [then-branch: 213 | 0 <= First:(Second:(Second:(Second:($t@581@01))))[i__53@595@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    i__53@595@01)))
; [eval] diz.Write_b_m.Main_process_state[i__53] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__53]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      718
;  :arith-assert-lower      1976
;  :arith-assert-upper      1312
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1013
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1322
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9809
;  :mk-clause               4639
;  :num-allocs              9043799
;  :num-checks              1778
;  :propagations            1827
;  :quant-instantiations    704
;  :rlimit-count            575618)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__53@595@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      718
;  :arith-assert-lower      1976
;  :arith-assert-upper      1312
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1013
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1322
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9809
;  :mk-clause               4639
;  :num-allocs              9043799
;  :num-checks              1779
;  :propagations            1827
;  :quant-instantiations    704
;  :rlimit-count            575627)
; [eval] |diz.Write_b_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      718
;  :arith-assert-lower      1976
;  :arith-assert-upper      1312
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1013
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1323
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4557
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9809
;  :mk-clause               4639
;  :num-allocs              9043799
;  :num-checks              1780
;  :propagations            1827
;  :quant-instantiations    704
;  :rlimit-count            575675)
(pop) ; 15
(push) ; 15
; [else-branch: 213 | !(0 <= First:(Second:(Second:(Second:($t@581@01))))[i__53@595@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
      i__53@595@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 211 | !(i__53@595@01 < |First:(Second:(Second:(Second:($t@581@01))))| && 0 <= i__53@595@01)]
(assert (not
  (and
    (<
      i__53@595@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
    (<= 0 i__53@595@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__53@595@01 Int)) (!
  (implies
    (and
      (<
        i__53@595@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
      (<= 0 i__53@595@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
          i__53@595@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
            i__53@595@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
            i__53@595@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    i__53@595@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      720
;  :arith-assert-lower      1977
;  :arith-assert-upper      1313
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1014
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1324
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4575
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9817
;  :mk-clause               4653
;  :num-allocs              9043799
;  :num-checks              1781
;  :propagations            1829
;  :quant-instantiations    705
;  :rlimit-count            576121)
(assert (forall ((i__53@595@01 Int)) (!
  (implies
    (and
      (<
        i__53@595@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
      (<= 0 i__53@595@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
          i__53@595@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
            i__53@595@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
            i__53@595@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    i__53@595@01))
  :qid |prog.l<no position>|)))
(declare-const $k@596@01 $Perm)
(assert ($Perm.isReadVar $k@596@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      721
;  :arith-assert-lower      1979
;  :arith-assert-upper      1314
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1015
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1325
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4575
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9822
;  :mk-clause               4655
;  :num-allocs              9043799
;  :num-checks              1782
;  :propagations            1830
;  :quant-instantiations    705
;  :rlimit-count            576679)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@596@01 $Perm.No) (< $Perm.No $k@596@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16852
;  :arith-add-rows          187
;  :arith-assert-diseq      721
;  :arith-assert-lower      1979
;  :arith-assert-upper      1314
;  :arith-bound-prop        110
;  :arith-conflicts         187
;  :arith-eq-adapter        1015
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1326
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4575
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9822
;  :mk-clause               4655
;  :num-allocs              9043799
;  :num-checks              1783
;  :propagations            1830
;  :quant-instantiations    705
;  :rlimit-count            576729)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@563@01 $k@576@01) $k@583@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          187
;  :arith-assert-diseq      721
;  :arith-assert-lower      1979
;  :arith-assert-upper      1315
;  :arith-bound-prop        110
;  :arith-conflicts         188
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1327
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9824
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1784
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            576809)
(assert (< $k@596@01 (+ (- $k@563@01 $k@576@01) $k@583@01)))
(assert (<= $Perm.No (- (+ (- $k@563@01 $k@576@01) $k@583@01) $k@596@01)))
(assert (<= (- (+ (- $k@563@01 $k@576@01) $k@583@01) $k@596@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@563@01 $k@576@01) $k@583@01) $k@596@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      721
;  :arith-assert-lower      1981
;  :arith-assert-upper      1316
;  :arith-bound-prop        110
;  :arith-conflicts         188
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1328
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9827
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1785
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            577045)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      721
;  :arith-assert-lower      1981
;  :arith-assert-upper      1317
;  :arith-bound-prop        110
;  :arith-conflicts         189
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         296
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1329
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9828
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1786
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            577126)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      721
;  :arith-assert-lower      1981
;  :arith-assert-upper      1317
;  :arith-bound-prop        110
;  :arith-conflicts         189
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         296
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1330
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9828
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1787
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            577174)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      721
;  :arith-assert-lower      1981
;  :arith-assert-upper      1318
;  :arith-bound-prop        110
;  :arith-conflicts         190
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         297
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1331
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9829
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1788
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            577255)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      721
;  :arith-assert-lower      1981
;  :arith-assert-upper      1318
;  :arith-bound-prop        110
;  :arith-conflicts         190
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         297
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1332
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9829
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1789
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            577303
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      721
;  :arith-assert-lower      1981
;  :arith-assert-upper      1319
;  :arith-bound-prop        110
;  :arith-conflicts         191
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1333
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9830
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1790
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            577384)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      721
;  :arith-assert-lower      1981
;  :arith-assert-upper      1319
;  :arith-bound-prop        110
;  :arith-conflicts         191
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1334
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9830
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1791
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            577432)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      721
;  :arith-assert-lower      1981
;  :arith-assert-upper      1320
;  :arith-bound-prop        110
;  :arith-conflicts         192
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1335
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9831
;  :mk-clause               4657
;  :num-allocs              9043799
;  :num-checks              1792
;  :propagations            1831
;  :quant-instantiations    705
;  :rlimit-count            577513)
(declare-const $k@597@01 $Perm)
(assert ($Perm.isReadVar $k@597@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      722
;  :arith-assert-lower      1983
;  :arith-assert-upper      1321
;  :arith-bound-prop        110
;  :arith-conflicts         192
;  :arith-eq-adapter        1017
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1336
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9835
;  :mk-clause               4659
;  :num-allocs              9043799
;  :num-checks              1793
;  :propagations            1832
;  :quant-instantiations    705
;  :rlimit-count            577709)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@597@01 $Perm.No) (< $Perm.No $k@597@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16853
;  :arith-add-rows          189
;  :arith-assert-diseq      722
;  :arith-assert-lower      1983
;  :arith-assert-upper      1321
;  :arith-bound-prop        110
;  :arith-conflicts         192
;  :arith-eq-adapter        1017
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1337
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4577
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9835
;  :mk-clause               4659
;  :num-allocs              9043799
;  :num-checks              1794
;  :propagations            1832
;  :quant-instantiations    705
;  :rlimit-count            577759)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@564@01 $k@577@01) $k@585@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16854
;  :arith-add-rows          189
;  :arith-assert-diseq      722
;  :arith-assert-lower      1983
;  :arith-assert-upper      1322
;  :arith-bound-prop        110
;  :arith-conflicts         193
;  :arith-eq-adapter        1018
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        9
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1338
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4579
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9837
;  :mk-clause               4661
;  :num-allocs              9043799
;  :num-checks              1795
;  :propagations            1833
;  :quant-instantiations    705
;  :rlimit-count            577837)
(assert (< $k@597@01 (+ (- $k@564@01 $k@577@01) $k@585@01)))
(assert (<= $Perm.No (- (+ (- $k@564@01 $k@577@01) $k@585@01) $k@597@01)))
(assert (<= (- (+ (- $k@564@01 $k@577@01) $k@585@01) $k@597@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@564@01 $k@577@01) $k@585@01) $k@597@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16854
;  :arith-add-rows          190
;  :arith-assert-diseq      722
;  :arith-assert-lower      1985
;  :arith-assert-upper      1323
;  :arith-bound-prop        110
;  :arith-conflicts         193
;  :arith-eq-adapter        1018
;  :arith-fixed-eqs         299
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1339
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4579
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9840
;  :mk-clause               4661
;  :num-allocs              9043799
;  :num-checks              1796
;  :propagations            1833
;  :quant-instantiations    705
;  :rlimit-count            578079)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@564@01 $k@577@01) $k@585@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16854
;  :arith-add-rows          190
;  :arith-assert-diseq      722
;  :arith-assert-lower      1985
;  :arith-assert-upper      1324
;  :arith-bound-prop        110
;  :arith-conflicts         194
;  :arith-eq-adapter        1018
;  :arith-fixed-eqs         300
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1340
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4579
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9841
;  :mk-clause               4661
;  :num-allocs              9043799
;  :num-checks              1797
;  :propagations            1833
;  :quant-instantiations    705
;  :rlimit-count            578157)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16854
;  :arith-add-rows          190
;  :arith-assert-diseq      722
;  :arith-assert-lower      1985
;  :arith-assert-upper      1324
;  :arith-bound-prop        110
;  :arith-conflicts         194
;  :arith-eq-adapter        1018
;  :arith-fixed-eqs         300
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1341
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4579
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9841
;  :mk-clause               4661
;  :num-allocs              9043799
;  :num-checks              1798
;  :propagations            1833
;  :quant-instantiations    705
;  :rlimit-count            578205)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@564@01 $k@577@01) $k@585@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16854
;  :arith-add-rows          190
;  :arith-assert-diseq      722
;  :arith-assert-lower      1985
;  :arith-assert-upper      1325
;  :arith-bound-prop        110
;  :arith-conflicts         195
;  :arith-eq-adapter        1018
;  :arith-fixed-eqs         301
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1342
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4579
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9842
;  :mk-clause               4661
;  :num-allocs              9043799
;  :num-checks              1799
;  :propagations            1833
;  :quant-instantiations    705
;  :rlimit-count            578283)
(declare-const $k@598@01 $Perm)
(assert ($Perm.isReadVar $k@598@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16854
;  :arith-add-rows          190
;  :arith-assert-diseq      723
;  :arith-assert-lower      1987
;  :arith-assert-upper      1326
;  :arith-bound-prop        110
;  :arith-conflicts         195
;  :arith-eq-adapter        1019
;  :arith-fixed-eqs         301
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1343
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4579
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9846
;  :mk-clause               4663
;  :num-allocs              9043799
;  :num-checks              1800
;  :propagations            1834
;  :quant-instantiations    705
;  :rlimit-count            578479)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@598@01 $Perm.No) (< $Perm.No $k@598@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16854
;  :arith-add-rows          190
;  :arith-assert-diseq      723
;  :arith-assert-lower      1987
;  :arith-assert-upper      1326
;  :arith-bound-prop        110
;  :arith-conflicts         195
;  :arith-eq-adapter        1019
;  :arith-fixed-eqs         301
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1344
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4579
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9846
;  :mk-clause               4663
;  :num-allocs              9043799
;  :num-checks              1801
;  :propagations            1834
;  :quant-instantiations    705
;  :rlimit-count            578529)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@565@01 $k@578@01) $k@587@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16855
;  :arith-add-rows          190
;  :arith-assert-diseq      723
;  :arith-assert-lower      1987
;  :arith-assert-upper      1327
;  :arith-bound-prop        110
;  :arith-conflicts         196
;  :arith-eq-adapter        1020
;  :arith-fixed-eqs         301
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1345
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4581
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9848
;  :mk-clause               4665
;  :num-allocs              9043799
;  :num-checks              1802
;  :propagations            1835
;  :quant-instantiations    705
;  :rlimit-count            578609)
(assert (< $k@598@01 (+ (- $k@565@01 $k@578@01) $k@587@01)))
(assert (<= $Perm.No (- (+ (- $k@565@01 $k@578@01) $k@587@01) $k@598@01)))
(assert (<= (- (+ (- $k@565@01 $k@578@01) $k@587@01) $k@598@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@565@01 $k@578@01) $k@587@01) $k@598@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16855
;  :arith-add-rows          192
;  :arith-assert-diseq      723
;  :arith-assert-lower      1989
;  :arith-assert-upper      1328
;  :arith-bound-prop        110
;  :arith-conflicts         196
;  :arith-eq-adapter        1020
;  :arith-fixed-eqs         301
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1346
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4581
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9851
;  :mk-clause               4665
;  :num-allocs              9043799
;  :num-checks              1803
;  :propagations            1835
;  :quant-instantiations    705
;  :rlimit-count            578845)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@565@01 $k@578@01) $k@587@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16855
;  :arith-add-rows          192
;  :arith-assert-diseq      723
;  :arith-assert-lower      1989
;  :arith-assert-upper      1329
;  :arith-bound-prop        110
;  :arith-conflicts         197
;  :arith-eq-adapter        1020
;  :arith-fixed-eqs         302
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1347
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4581
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9852
;  :mk-clause               4665
;  :num-allocs              9043799
;  :num-checks              1804
;  :propagations            1835
;  :quant-instantiations    705
;  :rlimit-count            578926)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16855
;  :arith-add-rows          192
;  :arith-assert-diseq      723
;  :arith-assert-lower      1989
;  :arith-assert-upper      1329
;  :arith-bound-prop        110
;  :arith-conflicts         197
;  :arith-eq-adapter        1020
;  :arith-fixed-eqs         302
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1348
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4581
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9852
;  :mk-clause               4665
;  :num-allocs              9043799
;  :num-checks              1805
;  :propagations            1835
;  :quant-instantiations    705
;  :rlimit-count            578974)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@565@01 $k@578@01) $k@587@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16855
;  :arith-add-rows          192
;  :arith-assert-diseq      723
;  :arith-assert-lower      1989
;  :arith-assert-upper      1330
;  :arith-bound-prop        110
;  :arith-conflicts         198
;  :arith-eq-adapter        1020
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4581
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9853
;  :mk-clause               4665
;  :num-allocs              9043799
;  :num-checks              1806
;  :propagations            1835
;  :quant-instantiations    705
;  :rlimit-count            579055)
(declare-const $k@599@01 $Perm)
(assert ($Perm.isReadVar $k@599@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16855
;  :arith-add-rows          192
;  :arith-assert-diseq      724
;  :arith-assert-lower      1991
;  :arith-assert-upper      1331
;  :arith-bound-prop        110
;  :arith-conflicts         198
;  :arith-eq-adapter        1021
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4581
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9857
;  :mk-clause               4667
;  :num-allocs              9043799
;  :num-checks              1807
;  :propagations            1836
;  :quant-instantiations    705
;  :rlimit-count            579252)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@599@01 $Perm.No) (< $Perm.No $k@599@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16855
;  :arith-add-rows          192
;  :arith-assert-diseq      724
;  :arith-assert-lower      1991
;  :arith-assert-upper      1331
;  :arith-bound-prop        110
;  :arith-conflicts         198
;  :arith-eq-adapter        1021
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        9
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1351
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4581
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9857
;  :mk-clause               4667
;  :num-allocs              9043799
;  :num-checks              1808
;  :propagations            1836
;  :quant-instantiations    705
;  :rlimit-count            579302)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@566@01 $k@579@01) $k@589@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16856
;  :arith-add-rows          193
;  :arith-assert-diseq      724
;  :arith-assert-lower      1991
;  :arith-assert-upper      1332
;  :arith-bound-prop        110
;  :arith-conflicts         199
;  :arith-eq-adapter        1022
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        9
;  :arith-pivots            430
;  :binary-propagations     22
;  :conflicts               1352
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4583
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9859
;  :mk-clause               4669
;  :num-allocs              9043799
;  :num-checks              1809
;  :propagations            1837
;  :quant-instantiations    705
;  :rlimit-count            579415)
(assert (< $k@599@01 (+ (- $k@566@01 $k@579@01) $k@589@01)))
(assert (<= $Perm.No (- (+ (- $k@566@01 $k@579@01) $k@589@01) $k@599@01)))
(assert (<= (- (+ (- $k@566@01 $k@579@01) $k@589@01) $k@599@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@566@01 $k@579@01) $k@589@01) $k@599@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16856
;  :arith-add-rows          195
;  :arith-assert-diseq      724
;  :arith-assert-lower      1993
;  :arith-assert-upper      1333
;  :arith-bound-prop        110
;  :arith-conflicts         199
;  :arith-eq-adapter        1022
;  :arith-fixed-eqs         303
;  :arith-offset-eqs        9
;  :arith-pivots            430
;  :binary-propagations     22
;  :conflicts               1353
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4583
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9862
;  :mk-clause               4669
;  :num-allocs              9043799
;  :num-checks              1810
;  :propagations            1837
;  :quant-instantiations    705
;  :rlimit-count            579651)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@566@01 $k@579@01) $k@589@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16856
;  :arith-add-rows          196
;  :arith-assert-diseq      724
;  :arith-assert-lower      1993
;  :arith-assert-upper      1334
;  :arith-bound-prop        110
;  :arith-conflicts         200
;  :arith-eq-adapter        1022
;  :arith-fixed-eqs         304
;  :arith-offset-eqs        9
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1354
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4583
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9863
;  :mk-clause               4669
;  :num-allocs              9043799
;  :num-checks              1811
;  :propagations            1837
;  :quant-instantiations    705
;  :rlimit-count            579760)
(declare-const $k@600@01 $Perm)
(assert ($Perm.isReadVar $k@600@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16856
;  :arith-add-rows          196
;  :arith-assert-diseq      725
;  :arith-assert-lower      1995
;  :arith-assert-upper      1335
;  :arith-bound-prop        110
;  :arith-conflicts         200
;  :arith-eq-adapter        1023
;  :arith-fixed-eqs         304
;  :arith-offset-eqs        9
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1355
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4583
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9867
;  :mk-clause               4671
;  :num-allocs              9043799
;  :num-checks              1812
;  :propagations            1838
;  :quant-instantiations    705
;  :rlimit-count            579956)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16856
;  :arith-add-rows          196
;  :arith-assert-diseq      725
;  :arith-assert-lower      1995
;  :arith-assert-upper      1336
;  :arith-bound-prop        110
;  :arith-conflicts         201
;  :arith-eq-adapter        1023
;  :arith-fixed-eqs         305
;  :arith-offset-eqs        9
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1356
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4583
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9868
;  :mk-clause               4671
;  :num-allocs              9043799
;  :num-checks              1813
;  :propagations            1838
;  :quant-instantiations    705
;  :rlimit-count            580037)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@600@01 $Perm.No) (< $Perm.No $k@600@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16856
;  :arith-add-rows          196
;  :arith-assert-diseq      725
;  :arith-assert-lower      1995
;  :arith-assert-upper      1336
;  :arith-bound-prop        110
;  :arith-conflicts         201
;  :arith-eq-adapter        1023
;  :arith-fixed-eqs         305
;  :arith-offset-eqs        9
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1357
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4583
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9868
;  :mk-clause               4671
;  :num-allocs              9043799
;  :num-checks              1814
;  :propagations            1838
;  :quant-instantiations    705
;  :rlimit-count            580087)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  $t@584@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16856
;  :arith-add-rows          196
;  :arith-assert-diseq      725
;  :arith-assert-lower      1995
;  :arith-assert-upper      1336
;  :arith-bound-prop        110
;  :arith-conflicts         201
;  :arith-eq-adapter        1023
;  :arith-fixed-eqs         305
;  :arith-offset-eqs        9
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1357
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4583
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9868
;  :mk-clause               4671
;  :num-allocs              9043799
;  :num-checks              1815
;  :propagations            1838
;  :quant-instantiations    705
;  :rlimit-count            580098)
(push) ; 9
(assert (not (not (= (+ (- $k@567@01 $k@580@01) $k@591@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          196
;  :arith-assert-diseq      725
;  :arith-assert-lower      1995
;  :arith-assert-upper      1337
;  :arith-bound-prop        110
;  :arith-conflicts         202
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         305
;  :arith-offset-eqs        9
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1358
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9870
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1816
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580176)
(assert (< $k@600@01 (+ (- $k@567@01 $k@580@01) $k@591@01)))
(assert (<= $Perm.No (- (+ (- $k@567@01 $k@580@01) $k@591@01) $k@600@01)))
(assert (<= (- (+ (- $k@567@01 $k@580@01) $k@591@01) $k@600@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@567@01 $k@580@01) $k@591@01) $k@600@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
      $Ref.null))))
; [eval] diz.Write_b_m.Main_nand.Nand_gate_m == diz.Write_b_m
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          197
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1338
;  :arith-bound-prop        110
;  :arith-conflicts         202
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         305
;  :arith-offset-eqs        9
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1359
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9873
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1817
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580418)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@563@01 $k@576@01) $k@583@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          197
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1339
;  :arith-bound-prop        110
;  :arith-conflicts         203
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         306
;  :arith-offset-eqs        9
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1360
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9874
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1818
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580499)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  $t@584@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          197
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1339
;  :arith-bound-prop        110
;  :arith-conflicts         203
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         306
;  :arith-offset-eqs        9
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1360
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9874
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1819
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580510)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@567@01 $k@580@01) $k@591@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          197
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1340
;  :arith-bound-prop        110
;  :arith-conflicts         204
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         307
;  :arith-offset-eqs        9
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1361
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9875
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1820
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580588)
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          197
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1340
;  :arith-bound-prop        110
;  :arith-conflicts         204
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         307
;  :arith-offset-eqs        9
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1362
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9875
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1821
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580636)
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(push) ; 9
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          197
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1340
;  :arith-bound-prop        110
;  :arith-conflicts         204
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         307
;  :arith-offset-eqs        9
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1363
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9875
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1822
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580684)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@565@01 $k@578@01) $k@587@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          197
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1341
;  :arith-bound-prop        110
;  :arith-conflicts         205
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        9
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1364
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9876
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1823
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580765)
(set-option :timeout 0)
(push) ; 9
(assert (not (= $t@588@01 diz@498@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16857
;  :arith-add-rows          197
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1341
;  :arith-bound-prop        110
;  :arith-conflicts         205
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        9
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1364
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 3131
;  :datatype-occurs-check   1243
;  :datatype-splits         2477
;  :decisions               3333
;  :del-clause              4585
;  :final-checks            418
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9876
;  :mk-clause               4673
;  :num-allocs              9043799
;  :num-checks              1824
;  :propagations            1839
;  :quant-instantiations    705
;  :rlimit-count            580776
;  :time                    0.00)
(assert (= $t@588@01 diz@498@01))
(pop) ; 8
(push) ; 8
; [else-branch: 201 | !(First:(Second:(Second:(Second:($t@560@01))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@560@01))))))[1] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
          1)
        (- 0 2))))))
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17059
;  :arith-add-rows          198
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1341
;  :arith-bound-prop        110
;  :arith-conflicts         205
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        9
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1365
;  :datatype-accessor-ax    748
;  :datatype-constructor-ax 3181
;  :datatype-occurs-check   1257
;  :datatype-splits         2513
;  :decisions               3383
;  :del-clause              4599
;  :final-checks            421
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9916
;  :mk-clause               4674
;  :num-allocs              9043799
;  :num-checks              1825
;  :propagations            1842
;  :quant-instantiations    705
;  :rlimit-count            582330)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17227
;  :arith-add-rows          198
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1341
;  :arith-bound-prop        110
;  :arith-conflicts         205
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        9
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1366
;  :datatype-accessor-ax    749
;  :datatype-constructor-ax 3231
;  :datatype-occurs-check   1271
;  :datatype-splits         2549
;  :decisions               3433
;  :del-clause              4600
;  :final-checks            424
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9956
;  :mk-clause               4675
;  :num-allocs              9043799
;  :num-checks              1826
;  :propagations            1845
;  :quant-instantiations    705
;  :rlimit-count            583668)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17395
;  :arith-add-rows          198
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1341
;  :arith-bound-prop        110
;  :arith-conflicts         205
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        9
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1367
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 3281
;  :datatype-occurs-check   1285
;  :datatype-splits         2585
;  :decisions               3483
;  :del-clause              4601
;  :final-checks            427
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             9996
;  :mk-clause               4676
;  :num-allocs              9043799
;  :num-checks              1827
;  :propagations            1848
;  :quant-instantiations    705
;  :rlimit-count            585006)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17563
;  :arith-add-rows          198
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1341
;  :arith-bound-prop        110
;  :arith-conflicts         205
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        9
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1368
;  :datatype-accessor-ax    751
;  :datatype-constructor-ax 3331
;  :datatype-occurs-check   1299
;  :datatype-splits         2621
;  :decisions               3533
;  :del-clause              4602
;  :final-checks            430
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10036
;  :mk-clause               4677
;  :num-allocs              9043799
;  :num-checks              1828
;  :propagations            1851
;  :quant-instantiations    705
;  :rlimit-count            586344)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17731
;  :arith-add-rows          198
;  :arith-assert-diseq      725
;  :arith-assert-lower      1997
;  :arith-assert-upper      1341
;  :arith-bound-prop        110
;  :arith-conflicts         205
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         308
;  :arith-offset-eqs        9
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1369
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 3381
;  :datatype-occurs-check   1313
;  :datatype-splits         2657
;  :decisions               3583
;  :del-clause              4603
;  :final-checks            433
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10076
;  :mk-clause               4678
;  :num-allocs              9043799
;  :num-checks              1829
;  :propagations            1854
;  :quant-instantiations    705
;  :rlimit-count            587682)
(declare-const $t@601@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@561@01)
    (= $t@601@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))))
  (implies
    (< $Perm.No (- $k@536@01 $k@568@01))
    (= $t@601@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))))
(assert (<= $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01))))
(assert (<= (+ $k@561@01 (- $k@536@01 $k@568@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))
  (not (= diz@498@01 $Ref.null))))
; [eval] !(diz.Write_b_m.Main_process_state[1] != -1 || diz.Write_b_m.Main_event_state[1] != -2)
; [eval] diz.Write_b_m.Main_process_state[1] != -1 || diz.Write_b_m.Main_event_state[1] != -2
; [eval] diz.Write_b_m.Main_process_state[1] != -1
; [eval] diz.Write_b_m.Main_process_state[1]
(push) ; 8
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17737
;  :arith-add-rows          199
;  :arith-assert-diseq      725
;  :arith-assert-lower      1998
;  :arith-assert-upper      1343
;  :arith-bound-prop        110
;  :arith-conflicts         206
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         309
;  :arith-offset-eqs        9
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               1370
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 3381
;  :datatype-occurs-check   1313
;  :datatype-splits         2657
;  :decisions               3583
;  :del-clause              4603
;  :final-checks            433
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10081
;  :mk-clause               4678
;  :num-allocs              9043799
;  :num-checks              1830
;  :propagations            1854
;  :quant-instantiations    705
;  :rlimit-count            588006)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17737
;  :arith-add-rows          199
;  :arith-assert-diseq      725
;  :arith-assert-lower      1998
;  :arith-assert-upper      1343
;  :arith-bound-prop        110
;  :arith-conflicts         206
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         309
;  :arith-offset-eqs        9
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 3381
;  :datatype-occurs-check   1313
;  :datatype-splits         2657
;  :decisions               3583
;  :del-clause              4603
;  :final-checks            433
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10082
;  :mk-clause               4678
;  :num-allocs              9043799
;  :num-checks              1831
;  :propagations            1854
;  :quant-instantiations    705
;  :rlimit-count            588086)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17737
;  :arith-add-rows          199
;  :arith-assert-diseq      725
;  :arith-assert-lower      1998
;  :arith-assert-upper      1343
;  :arith-bound-prop        110
;  :arith-conflicts         206
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         309
;  :arith-offset-eqs        9
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 3381
;  :datatype-occurs-check   1313
;  :datatype-splits         2657
;  :decisions               3583
;  :del-clause              4603
;  :final-checks            433
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10082
;  :mk-clause               4678
;  :num-allocs              9043799
;  :num-checks              1832
;  :propagations            1854
;  :quant-instantiations    705
;  :rlimit-count            588101)
; [eval] -1
(push) ; 8
; [then-branch: 214 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1 | live]
; [else-branch: 214 | First:(Second:(Second:(Second:($t@560@01))))[1] == -1 | live]
(push) ; 9
; [then-branch: 214 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      1)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 214 | First:(Second:(Second:(Second:($t@560@01))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    1)
  (- 0 1)))
; [eval] diz.Write_b_m.Main_event_state[1] != -2
; [eval] diz.Write_b_m.Main_event_state[1]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17738
;  :arith-add-rows          199
;  :arith-assert-diseq      725
;  :arith-assert-lower      1998
;  :arith-assert-upper      1344
;  :arith-bound-prop        110
;  :arith-conflicts         207
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         310
;  :arith-offset-eqs        9
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               1372
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 3381
;  :datatype-occurs-check   1313
;  :datatype-splits         2657
;  :decisions               3583
;  :del-clause              4603
;  :final-checks            433
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10084
;  :mk-clause               4678
;  :num-allocs              9043799
;  :num-checks              1833
;  :propagations            1854
;  :quant-instantiations    705
;  :rlimit-count            588324
;  :time                    0.01)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17738
;  :arith-add-rows          199
;  :arith-assert-diseq      725
;  :arith-assert-lower      1998
;  :arith-assert-upper      1344
;  :arith-bound-prop        110
;  :arith-conflicts         207
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         310
;  :arith-offset-eqs        9
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               1373
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 3381
;  :datatype-occurs-check   1313
;  :datatype-splits         2657
;  :decisions               3583
;  :del-clause              4603
;  :final-checks            433
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10085
;  :mk-clause               4678
;  :num-allocs              9043799
;  :num-checks              1834
;  :propagations            1854
;  :quant-instantiations    705
;  :rlimit-count            588404)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17738
;  :arith-add-rows          199
;  :arith-assert-diseq      725
;  :arith-assert-lower      1998
;  :arith-assert-upper      1344
;  :arith-bound-prop        110
;  :arith-conflicts         207
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         310
;  :arith-offset-eqs        9
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               1373
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 3381
;  :datatype-occurs-check   1313
;  :datatype-splits         2657
;  :decisions               3583
;  :del-clause              4603
;  :final-checks            433
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10085
;  :mk-clause               4678
;  :num-allocs              9043799
;  :num-checks              1835
;  :propagations            1854
;  :quant-instantiations    705
;  :rlimit-count            588419)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
        1)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17890
;  :arith-add-rows          199
;  :arith-assert-diseq      725
;  :arith-assert-lower      1998
;  :arith-assert-upper      1344
;  :arith-bound-prop        110
;  :arith-conflicts         207
;  :arith-eq-adapter        1024
;  :arith-fixed-eqs         310
;  :arith-offset-eqs        9
;  :arith-pivots            445
;  :binary-propagations     22
;  :conflicts               1374
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3419
;  :datatype-occurs-check   1325
;  :datatype-splits         2692
;  :decisions               3621
;  :del-clause              4604
;  :final-checks            436
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10126
;  :mk-clause               4679
;  :num-allocs              9043799
;  :num-checks              1836
;  :propagations            1857
;  :quant-instantiations    705
;  :rlimit-count            589754)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
          1)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18044
;  :arith-add-rows          200
;  :arith-assert-diseq      728
;  :arith-assert-lower      2009
;  :arith-assert-upper      1349
;  :arith-bound-prop        110
;  :arith-conflicts         207
;  :arith-eq-adapter        1029
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        9
;  :arith-pivots            449
;  :binary-propagations     22
;  :conflicts               1374
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4629
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10184
;  :mk-clause               4704
;  :num-allocs              9043799
;  :num-checks              1837
;  :propagations            1870
;  :quant-instantiations    709
;  :rlimit-count            591279)
; [then-branch: 215 | !(First:(Second:(Second:(Second:($t@560@01))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@560@01))))))[1] != -2) | live]
; [else-branch: 215 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@560@01))))))[1] != -2 | live]
(push) ; 8
; [then-branch: 215 | !(First:(Second:(Second:(Second:($t@560@01))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@560@01))))))[1] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
          1)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(declare-const $k@602@01 $Perm)
(assert ($Perm.isReadVar $k@602@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@602@01 $Perm.No) (< $Perm.No $k@602@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18046
;  :arith-add-rows          200
;  :arith-assert-diseq      729
;  :arith-assert-lower      2011
;  :arith-assert-upper      1350
;  :arith-bound-prop        110
;  :arith-conflicts         207
;  :arith-eq-adapter        1030
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        9
;  :arith-pivots            449
;  :binary-propagations     22
;  :conflicts               1375
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4629
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10190
;  :mk-clause               4706
;  :num-allocs              9043799
;  :num-checks              1838
;  :propagations            1871
;  :quant-instantiations    709
;  :rlimit-count            591674)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ $k@561@01 (- $k@536@01 $k@568@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18047
;  :arith-add-rows          200
;  :arith-assert-diseq      729
;  :arith-assert-lower      2011
;  :arith-assert-upper      1351
;  :arith-bound-prop        110
;  :arith-conflicts         208
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        9
;  :arith-pivots            449
;  :binary-propagations     22
;  :conflicts               1376
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10192
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1839
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            591754)
(assert (< $k@602@01 (+ $k@561@01 (- $k@536@01 $k@568@01))))
(assert (<= $Perm.No (- (+ $k@561@01 (- $k@536@01 $k@568@01)) $k@602@01)))
(assert (<= (- (+ $k@561@01 (- $k@536@01 $k@568@01)) $k@602@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@561@01 (- $k@536@01 $k@568@01)) $k@602@01))
  (not (= diz@498@01 $Ref.null))))
; [eval] diz.Write_b_m != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18047
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1353
;  :arith-bound-prop        110
;  :arith-conflicts         209
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         313
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1377
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10196
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1840
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592029)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= $t@601@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18048
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1353
;  :arith-bound-prop        110
;  :arith-conflicts         209
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         313
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1378
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10197
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1841
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592077)
(assert (not (= $t@601@01 $Ref.null)))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1354
;  :arith-bound-prop        110
;  :arith-conflicts         210
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         314
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1379
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10199
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1842
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592214)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1354
;  :arith-bound-prop        110
;  :arith-conflicts         210
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         314
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1380
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10200
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1843
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592294)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1355
;  :arith-bound-prop        110
;  :arith-conflicts         211
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10201
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1844
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592375)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1355
;  :arith-bound-prop        110
;  :arith-conflicts         211
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1382
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10202
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1845
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592455
;  :time                    0.00)
; [eval] |diz.Write_b_m.Main_process_state| == 3
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1356
;  :arith-bound-prop        110
;  :arith-conflicts         212
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         316
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1383
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10203
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1846
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592536
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1356
;  :arith-bound-prop        110
;  :arith-conflicts         212
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         316
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1384
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10204
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1847
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592616)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1357
;  :arith-bound-prop        110
;  :arith-conflicts         213
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         317
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1385
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10205
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1848
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592697)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1357
;  :arith-bound-prop        110
;  :arith-conflicts         213
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         317
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1386
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10206
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1849
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592777)
; [eval] |diz.Write_b_m.Main_event_state| == 3
; [eval] |diz.Write_b_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1358
;  :arith-bound-prop        110
;  :arith-conflicts         214
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1387
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10207
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1850
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592858
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2013
;  :arith-assert-upper      1358
;  :arith-bound-prop        110
;  :arith-conflicts         214
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1388
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10208
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1851
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            592938)
; [eval] (forall i__52: Int :: { diz.Write_b_m.Main_process_state[i__52] } 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|)
(declare-const i__52@603@01 Int)
(push) ; 9
; [eval] 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state| ==> diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= i__52 && i__52 < |diz.Write_b_m.Main_process_state|
; [eval] 0 <= i__52
(push) ; 10
; [then-branch: 216 | 0 <= i__52@603@01 | live]
; [else-branch: 216 | !(0 <= i__52@603@01) | live]
(push) ; 11
; [then-branch: 216 | 0 <= i__52@603@01]
(assert (<= 0 i__52@603@01))
; [eval] i__52 < |diz.Write_b_m.Main_process_state|
; [eval] |diz.Write_b_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2014
;  :arith-assert-upper      1359
;  :arith-bound-prop        110
;  :arith-conflicts         215
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1389
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10210
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1852
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            593072)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2014
;  :arith-assert-upper      1359
;  :arith-bound-prop        110
;  :arith-conflicts         215
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         319
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1390
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10211
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1853
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            593152)
(pop) ; 11
(push) ; 11
; [else-branch: 216 | !(0 <= i__52@603@01)]
(assert (not (<= 0 i__52@603@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 217 | i__52@603@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i__52@603@01 | live]
; [else-branch: 217 | !(i__52@603@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i__52@603@01) | live]
(push) ; 11
; [then-branch: 217 | i__52@603@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i__52@603@01]
(assert (and
  (<
    i__52@603@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
  (<= 0 i__52@603@01)))
; [eval] diz.Write_b_m.Main_process_state[i__52] == -1 || 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__52] == -1
; [eval] diz.Write_b_m.Main_process_state[i__52]
(push) ; 12
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2015
;  :arith-assert-upper      1361
;  :arith-bound-prop        110
;  :arith-conflicts         216
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1391
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10214
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1854
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            593342)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2015
;  :arith-assert-upper      1361
;  :arith-bound-prop        110
;  :arith-conflicts         216
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1392
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10215
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1855
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            593422)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__52@603@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      729
;  :arith-assert-lower      2015
;  :arith-assert-upper      1361
;  :arith-bound-prop        110
;  :arith-conflicts         216
;  :arith-eq-adapter        1031
;  :arith-fixed-eqs         320
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1392
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10215
;  :mk-clause               4708
;  :num-allocs              9043799
;  :num-checks              1856
;  :propagations            1872
;  :quant-instantiations    709
;  :rlimit-count            593431)
; [eval] -1
(push) ; 12
; [then-branch: 218 | First:(Second:(Second:(Second:($t@560@01))))[i__52@603@01] == -1 | live]
; [else-branch: 218 | First:(Second:(Second:(Second:($t@560@01))))[i__52@603@01] != -1 | live]
(push) ; 13
; [then-branch: 218 | First:(Second:(Second:(Second:($t@560@01))))[i__52@603@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i__52@603@01)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 218 | First:(Second:(Second:(Second:($t@560@01))))[i__52@603@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      i__52@603@01)
    (- 0 1))))
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__52] && diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] 0 <= diz.Write_b_m.Main_process_state[i__52]
; [eval] diz.Write_b_m.Main_process_state[i__52]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      730
;  :arith-assert-lower      2018
;  :arith-assert-upper      1363
;  :arith-bound-prop        110
;  :arith-conflicts         217
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1393
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10222
;  :mk-clause               4712
;  :num-allocs              9043799
;  :num-checks              1857
;  :propagations            1874
;  :quant-instantiations    710
;  :rlimit-count            593735)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      730
;  :arith-assert-lower      2018
;  :arith-assert-upper      1363
;  :arith-bound-prop        110
;  :arith-conflicts         217
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10223
;  :mk-clause               4712
;  :num-allocs              9043799
;  :num-checks              1858
;  :propagations            1874
;  :quant-instantiations    710
;  :rlimit-count            593815)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__52@603@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      730
;  :arith-assert-lower      2018
;  :arith-assert-upper      1363
;  :arith-bound-prop        110
;  :arith-conflicts         217
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10223
;  :mk-clause               4712
;  :num-allocs              9043799
;  :num-checks              1859
;  :propagations            1874
;  :quant-instantiations    710
;  :rlimit-count            593824)
(push) ; 14
; [then-branch: 219 | 0 <= First:(Second:(Second:(Second:($t@560@01))))[i__52@603@01] | live]
; [else-branch: 219 | !(0 <= First:(Second:(Second:(Second:($t@560@01))))[i__52@603@01]) | live]
(push) ; 15
; [then-branch: 219 | 0 <= First:(Second:(Second:(Second:($t@560@01))))[i__52@603@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i__52@603@01)))
; [eval] diz.Write_b_m.Main_process_state[i__52] < |diz.Write_b_m.Main_event_state|
; [eval] diz.Write_b_m.Main_process_state[i__52]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      730
;  :arith-assert-lower      2018
;  :arith-assert-upper      1364
;  :arith-bound-prop        110
;  :arith-conflicts         218
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1395
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10224
;  :mk-clause               4712
;  :num-allocs              9043799
;  :num-checks              1860
;  :propagations            1874
;  :quant-instantiations    710
;  :rlimit-count            594010
;  :time                    0.00)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      730
;  :arith-assert-lower      2018
;  :arith-assert-upper      1364
;  :arith-bound-prop        110
;  :arith-conflicts         218
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10225
;  :mk-clause               4712
;  :num-allocs              9043799
;  :num-checks              1861
;  :propagations            1874
;  :quant-instantiations    710
;  :rlimit-count            594090)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__52@603@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      730
;  :arith-assert-lower      2018
;  :arith-assert-upper      1364
;  :arith-bound-prop        110
;  :arith-conflicts         218
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10225
;  :mk-clause               4712
;  :num-allocs              9043799
;  :num-checks              1862
;  :propagations            1874
;  :quant-instantiations    710
;  :rlimit-count            594099)
; [eval] |diz.Write_b_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      730
;  :arith-assert-lower      2018
;  :arith-assert-upper      1365
;  :arith-bound-prop        110
;  :arith-conflicts         219
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         323
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1397
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10226
;  :mk-clause               4712
;  :num-allocs              9043799
;  :num-checks              1863
;  :propagations            1874
;  :quant-instantiations    710
;  :rlimit-count            594180
;  :time                    0.00)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      730
;  :arith-assert-lower      2018
;  :arith-assert-upper      1365
;  :arith-bound-prop        110
;  :arith-conflicts         219
;  :arith-eq-adapter        1032
;  :arith-fixed-eqs         323
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1398
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4631
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10227
;  :mk-clause               4712
;  :num-allocs              9043799
;  :num-checks              1864
;  :propagations            1874
;  :quant-instantiations    710
;  :rlimit-count            594260)
(pop) ; 15
(push) ; 15
; [else-branch: 219 | !(0 <= First:(Second:(Second:(Second:($t@560@01))))[i__52@603@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
      i__52@603@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 217 | !(i__52@603@01 < |First:(Second:(Second:(Second:($t@560@01))))| && 0 <= i__52@603@01)]
(assert (not
  (and
    (<
      i__52@603@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
    (<= 0 i__52@603@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__52@603@01 Int)) (!
  (implies
    (and
      (<
        i__52@603@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
      (<= 0 i__52@603@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          i__52@603@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i__52@603@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i__52@603@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i__52@603@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      731
;  :arith-assert-lower      2019
;  :arith-assert-upper      1366
;  :arith-bound-prop        110
;  :arith-conflicts         219
;  :arith-eq-adapter        1033
;  :arith-fixed-eqs         323
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1399
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10235
;  :mk-clause               4724
;  :num-allocs              9043799
;  :num-checks              1865
;  :propagations            1876
;  :quant-instantiations    711
;  :rlimit-count            594706)
(assert (forall ((i__52@603@01 Int)) (!
  (implies
    (and
      (<
        i__52@603@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
      (<= 0 i__52@603@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
          i__52@603@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i__52@603@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
            i__52@603@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    i__52@603@01))
  :qid |prog.l<no position>|)))
(declare-const $k@604@01 $Perm)
(assert ($Perm.isReadVar $k@604@01 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2021
;  :arith-assert-upper      1368
;  :arith-bound-prop        110
;  :arith-conflicts         220
;  :arith-eq-adapter        1034
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1400
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10241
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1866
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595298)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@604@01 $Perm.No) (< $Perm.No $k@604@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2021
;  :arith-assert-upper      1368
;  :arith-bound-prop        110
;  :arith-conflicts         220
;  :arith-eq-adapter        1034
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1401
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10241
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1867
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595348)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2021
;  :arith-assert-upper      1368
;  :arith-bound-prop        110
;  :arith-conflicts         220
;  :arith-eq-adapter        1034
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1401
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10241
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1868
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595367)
(push) ; 9
(assert (not (not (= (- $k@538@01 $k@570@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2021
;  :arith-assert-upper      1368
;  :arith-bound-prop        110
;  :arith-conflicts         220
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        9
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1402
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10242
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1869
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595435)
(assert (< $k@604@01 (- $k@538@01 $k@570@01)))
(assert (<= $Perm.No (- (- $k@538@01 $k@570@01) $k@604@01)))
(assert (<= (- (- $k@538@01 $k@570@01) $k@604@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@538@01 $k@570@01) $k@604@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1370
;  :arith-bound-prop        110
;  :arith-conflicts         221
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1403
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10246
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1870
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595707)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1370
;  :arith-bound-prop        110
;  :arith-conflicts         221
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1403
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10246
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1871
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595726)
(push) ; 9
(assert (not (< $Perm.No (- $k@538@01 $k@570@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1370
;  :arith-bound-prop        110
;  :arith-conflicts         221
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         325
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1403
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10246
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1872
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595745
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10247
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1873
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595826)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10247
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1874
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595845)
(push) ; 9
(assert (not (< $Perm.No (- $k@538@01 $k@570@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18049
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 3454
;  :datatype-occurs-check   1332
;  :datatype-splits         2725
;  :decisions               3658
;  :del-clause              4647
;  :final-checks            438
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10247
;  :mk-clause               4726
;  :num-allocs              9043799
;  :num-checks              1875
;  :propagations            1877
;  :quant-instantiations    711
;  :rlimit-count            595864)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18233
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1406
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 3505
;  :datatype-occurs-check   1344
;  :datatype-splits         2762
;  :decisions               3707
;  :del-clause              4649
;  :final-checks            441
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10293
;  :mk-clause               4728
;  :num-allocs              9043799
;  :num-checks              1876
;  :propagations            1881
;  :quant-instantiations    711
;  :rlimit-count            597341)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18529
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1408
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 3580
;  :datatype-occurs-check   1368
;  :datatype-splits         2832
;  :decisions               3782
;  :del-clause              4653
;  :final-checks            447
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10365
;  :mk-clause               4729
;  :num-allocs              9043799
;  :num-checks              1879
;  :propagations            1888
;  :quant-instantiations    711
;  :rlimit-count            599682)
(declare-const $t@605@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18701
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1409
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10404
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1880
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            601101)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18701
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1410
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10405
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1881
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            601186)
(declare-const $t@606@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18701
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1411
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10406
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1882
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            601271)
(declare-const $t@607@01 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18701
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1412
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10407
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1883
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            601356)
(declare-const $t@608@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@538@01 $k@570@01) $k@604@01))
    (=
      $t@605@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))
  (implies
    (< $Perm.No $k@563@01)
    (=
      $t@605@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@566@01)
    (=
      $t@606@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@541@01 $k@573@01))
    (=
      $t@606@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@565@01)
    (=
      $t@607@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@540@01 $k@572@01))
    (=
      $t@607@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@564@01)
    (=
      $t@608@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
  (implies
    (< $Perm.No (- $k@539@01 $k@571@01))
    (=
      $t@608@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18715
;  :arith-add-rows          202
;  :arith-assert-diseq      732
;  :arith-assert-lower      2023
;  :arith-assert-upper      1371
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1413
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10414
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1884
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            602418)
(declare-const $t@609@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@542@01 $k@574@01))
    (=
      $t@609@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@567@01)
    (=
      $t@609@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@564@01 (- $k@539@01 $k@571@01))))
(assert (<= (+ $k@564@01 (- $k@539@01 $k@571@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@564@01 (- $k@539@01 $k@571@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (<= $Perm.No (+ $k@565@01 (- $k@540@01 $k@572@01))))
(assert (<= (+ $k@565@01 (- $k@540@01 $k@572@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@565@01 (- $k@540@01 $k@572@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (<= $Perm.No (+ $k@566@01 (- $k@541@01 $k@573@01))))
(assert (<= (+ $k@566@01 (- $k@541@01 $k@573@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@566@01 (- $k@541@01 $k@573@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@538@01 $k@570@01) $k@604@01) $k@563@01)))
(assert (<= (+ (- (- $k@538@01 $k@570@01) $k@604@01) $k@563@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@538@01 $k@570@01) $k@604@01) $k@563@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@542@01 $k@574@01) $k@567@01)))
(assert (<= (+ (- $k@542@01 $k@574@01) $k@567@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@542@01 $k@574@01) $k@567@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
      $Ref.null))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1376
;  :arith-bound-prop        110
;  :arith-conflicts         222
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         326
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1414
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10426
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1885
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603297)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1377
;  :arith-bound-prop        110
;  :arith-conflicts         223
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10427
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1886
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603378)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1377
;  :arith-bound-prop        110
;  :arith-conflicts         223
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10427
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1887
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603397
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (- $k@538@01 $k@570@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1377
;  :arith-bound-prop        110
;  :arith-conflicts         223
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10427
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1888
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603416)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1377
;  :arith-bound-prop        110
;  :arith-conflicts         223
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1416
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10428
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1889
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603581
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1378
;  :arith-bound-prop        110
;  :arith-conflicts         224
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10429
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1890
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603662)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1378
;  :arith-bound-prop        110
;  :arith-conflicts         224
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10429
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1891
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603681)
(push) ; 9
(assert (not (< $Perm.No (- $k@538@01 $k@570@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1378
;  :arith-bound-prop        110
;  :arith-conflicts         224
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10429
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1892
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603700
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      732
;  :arith-assert-lower      2028
;  :arith-assert-upper      1378
;  :arith-bound-prop        110
;  :arith-conflicts         224
;  :arith-eq-adapter        1035
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10430
;  :mk-clause               4730
;  :num-allocs              9043799
;  :num-checks              1893
;  :propagations            1892
;  :quant-instantiations    711
;  :rlimit-count            603865)
(declare-const $k@610@01 $Perm)
(assert ($Perm.isReadVar $k@610@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      733
;  :arith-assert-lower      2030
;  :arith-assert-upper      1380
;  :arith-bound-prop        110
;  :arith-conflicts         225
;  :arith-eq-adapter        1036
;  :arith-fixed-eqs         329
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1419
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10435
;  :mk-clause               4732
;  :num-allocs              9043799
;  :num-checks              1894
;  :propagations            1893
;  :quant-instantiations    711
;  :rlimit-count            604094
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@610@01 $Perm.No) (< $Perm.No $k@610@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      733
;  :arith-assert-lower      2030
;  :arith-assert-upper      1380
;  :arith-bound-prop        110
;  :arith-conflicts         225
;  :arith-eq-adapter        1036
;  :arith-fixed-eqs         329
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1420
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10435
;  :mk-clause               4732
;  :num-allocs              9043799
;  :num-checks              1895
;  :propagations            1893
;  :quant-instantiations    711
;  :rlimit-count            604144)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18716
;  :arith-add-rows          207
;  :arith-assert-diseq      733
;  :arith-assert-lower      2030
;  :arith-assert-upper      1380
;  :arith-bound-prop        110
;  :arith-conflicts         225
;  :arith-eq-adapter        1036
;  :arith-fixed-eqs         329
;  :arith-offset-eqs        9
;  :arith-pivots            451
;  :binary-propagations     22
;  :conflicts               1421
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4654
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10436
;  :mk-clause               4732
;  :num-allocs              9043799
;  :num-checks              1896
;  :propagations            1893
;  :quant-instantiations    711
;  :rlimit-count            604224)
(push) ; 9
(assert (not (not (= (+ $k@564@01 (- $k@539@01 $k@571@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          207
;  :arith-assert-diseq      733
;  :arith-assert-lower      2030
;  :arith-assert-upper      1381
;  :arith-bound-prop        110
;  :arith-conflicts         226
;  :arith-eq-adapter        1037
;  :arith-fixed-eqs         329
;  :arith-offset-eqs        9
;  :arith-pivots            452
;  :binary-propagations     22
;  :conflicts               1422
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10438
;  :mk-clause               4734
;  :num-allocs              9043799
;  :num-checks              1897
;  :propagations            1894
;  :quant-instantiations    711
;  :rlimit-count            604308)
(assert (< $k@610@01 (+ $k@564@01 (- $k@539@01 $k@571@01))))
(assert (<= $Perm.No (- (+ $k@564@01 (- $k@539@01 $k@571@01)) $k@610@01)))
(assert (<= (- (+ $k@564@01 (- $k@539@01 $k@571@01)) $k@610@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@564@01 (- $k@539@01 $k@571@01)) $k@610@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      733
;  :arith-assert-lower      2032
;  :arith-assert-upper      1383
;  :arith-bound-prop        110
;  :arith-conflicts         227
;  :arith-eq-adapter        1037
;  :arith-fixed-eqs         330
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1423
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10442
;  :mk-clause               4734
;  :num-allocs              9043799
;  :num-checks              1898
;  :propagations            1894
;  :quant-instantiations    711
;  :rlimit-count            604583)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      733
;  :arith-assert-lower      2032
;  :arith-assert-upper      1383
;  :arith-bound-prop        110
;  :arith-conflicts         227
;  :arith-eq-adapter        1037
;  :arith-fixed-eqs         330
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1423
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10442
;  :mk-clause               4734
;  :num-allocs              9043799
;  :num-checks              1899
;  :propagations            1894
;  :quant-instantiations    711
;  :rlimit-count            604602
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (- $k@539@01 $k@571@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      733
;  :arith-assert-lower      2032
;  :arith-assert-upper      1383
;  :arith-bound-prop        110
;  :arith-conflicts         227
;  :arith-eq-adapter        1037
;  :arith-fixed-eqs         330
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1423
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10442
;  :mk-clause               4734
;  :num-allocs              9043799
;  :num-checks              1900
;  :propagations            1894
;  :quant-instantiations    711
;  :rlimit-count            604621)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      733
;  :arith-assert-lower      2032
;  :arith-assert-upper      1384
;  :arith-bound-prop        110
;  :arith-conflicts         228
;  :arith-eq-adapter        1037
;  :arith-fixed-eqs         331
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10443
;  :mk-clause               4734
;  :num-allocs              9043799
;  :num-checks              1901
;  :propagations            1894
;  :quant-instantiations    711
;  :rlimit-count            604702)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      733
;  :arith-assert-lower      2032
;  :arith-assert-upper      1384
;  :arith-bound-prop        110
;  :arith-conflicts         228
;  :arith-eq-adapter        1037
;  :arith-fixed-eqs         331
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10443
;  :mk-clause               4734
;  :num-allocs              9043799
;  :num-checks              1902
;  :propagations            1894
;  :quant-instantiations    711
;  :rlimit-count            604721)
(push) ; 9
(assert (not (< $Perm.No (- $k@539@01 $k@571@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      733
;  :arith-assert-lower      2032
;  :arith-assert-upper      1384
;  :arith-bound-prop        110
;  :arith-conflicts         228
;  :arith-eq-adapter        1037
;  :arith-fixed-eqs         331
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10443
;  :mk-clause               4734
;  :num-allocs              9043799
;  :num-checks              1903
;  :propagations            1894
;  :quant-instantiations    711
;  :rlimit-count            604740)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      733
;  :arith-assert-lower      2032
;  :arith-assert-upper      1384
;  :arith-bound-prop        110
;  :arith-conflicts         228
;  :arith-eq-adapter        1037
;  :arith-fixed-eqs         331
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1425
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10444
;  :mk-clause               4734
;  :num-allocs              9043799
;  :num-checks              1904
;  :propagations            1894
;  :quant-instantiations    711
;  :rlimit-count            604950
;  :time                    0.01)
(declare-const $k@611@01 $Perm)
(assert ($Perm.isReadVar $k@611@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      734
;  :arith-assert-lower      2034
;  :arith-assert-upper      1386
;  :arith-bound-prop        110
;  :arith-conflicts         229
;  :arith-eq-adapter        1038
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1426
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10449
;  :mk-clause               4736
;  :num-allocs              9043799
;  :num-checks              1905
;  :propagations            1895
;  :quant-instantiations    711
;  :rlimit-count            605180)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@611@01 $Perm.No) (< $Perm.No $k@611@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      734
;  :arith-assert-lower      2034
;  :arith-assert-upper      1386
;  :arith-bound-prop        110
;  :arith-conflicts         229
;  :arith-eq-adapter        1038
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1427
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10449
;  :mk-clause               4736
;  :num-allocs              9043799
;  :num-checks              1906
;  :propagations            1895
;  :quant-instantiations    711
;  :rlimit-count            605230)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18717
;  :arith-add-rows          209
;  :arith-assert-diseq      734
;  :arith-assert-lower      2034
;  :arith-assert-upper      1386
;  :arith-bound-prop        110
;  :arith-conflicts         229
;  :arith-eq-adapter        1038
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        9
;  :arith-pivots            453
;  :binary-propagations     22
;  :conflicts               1428
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4656
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10450
;  :mk-clause               4736
;  :num-allocs              9043799
;  :num-checks              1907
;  :propagations            1895
;  :quant-instantiations    711
;  :rlimit-count            605310)
(push) ; 9
(assert (not (not (= (+ $k@565@01 (- $k@540@01 $k@572@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          209
;  :arith-assert-diseq      734
;  :arith-assert-lower      2034
;  :arith-assert-upper      1387
;  :arith-bound-prop        110
;  :arith-conflicts         230
;  :arith-eq-adapter        1039
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1429
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10452
;  :mk-clause               4738
;  :num-allocs              9043799
;  :num-checks              1908
;  :propagations            1896
;  :quant-instantiations    711
;  :rlimit-count            605394)
(assert (< $k@611@01 (+ $k@565@01 (- $k@540@01 $k@572@01))))
(assert (<= $Perm.No (- (+ $k@565@01 (- $k@540@01 $k@572@01)) $k@611@01)))
(assert (<= (- (+ $k@565@01 (- $k@540@01 $k@572@01)) $k@611@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@565@01 (- $k@540@01 $k@572@01)) $k@611@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      734
;  :arith-assert-lower      2036
;  :arith-assert-upper      1389
;  :arith-bound-prop        110
;  :arith-conflicts         231
;  :arith-eq-adapter        1039
;  :arith-fixed-eqs         333
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1430
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10456
;  :mk-clause               4738
;  :num-allocs              9043799
;  :num-checks              1909
;  :propagations            1896
;  :quant-instantiations    711
;  :rlimit-count            605663)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      734
;  :arith-assert-lower      2036
;  :arith-assert-upper      1389
;  :arith-bound-prop        110
;  :arith-conflicts         231
;  :arith-eq-adapter        1039
;  :arith-fixed-eqs         333
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1430
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10456
;  :mk-clause               4738
;  :num-allocs              9043799
;  :num-checks              1910
;  :propagations            1896
;  :quant-instantiations    711
;  :rlimit-count            605682)
(push) ; 9
(assert (not (< $Perm.No (- $k@540@01 $k@572@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      734
;  :arith-assert-lower      2036
;  :arith-assert-upper      1389
;  :arith-bound-prop        110
;  :arith-conflicts         231
;  :arith-eq-adapter        1039
;  :arith-fixed-eqs         333
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1430
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10456
;  :mk-clause               4738
;  :num-allocs              9043799
;  :num-checks              1911
;  :propagations            1896
;  :quant-instantiations    711
;  :rlimit-count            605701
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      734
;  :arith-assert-lower      2036
;  :arith-assert-upper      1390
;  :arith-bound-prop        110
;  :arith-conflicts         232
;  :arith-eq-adapter        1039
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10457
;  :mk-clause               4738
;  :num-allocs              9043799
;  :num-checks              1912
;  :propagations            1896
;  :quant-instantiations    711
;  :rlimit-count            605782)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      734
;  :arith-assert-lower      2036
;  :arith-assert-upper      1390
;  :arith-bound-prop        110
;  :arith-conflicts         232
;  :arith-eq-adapter        1039
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10457
;  :mk-clause               4738
;  :num-allocs              9043799
;  :num-checks              1913
;  :propagations            1896
;  :quant-instantiations    711
;  :rlimit-count            605801)
(push) ; 9
(assert (not (< $Perm.No (- $k@540@01 $k@572@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      734
;  :arith-assert-lower      2036
;  :arith-assert-upper      1390
;  :arith-bound-prop        110
;  :arith-conflicts         232
;  :arith-eq-adapter        1039
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10457
;  :mk-clause               4738
;  :num-allocs              9043799
;  :num-checks              1914
;  :propagations            1896
;  :quant-instantiations    711
;  :rlimit-count            605820)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      734
;  :arith-assert-lower      2036
;  :arith-assert-upper      1390
;  :arith-bound-prop        110
;  :arith-conflicts         232
;  :arith-eq-adapter        1039
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10457
;  :mk-clause               4738
;  :num-allocs              9043799
;  :num-checks              1915
;  :propagations            1896
;  :quant-instantiations    711
;  :rlimit-count            605831
;  :time                    0.01)
(declare-const $k@612@01 $Perm)
(assert ($Perm.isReadVar $k@612@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      735
;  :arith-assert-lower      2038
;  :arith-assert-upper      1392
;  :arith-bound-prop        110
;  :arith-conflicts         233
;  :arith-eq-adapter        1040
;  :arith-fixed-eqs         335
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1432
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10462
;  :mk-clause               4740
;  :num-allocs              9043799
;  :num-checks              1916
;  :propagations            1897
;  :quant-instantiations    711
;  :rlimit-count            606061)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@612@01 $Perm.No) (< $Perm.No $k@612@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      735
;  :arith-assert-lower      2038
;  :arith-assert-upper      1392
;  :arith-bound-prop        110
;  :arith-conflicts         233
;  :arith-eq-adapter        1040
;  :arith-fixed-eqs         335
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1433
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10462
;  :mk-clause               4740
;  :num-allocs              9043799
;  :num-checks              1917
;  :propagations            1897
;  :quant-instantiations    711
;  :rlimit-count            606111)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18718
;  :arith-add-rows          211
;  :arith-assert-diseq      735
;  :arith-assert-lower      2038
;  :arith-assert-upper      1392
;  :arith-bound-prop        110
;  :arith-conflicts         233
;  :arith-eq-adapter        1040
;  :arith-fixed-eqs         335
;  :arith-offset-eqs        9
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               1434
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4658
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10463
;  :mk-clause               4740
;  :num-allocs              9043799
;  :num-checks              1918
;  :propagations            1897
;  :quant-instantiations    711
;  :rlimit-count            606191)
(push) ; 9
(assert (not (not (= (+ $k@566@01 (- $k@541@01 $k@573@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18719
;  :arith-add-rows          211
;  :arith-assert-diseq      735
;  :arith-assert-lower      2038
;  :arith-assert-upper      1393
;  :arith-bound-prop        110
;  :arith-conflicts         234
;  :arith-eq-adapter        1041
;  :arith-fixed-eqs         335
;  :arith-offset-eqs        9
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               1435
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4660
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10465
;  :mk-clause               4742
;  :num-allocs              9043799
;  :num-checks              1919
;  :propagations            1898
;  :quant-instantiations    711
;  :rlimit-count            606275)
(assert (< $k@612@01 (+ $k@566@01 (- $k@541@01 $k@573@01))))
(assert (<= $Perm.No (- (+ $k@566@01 (- $k@541@01 $k@573@01)) $k@612@01)))
(assert (<= (- (+ $k@566@01 (- $k@541@01 $k@573@01)) $k@612@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@566@01 (- $k@541@01 $k@573@01)) $k@612@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@560@01)) $Ref.null))))
; [eval] diz.Write_b_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18719
;  :arith-add-rows          213
;  :arith-assert-diseq      735
;  :arith-assert-lower      2040
;  :arith-assert-upper      1395
;  :arith-bound-prop        110
;  :arith-conflicts         235
;  :arith-eq-adapter        1041
;  :arith-fixed-eqs         336
;  :arith-offset-eqs        9
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4660
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10469
;  :mk-clause               4742
;  :num-allocs              9043799
;  :num-checks              1920
;  :propagations            1898
;  :quant-instantiations    711
;  :rlimit-count            606544)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18719
;  :arith-add-rows          213
;  :arith-assert-diseq      735
;  :arith-assert-lower      2040
;  :arith-assert-upper      1395
;  :arith-bound-prop        110
;  :arith-conflicts         235
;  :arith-eq-adapter        1041
;  :arith-fixed-eqs         336
;  :arith-offset-eqs        9
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4660
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10469
;  :mk-clause               4742
;  :num-allocs              9043799
;  :num-checks              1921
;  :propagations            1898
;  :quant-instantiations    711
;  :rlimit-count            606563)
(push) ; 9
(assert (not (< $Perm.No (- $k@541@01 $k@573@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18719
;  :arith-add-rows          213
;  :arith-assert-diseq      735
;  :arith-assert-lower      2040
;  :arith-assert-upper      1395
;  :arith-bound-prop        110
;  :arith-conflicts         235
;  :arith-eq-adapter        1041
;  :arith-fixed-eqs         336
;  :arith-offset-eqs        9
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4660
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10469
;  :mk-clause               4742
;  :num-allocs              9043799
;  :num-checks              1922
;  :propagations            1898
;  :quant-instantiations    711
;  :rlimit-count            606582
;  :time                    0.01)
(declare-const $k@613@01 $Perm)
(assert ($Perm.isReadVar $k@613@01 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18719
;  :arith-add-rows          213
;  :arith-assert-diseq      736
;  :arith-assert-lower      2042
;  :arith-assert-upper      1397
;  :arith-bound-prop        110
;  :arith-conflicts         236
;  :arith-eq-adapter        1042
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        9
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               1437
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4660
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10474
;  :mk-clause               4744
;  :num-allocs              9043799
;  :num-checks              1923
;  :propagations            1899
;  :quant-instantiations    711
;  :rlimit-count            606811)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18719
;  :arith-add-rows          213
;  :arith-assert-diseq      736
;  :arith-assert-lower      2042
;  :arith-assert-upper      1397
;  :arith-bound-prop        110
;  :arith-conflicts         236
;  :arith-eq-adapter        1042
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        9
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               1437
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4660
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10474
;  :mk-clause               4744
;  :num-allocs              9043799
;  :num-checks              1924
;  :propagations            1899
;  :quant-instantiations    711
;  :rlimit-count            606830)
(push) ; 9
(assert (not (< $Perm.No (- $k@538@01 $k@570@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18719
;  :arith-add-rows          213
;  :arith-assert-diseq      736
;  :arith-assert-lower      2042
;  :arith-assert-upper      1397
;  :arith-bound-prop        110
;  :arith-conflicts         236
;  :arith-eq-adapter        1042
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        9
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               1437
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4660
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10474
;  :mk-clause               4744
;  :num-allocs              9043799
;  :num-checks              1925
;  :propagations            1899
;  :quant-instantiations    711
;  :rlimit-count            606849)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@613@01 $Perm.No) (< $Perm.No $k@613@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18719
;  :arith-add-rows          213
;  :arith-assert-diseq      736
;  :arith-assert-lower      2042
;  :arith-assert-upper      1397
;  :arith-bound-prop        110
;  :arith-conflicts         236
;  :arith-eq-adapter        1042
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        9
;  :arith-pivots            455
;  :binary-propagations     22
;  :conflicts               1438
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4660
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10474
;  :mk-clause               4744
;  :num-allocs              9043799
;  :num-checks              1926
;  :propagations            1899
;  :quant-instantiations    711
;  :rlimit-count            606899)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@542@01 $k@574@01) $k@567@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          213
;  :arith-assert-diseq      736
;  :arith-assert-lower      2042
;  :arith-assert-upper      1398
;  :arith-bound-prop        110
;  :arith-conflicts         237
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        9
;  :arith-pivots            456
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10476
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1927
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            606983)
(assert (< $k@613@01 (+ (- $k@542@01 $k@574@01) $k@567@01)))
(assert (<= $Perm.No (- (+ (- $k@542@01 $k@574@01) $k@567@01) $k@613@01)))
(assert (<= (- (+ (- $k@542@01 $k@574@01) $k@567@01) $k@613@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@542@01 $k@574@01) $k@567@01) $k@613@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
      $Ref.null))))
; [eval] diz.Write_b_m.Main_nand.Nand_gate_m == diz.Write_b_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1400
;  :arith-bound-prop        110
;  :arith-conflicts         238
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10480
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1928
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607258)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1400
;  :arith-bound-prop        110
;  :arith-conflicts         238
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10480
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1929
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607277
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (- $k@538@01 $k@570@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1400
;  :arith-bound-prop        110
;  :arith-conflicts         238
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10480
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1930
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607296
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (- $k@542@01 $k@574@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1400
;  :arith-bound-prop        110
;  :arith-conflicts         238
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         338
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10480
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1931
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607315)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1401
;  :arith-bound-prop        110
;  :arith-conflicts         239
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10481
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1932
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607396)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
  $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1401
;  :arith-bound-prop        110
;  :arith-conflicts         239
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         339
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10481
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1933
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607418)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01)))))))))))))))))))))))
  $t@601@01))
; [eval] diz.Write_b_m.Main_nand_write_b == diz
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@561@01 (- $k@536@01 $k@568@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1402
;  :arith-bound-prop        110
;  :arith-conflicts         240
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10482
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1934
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607518)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01)) $t@601@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1402
;  :arith-bound-prop        110
;  :arith-conflicts         240
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10482
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1935
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607537)
(push) ; 9
(assert (not (< $Perm.No (- $k@540@01 $k@572@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18720
;  :arith-add-rows          215
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1402
;  :arith-bound-prop        110
;  :arith-conflicts         240
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        9
;  :arith-pivots            457
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 3628
;  :datatype-occurs-check   1380
;  :datatype-splits         2869
;  :decisions               3829
;  :del-clause              4662
;  :final-checks            450
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10482
;  :mk-clause               4746
;  :num-allocs              9043799
;  :num-checks              1936
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            607556
;  :time                    0.00)
(pop) ; 8
(push) ; 8
; [else-branch: 215 | First:(Second:(Second:(Second:($t@560@01))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@560@01))))))[1] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
        1)
      (- 0 2)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@516@01)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18843
;  :arith-add-rows          217
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1402
;  :arith-bound-prop        110
;  :arith-conflicts         240
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        9
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1443
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 3665
;  :datatype-occurs-check   1391
;  :datatype-splits         2893
;  :decisions               3865
;  :del-clause              4734
;  :final-checks            453
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10510
;  :mk-clause               4747
;  :num-allocs              9043799
;  :num-checks              1937
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            608898)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18991
;  :arith-add-rows          217
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1402
;  :arith-bound-prop        110
;  :arith-conflicts         240
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        9
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1444
;  :datatype-accessor-ax    762
;  :datatype-constructor-ax 3714
;  :datatype-occurs-check   1401
;  :datatype-splits         2938
;  :decisions               3913
;  :del-clause              4735
;  :final-checks            456
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10559
;  :mk-clause               4748
;  :num-allocs              9043799
;  :num-checks              1938
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            610098)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19139
;  :arith-add-rows          217
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1402
;  :arith-bound-prop        110
;  :arith-conflicts         240
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        9
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1445
;  :datatype-accessor-ax    763
;  :datatype-constructor-ax 3763
;  :datatype-occurs-check   1411
;  :datatype-splits         2983
;  :decisions               3961
;  :del-clause              4736
;  :final-checks            459
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10608
;  :mk-clause               4749
;  :num-allocs              9043799
;  :num-checks              1939
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            611298
;  :time                    0.01)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19287
;  :arith-add-rows          217
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1402
;  :arith-bound-prop        110
;  :arith-conflicts         240
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        9
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1446
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 3812
;  :datatype-occurs-check   1421
;  :datatype-splits         3028
;  :decisions               4009
;  :del-clause              4737
;  :final-checks            462
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10657
;  :mk-clause               4750
;  :num-allocs              9043799
;  :num-checks              1940
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            612498
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19435
;  :arith-add-rows          217
;  :arith-assert-diseq      736
;  :arith-assert-lower      2044
;  :arith-assert-upper      1402
;  :arith-bound-prop        110
;  :arith-conflicts         240
;  :arith-eq-adapter        1043
;  :arith-fixed-eqs         340
;  :arith-offset-eqs        9
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1447
;  :datatype-accessor-ax    765
;  :datatype-constructor-ax 3861
;  :datatype-occurs-check   1431
;  :datatype-splits         3073
;  :decisions               4057
;  :del-clause              4738
;  :final-checks            465
;  :interface-eqs           21
;  :max-generation          4
;  :max-memory              5.49
;  :memory                  5.49
;  :minimized-lits          2
;  :mk-bool-var             10706
;  :mk-clause               4751
;  :num-allocs              9043799
;  :num-checks              1941
;  :propagations            1900
;  :quant-instantiations    711
;  :rlimit-count            613698)
(declare-const $t@614@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@536@01)
    (= $t@614@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@535@01))))
  (implies
    (< $Perm.No (- $k@501@01 $k@543@01))
    (=
      $t@614@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@500@01)))))))
(assert (<= $Perm.No (+ $k@536@01 (- $k@501@01 $k@543@01))))
(assert (<= (+ $k@536@01 (- $k@501@01 $k@543@01)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@536@01 (- $k@501@01 $k@543@01)))
  (not (= diz@498@01 $Ref.null))))
; [eval] !true
; [then-branch: 220 | False | dead]
; [else-branch: 220 | True | live]
(push) ; 5
; [else-branch: 220 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
