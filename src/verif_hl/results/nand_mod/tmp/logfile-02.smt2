(get-info :version)
; (:version "4.8.6")
; Started: 2024-05-21 12:59:28
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Nand_gate<TYPE> TYPE)
(declare-const class_Read<TYPE> TYPE)
(declare-const class_Write_a<TYPE> TYPE)
(declare-const class_Write_b<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Read_m: Ref]
(declare-fun $FVF.domain_Read_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Read_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Read_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Read_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Read_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Read_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Write_a_m: Ref]
(declare-fun $FVF.domain_Write_a_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Write_a_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Write_a_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Write_a_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Write_a_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Write_a_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Write_b_m: Ref]
(declare-fun $FVF.domain_Write_b_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Write_b_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Write_b_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Write_b_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Write_b_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Write_b_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Read_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Read_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_a_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_a_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_b_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Write_b_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Main<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Nand_gate<TYPE> class_Read<TYPE> class_Write_a<TYPE> class_Write_b<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Nand_gate<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Read<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Write_a<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Write_b<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Read_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Read_m vs) ($FVF.domain_Read_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Read_m vs))
            (= ($FVF.lookup_Read_m vs x) ($FVF.lookup_Read_m ws x)))
          :pattern (($FVF.lookup_Read_m vs x) ($FVF.lookup_Read_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Read_m pm r))
    :pattern ($FVF.perm_Read_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Read_m f r) true)
    :pattern ($FVF.loc_Read_m f r))))
; /field_value_functions_axioms.smt2 [Write_a_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Write_a_m vs) ($FVF.domain_Write_a_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Write_a_m vs))
            (= ($FVF.lookup_Write_a_m vs x) ($FVF.lookup_Write_a_m ws x)))
          :pattern (($FVF.lookup_Write_a_m vs x) ($FVF.lookup_Write_a_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Write_a_m pm r))
    :pattern ($FVF.perm_Write_a_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Write_a_m f r) true)
    :pattern ($FVF.loc_Write_a_m f r))))
; /field_value_functions_axioms.smt2 [Write_b_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Write_b_m vs) ($FVF.domain_Write_b_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Write_b_m vs))
            (= ($FVF.lookup_Write_b_m vs x) ($FVF.lookup_Write_b_m ws x)))
          :pattern (($FVF.lookup_Write_b_m vs x) ($FVF.lookup_Write_b_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Write_b_m pm r))
    :pattern ($FVF.perm_Write_b_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Write_b_m f r) true)
    :pattern ($FVF.loc_Write_b_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@0@00 vals@1@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (diz@0@00 $Ref) (vals@1@00 Seq<Int>)) (!
  (let ((result@2@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))) (implies
    (and (not (= diz@0@00 $Ref.null)) (= (Seq_length vals@1@00) 3))
    (and
      (and
        (and
          (or
            (< (Seq_index vals@1@00 0) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 0)))
          (or
            (< (Seq_index vals@1@00 1) (- 0 1))
            (<= result@2@00 (Seq_index vals@1@00 1))))
        (or
          (< (Seq_index vals@1@00 2) (- 0 1))
          (<= result@2@00 (Seq_index vals@1@00 2))))
      (and
        (implies
          (and
            (and
              (< (Seq_index vals@1@00 0) (- 0 1))
              (< (Seq_index vals@1@00 1) (- 0 1)))
            (< (Seq_index vals@1@00 2) (- 0 1)))
          (= result@2@00 0))
        (implies
          (or
            (or
              (<= (- 0 1) (Seq_index vals@1@00 0))
              (<= (- 0 1) (Seq_index vals@1@00 1)))
            (<= (- 0 1) (Seq_index vals@1@00 2)))
          (or
            (or
              (and
                (<= (- 0 1) (Seq_index vals@1@00 0))
                (= result@2@00 (Seq_index vals@1@00 0)))
              (and
                (<= (- 0 1) (Seq_index vals@1@00 1))
                (= result@2@00 (Seq_index vals@1@00 1))))
            (and
              (<= (- 0 1) (Seq_index vals@1@00 2))
              (= result@2@00 (Seq_index vals@1@00 2)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@0@00 vals@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00)
    (instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@3@00 u@4@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (t@3@00 TYPE) (u@4@00 TYPE)) (!
  (let ((result@5@00 (instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))) (=
    result@5@00
    (or (= t@3@00 u@4@00) (= (directSuperclass<TYPE> t@3@00) u@4@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@3@00 u@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (= (new_frac%limited s@$ x@6@00) (new_frac s@$ x@6@00))
  :pattern ((new_frac s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (new_frac%stateless x@6@00)
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@6@00 $Perm)) (!
  (let ((result@7@00 (new_frac%limited s@$ x@6@00))) (implies
    (and (< $Perm.No x@6@00) (<= x@6@00 $Perm.Write))
    (= (frac_val<Perm> result@7@00) x@6@00)))
  :pattern ((new_frac%limited s@$ x@6@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@8@00) (new_zfrac s@$ x@8@00))
  :pattern ((new_zfrac s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (new_zfrac%stateless x@8@00)
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
(assert (forall ((s@$ $Snap) (x@8@00 $Perm)) (!
  (let ((result@9@00 (new_zfrac%limited s@$ x@8@00))) (implies
    (and (<= $Perm.No x@8@00) (<= x@8@00 $Perm.Write))
    (= (zfrac_val<Perm> result@9@00) x@8@00)))
  :pattern ((new_zfrac%limited s@$ x@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Main_Main_EncodedGlobalVariables ----------
(declare-const globals@0@02 $Ref)
(declare-const sys__result@1@02 $Ref)
(declare-const globals@2@02 $Ref)
(declare-const sys__result@3@02 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@4@02 $Snap)
(assert (= $t@4@02 ($Snap.combine ($Snap.first $t@4@02) ($Snap.second $t@4@02))))
(assert (= ($Snap.first $t@4@02) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@3@02 $Ref.null)))
(assert (= ($Snap.second $t@4@02) $Snap.unit))
; [eval] type_of(sys__result) == class_Main()
; [eval] type_of(sys__result)
; [eval] class_Main()
(assert (= (type_of<TYPE> sys__result@3@02) (as class_Main<TYPE>  TYPE)))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_11__9: Ref
(declare-const __flatten_11__9@5@02 $Ref)
; [exec]
; var __flatten_9__8: Ref
(declare-const __flatten_9__8@6@02 $Ref)
; [exec]
; var __flatten_7__7: Ref
(declare-const __flatten_7__7@7@02 $Ref)
; [exec]
; var __flatten_5__6: Ref
(declare-const __flatten_5__6@8@02 $Ref)
; [exec]
; var __flatten_4__5: Seq[Int]
(declare-const __flatten_4__5@9@02 Seq<Int>)
; [exec]
; var __flatten_3__4: Seq[Int]
(declare-const __flatten_3__4@10@02 Seq<Int>)
; [exec]
; var __flatten_2__3: Seq[Int]
(declare-const __flatten_2__3@11@02 Seq<Int>)
; [exec]
; var __flatten_1__2: Seq[Int]
(declare-const __flatten_1__2@12@02 Seq<Int>)
; [exec]
; var diz__1: Ref
(declare-const diz__1@13@02 $Ref)
; [exec]
; diz__1 := new(Main_process_state, Main_event_state, Main_nand, Main_nand_write_a, Main_nand_write_b, Main_nand_read)
(declare-const diz__1@14@02 $Ref)
(assert (not (= diz__1@14@02 $Ref.null)))
(declare-const Main_process_state@15@02 Seq<Int>)
(declare-const Main_event_state@16@02 Seq<Int>)
(declare-const Main_nand@17@02 $Ref)
(declare-const Main_nand_write_a@18@02 $Ref)
(declare-const Main_nand_write_b@19@02 $Ref)
(declare-const Main_nand_read@20@02 $Ref)
(assert (not (= diz__1@14@02 __flatten_9__8@6@02)))
(assert (not (= diz__1@14@02 globals@2@02)))
(assert (not (= diz__1@14@02 sys__result@3@02)))
(assert (not (= diz__1@14@02 __flatten_7__7@7@02)))
(assert (not (= diz__1@14@02 __flatten_11__9@5@02)))
(assert (not (= diz__1@14@02 __flatten_5__6@8@02)))
(assert (not (= diz__1@14@02 diz__1@13@02)))
; [exec]
; inhale type_of(diz__1) == class_Main()
(declare-const $t@21@02 $Snap)
(assert (= $t@21@02 $Snap.unit))
; [eval] type_of(diz__1) == class_Main()
; [eval] type_of(diz__1)
; [eval] class_Main()
(assert (= (type_of<TYPE> diz__1@14@02) (as class_Main<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_2__3 := Seq(-1, -1, -1)
; [eval] Seq(-1, -1, -1)
; [eval] -1
; [eval] -1
; [eval] -1
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append (Seq_singleton (- 0 1)) (Seq_singleton (- 0 1)))
      (Seq_singleton (- 0 1))))
  3))
(declare-const __flatten_2__3@22@02 Seq<Int>)
(assert (Seq_equal
  __flatten_2__3@22@02
  (Seq_append
    (Seq_append (Seq_singleton (- 0 1)) (Seq_singleton (- 0 1)))
    (Seq_singleton (- 0 1)))))
; [exec]
; __flatten_1__2 := __flatten_2__3
; [exec]
; diz__1.Main_process_state := __flatten_1__2
; [exec]
; __flatten_4__5 := Seq(-3, -3, -3)
; [eval] Seq(-3, -3, -3)
; [eval] -3
; [eval] -3
; [eval] -3
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append (Seq_singleton (- 0 3)) (Seq_singleton (- 0 3)))
      (Seq_singleton (- 0 3))))
  3))
(declare-const __flatten_4__5@23@02 Seq<Int>)
(assert (Seq_equal
  __flatten_4__5@23@02
  (Seq_append
    (Seq_append (Seq_singleton (- 0 3)) (Seq_singleton (- 0 3)))
    (Seq_singleton (- 0 3)))))
; [exec]
; __flatten_3__4 := __flatten_4__5
; [exec]
; diz__1.Main_event_state := __flatten_3__4
; [exec]
; __flatten_5__6 := Nand_gate_Nand_gate_EncodedGlobalVariables_Main(globals, diz__1)
(declare-const sys__result@24@02 $Ref)
(declare-const $t@25@02 $Snap)
(assert (= $t@25@02 ($Snap.combine ($Snap.first $t@25@02) ($Snap.second $t@25@02))))
(assert (= ($Snap.first $t@25@02) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@24@02 $Ref.null)))
(assert (=
  ($Snap.second $t@25@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@25@02))
    ($Snap.second ($Snap.second $t@25@02)))))
(assert (= ($Snap.first ($Snap.second $t@25@02)) $Snap.unit))
; [eval] type_of(sys__result) == class_Nand_gate()
; [eval] type_of(sys__result)
; [eval] class_Nand_gate()
(assert (= (type_of<TYPE> sys__result@24@02) (as class_Nand_gate<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@25@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@25@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@25@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@25@02))))
  diz__1@14@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_A == true
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
  true))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_B == false
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
  false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))))
  $Snap.unit))
; [eval] sys__result.Nand_gate_out == false
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))))
  false))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; diz__1.Main_nand := __flatten_5__6
; [exec]
; __flatten_7__7 := Write_a_Write_a_EncodedGlobalVariables_Main(globals, diz__1)
(declare-const sys__result@26@02 $Ref)
(declare-const $t@27@02 $Snap)
(assert (= $t@27@02 ($Snap.combine ($Snap.first $t@27@02) ($Snap.second $t@27@02))))
(assert (= ($Snap.first $t@27@02) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@26@02 $Ref.null)))
(assert (=
  ($Snap.second $t@27@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@27@02))
    ($Snap.second ($Snap.second $t@27@02)))))
(assert (= ($Snap.first ($Snap.second $t@27@02)) $Snap.unit))
; [eval] type_of(sys__result) == class_Write_a()
; [eval] type_of(sys__result)
; [eval] class_Write_a()
(assert (= (type_of<TYPE> sys__result@26@02) (as class_Write_a<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@27@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@27@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@27@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@27@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@27@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))
  $Snap.unit))
; [eval] sys__result.Write_a_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))
  diz__1@14@02))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; diz__1.Main_nand_write_a := __flatten_7__7
; [exec]
; __flatten_9__8 := Write_b_Write_b_EncodedGlobalVariables_Main(globals, diz__1)
(declare-const sys__result@28@02 $Ref)
(declare-const $t@29@02 $Snap)
(assert (= $t@29@02 ($Snap.combine ($Snap.first $t@29@02) ($Snap.second $t@29@02))))
(assert (= ($Snap.first $t@29@02) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@28@02 $Ref.null)))
(assert (=
  ($Snap.second $t@29@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@29@02))
    ($Snap.second ($Snap.second $t@29@02)))))
(assert (= ($Snap.first ($Snap.second $t@29@02)) $Snap.unit))
; [eval] type_of(sys__result) == class_Write_b()
; [eval] type_of(sys__result)
; [eval] class_Write_b()
(assert (= (type_of<TYPE> sys__result@28@02) (as class_Write_b<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@29@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@29@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@29@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@29@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@02))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@02)))))
  $Snap.unit))
; [eval] sys__result.Write_b_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@29@02)))))
  diz__1@14@02))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; diz__1.Main_nand_write_b := __flatten_9__8
; [exec]
; __flatten_11__9 := Read_Read_EncodedGlobalVariables_Main(globals, diz__1)
(declare-const sys__result@30@02 $Ref)
(declare-const $t@31@02 $Snap)
(assert (= $t@31@02 ($Snap.combine ($Snap.first $t@31@02) ($Snap.second $t@31@02))))
(assert (= ($Snap.first $t@31@02) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@30@02 $Ref.null)))
(assert (=
  ($Snap.second $t@31@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@31@02))
    ($Snap.second ($Snap.second $t@31@02)))))
(assert (= ($Snap.first ($Snap.second $t@31@02)) $Snap.unit))
; [eval] type_of(sys__result) == class_Read()
; [eval] type_of(sys__result)
; [eval] class_Read()
(assert (= (type_of<TYPE> sys__result@30@02) (as class_Read<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@31@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@31@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@31@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@31@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@31@02))))
  $Snap.unit))
; [eval] sys__result.Read_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@31@02)))))
  diz__1@14@02))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; diz__1.Main_nand_read := __flatten_11__9
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz__1, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(set-option :timeout 0)
(push) ; 3
(assert (not (= (Seq_length __flatten_2__3@22@02) 3)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               328
;  :arith-add-rows          20
;  :arith-assert-diseq      6
;  :arith-assert-lower      27
;  :arith-assert-upper      15
;  :arith-bound-prop        4
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   28
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            11
;  :max-generation          2
;  :max-memory              4.05
;  :memory                  4.05
;  :mk-bool-var             457
;  :mk-clause               112
;  :num-allocs              3563090
;  :num-checks              7
;  :propagations            73
;  :quant-instantiations    46
;  :rlimit-count            106368)
(assert (= (Seq_length __flatten_2__3@22@02) 3))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(push) ; 3
(assert (not (= (Seq_length __flatten_4__5@23@02) 3)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               329
;  :arith-add-rows          20
;  :arith-assert-diseq      6
;  :arith-assert-lower      28
;  :arith-assert-upper      16
;  :arith-bound-prop        4
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   28
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            11
;  :max-generation          2
;  :max-memory              4.05
;  :memory                  4.05
;  :mk-bool-var             463
;  :mk-clause               112
;  :num-allocs              3563090
;  :num-checks              8
;  :propagations            73
;  :quant-instantiations    46
;  :rlimit-count            106493)
(assert (= (Seq_length __flatten_4__5@23@02) 3))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@32@02 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@32@02 | live]
; [else-branch: 0 | !(0 <= i@32@02) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@32@02]
(assert (<= 0 i@32@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@32@02)]
(assert (not (<= 0 i@32@02)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@32@02 < |__flatten_2__3@22@02| && 0 <= i@32@02 | live]
; [else-branch: 1 | !(i@32@02 < |__flatten_2__3@22@02| && 0 <= i@32@02) | live]
(push) ; 5
; [then-branch: 1 | i@32@02 < |__flatten_2__3@22@02| && 0 <= i@32@02]
(assert (and (< i@32@02 (Seq_length __flatten_2__3@22@02)) (<= 0 i@32@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 6
(assert (not (>= i@32@02 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               330
;  :arith-add-rows          20
;  :arith-assert-diseq      6
;  :arith-assert-lower      30
;  :arith-assert-upper      18
;  :arith-bound-prop        4
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   28
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            11
;  :max-generation          2
;  :max-memory              4.05
;  :memory                  4.05
;  :mk-bool-var             468
;  :mk-clause               112
;  :num-allocs              3563090
;  :num-checks              9
;  :propagations            73
;  :quant-instantiations    46
;  :rlimit-count            106680)
; [eval] -1
(push) ; 6
; [then-branch: 2 | __flatten_2__3@22@02[i@32@02] == -1 | live]
; [else-branch: 2 | __flatten_2__3@22@02[i@32@02] != -1 | live]
(push) ; 7
; [then-branch: 2 | __flatten_2__3@22@02[i@32@02] == -1]
(assert (= (Seq_index __flatten_2__3@22@02 i@32@02) (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | __flatten_2__3@22@02[i@32@02] != -1]
(assert (not (= (Seq_index __flatten_2__3@22@02 i@32@02) (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@32@02 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               331
;  :arith-add-rows          22
;  :arith-assert-diseq      6
;  :arith-assert-lower      30
;  :arith-assert-upper      18
;  :arith-bound-prop        4
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   28
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            11
;  :max-generation          2
;  :max-memory              4.05
;  :memory                  4.05
;  :mk-bool-var             473
;  :mk-clause               116
;  :num-allocs              3563090
;  :num-checks              10
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            106847)
(push) ; 8
; [then-branch: 3 | 0 <= __flatten_2__3@22@02[i@32@02] | live]
; [else-branch: 3 | !(0 <= __flatten_2__3@22@02[i@32@02]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= __flatten_2__3@22@02[i@32@02]]
(assert (<= 0 (Seq_index __flatten_2__3@22@02 i@32@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@32@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               331
;  :arith-add-rows          22
;  :arith-assert-diseq      7
;  :arith-assert-lower      33
;  :arith-assert-upper      18
;  :arith-bound-prop        4
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-offset-eqs        8
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 32
;  :datatype-occurs-check   28
;  :datatype-splits         22
;  :decisions               32
;  :del-clause              110
;  :final-checks            11
;  :max-generation          2
;  :max-memory              4.05
;  :memory                  4.05
;  :mk-bool-var             476
;  :mk-clause               117
;  :num-allocs              3563090
;  :num-checks              11
;  :propagations            73
;  :quant-instantiations    47
;  :rlimit-count            106921)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= __flatten_2__3@22@02[i@32@02])]
(assert (not (<= 0 (Seq_index __flatten_2__3@22@02 i@32@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@32@02 < |__flatten_2__3@22@02| && 0 <= i@32@02)]
(assert (not (and (< i@32@02 (Seq_length __flatten_2__3@22@02)) (<= 0 i@32@02))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 3
(assert (not (forall ((i@32@02 Int)) (!
  (implies
    (and (< i@32@02 (Seq_length __flatten_2__3@22@02)) (<= 0 i@32@02))
    (or
      (= (Seq_index __flatten_2__3@22@02 i@32@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_2__3@22@02 i@32@02)
          (Seq_length __flatten_4__5@23@02))
        (<= 0 (Seq_index __flatten_2__3@22@02 i@32@02)))))
  :pattern ((Seq_index __flatten_2__3@22@02 i@32@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      14
;  :arith-assert-lower      54
;  :arith-assert-upper      28
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             586
;  :mk-clause               227
;  :num-allocs              3563090
;  :num-checks              12
;  :propagations            100
;  :quant-instantiations    58
;  :rlimit-count            108675
;  :time                    0.00)
(assert (forall ((i@32@02 Int)) (!
  (implies
    (and (< i@32@02 (Seq_length __flatten_2__3@22@02)) (<= 0 i@32@02))
    (or
      (= (Seq_index __flatten_2__3@22@02 i@32@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_2__3@22@02 i@32@02)
          (Seq_length __flatten_4__5@23@02))
        (<= 0 (Seq_index __flatten_2__3@22@02 i@32@02)))))
  :pattern ((Seq_index __flatten_2__3@22@02 i@32@02))
  :qid |prog.l<no position>|)))
(declare-const $k@33@02 $Perm)
(assert ($Perm.isReadVar $k@33@02 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@33@02 $Perm.No) (< $Perm.No $k@33@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      29
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             591
;  :mk-clause               229
;  :num-allocs              3563090
;  :num-checks              13
;  :propagations            101
;  :quant-instantiations    58
;  :rlimit-count            109145)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      15
;  :arith-assert-lower      56
;  :arith-assert-upper      29
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             591
;  :mk-clause               229
;  :num-allocs              3563090
;  :num-checks              14
;  :propagations            101
;  :quant-instantiations    58
;  :rlimit-count            109158
;  :time                    0.00)
(assert (< $k@33@02 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@33@02)))
(assert (<= (- $Perm.Write $k@33@02) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@33@02)) (not (= diz__1@14@02 $Ref.null))))
; [eval] diz.Main_nand != null
(declare-const $k@34@02 $Perm)
(assert ($Perm.isReadVar $k@34@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@34@02 $Perm.No) (< $Perm.No $k@34@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      31
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             596
;  :mk-clause               231
;  :num-allocs              3563090
;  :num-checks              15
;  :propagations            102
;  :quant-instantiations    58
;  :rlimit-count            109447)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      16
;  :arith-assert-lower      58
;  :arith-assert-upper      31
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             596
;  :mk-clause               231
;  :num-allocs              3563090
;  :num-checks              16
;  :propagations            102
;  :quant-instantiations    58
;  :rlimit-count            109460
;  :time                    0.00)
(assert (< $k@34@02 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@34@02)))
(assert (<= (- $Perm.Write $k@34@02) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@34@02)) (not (= diz__1@14@02 $Ref.null))))
; [eval] diz.Main_nand_write_a != null
(declare-const $k@35@02 $Perm)
(assert ($Perm.isReadVar $k@35@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@35@02 $Perm.No) (< $Perm.No $k@35@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      17
;  :arith-assert-lower      60
;  :arith-assert-upper      33
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             601
;  :mk-clause               233
;  :num-allocs              3563090
;  :num-checks              17
;  :propagations            103
;  :quant-instantiations    58
;  :rlimit-count            109748)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      17
;  :arith-assert-lower      60
;  :arith-assert-upper      33
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             601
;  :mk-clause               233
;  :num-allocs              3563090
;  :num-checks              18
;  :propagations            103
;  :quant-instantiations    58
;  :rlimit-count            109761
;  :time                    0.00)
(assert (< $k@35@02 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@35@02)))
(assert (<= (- $Perm.Write $k@35@02) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@35@02)) (not (= diz__1@14@02 $Ref.null))))
; [eval] diz.Main_nand_write_b != null
(declare-const $k@36@02 $Perm)
(assert ($Perm.isReadVar $k@36@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@36@02 $Perm.No) (< $Perm.No $k@36@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      18
;  :arith-assert-lower      62
;  :arith-assert-upper      35
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             606
;  :mk-clause               235
;  :num-allocs              3563090
;  :num-checks              19
;  :propagations            104
;  :quant-instantiations    58
;  :rlimit-count            110049)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      18
;  :arith-assert-lower      62
;  :arith-assert-upper      35
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             606
;  :mk-clause               235
;  :num-allocs              3563090
;  :num-checks              20
;  :propagations            104
;  :quant-instantiations    58
;  :rlimit-count            110062
;  :time                    0.01)
(assert (< $k@36@02 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@36@02)))
(assert (<= (- $Perm.Write $k@36@02) $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@36@02)) (not (= diz__1@14@02 $Ref.null))))
; [eval] diz.Main_nand_read != null
(declare-const $k@37@02 $Perm)
(assert ($Perm.isReadVar $k@37@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@37@02 $Perm.No) (< $Perm.No $k@37@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      19
;  :arith-assert-lower      64
;  :arith-assert-upper      37
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             611
;  :mk-clause               237
;  :num-allocs              3563090
;  :num-checks              21
;  :propagations            105
;  :quant-instantiations    58
;  :rlimit-count            110351)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               417
;  :arith-add-rows          80
;  :arith-assert-diseq      19
;  :arith-assert-lower      64
;  :arith-assert-upper      37
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              225
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             611
;  :mk-clause               237
;  :num-allocs              3563090
;  :num-checks              22
;  :propagations            105
;  :quant-instantiations    58
;  :rlimit-count            110364
;  :time                    0.00)
(assert (< $k@37@02 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@37@02)))
(assert (<= (- $Perm.Write $k@37@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $Perm.Write $k@37@02))
  (not (= sys__result@24@02 $Ref.null))))
; [eval] diz.Main_nand.Nand_gate_m == diz
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($SortWrappers.Seq<Int>To$Snap __flatten_2__3@22@02)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.Seq<Int>To$Snap __flatten_4__5@23@02)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap sys__result@24@02)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@25@02))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02)))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@25@02))))))
                          ($Snap.combine
                            ($SortWrappers.$RefTo$Snap sys__result@26@02)
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))
                                ($Snap.combine
                                  ($SortWrappers.$RefTo$Snap sys__result@28@02)
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@29@02)))))
                                      ($Snap.combine
                                        ($SortWrappers.$RefTo$Snap sys__result@30@02)
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second $t@25@02)))
                                            $Snap.unit)))))))))))))))))))))) diz__1@14@02 globals@2@02))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz__1, globals), write)
; [exec]
; sys__result := diz__1
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Main()
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Main()
; [eval] type_of(sys__result)
; [eval] class_Main()
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Main_wakeup_after_wait_EncodedGlobalVariables ----------
(declare-const diz@38@02 $Ref)
(declare-const globals@39@02 $Ref)
(declare-const diz@40@02 $Ref)
(declare-const globals@41@02 $Ref)
(push) ; 1
(declare-const $t@42@02 $Snap)
(assert (= $t@42@02 ($Snap.combine ($Snap.first $t@42@02) ($Snap.second $t@42@02))))
(assert (= ($Snap.first $t@42@02) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@40@02 $Ref.null)))
(assert (=
  ($Snap.second $t@42@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@42@02))
    ($Snap.second ($Snap.second $t@42@02)))))
(assert (=
  ($Snap.second ($Snap.second $t@42@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@42@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@42@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@02))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02)))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02)))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@43@02 Int)
(push) ; 2
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 4 | 0 <= i@43@02 | live]
; [else-branch: 4 | !(0 <= i@43@02) | live]
(push) ; 4
; [then-branch: 4 | 0 <= i@43@02]
(assert (<= 0 i@43@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 4
(push) ; 4
; [else-branch: 4 | !(0 <= i@43@02)]
(assert (not (<= 0 i@43@02)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 5 | i@43@02 < |First:(Second:(Second:($t@42@02)))| && 0 <= i@43@02 | live]
; [else-branch: 5 | !(i@43@02 < |First:(Second:(Second:($t@42@02)))| && 0 <= i@43@02) | live]
(push) ; 4
; [then-branch: 5 | i@43@02 < |First:(Second:(Second:($t@42@02)))| && 0 <= i@43@02]
(assert (and
  (<
    i@43@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))
  (<= 0 i@43@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= i@43@02 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               456
;  :arith-add-rows          82
;  :arith-assert-diseq      21
;  :arith-assert-lower      71
;  :arith-assert-upper      40
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              236
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             640
;  :mk-clause               243
;  :num-allocs              3563090
;  :num-checks              23
;  :propagations            107
;  :quant-instantiations    64
;  :rlimit-count            111687)
; [eval] -1
(push) ; 5
; [then-branch: 6 | First:(Second:(Second:($t@42@02)))[i@43@02] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:($t@42@02)))[i@43@02] != -1 | live]
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:($t@42@02)))[i@43@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    i@43@02)
  (- 0 1)))
(pop) ; 6
(push) ; 6
; [else-branch: 6 | First:(Second:(Second:($t@42@02)))[i@43@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      i@43@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 7
(assert (not (>= i@43@02 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               456
;  :arith-add-rows          82
;  :arith-assert-diseq      21
;  :arith-assert-lower      71
;  :arith-assert-upper      40
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              236
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             641
;  :mk-clause               243
;  :num-allocs              3563090
;  :num-checks              24
;  :propagations            107
;  :quant-instantiations    64
;  :rlimit-count            111850)
(push) ; 7
; [then-branch: 7 | 0 <= First:(Second:(Second:($t@42@02)))[i@43@02] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:($t@42@02)))[i@43@02]) | live]
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:($t@42@02)))[i@43@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    i@43@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@43@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               456
;  :arith-add-rows          82
;  :arith-assert-diseq      22
;  :arith-assert-lower      74
;  :arith-assert-upper      40
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   38
;  :datatype-splits         36
;  :decisions               62
;  :del-clause              236
;  :final-checks            16
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             644
;  :mk-clause               244
;  :num-allocs              3563090
;  :num-checks              25
;  :propagations            107
;  :quant-instantiations    64
;  :rlimit-count            111963)
; [eval] |diz.Main_event_state|
(pop) ; 8
(push) ; 8
; [else-branch: 7 | !(0 <= First:(Second:(Second:($t@42@02)))[i@43@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      i@43@02))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 5 | !(i@43@02 < |First:(Second:(Second:($t@42@02)))| && 0 <= i@43@02)]
(assert (not
  (and
    (<
      i@43@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))
    (<= 0 i@43@02))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@43@02 Int)) (!
  (implies
    (and
      (<
        i@43@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))
      (<= 0 i@43@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          i@43@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            i@43@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            i@43@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    i@43@02))
  :qid |prog.l<no position>|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@44@02 $Snap)
(assert (= $t@44@02 ($Snap.combine ($Snap.first $t@44@02) ($Snap.second $t@44@02))))
(assert (=
  ($Snap.second $t@44@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@44@02))
    ($Snap.second ($Snap.second $t@44@02)))))
(assert (=
  ($Snap.second ($Snap.second $t@44@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@44@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@44@02))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@44@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@45@02 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 8 | 0 <= i@45@02 | live]
; [else-branch: 8 | !(0 <= i@45@02) | live]
(push) ; 5
; [then-branch: 8 | 0 <= i@45@02]
(assert (<= 0 i@45@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 8 | !(0 <= i@45@02)]
(assert (not (<= 0 i@45@02)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 9 | i@45@02 < |First:(Second:($t@44@02))| && 0 <= i@45@02 | live]
; [else-branch: 9 | !(i@45@02 < |First:(Second:($t@44@02))| && 0 <= i@45@02) | live]
(push) ; 5
; [then-branch: 9 | i@45@02 < |First:(Second:($t@44@02))| && 0 <= i@45@02]
(assert (and
  (<
    i@45@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))
  (<= 0 i@45@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@45@02 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               501
;  :arith-add-rows          82
;  :arith-assert-diseq      22
;  :arith-assert-lower      79
;  :arith-assert-upper      43
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              243
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             669
;  :mk-clause               244
;  :num-allocs              3563090
;  :num-checks              27
;  :propagations            107
;  :quant-instantiations    68
;  :rlimit-count            113676)
; [eval] -1
(push) ; 6
; [then-branch: 10 | First:(Second:($t@44@02))[i@45@02] == -1 | live]
; [else-branch: 10 | First:(Second:($t@44@02))[i@45@02] != -1 | live]
(push) ; 7
; [then-branch: 10 | First:(Second:($t@44@02))[i@45@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
    i@45@02)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 10 | First:(Second:($t@44@02))[i@45@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
      i@45@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@45@02 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               501
;  :arith-add-rows          82
;  :arith-assert-diseq      22
;  :arith-assert-lower      79
;  :arith-assert-upper      43
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              243
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             670
;  :mk-clause               244
;  :num-allocs              3563090
;  :num-checks              28
;  :propagations            107
;  :quant-instantiations    68
;  :rlimit-count            113827)
(push) ; 8
; [then-branch: 11 | 0 <= First:(Second:($t@44@02))[i@45@02] | live]
; [else-branch: 11 | !(0 <= First:(Second:($t@44@02))[i@45@02]) | live]
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:($t@44@02))[i@45@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
    i@45@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@45@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               501
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      82
;  :arith-assert-upper      43
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         15
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              243
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             673
;  :mk-clause               245
;  :num-allocs              3563090
;  :num-checks              29
;  :propagations            107
;  :quant-instantiations    68
;  :rlimit-count            113931)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 11 | !(0 <= First:(Second:($t@44@02))[i@45@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
      i@45@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(i@45@02 < |First:(Second:($t@44@02))| && 0 <= i@45@02)]
(assert (not
  (and
    (<
      i@45@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))
    (<= 0 i@45@02))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@45@02 Int)) (!
  (implies
    (and
      (<
        i@45@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))
      (<= 0 i@45@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
          i@45@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
            i@45@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
            i@45@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
    i@45@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               518
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      83
;  :arith-assert-upper      44
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              244
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             692
;  :mk-clause               256
;  :num-allocs              3563090
;  :num-checks              30
;  :propagations            111
;  :quant-instantiations    70
;  :rlimit-count            114990)
(push) ; 3
; [then-branch: 12 | 0 <= First:(Second:(Second:($t@42@02)))[0] | live]
; [else-branch: 12 | !(0 <= First:(Second:(Second:($t@42@02)))[0]) | live]
(push) ; 4
; [then-branch: 12 | 0 <= First:(Second:(Second:($t@42@02)))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               518
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      84
;  :arith-assert-upper      44
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              244
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             698
;  :mk-clause               262
;  :num-allocs              3563090
;  :num-checks              31
;  :propagations            111
;  :quant-instantiations    71
;  :rlimit-count            115153)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               518
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      84
;  :arith-assert-upper      44
;  :arith-bound-prop        9
;  :arith-conflicts         5
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              244
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             698
;  :mk-clause               262
;  :num-allocs              3563090
;  :num-checks              32
;  :propagations            111
;  :quant-instantiations    71
;  :rlimit-count            115162)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               519
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      85
;  :arith-assert-upper      45
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              244
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             698
;  :mk-clause               262
;  :num-allocs              3563090
;  :num-checks              33
;  :propagations            115
;  :quant-instantiations    71
;  :rlimit-count            115270)
(push) ; 5
; [then-branch: 13 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 | live]
; [else-branch: 13 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] != 0 | live]
(push) ; 6
; [then-branch: 13 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 13 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               519
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      85
;  :arith-assert-upper      45
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              244
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             699
;  :mk-clause               262
;  :num-allocs              3563090
;  :num-checks              34
;  :propagations            115
;  :quant-instantiations    71
;  :rlimit-count            115489)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               519
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      85
;  :arith-assert-upper      45
;  :arith-bound-prop        9
;  :arith-conflicts         6
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              244
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             699
;  :mk-clause               262
;  :num-allocs              3563090
;  :num-checks              35
;  :propagations            115
;  :quant-instantiations    71
;  :rlimit-count            115498)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               520
;  :arith-add-rows          82
;  :arith-assert-diseq      23
;  :arith-assert-lower      86
;  :arith-assert-upper      46
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         16
;  :arith-offset-eqs        9
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   40
;  :datatype-splits         39
;  :decisions               65
;  :del-clause              244
;  :final-checks            18
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             699
;  :mk-clause               262
;  :num-allocs              3563090
;  :num-checks              36
;  :propagations            119
;  :quant-instantiations    71
;  :rlimit-count            115606)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !(0 <= First:(Second:(Second:($t@42@02)))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               546
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      93
;  :arith-assert-upper      49
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        70
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 58
;  :datatype-occurs-check   44
;  :datatype-splits         42
;  :decisions               72
;  :del-clause              266
;  :final-checks            20
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             719
;  :mk-clause               278
;  :num-allocs              3563090
;  :num-checks              37
;  :propagations            125
;  :quant-instantiations    73
;  :rlimit-count            116357
;  :time                    0.00)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      94
;  :arith-assert-upper      51
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              272
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             731
;  :mk-clause               284
;  :num-allocs              3563090
;  :num-checks              38
;  :propagations            126
;  :quant-instantiations    74
;  :rlimit-count            117001
;  :time                    0.00)
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[0] | live]
; [else-branch: 14 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[0]) | live]
(push) ; 4
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[0]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      95
;  :arith-assert-upper      51
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              272
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             739
;  :mk-clause               291
;  :num-allocs              3563090
;  :num-checks              39
;  :propagations            126
;  :quant-instantiations    75
;  :rlimit-count            117225)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        0)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1) ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      95
;  :arith-assert-upper      51
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              279
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             746
;  :mk-clause               295
;  :num-allocs              3563090
;  :num-checks              40
;  :propagations            126
;  :quant-instantiations    75
;  :rlimit-count            117764)
(push) ; 3
; [then-branch: 15 | 0 <= First:(Second:(Second:($t@42@02)))[1] | live]
; [else-branch: 15 | !(0 <= First:(Second:(Second:($t@42@02)))[1]) | live]
(push) ; 4
; [then-branch: 15 | 0 <= First:(Second:(Second:($t@42@02)))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      96
;  :arith-assert-upper      51
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              279
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             752
;  :mk-clause               301
;  :num-allocs              3563090
;  :num-checks              41
;  :propagations            126
;  :quant-instantiations    76
;  :rlimit-count            117927)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      96
;  :arith-assert-upper      51
;  :arith-bound-prop        9
;  :arith-conflicts         7
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              279
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             752
;  :mk-clause               301
;  :num-allocs              3563090
;  :num-checks              42
;  :propagations            126
;  :quant-instantiations    76
;  :rlimit-count            117936)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               575
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      97
;  :arith-assert-upper      52
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              279
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             752
;  :mk-clause               301
;  :num-allocs              3563090
;  :num-checks              43
;  :propagations            130
;  :quant-instantiations    76
;  :rlimit-count            118044
;  :time                    0.00)
(push) ; 5
; [then-branch: 16 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 | live]
; [else-branch: 16 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] != 0 | live]
(push) ; 6
; [then-branch: 16 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 16 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               575
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      97
;  :arith-assert-upper      52
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              279
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             753
;  :mk-clause               301
;  :num-allocs              3563090
;  :num-checks              44
;  :propagations            130
;  :quant-instantiations    76
;  :rlimit-count            118263)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               575
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      97
;  :arith-assert-upper      52
;  :arith-bound-prop        9
;  :arith-conflicts         8
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              279
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             753
;  :mk-clause               301
;  :num-allocs              3563090
;  :num-checks              45
;  :propagations            130
;  :quant-instantiations    76
;  :rlimit-count            118272)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               576
;  :arith-add-rows          82
;  :arith-assert-diseq      25
;  :arith-assert-lower      98
;  :arith-assert-upper      53
;  :arith-bound-prop        9
;  :arith-conflicts         9
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         17
;  :arith-offset-eqs        9
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   48
;  :datatype-splits         45
;  :decisions               79
;  :del-clause              279
;  :final-checks            22
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             753
;  :mk-clause               301
;  :num-allocs              3563090
;  :num-checks              46
;  :propagations            134
;  :quant-instantiations    76
;  :rlimit-count            118380)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(0 <= First:(Second:(Second:($t@42@02)))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.08s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               605
;  :arith-add-rows          82
;  :arith-assert-diseq      27
;  :arith-assert-lower      106
;  :arith-assert-upper      57
;  :arith-bound-prop        9
;  :arith-conflicts         9
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         18
;  :arith-offset-eqs        9
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 70
;  :datatype-occurs-check   52
;  :datatype-splits         48
;  :decisions               87
;  :del-clause              305
;  :final-checks            24
;  :interface-eqs           3
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             776
;  :mk-clause               321
;  :num-allocs              3563090
;  :num-checks              47
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            119165
;  :time                    0.03)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               648
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      117
;  :arith-assert-upper      62
;  :arith-bound-prop        13
;  :arith-conflicts         9
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              363
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             820
;  :mk-clause               379
;  :num-allocs              3563090
;  :num-checks              48
;  :propagations            155
;  :quant-instantiations    81
;  :rlimit-count            120084
;  :time                    0.02)
; [then-branch: 17 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[1] | live]
; [else-branch: 17 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[1]) | live]
(push) ; 4
; [then-branch: 17 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[1]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               648
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      118
;  :arith-assert-upper      62
;  :arith-bound-prop        13
;  :arith-conflicts         9
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              363
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             828
;  :mk-clause               386
;  :num-allocs              3563090
;  :num-checks              49
;  :propagations            155
;  :quant-instantiations    82
;  :rlimit-count            120309)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 17 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        1)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1) ==> diz.Main_process_state[2] == -1
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               654
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      118
;  :arith-assert-upper      62
;  :arith-bound-prop        13
;  :arith-conflicts         9
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              370
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             835
;  :mk-clause               390
;  :num-allocs              3563090
;  :num-checks              50
;  :propagations            155
;  :quant-instantiations    82
;  :rlimit-count            120858)
(push) ; 3
; [then-branch: 18 | 0 <= First:(Second:(Second:($t@42@02)))[2] | live]
; [else-branch: 18 | !(0 <= First:(Second:(Second:($t@42@02)))[2]) | live]
(push) ; 4
; [then-branch: 18 | 0 <= First:(Second:(Second:($t@42@02)))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               654
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      119
;  :arith-assert-upper      62
;  :arith-bound-prop        13
;  :arith-conflicts         9
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              370
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             841
;  :mk-clause               396
;  :num-allocs              3563090
;  :num-checks              51
;  :propagations            155
;  :quant-instantiations    83
;  :rlimit-count            121021)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               654
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      119
;  :arith-assert-upper      62
;  :arith-bound-prop        13
;  :arith-conflicts         9
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              370
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             841
;  :mk-clause               396
;  :num-allocs              3563090
;  :num-checks              52
;  :propagations            155
;  :quant-instantiations    83
;  :rlimit-count            121030)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               655
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      120
;  :arith-assert-upper      63
;  :arith-bound-prop        13
;  :arith-conflicts         10
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              370
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             841
;  :mk-clause               396
;  :num-allocs              3563090
;  :num-checks              53
;  :propagations            159
;  :quant-instantiations    83
;  :rlimit-count            121138)
(push) ; 5
; [then-branch: 19 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 | live]
; [else-branch: 19 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] != 0 | live]
(push) ; 6
; [then-branch: 19 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 19 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        2))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               655
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      120
;  :arith-assert-upper      63
;  :arith-bound-prop        13
;  :arith-conflicts         10
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              370
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             842
;  :mk-clause               396
;  :num-allocs              3563090
;  :num-checks              54
;  :propagations            159
;  :quant-instantiations    83
;  :rlimit-count            121357)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               655
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      120
;  :arith-assert-upper      63
;  :arith-bound-prop        13
;  :arith-conflicts         10
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              370
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             842
;  :mk-clause               396
;  :num-allocs              3563090
;  :num-checks              55
;  :propagations            159
;  :quant-instantiations    83
;  :rlimit-count            121366)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               656
;  :arith-add-rows          82
;  :arith-assert-diseq      33
;  :arith-assert-lower      121
;  :arith-assert-upper      64
;  :arith-bound-prop        13
;  :arith-conflicts         11
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         19
;  :arith-offset-eqs        9
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 80
;  :datatype-occurs-check   58
;  :datatype-splits         53
;  :decisions               101
;  :del-clause              370
;  :final-checks            28
;  :interface-eqs           4
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             842
;  :mk-clause               396
;  :num-allocs              3563090
;  :num-checks              56
;  :propagations            163
;  :quant-instantiations    83
;  :rlimit-count            121474)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 18 | !(0 <= First:(Second:(Second:($t@42@02)))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               692
;  :arith-add-rows          82
;  :arith-assert-diseq      35
;  :arith-assert-lower      131
;  :arith-assert-upper      70
;  :arith-bound-prop        13
;  :arith-conflicts         11
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   62
;  :datatype-splits         56
;  :decisions               111
;  :del-clause              404
;  :final-checks            31
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             871
;  :mk-clause               424
;  :num-allocs              3563090
;  :num-checks              57
;  :propagations            173
;  :quant-instantiations    85
;  :rlimit-count            122324
;  :time                    0.01)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               729
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      138
;  :arith-assert-upper      74
;  :arith-bound-prop        13
;  :arith-conflicts         11
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              444
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             898
;  :mk-clause               464
;  :num-allocs              3563090
;  :num-checks              58
;  :propagations            191
;  :quant-instantiations    87
;  :rlimit-count            123210
;  :time                    0.03)
; [then-branch: 20 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[2] | live]
; [else-branch: 20 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[2]) | live]
(push) ; 4
; [then-branch: 20 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[2]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2))))
; [eval] diz.Main_process_state[2] == -1
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               729
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      139
;  :arith-assert-upper      74
;  :arith-bound-prop        13
;  :arith-conflicts         11
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              444
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             906
;  :mk-clause               471
;  :num-allocs              3563090
;  :num-checks              59
;  :propagations            191
;  :quant-instantiations    88
;  :rlimit-count            123435)
; [eval] -1
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[2])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        2)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        2)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
      2)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               735
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      139
;  :arith-assert-upper      74
;  :arith-bound-prop        13
;  :arith-conflicts         11
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              451
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             913
;  :mk-clause               475
;  :num-allocs              3563090
;  :num-checks              60
;  :propagations            191
;  :quant-instantiations    88
;  :rlimit-count            123994)
(push) ; 3
; [then-branch: 21 | 0 <= First:(Second:(Second:($t@42@02)))[0] | live]
; [else-branch: 21 | !(0 <= First:(Second:(Second:($t@42@02)))[0]) | live]
(push) ; 4
; [then-branch: 21 | 0 <= First:(Second:(Second:($t@42@02)))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               735
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      140
;  :arith-assert-upper      74
;  :arith-bound-prop        13
;  :arith-conflicts         11
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              451
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             918
;  :mk-clause               481
;  :num-allocs              3563090
;  :num-checks              61
;  :propagations            191
;  :quant-instantiations    89
;  :rlimit-count            124133)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               735
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      140
;  :arith-assert-upper      74
;  :arith-bound-prop        13
;  :arith-conflicts         11
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              451
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             918
;  :mk-clause               481
;  :num-allocs              3563090
;  :num-checks              62
;  :propagations            191
;  :quant-instantiations    89
;  :rlimit-count            124142)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               736
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      141
;  :arith-assert-upper      75
;  :arith-bound-prop        13
;  :arith-conflicts         12
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              451
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             918
;  :mk-clause               481
;  :num-allocs              3563090
;  :num-checks              63
;  :propagations            195
;  :quant-instantiations    89
;  :rlimit-count            124250)
(push) ; 5
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] != 0 | live]
(push) ; 6
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 22 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               736
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      141
;  :arith-assert-upper      75
;  :arith-bound-prop        13
;  :arith-conflicts         12
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              451
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             918
;  :mk-clause               481
;  :num-allocs              3563090
;  :num-checks              64
;  :propagations            195
;  :quant-instantiations    89
;  :rlimit-count            124453)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               736
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      141
;  :arith-assert-upper      75
;  :arith-bound-prop        13
;  :arith-conflicts         12
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              451
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             918
;  :mk-clause               481
;  :num-allocs              3563090
;  :num-checks              65
;  :propagations            195
;  :quant-instantiations    89
;  :rlimit-count            124462)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               737
;  :arith-add-rows          82
;  :arith-assert-diseq      43
;  :arith-assert-lower      142
;  :arith-assert-upper      76
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 92
;  :datatype-occurs-check   66
;  :datatype-splits         59
;  :decisions               123
;  :del-clause              451
;  :final-checks            33
;  :interface-eqs           5
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             918
;  :mk-clause               481
;  :num-allocs              3563090
;  :num-checks              66
;  :propagations            199
;  :quant-instantiations    89
;  :rlimit-count            124570)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 21 | !(0 <= First:(Second:(Second:($t@42@02)))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               776
;  :arith-add-rows          82
;  :arith-assert-diseq      53
;  :arith-assert-lower      156
;  :arith-assert-upper      84
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 98
;  :datatype-occurs-check   70
;  :datatype-splits         62
;  :decisions               138
;  :del-clause              504
;  :final-checks            36
;  :interface-eqs           6
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             948
;  :mk-clause               528
;  :num-allocs              3563090
;  :num-checks              67
;  :propagations            225
;  :quant-instantiations    92
;  :rlimit-count            125592
;  :time                    0.01)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        0))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               825
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      165
;  :arith-assert-upper      91
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              525
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             985
;  :mk-clause               549
;  :num-allocs              3563090
;  :num-checks              68
;  :propagations            236
;  :quant-instantiations    95
;  :rlimit-count            126531
;  :time                    0.01)
; [then-branch: 23 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[0]) | live]
; [else-branch: 23 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[0] | live]
(push) ; 4
; [then-branch: 23 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               825
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      165
;  :arith-assert-upper      91
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              525
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             985
;  :mk-clause               550
;  :num-allocs              3563090
;  :num-checks              69
;  :propagations            236
;  :quant-instantiations    95
;  :rlimit-count            126746)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               825
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      165
;  :arith-assert-upper      91
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              525
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             985
;  :mk-clause               550
;  :num-allocs              3563090
;  :num-checks              70
;  :propagations            236
;  :quant-instantiations    95
;  :rlimit-count            126761)
(pop) ; 4
(push) ; 4
; [else-branch: 23 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[0]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[0]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
              0))
          0)
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               831
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      165
;  :arith-assert-upper      91
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              526
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             989
;  :mk-clause               554
;  :num-allocs              3563090
;  :num-checks              71
;  :propagations            236
;  :quant-instantiations    95
;  :rlimit-count            127310)
(push) ; 3
; [then-branch: 24 | 0 <= First:(Second:(Second:($t@42@02)))[1] | live]
; [else-branch: 24 | !(0 <= First:(Second:(Second:($t@42@02)))[1]) | live]
(push) ; 4
; [then-branch: 24 | 0 <= First:(Second:(Second:($t@42@02)))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               831
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      166
;  :arith-assert-upper      91
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              526
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             994
;  :mk-clause               560
;  :num-allocs              3563090
;  :num-checks              72
;  :propagations            236
;  :quant-instantiations    96
;  :rlimit-count            127449)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               831
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      166
;  :arith-assert-upper      91
;  :arith-bound-prop        13
;  :arith-conflicts         13
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              526
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             994
;  :mk-clause               560
;  :num-allocs              3563090
;  :num-checks              73
;  :propagations            236
;  :quant-instantiations    96
;  :rlimit-count            127458)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               832
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      167
;  :arith-assert-upper      92
;  :arith-bound-prop        13
;  :arith-conflicts         14
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              526
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             994
;  :mk-clause               560
;  :num-allocs              3563090
;  :num-checks              74
;  :propagations            240
;  :quant-instantiations    96
;  :rlimit-count            127566)
(push) ; 5
; [then-branch: 25 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 | live]
; [else-branch: 25 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] != 0 | live]
(push) ; 6
; [then-branch: 25 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 25 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 7
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               832
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      167
;  :arith-assert-upper      92
;  :arith-bound-prop        13
;  :arith-conflicts         14
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              526
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             994
;  :mk-clause               560
;  :num-allocs              3563090
;  :num-checks              75
;  :propagations            240
;  :quant-instantiations    96
;  :rlimit-count            127769)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               832
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      167
;  :arith-assert-upper      92
;  :arith-bound-prop        13
;  :arith-conflicts         14
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              526
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             994
;  :mk-clause               560
;  :num-allocs              3563090
;  :num-checks              76
;  :propagations            240
;  :quant-instantiations    96
;  :rlimit-count            127778)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               833
;  :arith-add-rows          82
;  :arith-assert-diseq      56
;  :arith-assert-lower      168
;  :arith-assert-upper      93
;  :arith-bound-prop        13
;  :arith-conflicts         15
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         20
;  :arith-offset-eqs        9
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 108
;  :datatype-occurs-check   76
;  :datatype-splits         69
;  :decisions               157
;  :del-clause              526
;  :final-checks            41
;  :interface-eqs           8
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             994
;  :mk-clause               560
;  :num-allocs              3563090
;  :num-checks              77
;  :propagations            244
;  :quant-instantiations    96
;  :rlimit-count            127886)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 24 | !(0 <= First:(Second:(Second:($t@42@02)))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               888
;  :arith-add-rows          82
;  :arith-assert-diseq      71
;  :arith-assert-lower      197
;  :arith-assert-upper      106
;  :arith-bound-prop        13
;  :arith-conflicts         15
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         23
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 118
;  :datatype-occurs-check   82
;  :datatype-splits         76
;  :decisions               181
;  :del-clause              620
;  :final-checks            46
;  :interface-eqs           10
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1059
;  :mk-clause               648
;  :num-allocs              3563090
;  :num-checks              78
;  :propagations            290
;  :quant-instantiations    102
;  :rlimit-count            129092
;  :time                    0.02)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      220
;  :arith-assert-upper      116
;  :arith-bound-prop        13
;  :arith-conflicts         15
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              691
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1127
;  :mk-clause               719
;  :num-allocs              3563090
;  :num-checks              79
;  :propagations            320
;  :quant-instantiations    107
;  :rlimit-count            130346
;  :time                    0.01)
; [then-branch: 26 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[1]) | live]
; [else-branch: 26 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[1] | live]
(push) ; 4
; [then-branch: 26 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      220
;  :arith-assert-upper      116
;  :arith-bound-prop        13
;  :arith-conflicts         15
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              691
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1127
;  :mk-clause               720
;  :num-allocs              3563090
;  :num-checks              80
;  :propagations            320
;  :quant-instantiations    107
;  :rlimit-count            130561)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               970
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      220
;  :arith-assert-upper      116
;  :arith-bound-prop        13
;  :arith-conflicts         15
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              691
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1127
;  :mk-clause               720
;  :num-allocs              3563090
;  :num-checks              81
;  :propagations            320
;  :quant-instantiations    107
;  :rlimit-count            130576)
(pop) ; 4
(push) ; 4
; [else-branch: 26 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[1]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[1]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
              1))
          0)
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
              1))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)) ==> diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] !(0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               972
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      220
;  :arith-assert-upper      116
;  :arith-bound-prop        13
;  :arith-conflicts         15
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              692
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1130
;  :mk-clause               724
;  :num-allocs              3563090
;  :num-checks              82
;  :propagations            320
;  :quant-instantiations    107
;  :rlimit-count            131041)
(push) ; 3
; [then-branch: 27 | 0 <= First:(Second:(Second:($t@42@02)))[2] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:($t@42@02)))[2]) | live]
(push) ; 4
; [then-branch: 27 | 0 <= First:(Second:(Second:($t@42@02)))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               972
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      221
;  :arith-assert-upper      116
;  :arith-bound-prop        13
;  :arith-conflicts         15
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              692
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1135
;  :mk-clause               730
;  :num-allocs              3563090
;  :num-checks              83
;  :propagations            320
;  :quant-instantiations    108
;  :rlimit-count            131158)
(push) ; 5
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               972
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      221
;  :arith-assert-upper      116
;  :arith-bound-prop        13
;  :arith-conflicts         15
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              692
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1135
;  :mk-clause               730
;  :num-allocs              3563090
;  :num-checks              84
;  :propagations            320
;  :quant-instantiations    108
;  :rlimit-count            131167)
(push) ; 5
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               973
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      222
;  :arith-assert-upper      117
;  :arith-bound-prop        13
;  :arith-conflicts         16
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              692
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1135
;  :mk-clause               730
;  :num-allocs              3563090
;  :num-checks              85
;  :propagations            324
;  :quant-instantiations    108
;  :rlimit-count            131275)
(push) ; 5
; [then-branch: 28 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 | live]
; [else-branch: 28 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] != 0 | live]
(push) ; 6
; [then-branch: 28 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2))
  0))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        2))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               973
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      222
;  :arith-assert-upper      117
;  :arith-bound-prop        13
;  :arith-conflicts         16
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              692
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1135
;  :mk-clause               730
;  :num-allocs              3563090
;  :num-checks              86
;  :propagations            324
;  :quant-instantiations    108
;  :rlimit-count            131478)
(push) ; 7
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               973
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      222
;  :arith-assert-upper      117
;  :arith-bound-prop        13
;  :arith-conflicts         16
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              692
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1135
;  :mk-clause               730
;  :num-allocs              3563090
;  :num-checks              87
;  :propagations            324
;  :quant-instantiations    108
;  :rlimit-count            131487)
(push) ; 7
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               974
;  :arith-add-rows          82
;  :arith-assert-diseq      79
;  :arith-assert-lower      223
;  :arith-assert-upper      118
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 131
;  :datatype-occurs-check   90
;  :datatype-splits         84
;  :decisions               208
;  :del-clause              692
;  :final-checks            52
;  :interface-eqs           12
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1135
;  :mk-clause               730
;  :num-allocs              3563090
;  :num-checks              88
;  :propagations            328
;  :quant-instantiations    108
;  :rlimit-count            131595)
; [eval] -1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 27 | !(0 <= First:(Second:(Second:($t@42@02)))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1029
;  :arith-add-rows          82
;  :arith-assert-diseq      83
;  :arith-assert-lower      233
;  :arith-assert-upper      125
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         29
;  :arith-offset-eqs        9
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               53
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 140
;  :datatype-occurs-check   96
;  :datatype-splits         89
;  :decisions               227
;  :del-clause              728
;  :final-checks            57
;  :interface-eqs           14
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1173
;  :mk-clause               760
;  :num-allocs              3563090
;  :num-checks              89
;  :propagations            343
;  :quant-instantiations    110
;  :rlimit-count            132589
;  :time                    0.03)
(push) ; 4
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1084
;  :arith-add-rows          82
;  :arith-assert-diseq      88
;  :arith-assert-lower      244
;  :arith-assert-upper      137
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              762
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1218
;  :mk-clause               794
;  :num-allocs              3563090
;  :num-checks              90
;  :propagations            362
;  :quant-instantiations    112
;  :rlimit-count            133661
;  :time                    0.00)
; [then-branch: 29 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[2]) | live]
; [else-branch: 29 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[2] | live]
(push) ; 4
; [then-branch: 29 | !(First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[2])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
        2)))))
; [eval] diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1084
;  :arith-add-rows          82
;  :arith-assert-diseq      88
;  :arith-assert-lower      244
;  :arith-assert-upper      137
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              762
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1218
;  :mk-clause               795
;  :num-allocs              3563090
;  :num-checks              91
;  :propagations            362
;  :quant-instantiations    112
;  :rlimit-count            133876)
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1084
;  :arith-add-rows          82
;  :arith-assert-diseq      88
;  :arith-assert-lower      244
;  :arith-assert-upper      137
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              762
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1218
;  :mk-clause               795
;  :num-allocs              3563090
;  :num-checks              92
;  :propagations            362
;  :quant-instantiations    112
;  :rlimit-count            133891)
(pop) ; 4
(push) ; 4
; [else-branch: 29 | First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == 0 || First:(Second:(Second:(Second:(Second:($t@42@02)))))[First:(Second:(Second:($t@42@02)))[2]] == -1 && 0 <= First:(Second:(Second:($t@42@02)))[2]]
(assert (and
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
              2))
          0)
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@02))))))
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
              2))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
          2))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@44@02)))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@42@02))))
      2))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@46@02 $Ref)
(declare-const globals@47@02 $Ref)
(declare-const diz@48@02 $Ref)
(declare-const globals@49@02 $Ref)
(push) ; 1
(declare-const $t@50@02 $Snap)
(assert (= $t@50@02 ($Snap.combine ($Snap.first $t@50@02) ($Snap.second $t@50@02))))
(assert (= ($Snap.first $t@50@02) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@48@02 $Ref.null)))
(assert (=
  ($Snap.second $t@50@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@50@02))
    ($Snap.second ($Snap.second $t@50@02)))))
(declare-const $k@51@02 $Perm)
(assert ($Perm.isReadVar $k@51@02 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@51@02 $Perm.No) (< $Perm.No $k@51@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1095
;  :arith-add-rows          82
;  :arith-assert-diseq      89
;  :arith-assert-lower      246
;  :arith-assert-upper      138
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              794
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1226
;  :mk-clause               797
;  :num-allocs              3563090
;  :num-checks              93
;  :propagations            363
;  :quant-instantiations    112
;  :rlimit-count            134477)
(assert (<= $Perm.No $k@51@02))
(assert (<= $k@51@02 $Perm.Write))
(assert (implies (< $Perm.No $k@51@02) (not (= diz@48@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@50@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@50@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@50@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@50@02))) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1101
;  :arith-add-rows          82
;  :arith-assert-diseq      89
;  :arith-assert-lower      246
;  :arith-assert-upper      139
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              794
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1229
;  :mk-clause               797
;  :num-allocs              3563090
;  :num-checks              94
;  :propagations            363
;  :quant-instantiations    112
;  :rlimit-count            134730
;  :time                    0.01)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@50@02))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@50@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@02)))))))
(push) ; 2
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1107
;  :arith-add-rows          82
;  :arith-assert-diseq      89
;  :arith-assert-lower      246
;  :arith-assert-upper      139
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              794
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1232
;  :mk-clause               797
;  :num-allocs              3563090
;  :num-checks              95
;  :propagations            363
;  :quant-instantiations    113
;  :rlimit-count            135014)
(declare-const $k@52@02 $Perm)
(assert ($Perm.isReadVar $k@52@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@52@02 $Perm.No) (< $Perm.No $k@52@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1107
;  :arith-add-rows          82
;  :arith-assert-diseq      90
;  :arith-assert-lower      248
;  :arith-assert-upper      140
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              794
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1236
;  :mk-clause               799
;  :num-allocs              3563090
;  :num-checks              96
;  :propagations            364
;  :quant-instantiations    113
;  :rlimit-count            135213)
(assert (<= $Perm.No $k@52@02))
(assert (<= $k@52@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@52@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@50@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@02)))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@51@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1113
;  :arith-add-rows          82
;  :arith-assert-diseq      90
;  :arith-assert-lower      248
;  :arith-assert-upper      141
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               61
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              794
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1239
;  :mk-clause               799
;  :num-allocs              3563090
;  :num-checks              97
;  :propagations            364
;  :quant-instantiations    113
;  :rlimit-count            135486
;  :time                    0.00)
(push) ; 2
(assert (not (< $Perm.No $k@52@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1113
;  :arith-add-rows          82
;  :arith-assert-diseq      90
;  :arith-assert-lower      248
;  :arith-assert-upper      141
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               62
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 149
;  :datatype-occurs-check   102
;  :datatype-splits         94
;  :decisions               251
;  :del-clause              794
;  :final-checks            63
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1239
;  :mk-clause               799
;  :num-allocs              3563090
;  :num-checks              98
;  :propagations            364
;  :quant-instantiations    113
;  :rlimit-count            135534
;  :time                    0.03)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@02)))))
  diz@48@02))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@53@02 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Read_run_EncodedGlobalVariables ----------
(declare-const diz@54@02 $Ref)
(declare-const globals@55@02 $Ref)
(declare-const sys__result@56@02 Int)
(declare-const diz@57@02 $Ref)
(declare-const globals@58@02 $Ref)
(declare-const sys__result@59@02 Int)
(push) ; 1
(declare-const $t@60@02 $Snap)
(assert (= $t@60@02 ($Snap.combine ($Snap.first $t@60@02) ($Snap.second $t@60@02))))
(assert (= ($Snap.first $t@60@02) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@57@02 $Ref.null)))
(assert (=
  ($Snap.second $t@60@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@60@02))
    ($Snap.second ($Snap.second $t@60@02)))))
(declare-const $k@61@02 $Perm)
(assert ($Perm.isReadVar $k@61@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@61@02 $Perm.No) (< $Perm.No $k@61@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1134
;  :arith-add-rows          82
;  :arith-assert-diseq      91
;  :arith-assert-lower      250
;  :arith-assert-upper      142
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               63
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 152
;  :datatype-occurs-check   104
;  :datatype-splits         97
;  :decisions               254
;  :del-clause              798
;  :final-checks            65
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1252
;  :mk-clause               801
;  :num-allocs              3563090
;  :num-checks              100
;  :propagations            365
;  :quant-instantiations    114
;  :rlimit-count            136461)
(assert (<= $Perm.No $k@61@02))
(assert (<= $k@61@02 $Perm.Write))
(assert (implies (< $Perm.No $k@61@02) (not (= diz@57@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@60@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@60@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@60@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@60@02))) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1140
;  :arith-add-rows          82
;  :arith-assert-diseq      91
;  :arith-assert-lower      250
;  :arith-assert-upper      143
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               64
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 152
;  :datatype-occurs-check   104
;  :datatype-splits         97
;  :decisions               254
;  :del-clause              798
;  :final-checks            65
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1255
;  :mk-clause               801
;  :num-allocs              3563090
;  :num-checks              101
;  :propagations            365
;  :quant-instantiations    114
;  :rlimit-count            136714
;  :time                    0.03)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@60@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@60@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@60@02)))))))
(push) ; 2
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1146
;  :arith-add-rows          82
;  :arith-assert-diseq      91
;  :arith-assert-lower      250
;  :arith-assert-upper      143
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 152
;  :datatype-occurs-check   104
;  :datatype-splits         97
;  :decisions               254
;  :del-clause              798
;  :final-checks            65
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1258
;  :mk-clause               801
;  :num-allocs              3563090
;  :num-checks              102
;  :propagations            365
;  :quant-instantiations    115
;  :rlimit-count            136998
;  :time                    0.01)
(declare-const $k@62@02 $Perm)
(assert ($Perm.isReadVar $k@62@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@62@02 $Perm.No) (< $Perm.No $k@62@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1146
;  :arith-add-rows          82
;  :arith-assert-diseq      92
;  :arith-assert-lower      252
;  :arith-assert-upper      144
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 152
;  :datatype-occurs-check   104
;  :datatype-splits         97
;  :decisions               254
;  :del-clause              798
;  :final-checks            65
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1262
;  :mk-clause               803
;  :num-allocs              3563090
;  :num-checks              103
;  :propagations            366
;  :quant-instantiations    115
;  :rlimit-count            137196)
(assert (<= $Perm.No $k@62@02))
(assert (<= $k@62@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@62@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@60@02))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.08s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1147
;  :arith-add-rows          82
;  :arith-assert-diseq      92
;  :arith-assert-lower      252
;  :arith-assert-upper      145
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 152
;  :datatype-occurs-check   104
;  :datatype-splits         97
;  :decisions               254
;  :del-clause              798
;  :final-checks            65
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1264
;  :mk-clause               803
;  :num-allocs              3563090
;  :num-checks              104
;  :propagations            366
;  :quant-instantiations    115
;  :rlimit-count            137382
;  :time                    0.08)
(push) ; 2
(assert (not (< $Perm.No $k@62@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1147
;  :arith-add-rows          82
;  :arith-assert-diseq      92
;  :arith-assert-lower      252
;  :arith-assert-upper      145
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 152
;  :datatype-occurs-check   104
;  :datatype-splits         97
;  :decisions               254
;  :del-clause              798
;  :final-checks            65
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1264
;  :mk-clause               803
;  :num-allocs              3563090
;  :num-checks              105
;  :propagations            366
;  :quant-instantiations    115
;  :rlimit-count            137430
;  :time                    0.01)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@60@02)))))
  diz@57@02))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@63@02 $Snap)
(assert (= $t@63@02 ($Snap.combine ($Snap.first $t@63@02) ($Snap.second $t@63@02))))
(declare-const $k@64@02 $Perm)
(assert ($Perm.isReadVar $k@64@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@64@02 $Perm.No) (< $Perm.No $k@64@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1160
;  :arith-add-rows          82
;  :arith-assert-diseq      93
;  :arith-assert-lower      254
;  :arith-assert-upper      146
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   106
;  :datatype-splits         99
;  :decisions               256
;  :del-clause              802
;  :final-checks            67
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1273
;  :mk-clause               805
;  :num-allocs              3563090
;  :num-checks              107
;  :propagations            367
;  :quant-instantiations    116
;  :rlimit-count            138136)
(assert (<= $Perm.No $k@64@02))
(assert (<= $k@64@02 $Perm.Write))
(assert (implies (< $Perm.No $k@64@02) (not (= diz@57@02 $Ref.null))))
(assert (=
  ($Snap.second $t@63@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@63@02))
    ($Snap.second ($Snap.second $t@63@02)))))
(assert (= ($Snap.first ($Snap.second $t@63@02)) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@64@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1166
;  :arith-add-rows          82
;  :arith-assert-diseq      93
;  :arith-assert-lower      254
;  :arith-assert-upper      147
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   106
;  :datatype-splits         99
;  :decisions               256
;  :del-clause              802
;  :final-checks            67
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1276
;  :mk-clause               805
;  :num-allocs              3563090
;  :num-checks              108
;  :propagations            367
;  :quant-instantiations    116
;  :rlimit-count            138379
;  :time                    0.01)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@63@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@63@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@63@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@63@02))))))
(push) ; 3
(assert (not (< $Perm.No $k@64@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1172
;  :arith-add-rows          82
;  :arith-assert-diseq      93
;  :arith-assert-lower      254
;  :arith-assert-upper      147
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   106
;  :datatype-splits         99
;  :decisions               256
;  :del-clause              802
;  :final-checks            67
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1279
;  :mk-clause               805
;  :num-allocs              3563090
;  :num-checks              109
;  :propagations            367
;  :quant-instantiations    117
;  :rlimit-count            138651
;  :time                    0.02)
(declare-const $k@65@02 $Perm)
(assert ($Perm.isReadVar $k@65@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@65@02 $Perm.No) (< $Perm.No $k@65@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1172
;  :arith-add-rows          82
;  :arith-assert-diseq      94
;  :arith-assert-lower      256
;  :arith-assert-upper      148
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   106
;  :datatype-splits         99
;  :decisions               256
;  :del-clause              802
;  :final-checks            67
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1283
;  :mk-clause               807
;  :num-allocs              3563090
;  :num-checks              110
;  :propagations            368
;  :quant-instantiations    117
;  :rlimit-count            138850)
(assert (<= $Perm.No $k@65@02))
(assert (<= $k@65@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@65@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@63@02)) $Ref.null))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@63@02))) $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@64@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1173
;  :arith-add-rows          82
;  :arith-assert-diseq      94
;  :arith-assert-lower      256
;  :arith-assert-upper      149
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   106
;  :datatype-splits         99
;  :decisions               256
;  :del-clause              802
;  :final-checks            67
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1285
;  :mk-clause               807
;  :num-allocs              3563090
;  :num-checks              111
;  :propagations            368
;  :quant-instantiations    117
;  :rlimit-count            139026
;  :time                    0.02)
(push) ; 3
(assert (not (< $Perm.No $k@65@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1173
;  :arith-add-rows          82
;  :arith-assert-diseq      94
;  :arith-assert-lower      256
;  :arith-assert-upper      149
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   106
;  :datatype-splits         99
;  :decisions               256
;  :del-clause              802
;  :final-checks            67
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1285
;  :mk-clause               807
;  :num-allocs              3563090
;  :num-checks              112
;  :propagations            368
;  :quant-instantiations    117
;  :rlimit-count            139074)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@63@02))))
  diz@57@02))
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__15: Int
(declare-const sys__local__result__15@66@02 Int)
; [exec]
; var __flatten_26__16: Ref
(declare-const __flatten_26__16@67@02 $Ref)
; [exec]
; var __flatten_27__17: Seq[Int]
(declare-const __flatten_27__17@68@02 Seq<Int>)
; [exec]
; var __flatten_28__18: Ref
(declare-const __flatten_28__18@69@02 $Ref)
; [exec]
; var __flatten_29__19: Ref
(declare-const __flatten_29__19@70@02 $Ref)
; [exec]
; var __flatten_30__20: Ref
(declare-const __flatten_30__20@71@02 $Ref)
; [exec]
; var __flatten_31__21: Bool
(declare-const __flatten_31__21@72@02 Bool)
; [exec]
; var __flatten_32__22: Ref
(declare-const __flatten_32__22@73@02 $Ref)
; [exec]
; var __flatten_33__23: Ref
(declare-const __flatten_33__23@74@02 $Ref)
; [exec]
; var __flatten_34__24: Ref
(declare-const __flatten_34__24@75@02 $Ref)
; [exec]
; var __flatten_35__25: Ref
(declare-const __flatten_35__25@76@02 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 3
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1173
;  :arith-add-rows          82
;  :arith-assert-diseq      94
;  :arith-assert-lower      256
;  :arith-assert-upper      149
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   106
;  :datatype-splits         99
;  :decisions               256
;  :del-clause              806
;  :final-checks            67
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1285
;  :mk-clause               807
;  :num-allocs              3563090
;  :num-checks              113
;  :propagations            368
;  :quant-instantiations    117
;  :rlimit-count            139138)
(declare-const $t@77@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1179
;  :arith-add-rows          82
;  :arith-assert-diseq      94
;  :arith-assert-lower      256
;  :arith-assert-upper      149
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              806
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1285
;  :mk-clause               807
;  :num-allocs              3563090
;  :num-checks              115
;  :propagations            368
;  :quant-instantiations    117
;  :rlimit-count            139455
;  :time                    0.01)
(assert (= $t@77@02 ($Snap.combine ($Snap.first $t@77@02) ($Snap.second $t@77@02))))
(assert (= ($Snap.first $t@77@02) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@77@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@77@02))
    ($Snap.second ($Snap.second $t@77@02)))))
(assert (= ($Snap.first ($Snap.second $t@77@02)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@77@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@77@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@77@02))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@77@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@78@02 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 30 | 0 <= i@78@02 | live]
; [else-branch: 30 | !(0 <= i@78@02) | live]
(push) ; 5
; [then-branch: 30 | 0 <= i@78@02]
(assert (<= 0 i@78@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 30 | !(0 <= i@78@02)]
(assert (not (<= 0 i@78@02)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 31 | i@78@02 < |First:(Second:(Second:(Second:($t@77@02))))| && 0 <= i@78@02 | live]
; [else-branch: 31 | !(i@78@02 < |First:(Second:(Second:(Second:($t@77@02))))| && 0 <= i@78@02) | live]
(push) ; 5
; [then-branch: 31 | i@78@02 < |First:(Second:(Second:(Second:($t@77@02))))| && 0 <= i@78@02]
(assert (and
  (<
    i@78@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
  (<= 0 i@78@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@78@02 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1230
;  :arith-add-rows          82
;  :arith-assert-diseq      96
;  :arith-assert-lower      263
;  :arith-assert-upper      152
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              806
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1317
;  :mk-clause               813
;  :num-allocs              3563090
;  :num-checks              116
;  :propagations            370
;  :quant-instantiations    123
;  :rlimit-count            140805)
; [eval] -1
(push) ; 6
; [then-branch: 32 | First:(Second:(Second:(Second:($t@77@02))))[i@78@02] == -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@77@02))))[i@78@02] != -1 | live]
(push) ; 7
; [then-branch: 32 | First:(Second:(Second:(Second:($t@77@02))))[i@78@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
    i@78@02)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | First:(Second:(Second:(Second:($t@77@02))))[i@78@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
      i@78@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@78@02 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1230
;  :arith-add-rows          82
;  :arith-assert-diseq      96
;  :arith-assert-lower      263
;  :arith-assert-upper      152
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              806
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1318
;  :mk-clause               813
;  :num-allocs              3563090
;  :num-checks              117
;  :propagations            370
;  :quant-instantiations    123
;  :rlimit-count            140980)
(push) ; 8
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@77@02))))[i@78@02] | live]
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@77@02))))[i@78@02]) | live]
(push) ; 9
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@77@02))))[i@78@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
    i@78@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@78@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1230
;  :arith-add-rows          82
;  :arith-assert-diseq      97
;  :arith-assert-lower      266
;  :arith-assert-upper      152
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              806
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1321
;  :mk-clause               814
;  :num-allocs              3563090
;  :num-checks              118
;  :propagations            370
;  :quant-instantiations    123
;  :rlimit-count            141104
;  :time                    0.00)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@77@02))))[i@78@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
      i@78@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 31 | !(i@78@02 < |First:(Second:(Second:(Second:($t@77@02))))| && 0 <= i@78@02)]
(assert (not
  (and
    (<
      i@78@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
    (<= 0 i@78@02))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@78@02 Int)) (!
  (implies
    (and
      (<
        i@78@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
      (<= 0 i@78@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
          i@78@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
            i@78@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
            i@78@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
    i@78@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))
(declare-const $k@79@02 $Perm)
(assert ($Perm.isReadVar $k@79@02 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@79@02 $Perm.No) (< $Perm.No $k@79@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1235
;  :arith-add-rows          82
;  :arith-assert-diseq      98
;  :arith-assert-lower      268
;  :arith-assert-upper      153
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1327
;  :mk-clause               816
;  :num-allocs              3563090
;  :num-checks              119
;  :propagations            371
;  :quant-instantiations    123
;  :rlimit-count            141873)
(assert (<= $Perm.No $k@79@02))
(assert (<= $k@79@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@79@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1241
;  :arith-add-rows          82
;  :arith-assert-diseq      98
;  :arith-assert-lower      268
;  :arith-assert-upper      154
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.05
;  :memory                  4.05
;  :minimized-lits          2
;  :mk-bool-var             1330
;  :mk-clause               816
;  :num-allocs              3563090
;  :num-checks              120
;  :propagations            371
;  :quant-instantiations    123
;  :rlimit-count            142196
;  :time                    0.03)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1247
;  :arith-add-rows          82
;  :arith-assert-diseq      98
;  :arith-assert-lower      268
;  :arith-assert-upper      154
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1333
;  :mk-clause               816
;  :num-allocs              3702184
;  :num-checks              121
;  :propagations            371
;  :quant-instantiations    124
;  :rlimit-count            142552
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1252
;  :arith-add-rows          82
;  :arith-assert-diseq      98
;  :arith-assert-lower      268
;  :arith-assert-upper      154
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1334
;  :mk-clause               816
;  :num-allocs              3702184
;  :num-checks              122
;  :propagations            371
;  :quant-instantiations    124
;  :rlimit-count            142809
;  :time                    0.04)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1257
;  :arith-add-rows          82
;  :arith-assert-diseq      98
;  :arith-assert-lower      268
;  :arith-assert-upper      154
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1335
;  :mk-clause               816
;  :num-allocs              3702184
;  :num-checks              123
;  :propagations            371
;  :quant-instantiations    124
;  :rlimit-count            143076
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))
(declare-const $k@80@02 $Perm)
(assert ($Perm.isReadVar $k@80@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@80@02 $Perm.No) (< $Perm.No $k@80@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1262
;  :arith-add-rows          82
;  :arith-assert-diseq      99
;  :arith-assert-lower      270
;  :arith-assert-upper      155
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1340
;  :mk-clause               818
;  :num-allocs              3702184
;  :num-checks              124
;  :propagations            372
;  :quant-instantiations    124
;  :rlimit-count            143496)
(assert (<= $Perm.No $k@80@02))
(assert (<= $k@80@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@80@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@80@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1268
;  :arith-add-rows          82
;  :arith-assert-diseq      99
;  :arith-assert-lower      270
;  :arith-assert-upper      156
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1343
;  :mk-clause               818
;  :num-allocs              3702184
;  :num-checks              125
;  :propagations            372
;  :quant-instantiations    124
;  :rlimit-count            143869)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@80@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1274
;  :arith-add-rows          82
;  :arith-assert-diseq      99
;  :arith-assert-lower      270
;  :arith-assert-upper      156
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1346
;  :mk-clause               818
;  :num-allocs              3702184
;  :num-checks              126
;  :propagations            372
;  :quant-instantiations    125
;  :rlimit-count            144279)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))))
(declare-const $k@81@02 $Perm)
(assert ($Perm.isReadVar $k@81@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@81@02 $Perm.No) (< $Perm.No $k@81@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1279
;  :arith-add-rows          82
;  :arith-assert-diseq      100
;  :arith-assert-lower      272
;  :arith-assert-upper      157
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1351
;  :mk-clause               820
;  :num-allocs              3702184
;  :num-checks              127
;  :propagations            373
;  :quant-instantiations    125
;  :rlimit-count            144729)
(assert (<= $Perm.No $k@81@02))
(assert (<= $k@81@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@81@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@81@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-add-rows          82
;  :arith-assert-diseq      100
;  :arith-assert-lower      272
;  :arith-assert-upper      158
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1354
;  :mk-clause               820
;  :num-allocs              3702184
;  :num-checks              128
;  :propagations            373
;  :quant-instantiations    125
;  :rlimit-count            145132
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1291
;  :arith-add-rows          82
;  :arith-assert-diseq      100
;  :arith-assert-lower      272
;  :arith-assert-upper      158
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1357
;  :mk-clause               820
;  :num-allocs              3702184
;  :num-checks              129
;  :propagations            373
;  :quant-instantiations    126
;  :rlimit-count            145568
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))))))
(declare-const $k@82@02 $Perm)
(assert ($Perm.isReadVar $k@82@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@82@02 $Perm.No) (< $Perm.No $k@82@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1296
;  :arith-add-rows          82
;  :arith-assert-diseq      101
;  :arith-assert-lower      274
;  :arith-assert-upper      159
;  :arith-bound-prop        13
;  :arith-conflicts         17
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        9
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1362
;  :mk-clause               822
;  :num-allocs              3702184
;  :num-checks              130
;  :propagations            374
;  :quant-instantiations    126
;  :rlimit-count            146049
;  :time                    0.01)
(declare-const $t@83@02 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@62@02)
    (=
      $t@83@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@60@02)))))))
  (implies
    (< $Perm.No $k@82@02)
    (=
      $t@83@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@62@02 $k@82@02)))
(assert (<= (+ $k@62@02 $k@82@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@62@02 $k@82@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@62@02 $k@82@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1306
;  :arith-add-rows          82
;  :arith-assert-diseq      101
;  :arith-assert-lower      275
;  :arith-assert-upper      161
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1370
;  :mk-clause               822
;  :num-allocs              3702184
;  :num-checks              131
;  :propagations            374
;  :quant-instantiations    127
;  :rlimit-count            146736)
(assert (not (= $t@83@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1312
;  :arith-add-rows          82
;  :arith-assert-diseq      101
;  :arith-assert-lower      275
;  :arith-assert-upper      161
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1372
;  :mk-clause               822
;  :num-allocs              3702184
;  :num-checks              132
;  :propagations            374
;  :quant-instantiations    127
;  :rlimit-count            147138)
(declare-const $k@84@02 $Perm)
(assert ($Perm.isReadVar $k@84@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@84@02 $Perm.No) (< $Perm.No $k@84@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1312
;  :arith-add-rows          82
;  :arith-assert-diseq      102
;  :arith-assert-lower      277
;  :arith-assert-upper      162
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1376
;  :mk-clause               824
;  :num-allocs              3702184
;  :num-checks              133
;  :propagations            375
;  :quant-instantiations    127
;  :rlimit-count            147336)
(assert (<= $Perm.No $k@84@02))
(assert (<= $k@84@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@84@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          82
;  :arith-assert-diseq      102
;  :arith-assert-lower      277
;  :arith-assert-upper      163
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1378
;  :mk-clause               824
;  :num-allocs              3702184
;  :num-checks              134
;  :propagations            375
;  :quant-instantiations    127
;  :rlimit-count            147702
;  :time                    0.00)
(push) ; 3
(assert (not (< $Perm.No $k@84@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          82
;  :arith-assert-diseq      102
;  :arith-assert-lower      277
;  :arith-assert-upper      163
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 156
;  :datatype-occurs-check   107
;  :datatype-splits         99
;  :decisions               258
;  :del-clause              807
;  :final-checks            68
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1378
;  :mk-clause               824
;  :num-allocs              3702184
;  :num-checks              135
;  :propagations            375
;  :quant-instantiations    127
;  :rlimit-count            147750
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@77@02 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02))) globals@58@02))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Read_m, globals), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1354
;  :arith-add-rows          82
;  :arith-assert-diseq      102
;  :arith-assert-lower      277
;  :arith-assert-upper      163
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 168
;  :datatype-occurs-check   111
;  :datatype-splits         109
;  :decisions               270
;  :del-clause              823
;  :final-checks            70
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1391
;  :mk-clause               824
;  :num-allocs              3702184
;  :num-checks              137
;  :propagations            375
;  :quant-instantiations    128
;  :rlimit-count            148690)
(declare-const $t@85@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(declare-const __flatten_26__16@86@02 $Ref)
(declare-const __flatten_28__18@87@02 $Ref)
(declare-const __flatten_27__17@88@02 Seq<Int>)
(declare-const __flatten_30__20@89@02 $Ref)
(declare-const __flatten_29__19@90@02 $Ref)
(declare-const __flatten_33__23@91@02 $Ref)
(declare-const __flatten_32__22@92@02 $Ref)
(declare-const __flatten_35__25@93@02 $Ref)
(declare-const __flatten_34__24@94@02 $Ref)
(declare-const __flatten_31__21@95@02 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@96@02 $Snap)
(assert (= $t@96@02 ($Snap.combine ($Snap.first $t@96@02) ($Snap.second $t@96@02))))
(declare-const $k@97@02 $Perm)
(assert ($Perm.isReadVar $k@97@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@97@02 $Perm.No) (< $Perm.No $k@97@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1397
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      279
;  :arith-assert-upper      164
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1406
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              139
;  :propagations            376
;  :quant-instantiations    128
;  :rlimit-count            149462)
(assert (<= $Perm.No $k@97@02))
(assert (<= $k@97@02 $Perm.Write))
(assert (implies (< $Perm.No $k@97@02) (not (= diz@57@02 $Ref.null))))
(assert (=
  ($Snap.second $t@96@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@96@02))
    ($Snap.second ($Snap.second $t@96@02)))))
(assert (= ($Snap.first ($Snap.second $t@96@02)) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1403
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      279
;  :arith-assert-upper      165
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1409
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              140
;  :propagations            376
;  :quant-instantiations    128
;  :rlimit-count            149705
;  :time                    0.02)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@96@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@96@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1409
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      279
;  :arith-assert-upper      165
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1412
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              141
;  :propagations            376
;  :quant-instantiations    129
;  :rlimit-count            149977
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@96@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1414
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      279
;  :arith-assert-upper      165
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1413
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              142
;  :propagations            376
;  :quant-instantiations    129
;  :rlimit-count            150154
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
  $Snap.unit))
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1420
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      279
;  :arith-assert-upper      165
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1415
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              143
;  :propagations            376
;  :quant-instantiations    129
;  :rlimit-count            150373
;  :time                    0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1427
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      281
;  :arith-assert-upper      166
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1421
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              144
;  :propagations            376
;  :quant-instantiations    131
;  :rlimit-count            150703
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
  $Snap.unit))
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1433
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      281
;  :arith-assert-upper      166
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1423
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              145
;  :propagations            376
;  :quant-instantiations    131
;  :rlimit-count            150942
;  :time                    0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
  $Snap.unit))
; [eval] (forall i__26: Int :: { diz.Read_m.Main_process_state[i__26] } 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|)
(declare-const i__26@98@02 Int)
(push) ; 4
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__26
(push) ; 5
; [then-branch: 34 | 0 <= i__26@98@02 | live]
; [else-branch: 34 | !(0 <= i__26@98@02) | live]
(push) ; 6
; [then-branch: 34 | 0 <= i__26@98@02]
(assert (<= 0 i__26@98@02))
; [eval] i__26 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      284
;  :arith-assert-upper      167
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1431
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              146
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            151382)
(pop) ; 6
(push) ; 6
; [else-branch: 34 | !(0 <= i__26@98@02)]
(assert (not (<= 0 i__26@98@02)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 35 | i__26@98@02 < |First:(Second:(Second:(Second:($t@96@02))))| && 0 <= i__26@98@02 | live]
; [else-branch: 35 | !(i__26@98@02 < |First:(Second:(Second:(Second:($t@96@02))))| && 0 <= i__26@98@02) | live]
(push) ; 6
; [then-branch: 35 | i__26@98@02 < |First:(Second:(Second:(Second:($t@96@02))))| && 0 <= i__26@98@02]
(assert (and
  (<
    i__26@98@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
  (<= 0 i__26@98@02)))
; [eval] diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26] == -1
; [eval] diz.Read_m.Main_process_state[i__26]
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      285
;  :arith-assert-upper      168
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1433
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              147
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            151539
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__26@98@02 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      285
;  :arith-assert-upper      168
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1433
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              148
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            151548)
; [eval] -1
(push) ; 7
; [then-branch: 36 | First:(Second:(Second:(Second:($t@96@02))))[i__26@98@02] == -1 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:($t@96@02))))[i__26@98@02] != -1 | live]
(push) ; 8
; [then-branch: 36 | First:(Second:(Second:(Second:($t@96@02))))[i__26@98@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
    i__26@98@02)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 36 | First:(Second:(Second:(Second:($t@96@02))))[i__26@98@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
      i__26@98@02)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__26]
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      285
;  :arith-assert-upper      168
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1434
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              149
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            151762
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__26@98@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          82
;  :arith-assert-diseq      103
;  :arith-assert-lower      285
;  :arith-assert-upper      168
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1434
;  :mk-clause               826
;  :num-allocs              3702184
;  :num-checks              150
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            151771)
(push) ; 9
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@96@02))))[i__26@98@02] | live]
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@96@02))))[i__26@98@02]) | live]
(push) ; 10
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@96@02))))[i__26@98@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
    i__26@98@02)))
; [eval] diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          82
;  :arith-assert-diseq      104
;  :arith-assert-lower      288
;  :arith-assert-upper      168
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1437
;  :mk-clause               827
;  :num-allocs              3702184
;  :num-checks              151
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            151934
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__26@98@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          82
;  :arith-assert-diseq      104
;  :arith-assert-lower      288
;  :arith-assert-upper      168
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1437
;  :mk-clause               827
;  :num-allocs              3702184
;  :num-checks              152
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            151943)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1441
;  :arith-add-rows          82
;  :arith-assert-diseq      104
;  :arith-assert-lower      288
;  :arith-assert-upper      168
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              823
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1437
;  :mk-clause               827
;  :num-allocs              3702184
;  :num-checks              153
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            151991
;  :time                    0.00)
(pop) ; 10
(push) ; 10
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@96@02))))[i__26@98@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
      i__26@98@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 35 | !(i__26@98@02 < |First:(Second:(Second:(Second:($t@96@02))))| && 0 <= i__26@98@02)]
(assert (not
  (and
    (<
      i__26@98@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
    (<= 0 i__26@98@02))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__26@98@02 Int)) (!
  (implies
    (and
      (<
        i__26@98@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
      (<= 0 i__26@98@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
          i__26@98@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
            i__26@98@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
            i__26@98@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
    i__26@98@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1446
;  :arith-add-rows          82
;  :arith-assert-diseq      104
;  :arith-assert-lower      288
;  :arith-assert-upper      168
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1439
;  :mk-clause               827
;  :num-allocs              3702184
;  :num-checks              154
;  :propagations            376
;  :quant-instantiations    133
;  :rlimit-count            152616
;  :time                    0.00)
(declare-const $k@99@02 $Perm)
(assert ($Perm.isReadVar $k@99@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@99@02 $Perm.No) (< $Perm.No $k@99@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1446
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      169
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1443
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              155
;  :propagations            377
;  :quant-instantiations    133
;  :rlimit-count            152815)
(assert (<= $Perm.No $k@99@02))
(assert (<= $k@99@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@99@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1452
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1446
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              156
;  :propagations            377
;  :quant-instantiations    133
;  :rlimit-count            153138
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1452
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1446
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              157
;  :propagations            377
;  :quant-instantiations    133
;  :rlimit-count            153186
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1458
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1449
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              158
;  :propagations            377
;  :quant-instantiations    134
;  :rlimit-count            153542
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1458
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1449
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              159
;  :propagations            377
;  :quant-instantiations    134
;  :rlimit-count            153590
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1463
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1450
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              160
;  :propagations            377
;  :quant-instantiations    134
;  :rlimit-count            153847
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1463
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1450
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              161
;  :propagations            377
;  :quant-instantiations    134
;  :rlimit-count            153895
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.10s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1468
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1451
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              162
;  :propagations            377
;  :quant-instantiations    134
;  :rlimit-count            154162
;  :time                    0.10)
(push) ; 4
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1468
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1451
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              163
;  :propagations            377
;  :quant-instantiations    134
;  :rlimit-count            154210
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1473
;  :arith-add-rows          82
;  :arith-assert-diseq      105
;  :arith-assert-lower      290
;  :arith-assert-upper      170
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1452
;  :mk-clause               829
;  :num-allocs              3702184
;  :num-checks              164
;  :propagations            377
;  :quant-instantiations    134
;  :rlimit-count            154487
;  :time                    0.00)
(declare-const $k@100@02 $Perm)
(assert ($Perm.isReadVar $k@100@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@100@02 $Perm.No) (< $Perm.No $k@100@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1473
;  :arith-add-rows          82
;  :arith-assert-diseq      106
;  :arith-assert-lower      292
;  :arith-assert-upper      171
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1456
;  :mk-clause               831
;  :num-allocs              3702184
;  :num-checks              165
;  :propagations            378
;  :quant-instantiations    134
;  :rlimit-count            154686)
(assert (<= $Perm.No $k@100@02))
(assert (<= $k@100@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@100@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1479
;  :arith-add-rows          82
;  :arith-assert-diseq      106
;  :arith-assert-lower      292
;  :arith-assert-upper      172
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1459
;  :mk-clause               831
;  :num-allocs              3702184
;  :num-checks              166
;  :propagations            378
;  :quant-instantiations    134
;  :rlimit-count            155059
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@100@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1479
;  :arith-add-rows          82
;  :arith-assert-diseq      106
;  :arith-assert-lower      292
;  :arith-assert-upper      172
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1459
;  :mk-clause               831
;  :num-allocs              3702184
;  :num-checks              167
;  :propagations            378
;  :quant-instantiations    134
;  :rlimit-count            155107
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1485
;  :arith-add-rows          82
;  :arith-assert-diseq      106
;  :arith-assert-lower      292
;  :arith-assert-upper      172
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1462
;  :mk-clause               831
;  :num-allocs              3702184
;  :num-checks              168
;  :propagations            378
;  :quant-instantiations    135
;  :rlimit-count            155517
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@100@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1485
;  :arith-add-rows          82
;  :arith-assert-diseq      106
;  :arith-assert-lower      292
;  :arith-assert-upper      172
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1462
;  :mk-clause               831
;  :num-allocs              3702184
;  :num-checks              169
;  :propagations            378
;  :quant-instantiations    135
;  :rlimit-count            155565
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1490
;  :arith-add-rows          82
;  :arith-assert-diseq      106
;  :arith-assert-lower      292
;  :arith-assert-upper      172
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1463
;  :mk-clause               831
;  :num-allocs              3702184
;  :num-checks              170
;  :propagations            378
;  :quant-instantiations    135
;  :rlimit-count            155872
;  :time                    0.00)
(declare-const $k@101@02 $Perm)
(assert ($Perm.isReadVar $k@101@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@101@02 $Perm.No) (< $Perm.No $k@101@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1490
;  :arith-add-rows          82
;  :arith-assert-diseq      107
;  :arith-assert-lower      294
;  :arith-assert-upper      173
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1467
;  :mk-clause               833
;  :num-allocs              3702184
;  :num-checks              171
;  :propagations            379
;  :quant-instantiations    135
;  :rlimit-count            156071)
(assert (<= $Perm.No $k@101@02))
(assert (<= $k@101@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@101@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1496
;  :arith-add-rows          82
;  :arith-assert-diseq      107
;  :arith-assert-lower      294
;  :arith-assert-upper      174
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1470
;  :mk-clause               833
;  :num-allocs              3702184
;  :num-checks              172
;  :propagations            379
;  :quant-instantiations    135
;  :rlimit-count            156474
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@101@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1496
;  :arith-add-rows          82
;  :arith-assert-diseq      107
;  :arith-assert-lower      294
;  :arith-assert-upper      174
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1470
;  :mk-clause               833
;  :num-allocs              3702184
;  :num-checks              173
;  :propagations            379
;  :quant-instantiations    135
;  :rlimit-count            156522
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1502
;  :arith-add-rows          82
;  :arith-assert-diseq      107
;  :arith-assert-lower      294
;  :arith-assert-upper      174
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1473
;  :mk-clause               833
;  :num-allocs              3702184
;  :num-checks              174
;  :propagations            379
;  :quant-instantiations    136
;  :rlimit-count            156958)
(push) ; 4
(assert (not (< $Perm.No $k@101@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1502
;  :arith-add-rows          82
;  :arith-assert-diseq      107
;  :arith-assert-lower      294
;  :arith-assert-upper      174
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1473
;  :mk-clause               833
;  :num-allocs              3702184
;  :num-checks              175
;  :propagations            379
;  :quant-instantiations    136
;  :rlimit-count            157006)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1507
;  :arith-add-rows          82
;  :arith-assert-diseq      107
;  :arith-assert-lower      294
;  :arith-assert-upper      174
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1474
;  :mk-clause               833
;  :num-allocs              3702184
;  :num-checks              176
;  :propagations            379
;  :quant-instantiations    136
;  :rlimit-count            157343
;  :time                    0.01)
(declare-const $k@102@02 $Perm)
(assert ($Perm.isReadVar $k@102@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@102@02 $Perm.No) (< $Perm.No $k@102@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1507
;  :arith-add-rows          82
;  :arith-assert-diseq      108
;  :arith-assert-lower      296
;  :arith-assert-upper      175
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.14
;  :memory                  4.14
;  :minimized-lits          2
;  :mk-bool-var             1478
;  :mk-clause               835
;  :num-allocs              3702184
;  :num-checks              177
;  :propagations            380
;  :quant-instantiations    136
;  :rlimit-count            157541)
(assert (<= $Perm.No $k@102@02))
(assert (<= $k@102@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@102@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1513
;  :arith-add-rows          82
;  :arith-assert-diseq      108
;  :arith-assert-lower      296
;  :arith-assert-upper      176
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1481
;  :mk-clause               835
;  :num-allocs              3852816
;  :num-checks              178
;  :propagations            380
;  :quant-instantiations    136
;  :rlimit-count            157974
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@102@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1513
;  :arith-add-rows          82
;  :arith-assert-diseq      108
;  :arith-assert-lower      296
;  :arith-assert-upper      176
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1481
;  :mk-clause               835
;  :num-allocs              3852816
;  :num-checks              179
;  :propagations            380
;  :quant-instantiations    136
;  :rlimit-count            158022)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1519
;  :arith-add-rows          82
;  :arith-assert-diseq      108
;  :arith-assert-lower      296
;  :arith-assert-upper      176
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1484
;  :mk-clause               835
;  :num-allocs              3852816
;  :num-checks              180
;  :propagations            380
;  :quant-instantiations    137
;  :rlimit-count            158488
;  :time                    0.04)
(push) ; 4
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.09s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1519
;  :arith-add-rows          82
;  :arith-assert-diseq      108
;  :arith-assert-lower      296
;  :arith-assert-upper      176
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1484
;  :mk-clause               835
;  :num-allocs              3852816
;  :num-checks              181
;  :propagations            380
;  :quant-instantiations    137
;  :rlimit-count            158536
;  :time                    0.01)
(declare-const $k@103@02 $Perm)
(assert ($Perm.isReadVar $k@103@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@103@02 $Perm.No) (< $Perm.No $k@103@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1519
;  :arith-add-rows          82
;  :arith-assert-diseq      109
;  :arith-assert-lower      298
;  :arith-assert-upper      177
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1488
;  :mk-clause               837
;  :num-allocs              3852816
;  :num-checks              182
;  :propagations            381
;  :quant-instantiations    137
;  :rlimit-count            158735)
(assert (<= $Perm.No $k@103@02))
(assert (<= $k@103@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@103@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.28s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1525
;  :arith-add-rows          82
;  :arith-assert-diseq      109
;  :arith-assert-lower      298
;  :arith-assert-upper      178
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1491
;  :mk-clause               837
;  :num-allocs              3852816
;  :num-checks              183
;  :propagations            381
;  :quant-instantiations    137
;  :rlimit-count            159188
;  :time                    0.28)
(push) ; 4
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1525
;  :arith-add-rows          82
;  :arith-assert-diseq      109
;  :arith-assert-lower      298
;  :arith-assert-upper      178
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1491
;  :mk-clause               837
;  :num-allocs              3852816
;  :num-checks              184
;  :propagations            381
;  :quant-instantiations    137
;  :rlimit-count            159236)
(push) ; 4
(assert (not (< $Perm.No $k@103@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1525
;  :arith-add-rows          82
;  :arith-assert-diseq      109
;  :arith-assert-lower      298
;  :arith-assert-upper      178
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1491
;  :mk-clause               837
;  :num-allocs              3852816
;  :num-checks              185
;  :propagations            381
;  :quant-instantiations    137
;  :rlimit-count            159284)
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1525
;  :arith-add-rows          82
;  :arith-assert-diseq      109
;  :arith-assert-lower      298
;  :arith-assert-upper      178
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1491
;  :mk-clause               837
;  :num-allocs              3852816
;  :num-checks              186
;  :propagations            381
;  :quant-instantiations    137
;  :rlimit-count            159332)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 4
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1529
;  :arith-add-rows          82
;  :arith-assert-diseq      109
;  :arith-assert-lower      298
;  :arith-assert-upper      178
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1494
;  :mk-clause               837
;  :num-allocs              3852816
;  :num-checks              187
;  :propagations            381
;  :quant-instantiations    138
;  :rlimit-count            159763
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@102@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1529
;  :arith-add-rows          82
;  :arith-assert-diseq      109
;  :arith-assert-lower      298
;  :arith-assert-upper      178
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              824
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1494
;  :mk-clause               837
;  :num-allocs              3852816
;  :num-checks              188
;  :propagations            381
;  :quant-instantiations    138
;  :rlimit-count            159811)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
  diz@57@02))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@104@02 $Perm)
(assert ($Perm.isReadVar $k@104@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@104@02 $Perm.No) (< $Perm.No $k@104@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      300
;  :arith-assert-upper      179
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1499
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              189
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160278)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@61@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.24s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      300
;  :arith-assert-upper      179
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1499
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              190
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160289
;  :time                    0.21)
(assert (< $k@104@02 $k@61@02))
(assert (<= $Perm.No (- $k@61@02 $k@104@02)))
(assert (<= (- $k@61@02 $k@104@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@61@02 $k@104@02)) (not (= diz@57@02 $Ref.null))))
; [eval] diz.Read_m != null
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      302
;  :arith-assert-upper      180
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1502
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              191
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160503
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      302
;  :arith-assert-upper      180
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1502
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              192
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160551)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      302
;  :arith-assert-upper      180
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1502
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              193
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160599
;  :time                    0.02)
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      302
;  :arith-assert-upper      180
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1502
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              194
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160647)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      302
;  :arith-assert-upper      180
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1502
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              195
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160695)
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      302
;  :arith-assert-upper      180
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1502
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              196
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160743
;  :time                    0.00)
; [eval] (forall i__26: Int :: { diz.Read_m.Main_process_state[i__26] } 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|)
(declare-const i__26@105@02 Int)
(push) ; 4
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__26
(push) ; 5
; [then-branch: 38 | 0 <= i__26@105@02 | live]
; [else-branch: 38 | !(0 <= i__26@105@02) | live]
(push) ; 6
; [then-branch: 38 | 0 <= i__26@105@02]
(assert (<= 0 i__26@105@02))
; [eval] i__26 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      303
;  :arith-assert-upper      180
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1503
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              197
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            160844
;  :time                    0.00)
(pop) ; 6
(push) ; 6
; [else-branch: 38 | !(0 <= i__26@105@02)]
(assert (not (<= 0 i__26@105@02)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 39 | i__26@105@02 < |First:(Second:(Second:(Second:($t@77@02))))| && 0 <= i__26@105@02 | live]
; [else-branch: 39 | !(i__26@105@02 < |First:(Second:(Second:(Second:($t@77@02))))| && 0 <= i__26@105@02) | live]
(push) ; 6
; [then-branch: 39 | i__26@105@02 < |First:(Second:(Second:(Second:($t@77@02))))| && 0 <= i__26@105@02]
(assert (and
  (<
    i__26@105@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
  (<= 0 i__26@105@02)))
; [eval] diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26] == -1
; [eval] diz.Read_m.Main_process_state[i__26]
(push) ; 7
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      304
;  :arith-assert-upper      181
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1505
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              198
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            161001
;  :time                    0.02)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__26@105@02 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      110
;  :arith-assert-lower      304
;  :arith-assert-upper      181
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1505
;  :mk-clause               839
;  :num-allocs              3852816
;  :num-checks              199
;  :propagations            382
;  :quant-instantiations    138
;  :rlimit-count            161010)
; [eval] -1
(push) ; 7
; [then-branch: 40 | First:(Second:(Second:(Second:($t@77@02))))[i__26@105@02] == -1 | live]
; [else-branch: 40 | First:(Second:(Second:(Second:($t@77@02))))[i__26@105@02] != -1 | live]
(push) ; 8
; [then-branch: 40 | First:(Second:(Second:(Second:($t@77@02))))[i__26@105@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
    i__26@105@02)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 40 | First:(Second:(Second:(Second:($t@77@02))))[i__26@105@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
      i__26@105@02)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__26]
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      111
;  :arith-assert-lower      307
;  :arith-assert-upper      182
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1511
;  :mk-clause               843
;  :num-allocs              3852816
;  :num-checks              200
;  :propagations            384
;  :quant-instantiations    139
;  :rlimit-count            161281
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__26@105@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      111
;  :arith-assert-lower      307
;  :arith-assert-upper      182
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1511
;  :mk-clause               843
;  :num-allocs              3852816
;  :num-checks              201
;  :propagations            384
;  :quant-instantiations    139
;  :rlimit-count            161290)
(push) ; 9
; [then-branch: 41 | 0 <= First:(Second:(Second:(Second:($t@77@02))))[i__26@105@02] | live]
; [else-branch: 41 | !(0 <= First:(Second:(Second:(Second:($t@77@02))))[i__26@105@02]) | live]
(push) ; 10
; [then-branch: 41 | 0 <= First:(Second:(Second:(Second:($t@77@02))))[i__26@105@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
    i__26@105@02)))
; [eval] diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      111
;  :arith-assert-lower      307
;  :arith-assert-upper      182
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1511
;  :mk-clause               843
;  :num-allocs              3852816
;  :num-checks              202
;  :propagations            384
;  :quant-instantiations    139
;  :rlimit-count            161443
;  :time                    0.03)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__26@105@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      111
;  :arith-assert-lower      307
;  :arith-assert-upper      182
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1511
;  :mk-clause               843
;  :num-allocs              3852816
;  :num-checks              203
;  :propagations            384
;  :quant-instantiations    139
;  :rlimit-count            161452)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      111
;  :arith-assert-lower      307
;  :arith-assert-upper      182
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              836
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1511
;  :mk-clause               843
;  :num-allocs              3852816
;  :num-checks              204
;  :propagations            384
;  :quant-instantiations    139
;  :rlimit-count            161500)
(pop) ; 10
(push) ; 10
; [else-branch: 41 | !(0 <= First:(Second:(Second:(Second:($t@77@02))))[i__26@105@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
      i__26@105@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 39 | !(i__26@105@02 < |First:(Second:(Second:(Second:($t@77@02))))| && 0 <= i__26@105@02)]
(assert (not
  (and
    (<
      i__26@105@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
    (<= 0 i__26@105@02))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__26@105@02 Int)) (!
  (implies
    (and
      (<
        i__26@105@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
      (<= 0 i__26@105@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
          i__26@105@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
            i__26@105@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
            i__26@105@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
    i__26@105@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      112
;  :arith-assert-lower      308
;  :arith-assert-upper      183
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1519
;  :mk-clause               855
;  :num-allocs              3852816
;  :num-checks              205
;  :propagations            386
;  :quant-instantiations    140
;  :rlimit-count            161946)
(assert (forall ((i__26@105@02 Int)) (!
  (implies
    (and
      (<
        i__26@105@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))
      (<= 0 i__26@105@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
          i__26@105@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
            i__26@105@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
            i__26@105@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))
    i__26@105@02))
  :qid |prog.l<no position>|)))
(declare-const $k@106@02 $Perm)
(assert ($Perm.isReadVar $k@106@02 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      310
;  :arith-assert-upper      184
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1524
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              206
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            162505)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@106@02 $Perm.No) (< $Perm.No $k@106@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      310
;  :arith-assert-upper      184
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1524
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              207
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            162555)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@79@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      310
;  :arith-assert-upper      184
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1524
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              208
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            162566)
(assert (< $k@106@02 $k@79@02))
(assert (<= $Perm.No (- $k@79@02 $k@106@02)))
(assert (<= (- $k@79@02 $k@106@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@79@02 $k@106@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand != null
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      312
;  :arith-assert-upper      185
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1527
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              209
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            162780
;  :time                    0.02)
(push) ; 4
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      312
;  :arith-assert-upper      185
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1527
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              210
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            162828
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      312
;  :arith-assert-upper      185
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1527
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              211
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            162876
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      312
;  :arith-assert-upper      185
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1527
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              212
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            162924
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      312
;  :arith-assert-upper      185
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1527
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              213
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            162972
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      312
;  :arith-assert-upper      185
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1527
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              214
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            163020)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      312
;  :arith-assert-upper      185
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1527
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              215
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            163068)
(push) ; 4
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      113
;  :arith-assert-lower      312
;  :arith-assert-upper      185
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1527
;  :mk-clause               857
;  :num-allocs              3852816
;  :num-checks              216
;  :propagations            387
;  :quant-instantiations    140
;  :rlimit-count            163116
;  :time                    0.00)
(declare-const $k@107@02 $Perm)
(assert ($Perm.isReadVar $k@107@02 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      114
;  :arith-assert-lower      314
;  :arith-assert-upper      186
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1531
;  :mk-clause               859
;  :num-allocs              3852816
;  :num-checks              217
;  :propagations            388
;  :quant-instantiations    140
;  :rlimit-count            163312
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@107@02 $Perm.No) (< $Perm.No $k@107@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      114
;  :arith-assert-lower      314
;  :arith-assert-upper      186
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1531
;  :mk-clause               859
;  :num-allocs              3852816
;  :num-checks              218
;  :propagations            388
;  :quant-instantiations    140
;  :rlimit-count            163362)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@80@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      114
;  :arith-assert-lower      314
;  :arith-assert-upper      186
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1531
;  :mk-clause               859
;  :num-allocs              3852816
;  :num-checks              219
;  :propagations            388
;  :quant-instantiations    140
;  :rlimit-count            163373
;  :time                    0.00)
(assert (< $k@107@02 $k@80@02))
(assert (<= $Perm.No (- $k@80@02 $k@107@02)))
(assert (<= (- $k@80@02 $k@107@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@80@02 $k@107@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_a != null
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      114
;  :arith-assert-lower      316
;  :arith-assert-upper      187
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1534
;  :mk-clause               859
;  :num-allocs              3852816
;  :num-checks              220
;  :propagations            388
;  :quant-instantiations    140
;  :rlimit-count            163587
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@80@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      114
;  :arith-assert-lower      316
;  :arith-assert-upper      187
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1534
;  :mk-clause               859
;  :num-allocs              3852816
;  :num-checks              221
;  :propagations            388
;  :quant-instantiations    140
;  :rlimit-count            163635
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      114
;  :arith-assert-lower      316
;  :arith-assert-upper      187
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1534
;  :mk-clause               859
;  :num-allocs              3852816
;  :num-checks              222
;  :propagations            388
;  :quant-instantiations    140
;  :rlimit-count            163683
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No $k@80@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      114
;  :arith-assert-lower      316
;  :arith-assert-upper      187
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1534
;  :mk-clause               859
;  :num-allocs              3852816
;  :num-checks              223
;  :propagations            388
;  :quant-instantiations    140
;  :rlimit-count            163731
;  :time                    0.01)
(declare-const $k@108@02 $Perm)
(assert ($Perm.isReadVar $k@108@02 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      115
;  :arith-assert-lower      318
;  :arith-assert-upper      188
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1538
;  :mk-clause               861
;  :num-allocs              3852816
;  :num-checks              224
;  :propagations            389
;  :quant-instantiations    140
;  :rlimit-count            163927)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@108@02 $Perm.No) (< $Perm.No $k@108@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      115
;  :arith-assert-lower      318
;  :arith-assert-upper      188
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1538
;  :mk-clause               861
;  :num-allocs              3852816
;  :num-checks              225
;  :propagations            389
;  :quant-instantiations    140
;  :rlimit-count            163977)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@81@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      115
;  :arith-assert-lower      318
;  :arith-assert-upper      188
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1538
;  :mk-clause               861
;  :num-allocs              3852816
;  :num-checks              226
;  :propagations            389
;  :quant-instantiations    140
;  :rlimit-count            163988
;  :time                    0.04)
(assert (< $k@108@02 $k@81@02))
(assert (<= $Perm.No (- $k@81@02 $k@108@02)))
(assert (<= (- $k@81@02 $k@108@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@81@02 $k@108@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_b != null
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      115
;  :arith-assert-lower      320
;  :arith-assert-upper      189
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1541
;  :mk-clause               861
;  :num-allocs              3852816
;  :num-checks              227
;  :propagations            389
;  :quant-instantiations    140
;  :rlimit-count            164202
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No $k@81@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      115
;  :arith-assert-lower      320
;  :arith-assert-upper      189
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1541
;  :mk-clause               861
;  :num-allocs              3852816
;  :num-checks              228
;  :propagations            389
;  :quant-instantiations    140
;  :rlimit-count            164250
;  :time                    0.02)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      115
;  :arith-assert-lower      320
;  :arith-assert-upper      189
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1541
;  :mk-clause               861
;  :num-allocs              3852816
;  :num-checks              229
;  :propagations            389
;  :quant-instantiations    140
;  :rlimit-count            164298
;  :time                    0.02)
(push) ; 4
(assert (not (< $Perm.No $k@81@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      115
;  :arith-assert-lower      320
;  :arith-assert-upper      189
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1541
;  :mk-clause               861
;  :num-allocs              3852816
;  :num-checks              230
;  :propagations            389
;  :quant-instantiations    140
;  :rlimit-count            164346)
(declare-const $k@109@02 $Perm)
(assert ($Perm.isReadVar $k@109@02 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      116
;  :arith-assert-lower      322
;  :arith-assert-upper      190
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1545
;  :mk-clause               863
;  :num-allocs              3852816
;  :num-checks              231
;  :propagations            390
;  :quant-instantiations    140
;  :rlimit-count            164543
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@109@02 $Perm.No) (< $Perm.No $k@109@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1532
;  :arith-add-rows          82
;  :arith-assert-diseq      116
;  :arith-assert-lower      322
;  :arith-assert-upper      190
;  :arith-bound-prop        13
;  :arith-conflicts         18
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              852
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1545
;  :mk-clause               863
;  :num-allocs              3852816
;  :num-checks              232
;  :propagations            390
;  :quant-instantiations    140
;  :rlimit-count            164593)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@62@02 $k@82@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          82
;  :arith-assert-diseq      116
;  :arith-assert-lower      322
;  :arith-assert-upper      191
;  :arith-bound-prop        13
;  :arith-conflicts         19
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1547
;  :mk-clause               865
;  :num-allocs              3852816
;  :num-checks              233
;  :propagations            391
;  :quant-instantiations    140
;  :rlimit-count            164655
;  :time                    0.00)
(assert (< $k@109@02 (+ $k@62@02 $k@82@02)))
(assert (<= $Perm.No (- (+ $k@62@02 $k@82@02) $k@109@02)))
(assert (<= (- (+ $k@62@02 $k@82@02) $k@109@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@62@02 $k@82@02) $k@109@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand_read != null
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      116
;  :arith-assert-lower      324
;  :arith-assert-upper      192
;  :arith-bound-prop        13
;  :arith-conflicts         19
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         31
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1550
;  :mk-clause               865
;  :num-allocs              3852816
;  :num-checks              234
;  :propagations            391
;  :quant-instantiations    140
;  :rlimit-count            164872
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No (+ $k@62@02 $k@82@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      116
;  :arith-assert-lower      324
;  :arith-assert-upper      193
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1551
;  :mk-clause               865
;  :num-allocs              3852816
;  :num-checks              235
;  :propagations            391
;  :quant-instantiations    140
;  :rlimit-count            164935
;  :time                    0.00)
(declare-const $k@110@02 $Perm)
(assert ($Perm.isReadVar $k@110@02 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.10s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      326
;  :arith-assert-upper      194
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1555
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              236
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165132
;  :time                    0.02)
(push) ; 4
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      326
;  :arith-assert-upper      194
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1555
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              237
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165180
;  :time                    0.03)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@110@02 $Perm.No) (< $Perm.No $k@110@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      326
;  :arith-assert-upper      194
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1555
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              238
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165230)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@84@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      326
;  :arith-assert-upper      194
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1555
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              239
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165241
;  :time                    0.01)
(assert (< $k@110@02 $k@84@02))
(assert (<= $Perm.No (- $k@84@02 $k@110@02)))
(assert (<= (- $k@84@02 $k@110@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@84@02 $k@110@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02))))))))))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      328
;  :arith-assert-upper      195
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1558
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              240
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165449
;  :time                    0.02)
(push) ; 4
(assert (not (< $Perm.No $k@79@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      328
;  :arith-assert-upper      195
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1558
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              241
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165497
;  :time                    0.03)
(push) ; 4
(assert (not (< $Perm.No $k@84@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      328
;  :arith-assert-upper      195
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1558
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              242
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165545)
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      328
;  :arith-assert-upper      195
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1558
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              243
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165593
;  :time                    0.01)
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 4
(assert (not (< $Perm.No $k@61@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      328
;  :arith-assert-upper      195
;  :arith-bound-prop        13
;  :arith-conflicts         20
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1558
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              244
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165641
;  :time                    0.01)
(push) ; 4
(assert (not (< $Perm.No (+ $k@62@02 $k@82@02))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      328
;  :arith-assert-upper      196
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1559
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              245
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165704)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@83@02 diz@57@02)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1533
;  :arith-add-rows          83
;  :arith-assert-diseq      117
;  :arith-assert-lower      328
;  :arith-assert-upper      196
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 180
;  :datatype-occurs-check   115
;  :datatype-splits         119
;  :decisions               282
;  :del-clause              854
;  :final-checks            72
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.24
;  :memory                  4.24
;  :minimized-lits          2
;  :mk-bool-var             1559
;  :mk-clause               867
;  :num-allocs              3852816
;  :num-checks              246
;  :propagations            392
;  :quant-instantiations    140
;  :rlimit-count            165760)
(assert (= $t@83@02 diz@57@02))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@97@02 $Perm.Write))
(assert ($Perm.isReadVar $k@99@02 $Perm.Write))
(assert ($Perm.isReadVar $k@100@02 $Perm.Write))
(assert ($Perm.isReadVar $k@101@02 $Perm.Write))
(assert ($Perm.isReadVar $k@102@02 $Perm.Write))
(assert ($Perm.isReadVar $k@103@02 $Perm.Write))
(assert (= $t@96@02 ($Snap.combine ($Snap.first $t@96@02) ($Snap.second $t@96@02))))
(assert (<= $Perm.No $k@97@02))
(assert (<= $k@97@02 $Perm.Write))
(assert (implies (< $Perm.No $k@97@02) (not (= diz@57@02 $Ref.null))))
(assert (=
  ($Snap.second $t@96@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@96@02))
    ($Snap.second ($Snap.second $t@96@02)))))
(assert (= ($Snap.first ($Snap.second $t@96@02)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@96@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@96@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@96@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
  $Snap.unit))
(assert (forall ((i__26@98@02 Int)) (!
  (implies
    (and
      (<
        i__26@98@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))
      (<= 0 i__26@98@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
          i__26@98@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
            i__26@98@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
            i__26@98@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
    i__26@98@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
(assert (<= $Perm.No $k@99@02))
(assert (<= $k@99@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@99@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))
(assert (<= $Perm.No $k@100@02))
(assert (<= $k@100@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@100@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))
(assert (<= $Perm.No $k@101@02))
(assert (<= $k@101@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@101@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
(assert (<= $Perm.No $k@102@02))
(assert (<= $k@102@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@102@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))))
(assert (<= $Perm.No $k@103@02))
(assert (<= $k@103@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@103@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))
  diz@57@02))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1954
;  :arith-add-rows          83
;  :arith-assert-diseq      123
;  :arith-assert-lower      344
;  :arith-assert-upper      210
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1711
;  :mk-clause               881
;  :num-allocs              4013457
;  :num-checks              249
;  :propagations            398
;  :quant-instantiations    150
;  :rlimit-count            172628
;  :time                    0.00)
; [then-branch: 42 | True | live]
; [else-branch: 42 | False | dead]
(push) ; 5
; [then-branch: 42 | True]
; [exec]
; __flatten_26__16 := diz.Read_m
(push) ; 6
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1954
;  :arith-add-rows          83
;  :arith-assert-diseq      123
;  :arith-assert-lower      344
;  :arith-assert-upper      210
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1711
;  :mk-clause               881
;  :num-allocs              4013457
;  :num-checks              250
;  :propagations            398
;  :quant-instantiations    150
;  :rlimit-count            172681
;  :time                    0.02)
(declare-const __flatten_26__16@111@02 $Ref)
(assert (= __flatten_26__16@111@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))))
; [exec]
; __flatten_28__18 := diz.Read_m
(push) ; 6
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1955
;  :arith-add-rows          83
;  :arith-assert-diseq      123
;  :arith-assert-lower      344
;  :arith-assert-upper      210
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1712
;  :mk-clause               881
;  :num-allocs              4013457
;  :num-checks              251
;  :propagations            398
;  :quant-instantiations    150
;  :rlimit-count            172786)
(declare-const __flatten_28__18@112@02 $Ref)
(assert (= __flatten_28__18@112@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))))
; [exec]
; __flatten_27__17 := __flatten_28__18.Main_process_state[2 := 2]
; [eval] __flatten_28__18.Main_process_state[2 := 2]
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) __flatten_28__18@112@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1956
;  :arith-add-rows          83
;  :arith-assert-diseq      123
;  :arith-assert-lower      344
;  :arith-assert-upper      210
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1713
;  :mk-clause               881
;  :num-allocs              4013457
;  :num-checks              252
;  :propagations            398
;  :quant-instantiations    150
;  :rlimit-count            172834
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1956
;  :arith-add-rows          83
;  :arith-assert-diseq      123
;  :arith-assert-lower      344
;  :arith-assert-upper      210
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         33
;  :arith-offset-eqs        9
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1713
;  :mk-clause               881
;  :num-allocs              4013457
;  :num-checks              253
;  :propagations            398
;  :quant-instantiations    150
;  :rlimit-count            172849)
(declare-const __flatten_27__17@113@02 Seq<Int>)
(assert (Seq_equal
  __flatten_27__17@113@02
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))
    2
    2)))
; [exec]
; __flatten_26__16.Main_process_state := __flatten_27__17
(set-option :timeout 10)
(push) ; 6
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) __flatten_26__16@111@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1966
;  :arith-add-rows          86
;  :arith-assert-diseq      124
;  :arith-assert-lower      348
;  :arith-assert-upper      212
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1736
;  :mk-clause               900
;  :num-allocs              4013457
;  :num-checks              254
;  :propagations            407
;  :quant-instantiations    155
;  :rlimit-count            173330)
(assert (not (= __flatten_26__16@111@02 $Ref.null)))
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@114@02 $Snap)
(assert (= $t@114@02 ($Snap.combine ($Snap.first $t@114@02) ($Snap.second $t@114@02))))
(declare-const $k@115@02 $Perm)
(assert ($Perm.isReadVar $k@115@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@115@02 $Perm.No) (< $Perm.No $k@115@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1972
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      350
;  :arith-assert-upper      213
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1742
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              255
;  :propagations            408
;  :quant-instantiations    155
;  :rlimit-count            173678)
(assert (<= $Perm.No $k@115@02))
(assert (<= $k@115@02 $Perm.Write))
(assert (implies (< $Perm.No $k@115@02) (not (= diz@57@02 $Ref.null))))
(assert (=
  ($Snap.second $t@114@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@02))
    ($Snap.second ($Snap.second $t@114@02)))))
(assert (= ($Snap.first ($Snap.second $t@114@02)) $Snap.unit))
; [eval] diz.Read_m != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1978
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      350
;  :arith-assert-upper      214
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1745
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              256
;  :propagations            408
;  :quant-instantiations    155
;  :rlimit-count            173921
;  :time                    0.01)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@114@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@114@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1984
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      350
;  :arith-assert-upper      214
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1748
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              257
;  :propagations            408
;  :quant-instantiations    156
;  :rlimit-count            174193)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@114@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1989
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      350
;  :arith-assert-upper      214
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1749
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              258
;  :propagations            408
;  :quant-instantiations    156
;  :rlimit-count            174370)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
  $Snap.unit))
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1995
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      350
;  :arith-assert-upper      214
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1751
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              259
;  :propagations            408
;  :quant-instantiations    156
;  :rlimit-count            174589
;  :time                    0.03)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2002
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      352
;  :arith-assert-upper      215
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1757
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              260
;  :propagations            408
;  :quant-instantiations    158
;  :rlimit-count            174919
;  :time                    0.03)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
  $Snap.unit))
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2008
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      352
;  :arith-assert-upper      215
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1759
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              261
;  :propagations            408
;  :quant-instantiations    158
;  :rlimit-count            175158
;  :time                    0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
  $Snap.unit))
; [eval] (forall i__27: Int :: { diz.Read_m.Main_process_state[i__27] } 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|)
(declare-const i__27@116@02 Int)
(push) ; 7
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__27
(push) ; 8
; [then-branch: 43 | 0 <= i__27@116@02 | live]
; [else-branch: 43 | !(0 <= i__27@116@02) | live]
(push) ; 9
; [then-branch: 43 | 0 <= i__27@116@02]
(assert (<= 0 i__27@116@02))
; [eval] i__27 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      355
;  :arith-assert-upper      216
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1767
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              262
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            175597)
(pop) ; 9
(push) ; 9
; [else-branch: 43 | !(0 <= i__27@116@02)]
(assert (not (<= 0 i__27@116@02)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 44 | i__27@116@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i__27@116@02 | live]
; [else-branch: 44 | !(i__27@116@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i__27@116@02) | live]
(push) ; 9
; [then-branch: 44 | i__27@116@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i__27@116@02]
(assert (and
  (<
    i__27@116@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
  (<= 0 i__27@116@02)))
; [eval] diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27] == -1
; [eval] diz.Read_m.Main_process_state[i__27]
(push) ; 10
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      356
;  :arith-assert-upper      217
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1769
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              263
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            175754
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__27@116@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      356
;  :arith-assert-upper      217
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1769
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              264
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            175763)
; [eval] -1
(push) ; 10
; [then-branch: 45 | First:(Second:(Second:(Second:($t@114@02))))[i__27@116@02] == -1 | live]
; [else-branch: 45 | First:(Second:(Second:(Second:($t@114@02))))[i__27@116@02] != -1 | live]
(push) ; 11
; [then-branch: 45 | First:(Second:(Second:(Second:($t@114@02))))[i__27@116@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i__27@116@02)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 45 | First:(Second:(Second:(Second:($t@114@02))))[i__27@116@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      i__27@116@02)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__27]
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      356
;  :arith-assert-upper      217
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1770
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              265
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            175977
;  :time                    0.02)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__27@116@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          86
;  :arith-assert-diseq      125
;  :arith-assert-lower      356
;  :arith-assert-upper      217
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1770
;  :mk-clause               902
;  :num-allocs              4013457
;  :num-checks              266
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            175986)
(push) ; 12
; [then-branch: 46 | 0 <= First:(Second:(Second:(Second:($t@114@02))))[i__27@116@02] | live]
; [else-branch: 46 | !(0 <= First:(Second:(Second:(Second:($t@114@02))))[i__27@116@02]) | live]
(push) ; 13
; [then-branch: 46 | 0 <= First:(Second:(Second:(Second:($t@114@02))))[i__27@116@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i__27@116@02)))
; [eval] diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          86
;  :arith-assert-diseq      126
;  :arith-assert-lower      359
;  :arith-assert-upper      217
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1773
;  :mk-clause               903
;  :num-allocs              4013457
;  :num-checks              267
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            176149
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__27@116@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          86
;  :arith-assert-diseq      126
;  :arith-assert-lower      359
;  :arith-assert-upper      217
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1773
;  :mk-clause               903
;  :num-allocs              4013457
;  :num-checks              268
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            176158)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          86
;  :arith-assert-diseq      126
;  :arith-assert-lower      359
;  :arith-assert-upper      217
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              868
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1773
;  :mk-clause               903
;  :num-allocs              4013457
;  :num-checks              269
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            176206
;  :time                    0.01)
(pop) ; 13
(push) ; 13
; [else-branch: 46 | !(0 <= First:(Second:(Second:(Second:($t@114@02))))[i__27@116@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      i__27@116@02))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 44 | !(i__27@116@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i__27@116@02)]
(assert (not
  (and
    (<
      i__27@116@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
    (<= 0 i__27@116@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__27@116@02 Int)) (!
  (implies
    (and
      (<
        i__27@116@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
      (<= 0 i__27@116@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          i__27@116@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i__27@116@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i__27@116@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i__27@116@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2021
;  :arith-add-rows          86
;  :arith-assert-diseq      126
;  :arith-assert-lower      359
;  :arith-assert-upper      217
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1775
;  :mk-clause               903
;  :num-allocs              4013457
;  :num-checks              270
;  :propagations            408
;  :quant-instantiations    160
;  :rlimit-count            176831)
(declare-const $k@117@02 $Perm)
(assert ($Perm.isReadVar $k@117@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@117@02 $Perm.No) (< $Perm.No $k@117@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2021
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      218
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1779
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              271
;  :propagations            409
;  :quant-instantiations    160
;  :rlimit-count            177029)
(assert (<= $Perm.No $k@117@02))
(assert (<= $k@117@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@117@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2027
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1782
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              272
;  :propagations            409
;  :quant-instantiations    160
;  :rlimit-count            177352)
(push) ; 7
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2027
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1782
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              273
;  :propagations            409
;  :quant-instantiations    160
;  :rlimit-count            177400)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2033
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1785
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              274
;  :propagations            409
;  :quant-instantiations    161
;  :rlimit-count            177756)
(push) ; 7
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2033
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1785
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              275
;  :propagations            409
;  :quant-instantiations    161
;  :rlimit-count            177804)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2038
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1786
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              276
;  :propagations            409
;  :quant-instantiations    161
;  :rlimit-count            178061
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2038
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1786
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              277
;  :propagations            409
;  :quant-instantiations    161
;  :rlimit-count            178109
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2043
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1787
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              278
;  :propagations            409
;  :quant-instantiations    161
;  :rlimit-count            178376
;  :time                    0.02)
(push) ; 7
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2043
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1787
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              279
;  :propagations            409
;  :quant-instantiations    161
;  :rlimit-count            178424
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2048
;  :arith-add-rows          86
;  :arith-assert-diseq      127
;  :arith-assert-lower      361
;  :arith-assert-upper      219
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1788
;  :mk-clause               905
;  :num-allocs              4013457
;  :num-checks              280
;  :propagations            409
;  :quant-instantiations    161
;  :rlimit-count            178701
;  :time                    0.01)
(declare-const $k@118@02 $Perm)
(assert ($Perm.isReadVar $k@118@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@118@02 $Perm.No) (< $Perm.No $k@118@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2048
;  :arith-add-rows          86
;  :arith-assert-diseq      128
;  :arith-assert-lower      363
;  :arith-assert-upper      220
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1792
;  :mk-clause               907
;  :num-allocs              4013457
;  :num-checks              281
;  :propagations            410
;  :quant-instantiations    161
;  :rlimit-count            178899)
(assert (<= $Perm.No $k@118@02))
(assert (<= $k@118@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@118@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2054
;  :arith-add-rows          86
;  :arith-assert-diseq      128
;  :arith-assert-lower      363
;  :arith-assert-upper      221
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1795
;  :mk-clause               907
;  :num-allocs              4013457
;  :num-checks              282
;  :propagations            410
;  :quant-instantiations    161
;  :rlimit-count            179272
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@118@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2054
;  :arith-add-rows          86
;  :arith-assert-diseq      128
;  :arith-assert-lower      363
;  :arith-assert-upper      221
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1795
;  :mk-clause               907
;  :num-allocs              4013457
;  :num-checks              283
;  :propagations            410
;  :quant-instantiations    161
;  :rlimit-count            179320
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2060
;  :arith-add-rows          86
;  :arith-assert-diseq      128
;  :arith-assert-lower      363
;  :arith-assert-upper      221
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1798
;  :mk-clause               907
;  :num-allocs              4013457
;  :num-checks              284
;  :propagations            410
;  :quant-instantiations    162
;  :rlimit-count            179730
;  :time                    0.02)
(push) ; 7
(assert (not (< $Perm.No $k@118@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2060
;  :arith-add-rows          86
;  :arith-assert-diseq      128
;  :arith-assert-lower      363
;  :arith-assert-upper      221
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1798
;  :mk-clause               907
;  :num-allocs              4013457
;  :num-checks              285
;  :propagations            410
;  :quant-instantiations    162
;  :rlimit-count            179778
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2065
;  :arith-add-rows          86
;  :arith-assert-diseq      128
;  :arith-assert-lower      363
;  :arith-assert-upper      221
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.34
;  :memory                  4.34
;  :minimized-lits          2
;  :mk-bool-var             1799
;  :mk-clause               907
;  :num-allocs              4013457
;  :num-checks              286
;  :propagations            410
;  :quant-instantiations    162
;  :rlimit-count            180085
;  :time                    0.02)
(declare-const $k@119@02 $Perm)
(assert ($Perm.isReadVar $k@119@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@119@02 $Perm.No) (< $Perm.No $k@119@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2065
;  :arith-add-rows          86
;  :arith-assert-diseq      129
;  :arith-assert-lower      365
;  :arith-assert-upper      222
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1803
;  :mk-clause               909
;  :num-allocs              4182589
;  :num-checks              287
;  :propagations            411
;  :quant-instantiations    162
;  :rlimit-count            180283)
(assert (<= $Perm.No $k@119@02))
(assert (<= $k@119@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@119@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2071
;  :arith-add-rows          86
;  :arith-assert-diseq      129
;  :arith-assert-lower      365
;  :arith-assert-upper      223
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1806
;  :mk-clause               909
;  :num-allocs              4182589
;  :num-checks              288
;  :propagations            411
;  :quant-instantiations    162
;  :rlimit-count            180686
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@119@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2071
;  :arith-add-rows          86
;  :arith-assert-diseq      129
;  :arith-assert-lower      365
;  :arith-assert-upper      223
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1806
;  :mk-clause               909
;  :num-allocs              4182589
;  :num-checks              289
;  :propagations            411
;  :quant-instantiations    162
;  :rlimit-count            180734
;  :time                    0.01)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2077
;  :arith-add-rows          86
;  :arith-assert-diseq      129
;  :arith-assert-lower      365
;  :arith-assert-upper      223
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1809
;  :mk-clause               909
;  :num-allocs              4182589
;  :num-checks              290
;  :propagations            411
;  :quant-instantiations    163
;  :rlimit-count            181170
;  :time                    0.02)
(push) ; 7
(assert (not (< $Perm.No $k@119@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2077
;  :arith-add-rows          86
;  :arith-assert-diseq      129
;  :arith-assert-lower      365
;  :arith-assert-upper      223
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1809
;  :mk-clause               909
;  :num-allocs              4182589
;  :num-checks              291
;  :propagations            411
;  :quant-instantiations    163
;  :rlimit-count            181218
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2082
;  :arith-add-rows          86
;  :arith-assert-diseq      129
;  :arith-assert-lower      365
;  :arith-assert-upper      223
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1810
;  :mk-clause               909
;  :num-allocs              4182589
;  :num-checks              292
;  :propagations            411
;  :quant-instantiations    163
;  :rlimit-count            181555
;  :time                    0.00)
(declare-const $k@120@02 $Perm)
(assert ($Perm.isReadVar $k@120@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@120@02 $Perm.No) (< $Perm.No $k@120@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2082
;  :arith-add-rows          86
;  :arith-assert-diseq      130
;  :arith-assert-lower      367
;  :arith-assert-upper      224
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1814
;  :mk-clause               911
;  :num-allocs              4182589
;  :num-checks              293
;  :propagations            412
;  :quant-instantiations    163
;  :rlimit-count            181753)
(assert (<= $Perm.No $k@120@02))
(assert (<= $k@120@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@120@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2088
;  :arith-add-rows          86
;  :arith-assert-diseq      130
;  :arith-assert-lower      367
;  :arith-assert-upper      225
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1817
;  :mk-clause               911
;  :num-allocs              4182589
;  :num-checks              294
;  :propagations            412
;  :quant-instantiations    163
;  :rlimit-count            182186
;  :time                    0.03)
(push) ; 7
(assert (not (< $Perm.No $k@120@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2088
;  :arith-add-rows          86
;  :arith-assert-diseq      130
;  :arith-assert-lower      367
;  :arith-assert-upper      225
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1817
;  :mk-clause               911
;  :num-allocs              4182589
;  :num-checks              295
;  :propagations            412
;  :quant-instantiations    163
;  :rlimit-count            182234)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2094
;  :arith-add-rows          86
;  :arith-assert-diseq      130
;  :arith-assert-lower      367
;  :arith-assert-upper      225
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1820
;  :mk-clause               911
;  :num-allocs              4182589
;  :num-checks              296
;  :propagations            412
;  :quant-instantiations    164
;  :rlimit-count            182700
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2094
;  :arith-add-rows          86
;  :arith-assert-diseq      130
;  :arith-assert-lower      367
;  :arith-assert-upper      225
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1820
;  :mk-clause               911
;  :num-allocs              4182589
;  :num-checks              297
;  :propagations            412
;  :quant-instantiations    164
;  :rlimit-count            182748
;  :time                    0.01)
(declare-const $k@121@02 $Perm)
(assert ($Perm.isReadVar $k@121@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@121@02 $Perm.No) (< $Perm.No $k@121@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2094
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      226
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1824
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              298
;  :propagations            413
;  :quant-instantiations    164
;  :rlimit-count            182947)
(assert (<= $Perm.No $k@121@02))
(assert (<= $k@121@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@121@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2100
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1827
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              299
;  :propagations            413
;  :quant-instantiations    164
;  :rlimit-count            183400)
(push) ; 7
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2100
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1827
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              300
;  :propagations            413
;  :quant-instantiations    164
;  :rlimit-count            183448)
(push) ; 7
(assert (not (< $Perm.No $k@121@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2100
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1827
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              301
;  :propagations            413
;  :quant-instantiations    164
;  :rlimit-count            183496
;  :time                    0.05)
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2100
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1827
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              302
;  :propagations            413
;  :quant-instantiations    164
;  :rlimit-count            183544)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 7
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2105
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1830
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              303
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            183976)
(push) ; 7
(assert (not (< $Perm.No $k@120@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2105
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1830
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              304
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184024)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
  diz@57@02))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_process_state[2] != -1
; [eval] diz.Read_m.Main_process_state[2]
(push) ; 8
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2108
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1831
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              305
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184330
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2108
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1831
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              306
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184345)
; [eval] -1
(push) ; 8
; [then-branch: 47 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1 | live]
; [else-branch: 47 | First:(Second:(Second:(Second:($t@114@02))))[2] == -1 | live]
(push) ; 9
; [then-branch: 47 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      2)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 47 | First:(Second:(Second:(Second:($t@114@02))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    2)
  (- 0 1)))
; [eval] diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2109
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1832
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              307
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184540
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2109
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1832
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              308
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184555)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [eval] !(diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2)
; [eval] diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_process_state[2] != -1
; [eval] diz.Read_m.Main_process_state[2]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2109
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1832
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              309
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184608
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2109
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1832
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              310
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184623)
; [eval] -1
(push) ; 8
; [then-branch: 48 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1 | live]
; [else-branch: 48 | First:(Second:(Second:(Second:($t@114@02))))[2] == -1 | live]
(push) ; 9
; [then-branch: 48 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      2)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 48 | First:(Second:(Second:(Second:($t@114@02))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    2)
  (- 0 1)))
; [eval] diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1833
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              311
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184814)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      131
;  :arith-assert-lower      369
;  :arith-assert-upper      227
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              869
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1833
;  :mk-clause               913
;  :num-allocs              4182589
;  :num-checks              312
;  :propagations            413
;  :quant-instantiations    165
;  :rlimit-count            184829)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(declare-const $k@122@02 $Perm)
(assert ($Perm.isReadVar $k@122@02 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@122@02 $Perm.No) (< $Perm.No $k@122@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      371
;  :arith-assert-upper      228
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1837
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              313
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185033)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@97@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      371
;  :arith-assert-upper      228
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1837
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              314
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185044
;  :time                    0.01)
(assert (< $k@122@02 $k@97@02))
(assert (<= $Perm.No (- $k@97@02 $k@122@02)))
(assert (<= (- $k@97@02 $k@122@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@97@02 $k@122@02)) (not (= diz@57@02 $Ref.null))))
; [eval] diz.Read_m != null
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      373
;  :arith-assert-upper      229
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1840
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              315
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185252
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      373
;  :arith-assert-upper      229
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1840
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              316
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185300
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      373
;  :arith-assert-upper      229
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1840
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              317
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185348)
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      373
;  :arith-assert-upper      229
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1840
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              318
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185396
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (= (Seq_length __flatten_27__17@113@02) 3)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2110
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      373
;  :arith-assert-upper      229
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1843
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              319
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185470)
(assert (= (Seq_length __flatten_27__17@113@02) 3))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2111
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      374
;  :arith-assert-upper      230
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1846
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              320
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185569)
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2111
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      374
;  :arith-assert-upper      230
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1846
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              321
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185617
;  :time                    0.00)
; [eval] (forall i__27: Int :: { diz.Read_m.Main_process_state[i__27] } 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|)
(declare-const i__27@123@02 Int)
(push) ; 7
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__27
(push) ; 8
; [then-branch: 49 | 0 <= i__27@123@02 | live]
; [else-branch: 49 | !(0 <= i__27@123@02) | live]
(push) ; 9
; [then-branch: 49 | 0 <= i__27@123@02]
(assert (<= 0 i__27@123@02))
; [eval] i__27 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2111
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      375
;  :arith-assert-upper      230
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1847
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              322
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185718
;  :time                    0.02)
(pop) ; 9
(push) ; 9
; [else-branch: 49 | !(0 <= i__27@123@02)]
(assert (not (<= 0 i__27@123@02)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 50 | i__27@123@02 < |__flatten_27__17@113@02| && 0 <= i__27@123@02 | live]
; [else-branch: 50 | !(i__27@123@02 < |__flatten_27__17@113@02| && 0 <= i__27@123@02) | live]
(push) ; 9
; [then-branch: 50 | i__27@123@02 < |__flatten_27__17@113@02| && 0 <= i__27@123@02]
(assert (and (< i__27@123@02 (Seq_length __flatten_27__17@113@02)) (<= 0 i__27@123@02)))
; [eval] diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27] == -1
; [eval] diz.Read_m.Main_process_state[i__27]
(push) ; 10
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2111
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      376
;  :arith-assert-upper      231
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1849
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              323
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185875)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__27@123@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2111
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      376
;  :arith-assert-upper      231
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1849
;  :mk-clause               915
;  :num-allocs              4182589
;  :num-checks              324
;  :propagations            414
;  :quant-instantiations    165
;  :rlimit-count            185884)
; [eval] -1
(push) ; 10
; [then-branch: 51 | __flatten_27__17@113@02[i__27@123@02] == -1 | live]
; [else-branch: 51 | __flatten_27__17@113@02[i__27@123@02] != -1 | live]
(push) ; 11
; [then-branch: 51 | __flatten_27__17@113@02[i__27@123@02] == -1]
(assert (= (Seq_index __flatten_27__17@113@02 i__27@123@02) (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 51 | __flatten_27__17@113@02[i__27@123@02] != -1]
(assert (not (= (Seq_index __flatten_27__17@113@02 i__27@123@02) (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__27]
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2112
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      376
;  :arith-assert-upper      232
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1857
;  :mk-clause               925
;  :num-allocs              4182589
;  :num-checks              325
;  :propagations            414
;  :quant-instantiations    166
;  :rlimit-count            186091)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__27@123@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2112
;  :arith-add-rows          86
;  :arith-assert-diseq      132
;  :arith-assert-lower      376
;  :arith-assert-upper      232
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1857
;  :mk-clause               925
;  :num-allocs              4182589
;  :num-checks              326
;  :propagations            414
;  :quant-instantiations    166
;  :rlimit-count            186100)
(push) ; 12
; [then-branch: 52 | 0 <= __flatten_27__17@113@02[i__27@123@02] | live]
; [else-branch: 52 | !(0 <= __flatten_27__17@113@02[i__27@123@02]) | live]
(push) ; 13
; [then-branch: 52 | 0 <= __flatten_27__17@113@02[i__27@123@02]]
(assert (<= 0 (Seq_index __flatten_27__17@113@02 i__27@123@02)))
; [eval] diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2112
;  :arith-add-rows          86
;  :arith-assert-diseq      133
;  :arith-assert-lower      379
;  :arith-assert-upper      232
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1860
;  :mk-clause               926
;  :num-allocs              4182589
;  :num-checks              327
;  :propagations            414
;  :quant-instantiations    166
;  :rlimit-count            186212
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__27@123@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2112
;  :arith-add-rows          86
;  :arith-assert-diseq      133
;  :arith-assert-lower      379
;  :arith-assert-upper      232
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1860
;  :mk-clause               926
;  :num-allocs              4182589
;  :num-checks              328
;  :propagations            414
;  :quant-instantiations    166
;  :rlimit-count            186221)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2112
;  :arith-add-rows          86
;  :arith-assert-diseq      133
;  :arith-assert-lower      379
;  :arith-assert-upper      232
;  :arith-bound-prop        13
;  :arith-conflicts         21
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        9
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 252
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               354
;  :del-clause              881
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1860
;  :mk-clause               926
;  :num-allocs              4182589
;  :num-checks              329
;  :propagations            414
;  :quant-instantiations    166
;  :rlimit-count            186269
;  :time                    0.01)
(pop) ; 13
(push) ; 13
; [else-branch: 52 | !(0 <= __flatten_27__17@113@02[i__27@123@02])]
(assert (not (<= 0 (Seq_index __flatten_27__17@113@02 i__27@123@02))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 50 | !(i__27@123@02 < |__flatten_27__17@113@02| && 0 <= i__27@123@02)]
(assert (not
  (and (< i__27@123@02 (Seq_length __flatten_27__17@113@02)) (<= 0 i__27@123@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__27@123@02 Int)) (!
  (implies
    (and
      (< i__27@123@02 (Seq_length __flatten_27__17@113@02))
      (<= 0 i__27@123@02))
    (or
      (= (Seq_index __flatten_27__17@113@02 i__27@123@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_27__17@113@02 i__27@123@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
        (<= 0 (Seq_index __flatten_27__17@113@02 i__27@123@02)))))
  :pattern ((Seq_index __flatten_27__17@113@02 i__27@123@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      138
;  :arith-assert-lower      393
;  :arith-assert-upper      244
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1898
;  :mk-clause               971
;  :num-allocs              4182589
;  :num-checks              330
;  :propagations            444
;  :quant-instantiations    169
;  :rlimit-count            186901)
(assert (forall ((i__27@123@02 Int)) (!
  (implies
    (and
      (< i__27@123@02 (Seq_length __flatten_27__17@113@02))
      (<= 0 i__27@123@02))
    (or
      (= (Seq_index __flatten_27__17@113@02 i__27@123@02) (- 0 1))
      (and
        (<
          (Seq_index __flatten_27__17@113@02 i__27@123@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))
        (<= 0 (Seq_index __flatten_27__17@113@02 i__27@123@02)))))
  :pattern ((Seq_index __flatten_27__17@113@02 i__27@123@02))
  :qid |prog.l<no position>|)))
(declare-const $k@124@02 $Perm)
(assert ($Perm.isReadVar $k@124@02 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      395
;  :arith-assert-upper      245
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1903
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              331
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187369)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@124@02 $Perm.No) (< $Perm.No $k@124@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      395
;  :arith-assert-upper      245
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1903
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              332
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187419)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@99@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      395
;  :arith-assert-upper      245
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1903
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              333
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187430
;  :time                    0.00)
(assert (< $k@124@02 $k@99@02))
(assert (<= $Perm.No (- $k@99@02 $k@124@02)))
(assert (<= (- $k@99@02 $k@124@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@99@02 $k@124@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand != null
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      397
;  :arith-assert-upper      246
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1906
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              334
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187650
;  :time                    0.04)
(push) ; 7
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      397
;  :arith-assert-upper      246
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1906
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              335
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187698)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      397
;  :arith-assert-upper      246
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1906
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              336
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187746
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      397
;  :arith-assert-upper      246
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1906
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              337
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187794)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      397
;  :arith-assert-upper      246
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1906
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              338
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187842
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      397
;  :arith-assert-upper      246
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1906
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              339
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187890
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      397
;  :arith-assert-upper      246
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1906
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              340
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187938
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      139
;  :arith-assert-lower      397
;  :arith-assert-upper      246
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1906
;  :mk-clause               973
;  :num-allocs              4182589
;  :num-checks              341
;  :propagations            445
;  :quant-instantiations    169
;  :rlimit-count            187986
;  :time                    0.00)
(declare-const $k@125@02 $Perm)
(assert ($Perm.isReadVar $k@125@02 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      140
;  :arith-assert-lower      399
;  :arith-assert-upper      247
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1910
;  :mk-clause               975
;  :num-allocs              4182589
;  :num-checks              342
;  :propagations            446
;  :quant-instantiations    169
;  :rlimit-count            188183
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@125@02 $Perm.No) (< $Perm.No $k@125@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      140
;  :arith-assert-lower      399
;  :arith-assert-upper      247
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1910
;  :mk-clause               975
;  :num-allocs              4182589
;  :num-checks              343
;  :propagations            446
;  :quant-instantiations    169
;  :rlimit-count            188233)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@100@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      140
;  :arith-assert-lower      399
;  :arith-assert-upper      247
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1910
;  :mk-clause               975
;  :num-allocs              4182589
;  :num-checks              344
;  :propagations            446
;  :quant-instantiations    169
;  :rlimit-count            188244
;  :time                    0.00)
(assert (< $k@125@02 $k@100@02))
(assert (<= $Perm.No (- $k@100@02 $k@125@02)))
(assert (<= (- $k@100@02 $k@125@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@100@02 $k@125@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_a != null
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      140
;  :arith-assert-lower      401
;  :arith-assert-upper      248
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1913
;  :mk-clause               975
;  :num-allocs              4182589
;  :num-checks              345
;  :propagations            446
;  :quant-instantiations    169
;  :rlimit-count            188452)
(push) ; 7
(assert (not (< $Perm.No $k@100@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      140
;  :arith-assert-lower      401
;  :arith-assert-upper      248
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1913
;  :mk-clause               975
;  :num-allocs              4182589
;  :num-checks              346
;  :propagations            446
;  :quant-instantiations    169
;  :rlimit-count            188500
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      140
;  :arith-assert-lower      401
;  :arith-assert-upper      248
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1913
;  :mk-clause               975
;  :num-allocs              4182589
;  :num-checks              347
;  :propagations            446
;  :quant-instantiations    169
;  :rlimit-count            188548)
(push) ; 7
(assert (not (< $Perm.No $k@100@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      140
;  :arith-assert-lower      401
;  :arith-assert-upper      248
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1913
;  :mk-clause               975
;  :num-allocs              4182589
;  :num-checks              348
;  :propagations            446
;  :quant-instantiations    169
;  :rlimit-count            188596
;  :time                    0.00)
(declare-const $k@126@02 $Perm)
(assert ($Perm.isReadVar $k@126@02 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      141
;  :arith-assert-lower      403
;  :arith-assert-upper      249
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1917
;  :mk-clause               977
;  :num-allocs              4182589
;  :num-checks              349
;  :propagations            447
;  :quant-instantiations    169
;  :rlimit-count            188793)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@126@02 $Perm.No) (< $Perm.No $k@126@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      141
;  :arith-assert-lower      403
;  :arith-assert-upper      249
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1917
;  :mk-clause               977
;  :num-allocs              4182589
;  :num-checks              350
;  :propagations            447
;  :quant-instantiations    169
;  :rlimit-count            188843
;  :time                    0.00)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@101@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      141
;  :arith-assert-lower      403
;  :arith-assert-upper      249
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1917
;  :mk-clause               977
;  :num-allocs              4182589
;  :num-checks              351
;  :propagations            447
;  :quant-instantiations    169
;  :rlimit-count            188854
;  :time                    0.01)
(assert (< $k@126@02 $k@101@02))
(assert (<= $Perm.No (- $k@101@02 $k@126@02)))
(assert (<= (- $k@101@02 $k@126@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@101@02 $k@126@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_b != null
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      141
;  :arith-assert-lower      405
;  :arith-assert-upper      250
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1920
;  :mk-clause               977
;  :num-allocs              4182589
;  :num-checks              352
;  :propagations            447
;  :quant-instantiations    169
;  :rlimit-count            189062
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@101@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      141
;  :arith-assert-lower      405
;  :arith-assert-upper      250
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1920
;  :mk-clause               977
;  :num-allocs              4182589
;  :num-checks              353
;  :propagations            447
;  :quant-instantiations    169
;  :rlimit-count            189110)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      141
;  :arith-assert-lower      405
;  :arith-assert-upper      250
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1920
;  :mk-clause               977
;  :num-allocs              4182589
;  :num-checks              354
;  :propagations            447
;  :quant-instantiations    169
;  :rlimit-count            189158)
(push) ; 7
(assert (not (< $Perm.No $k@101@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      141
;  :arith-assert-lower      405
;  :arith-assert-upper      250
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1920
;  :mk-clause               977
;  :num-allocs              4182589
;  :num-checks              355
;  :propagations            447
;  :quant-instantiations    169
;  :rlimit-count            189206
;  :time                    0.01)
(declare-const $k@127@02 $Perm)
(assert ($Perm.isReadVar $k@127@02 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      142
;  :arith-assert-lower      407
;  :arith-assert-upper      251
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1924
;  :mk-clause               979
;  :num-allocs              4182589
;  :num-checks              356
;  :propagations            448
;  :quant-instantiations    169
;  :rlimit-count            189403
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@127@02 $Perm.No) (< $Perm.No $k@127@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      142
;  :arith-assert-lower      407
;  :arith-assert-upper      251
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1924
;  :mk-clause               979
;  :num-allocs              4182589
;  :num-checks              357
;  :propagations            448
;  :quant-instantiations    169
;  :rlimit-count            189453)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@102@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      142
;  :arith-assert-lower      407
;  :arith-assert-upper      251
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1924
;  :mk-clause               979
;  :num-allocs              4182589
;  :num-checks              358
;  :propagations            448
;  :quant-instantiations    169
;  :rlimit-count            189464
;  :time                    0.01)
(assert (< $k@127@02 $k@102@02))
(assert (<= $Perm.No (- $k@102@02 $k@127@02)))
(assert (<= (- $k@102@02 $k@127@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@102@02 $k@127@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_read != null
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.07s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      142
;  :arith-assert-lower      409
;  :arith-assert-upper      252
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1927
;  :mk-clause               979
;  :num-allocs              4182589
;  :num-checks              359
;  :propagations            448
;  :quant-instantiations    169
;  :rlimit-count            189678
;  :time                    0.07)
(push) ; 7
(assert (not (< $Perm.No $k@102@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      142
;  :arith-assert-lower      409
;  :arith-assert-upper      252
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1927
;  :mk-clause               979
;  :num-allocs              4182589
;  :num-checks              360
;  :propagations            448
;  :quant-instantiations    169
;  :rlimit-count            189726
;  :time                    0.00)
(declare-const $k@128@02 $Perm)
(assert ($Perm.isReadVar $k@128@02 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      411
;  :arith-assert-upper      253
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1931
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              361
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            189923
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      411
;  :arith-assert-upper      253
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1931
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              362
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            189971
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@128@02 $Perm.No) (< $Perm.No $k@128@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      411
;  :arith-assert-upper      253
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1931
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              363
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            190021)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@103@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      411
;  :arith-assert-upper      253
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1931
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              364
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            190032
;  :time                    0.00)
(assert (< $k@128@02 $k@103@02))
(assert (<= $Perm.No (- $k@103@02 $k@128@02)))
(assert (<= (- $k@103@02 $k@128@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@103@02 $k@128@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      413
;  :arith-assert-upper      254
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1934
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              365
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            190240
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@99@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      413
;  :arith-assert-upper      254
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1934
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              366
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            190288
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@103@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      413
;  :arith-assert-upper      254
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1934
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              367
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            190336
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      413
;  :arith-assert-upper      254
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1934
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              368
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            190384)
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 7
(assert (not (< $Perm.No $k@97@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      413
;  :arith-assert-upper      254
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1934
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              369
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            190432
;  :time                    0.01)
(push) ; 7
(assert (not (< $Perm.No $k@102@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2133
;  :arith-add-rows          86
;  :arith-assert-diseq      143
;  :arith-assert-lower      413
;  :arith-assert-upper      254
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 254
;  :datatype-occurs-check   133
;  :datatype-splits         185
;  :decisions               359
;  :del-clause              937
;  :final-checks            78
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.43
;  :memory                  4.43
;  :minimized-lits          2
;  :mk-bool-var             1934
;  :mk-clause               981
;  :num-allocs              4182589
;  :num-checks              370
;  :propagations            449
;  :quant-instantiations    169
;  :rlimit-count            190480
;  :time                    0.02)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@115@02 $Perm.Write))
(assert ($Perm.isReadVar $k@117@02 $Perm.Write))
(assert ($Perm.isReadVar $k@118@02 $Perm.Write))
(assert ($Perm.isReadVar $k@119@02 $Perm.Write))
(assert ($Perm.isReadVar $k@120@02 $Perm.Write))
(assert ($Perm.isReadVar $k@121@02 $Perm.Write))
(assert (= $t@114@02 ($Snap.combine ($Snap.first $t@114@02) ($Snap.second $t@114@02))))
(assert (<= $Perm.No $k@115@02))
(assert (<= $k@115@02 $Perm.Write))
(assert (implies (< $Perm.No $k@115@02) (not (= diz@57@02 $Ref.null))))
(assert (=
  ($Snap.second $t@114@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@02))
    ($Snap.second ($Snap.second $t@114@02)))))
(assert (= ($Snap.first ($Snap.second $t@114@02)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@114@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@114@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@114@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
  $Snap.unit))
(assert (forall ((i__27@116@02 Int)) (!
  (implies
    (and
      (<
        i__27@116@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
      (<= 0 i__27@116@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          i__27@116@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i__27@116@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i__27@116@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i__27@116@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
(assert (<= $Perm.No $k@117@02))
(assert (<= $k@117@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@117@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
(assert (<= $Perm.No $k@118@02))
(assert (<= $k@118@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@118@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
(assert (<= $Perm.No $k@119@02))
(assert (<= $k@119@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@119@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
(assert (<= $Perm.No $k@120@02))
(assert (<= $k@120@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@120@02)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))))
(assert (<= $Perm.No $k@121@02))
(assert (<= $k@121@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@121@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))
  diz@57@02))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_process_state[2] != -1
; [eval] diz.Read_m.Main_process_state[2]
(push) ; 8
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2570
;  :arith-add-rows          86
;  :arith-assert-diseq      149
;  :arith-assert-lower      429
;  :arith-assert-upper      268
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 326
;  :datatype-occurs-check   149
;  :datatype-splits         253
;  :decisions               431
;  :del-clause              951
;  :final-checks            82
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.53
;  :memory                  4.53
;  :minimized-lits          2
;  :mk-bool-var             2088
;  :mk-clause               995
;  :num-allocs              4363504
;  :num-checks              373
;  :propagations            455
;  :quant-instantiations    179
;  :rlimit-count            197163)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2570
;  :arith-add-rows          86
;  :arith-assert-diseq      149
;  :arith-assert-lower      429
;  :arith-assert-upper      268
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 326
;  :datatype-occurs-check   149
;  :datatype-splits         253
;  :decisions               431
;  :del-clause              951
;  :final-checks            82
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.53
;  :memory                  4.53
;  :minimized-lits          2
;  :mk-bool-var             2088
;  :mk-clause               995
;  :num-allocs              4363504
;  :num-checks              374
;  :propagations            455
;  :quant-instantiations    179
;  :rlimit-count            197178)
; [eval] -1
(push) ; 8
; [then-branch: 53 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1 | live]
; [else-branch: 53 | First:(Second:(Second:(Second:($t@114@02))))[2] == -1 | live]
(push) ; 9
; [then-branch: 53 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      2)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 53 | First:(Second:(Second:(Second:($t@114@02))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    2)
  (- 0 1)))
; [eval] diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2571
;  :arith-add-rows          86
;  :arith-assert-diseq      149
;  :arith-assert-lower      429
;  :arith-assert-upper      268
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 326
;  :datatype-occurs-check   149
;  :datatype-splits         253
;  :decisions               431
;  :del-clause              951
;  :final-checks            82
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.53
;  :memory                  4.53
;  :minimized-lits          2
;  :mk-bool-var             2089
;  :mk-clause               995
;  :num-allocs              4363504
;  :num-checks              375
;  :propagations            455
;  :quant-instantiations    179
;  :rlimit-count            197369
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2571
;  :arith-add-rows          86
;  :arith-assert-diseq      149
;  :arith-assert-lower      429
;  :arith-assert-upper      268
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        9
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 326
;  :datatype-occurs-check   149
;  :datatype-splits         253
;  :decisions               431
;  :del-clause              951
;  :final-checks            82
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.53
;  :memory                  4.53
;  :minimized-lits          2
;  :mk-bool-var             2089
;  :mk-clause               995
;  :num-allocs              4363504
;  :num-checks              376
;  :propagations            455
;  :quant-instantiations    179
;  :rlimit-count            197384)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2730
;  :arith-add-rows          87
;  :arith-assert-diseq      152
;  :arith-assert-lower      440
;  :arith-assert-upper      273
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 362
;  :datatype-occurs-check   157
;  :datatype-splits         287
;  :decisions               468
;  :del-clause              969
;  :final-checks            84
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2148
;  :mk-clause               1013
;  :num-allocs              4547801
;  :num-checks              377
;  :propagations            463
;  :quant-instantiations    183
;  :rlimit-count            198953
;  :time                    0.01)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      152
;  :arith-assert-lower      440
;  :arith-assert-upper      273
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              970
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2190
;  :mk-clause               1014
;  :num-allocs              4547801
;  :num-checks              378
;  :propagations            463
;  :quant-instantiations    183
;  :rlimit-count            200278
;  :time                    0.01)
; [then-branch: 54 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))[2] != -2 | live]
; [else-branch: 54 | !(First:(Second:(Second:(Second:($t@114@02))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))[2] != -2) | live]
(push) ; 8
; [then-branch: 54 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
        2)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      152
;  :arith-assert-lower      440
;  :arith-assert-upper      273
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              970
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2192
;  :mk-clause               1015
;  :num-allocs              4547801
;  :num-checks              379
;  :propagations            463
;  :quant-instantiations    183
;  :rlimit-count            200556
;  :time                    0.05)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      152
;  :arith-assert-lower      440
;  :arith-assert-upper      273
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              970
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2192
;  :mk-clause               1015
;  :num-allocs              4547801
;  :num-checks              380
;  :propagations            463
;  :quant-instantiations    183
;  :rlimit-count            200604
;  :time                    0.01)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@129@02 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 55 | 0 <= i@129@02 | live]
; [else-branch: 55 | !(0 <= i@129@02) | live]
(push) ; 11
; [then-branch: 55 | 0 <= i@129@02]
(assert (<= 0 i@129@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 55 | !(0 <= i@129@02)]
(assert (not (<= 0 i@129@02)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 56 | i@129@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i@129@02 | live]
; [else-branch: 56 | !(i@129@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i@129@02) | live]
(push) ; 11
; [then-branch: 56 | i@129@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i@129@02]
(assert (and
  (<
    i@129@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
  (<= 0 i@129@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@129@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      152
;  :arith-assert-lower      441
;  :arith-assert-upper      274
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              970
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2194
;  :mk-clause               1015
;  :num-allocs              4547801
;  :num-checks              381
;  :propagations            463
;  :quant-instantiations    183
;  :rlimit-count            200740)
; [eval] -1
(push) ; 12
; [then-branch: 57 | First:(Second:(Second:(Second:($t@114@02))))[i@129@02] == -1 | live]
; [else-branch: 57 | First:(Second:(Second:(Second:($t@114@02))))[i@129@02] != -1 | live]
(push) ; 13
; [then-branch: 57 | First:(Second:(Second:(Second:($t@114@02))))[i@129@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i@129@02)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 57 | First:(Second:(Second:(Second:($t@114@02))))[i@129@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      i@129@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@129@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      153
;  :arith-assert-lower      444
;  :arith-assert-upper      275
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              970
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2200
;  :mk-clause               1019
;  :num-allocs              4547801
;  :num-checks              382
;  :propagations            465
;  :quant-instantiations    184
;  :rlimit-count            200972)
(push) ; 14
; [then-branch: 58 | 0 <= First:(Second:(Second:(Second:($t@114@02))))[i@129@02] | live]
; [else-branch: 58 | !(0 <= First:(Second:(Second:(Second:($t@114@02))))[i@129@02]) | live]
(push) ; 15
; [then-branch: 58 | 0 <= First:(Second:(Second:(Second:($t@114@02))))[i@129@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i@129@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@129@02 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      153
;  :arith-assert-lower      444
;  :arith-assert-upper      275
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              970
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2200
;  :mk-clause               1019
;  :num-allocs              4547801
;  :num-checks              383
;  :propagations            465
;  :quant-instantiations    184
;  :rlimit-count            201086)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 58 | !(0 <= First:(Second:(Second:(Second:($t@114@02))))[i@129@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      i@129@02))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 56 | !(i@129@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i@129@02)]
(assert (not
  (and
    (<
      i@129@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
    (<= 0 i@129@02))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 9
(assert (not (forall ((i@129@02 Int)) (!
  (implies
    (and
      (<
        i@129@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
      (<= 0 i@129@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          i@129@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i@129@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i@129@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i@129@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      155
;  :arith-assert-lower      445
;  :arith-assert-upper      276
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2208
;  :mk-clause               1033
;  :num-allocs              4547801
;  :num-checks              384
;  :propagations            467
;  :quant-instantiations    185
;  :rlimit-count            201532)
(assert (forall ((i@129@02 Int)) (!
  (implies
    (and
      (<
        i@129@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
      (<= 0 i@129@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          i@129@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i@129@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i@129@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i@129@02))
  :qid |prog.l<no position>|)))
(declare-const $k@130@02 $Perm)
(assert ($Perm.isReadVar $k@130@02 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@130@02 $Perm.No) (< $Perm.No $k@130@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      156
;  :arith-assert-lower      447
;  :arith-assert-upper      277
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2213
;  :mk-clause               1035
;  :num-allocs              4547801
;  :num-checks              385
;  :propagations            468
;  :quant-instantiations    185
;  :rlimit-count            202092)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@117@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      156
;  :arith-assert-lower      447
;  :arith-assert-upper      277
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2213
;  :mk-clause               1035
;  :num-allocs              4547801
;  :num-checks              386
;  :propagations            468
;  :quant-instantiations    185
;  :rlimit-count            202103
;  :time                    0.01)
(assert (< $k@130@02 $k@117@02))
(assert (<= $Perm.No (- $k@117@02 $k@130@02)))
(assert (<= (- $k@117@02 $k@130@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@117@02 $k@130@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      156
;  :arith-assert-lower      449
;  :arith-assert-upper      278
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2216
;  :mk-clause               1035
;  :num-allocs              4547801
;  :num-checks              387
;  :propagations            468
;  :quant-instantiations    185
;  :rlimit-count            202317)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      156
;  :arith-assert-lower      449
;  :arith-assert-upper      278
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2216
;  :mk-clause               1035
;  :num-allocs              4547801
;  :num-checks              388
;  :propagations            468
;  :quant-instantiations    185
;  :rlimit-count            202365
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      156
;  :arith-assert-lower      449
;  :arith-assert-upper      278
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2216
;  :mk-clause               1035
;  :num-allocs              4547801
;  :num-checks              389
;  :propagations            468
;  :quant-instantiations    185
;  :rlimit-count            202413)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      156
;  :arith-assert-lower      449
;  :arith-assert-upper      278
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2216
;  :mk-clause               1035
;  :num-allocs              4547801
;  :num-checks              390
;  :propagations            468
;  :quant-instantiations    185
;  :rlimit-count            202461)
(declare-const $k@131@02 $Perm)
(assert ($Perm.isReadVar $k@131@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@131@02 $Perm.No) (< $Perm.No $k@131@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      157
;  :arith-assert-lower      451
;  :arith-assert-upper      279
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2220
;  :mk-clause               1037
;  :num-allocs              4547801
;  :num-checks              391
;  :propagations            469
;  :quant-instantiations    185
;  :rlimit-count            202660)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@118@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      157
;  :arith-assert-lower      451
;  :arith-assert-upper      279
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2220
;  :mk-clause               1037
;  :num-allocs              4547801
;  :num-checks              392
;  :propagations            469
;  :quant-instantiations    185
;  :rlimit-count            202671)
(assert (< $k@131@02 $k@118@02))
(assert (<= $Perm.No (- $k@118@02 $k@131@02)))
(assert (<= (- $k@118@02 $k@131@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@118@02 $k@131@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@118@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      157
;  :arith-assert-lower      453
;  :arith-assert-upper      280
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2223
;  :mk-clause               1037
;  :num-allocs              4547801
;  :num-checks              393
;  :propagations            469
;  :quant-instantiations    185
;  :rlimit-count            202885
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@118@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      157
;  :arith-assert-lower      453
;  :arith-assert-upper      280
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2223
;  :mk-clause               1037
;  :num-allocs              4547801
;  :num-checks              394
;  :propagations            469
;  :quant-instantiations    185
;  :rlimit-count            202933
;  :time                    0.00)
(declare-const $k@132@02 $Perm)
(assert ($Perm.isReadVar $k@132@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@132@02 $Perm.No) (< $Perm.No $k@132@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      158
;  :arith-assert-lower      455
;  :arith-assert-upper      281
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2227
;  :mk-clause               1039
;  :num-allocs              4547801
;  :num-checks              395
;  :propagations            470
;  :quant-instantiations    185
;  :rlimit-count            203132)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@119@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      158
;  :arith-assert-lower      455
;  :arith-assert-upper      281
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2227
;  :mk-clause               1039
;  :num-allocs              4547801
;  :num-checks              396
;  :propagations            470
;  :quant-instantiations    185
;  :rlimit-count            203143
;  :time                    0.01)
(assert (< $k@132@02 $k@119@02))
(assert (<= $Perm.No (- $k@119@02 $k@132@02)))
(assert (<= (- $k@119@02 $k@132@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@119@02 $k@132@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@119@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      158
;  :arith-assert-lower      457
;  :arith-assert-upper      282
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2230
;  :mk-clause               1039
;  :num-allocs              4547801
;  :num-checks              397
;  :propagations            470
;  :quant-instantiations    185
;  :rlimit-count            203357
;  :time                    0.05)
(push) ; 9
(assert (not (< $Perm.No $k@119@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      158
;  :arith-assert-lower      457
;  :arith-assert-upper      282
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2230
;  :mk-clause               1039
;  :num-allocs              4547801
;  :num-checks              398
;  :propagations            470
;  :quant-instantiations    185
;  :rlimit-count            203405)
(declare-const $k@133@02 $Perm)
(assert ($Perm.isReadVar $k@133@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@133@02 $Perm.No) (< $Perm.No $k@133@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      159
;  :arith-assert-lower      459
;  :arith-assert-upper      283
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2234
;  :mk-clause               1041
;  :num-allocs              4547801
;  :num-checks              399
;  :propagations            471
;  :quant-instantiations    185
;  :rlimit-count            203604)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@120@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      159
;  :arith-assert-lower      459
;  :arith-assert-upper      283
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2234
;  :mk-clause               1041
;  :num-allocs              4547801
;  :num-checks              400
;  :propagations            471
;  :quant-instantiations    185
;  :rlimit-count            203615
;  :time                    0.00)
(assert (< $k@133@02 $k@120@02))
(assert (<= $Perm.No (- $k@120@02 $k@133@02)))
(assert (<= (- $k@120@02 $k@133@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@120@02 $k@133@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@120@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      159
;  :arith-assert-lower      461
;  :arith-assert-upper      284
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2237
;  :mk-clause               1041
;  :num-allocs              4547801
;  :num-checks              401
;  :propagations            471
;  :quant-instantiations    185
;  :rlimit-count            203823
;  :time                    0.04)
(declare-const $k@134@02 $Perm)
(assert ($Perm.isReadVar $k@134@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      463
;  :arith-assert-upper      285
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2241
;  :mk-clause               1043
;  :num-allocs              4547801
;  :num-checks              402
;  :propagations            472
;  :quant-instantiations    185
;  :rlimit-count            204020
;  :time                    0.01)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@134@02 $Perm.No) (< $Perm.No $k@134@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      463
;  :arith-assert-upper      285
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2241
;  :mk-clause               1043
;  :num-allocs              4547801
;  :num-checks              403
;  :propagations            472
;  :quant-instantiations    185
;  :rlimit-count            204070)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@121@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      463
;  :arith-assert-upper      285
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2241
;  :mk-clause               1043
;  :num-allocs              4547801
;  :num-checks              404
;  :propagations            472
;  :quant-instantiations    185
;  :rlimit-count            204081
;  :time                    0.00)
(assert (< $k@134@02 $k@121@02))
(assert (<= $Perm.No (- $k@121@02 $k@134@02)))
(assert (<= (- $k@121@02 $k@134@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@02 $k@134@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
      $Ref.null))))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      465
;  :arith-assert-upper      286
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2244
;  :mk-clause               1043
;  :num-allocs              4547801
;  :num-checks              405
;  :propagations            472
;  :quant-instantiations    185
;  :rlimit-count            204295)
(push) ; 9
(assert (not (< $Perm.No $k@121@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.06s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      465
;  :arith-assert-upper      286
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2244
;  :mk-clause               1043
;  :num-allocs              4547801
;  :num-checks              406
;  :propagations            472
;  :quant-instantiations    185
;  :rlimit-count            204343
;  :time                    0.02)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))))
                                            $Snap.unit)))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) globals@58@02))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2931
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      465
;  :arith-assert-upper      286
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2245
;  :mk-clause               1043
;  :num-allocs              4547801
;  :num-checks              407
;  :propagations            472
;  :quant-instantiations    185
;  :rlimit-count            205238
;  :time                    0.00)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2931
;  :arith-add-rows          87
;  :arith-assert-diseq      160
;  :arith-assert-lower      465
;  :arith-assert-upper      286
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        9
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   169
;  :datatype-splits         323
;  :decisions               506
;  :del-clause              988
;  :final-checks            87
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2245
;  :mk-clause               1043
;  :num-allocs              4547801
;  :num-checks              408
;  :propagations            472
;  :quant-instantiations    185
;  :rlimit-count            205286)
(declare-const $t@135@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Read_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3113
;  :arith-add-rows          88
;  :arith-assert-diseq      163
;  :arith-assert-lower      476
;  :arith-assert-upper      291
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        9
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1015
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2302
;  :mk-clause               1060
;  :num-allocs              4547801
;  :num-checks              410
;  :propagations            480
;  :quant-instantiations    190
;  :rlimit-count            206699
;  :time                    0.00)
(assert (= $t@135@02 ($Snap.combine ($Snap.first $t@135@02) ($Snap.second $t@135@02))))
(assert (= ($Snap.first $t@135@02) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@135@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@135@02))
    ($Snap.second ($Snap.second $t@135@02)))))
(assert (= ($Snap.first ($Snap.second $t@135@02)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@135@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@135@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@135@02))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@135@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 3
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@136@02 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 59 | 0 <= i@136@02 | live]
; [else-branch: 59 | !(0 <= i@136@02) | live]
(push) ; 11
; [then-branch: 59 | 0 <= i@136@02]
(assert (<= 0 i@136@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 11
(push) ; 11
; [else-branch: 59 | !(0 <= i@136@02)]
(assert (not (<= 0 i@136@02)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 60 | i@136@02 < |First:(Second:(Second:(Second:($t@135@02))))| && 0 <= i@136@02 | live]
; [else-branch: 60 | !(i@136@02 < |First:(Second:(Second:(Second:($t@135@02))))| && 0 <= i@136@02) | live]
(push) ; 11
; [then-branch: 60 | i@136@02 < |First:(Second:(Second:(Second:($t@135@02))))| && 0 <= i@136@02]
(assert (and
  (<
    i@136@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
  (<= 0 i@136@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@136@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3163
;  :arith-add-rows          88
;  :arith-assert-diseq      163
;  :arith-assert-lower      481
;  :arith-assert-upper      294
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        9
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1015
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2328
;  :mk-clause               1060
;  :num-allocs              4547801
;  :num-checks              411
;  :propagations            480
;  :quant-instantiations    194
;  :rlimit-count            208002)
; [eval] -1
(push) ; 12
; [then-branch: 61 | First:(Second:(Second:(Second:($t@135@02))))[i@136@02] == -1 | live]
; [else-branch: 61 | First:(Second:(Second:(Second:($t@135@02))))[i@136@02] != -1 | live]
(push) ; 13
; [then-branch: 61 | First:(Second:(Second:(Second:($t@135@02))))[i@136@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
    i@136@02)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 61 | First:(Second:(Second:(Second:($t@135@02))))[i@136@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
      i@136@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@136@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3163
;  :arith-add-rows          88
;  :arith-assert-diseq      163
;  :arith-assert-lower      481
;  :arith-assert-upper      294
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        266
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        9
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1015
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2329
;  :mk-clause               1060
;  :num-allocs              4547801
;  :num-checks              412
;  :propagations            480
;  :quant-instantiations    194
;  :rlimit-count            208177)
(push) ; 14
; [then-branch: 62 | 0 <= First:(Second:(Second:(Second:($t@135@02))))[i@136@02] | live]
; [else-branch: 62 | !(0 <= First:(Second:(Second:(Second:($t@135@02))))[i@136@02]) | live]
(push) ; 15
; [then-branch: 62 | 0 <= First:(Second:(Second:(Second:($t@135@02))))[i@136@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
    i@136@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 16
(assert (not (>= i@136@02 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3163
;  :arith-add-rows          88
;  :arith-assert-diseq      164
;  :arith-assert-lower      484
;  :arith-assert-upper      294
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        267
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        9
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1015
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2332
;  :mk-clause               1061
;  :num-allocs              4547801
;  :num-checks              413
;  :propagations            480
;  :quant-instantiations    194
;  :rlimit-count            208301)
; [eval] |diz.Main_event_state|
(pop) ; 15
(push) ; 15
; [else-branch: 62 | !(0 <= First:(Second:(Second:(Second:($t@135@02))))[i@136@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
      i@136@02))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 60 | !(i@136@02 < |First:(Second:(Second:(Second:($t@135@02))))| && 0 <= i@136@02)]
(assert (not
  (and
    (<
      i@136@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
    (<= 0 i@136@02))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@136@02 Int)) (!
  (implies
    (and
      (<
        i@136@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
      (<= 0 i@136@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
          i@136@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
            i@136@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
            i@136@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
    i@136@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))
(declare-const $k@137@02 $Perm)
(assert ($Perm.isReadVar $k@137@02 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@137@02 $Perm.No) (< $Perm.No $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3168
;  :arith-add-rows          88
;  :arith-assert-diseq      165
;  :arith-assert-lower      486
;  :arith-assert-upper      295
;  :arith-bound-prop        13
;  :arith-conflicts         23
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        9
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2338
;  :mk-clause               1063
;  :num-allocs              4547801
;  :num-checks              414
;  :propagations            481
;  :quant-instantiations    194
;  :rlimit-count            209069)
(declare-const $t@138@02 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@117@02 $k@130@02))
    (=
      $t@138@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
  (implies
    (< $Perm.No $k@137@02)
    (=
      $t@138@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))
(assert (<= $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02)))
(assert (<= (+ (- $k@117@02 $k@130@02) $k@137@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))
  $Snap.unit))
; [eval] diz.Main_nand != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3178
;  :arith-add-rows          89
;  :arith-assert-diseq      165
;  :arith-assert-lower      487
;  :arith-assert-upper      297
;  :arith-bound-prop        13
;  :arith-conflicts         24
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        9
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2346
;  :mk-clause               1063
;  :num-allocs              4547801
;  :num-checks              415
;  :propagations            481
;  :quant-instantiations    195
;  :rlimit-count            209755
;  :time                    0.00)
(assert (not (= $t@138@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3184
;  :arith-add-rows          89
;  :arith-assert-diseq      165
;  :arith-assert-lower      487
;  :arith-assert-upper      298
;  :arith-bound-prop        13
;  :arith-conflicts         25
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        9
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2349
;  :mk-clause               1063
;  :num-allocs              4547801
;  :num-checks              416
;  :propagations            481
;  :quant-instantiations    195
;  :rlimit-count            210079
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3189
;  :arith-add-rows          89
;  :arith-assert-diseq      165
;  :arith-assert-lower      487
;  :arith-assert-upper      299
;  :arith-bound-prop        13
;  :arith-conflicts         26
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        9
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2351
;  :mk-clause               1063
;  :num-allocs              4547801
;  :num-checks              417
;  :propagations            481
;  :quant-instantiations    195
;  :rlimit-count            210368
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3194
;  :arith-add-rows          89
;  :arith-assert-diseq      165
;  :arith-assert-lower      487
;  :arith-assert-upper      300
;  :arith-bound-prop        13
;  :arith-conflicts         27
;  :arith-eq-adapter        268
;  :arith-fixed-eqs         45
;  :arith-offset-eqs        9
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2353
;  :mk-clause               1063
;  :num-allocs              4547801
;  :num-checks              418
;  :propagations            481
;  :quant-instantiations    195
;  :rlimit-count            210667
;  :time                    0.03)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))
(declare-const $k@139@02 $Perm)
(assert ($Perm.isReadVar $k@139@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@139@02 $Perm.No) (< $Perm.No $k@139@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3199
;  :arith-add-rows          89
;  :arith-assert-diseq      166
;  :arith-assert-lower      489
;  :arith-assert-upper      301
;  :arith-bound-prop        13
;  :arith-conflicts         27
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         45
;  :arith-offset-eqs        9
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2358
;  :mk-clause               1065
;  :num-allocs              4547801
;  :num-checks              419
;  :propagations            482
;  :quant-instantiations    195
;  :rlimit-count            211087)
(declare-const $t@140@02 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@118@02 $k@131@02))
    (=
      $t@140@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
  (implies
    (< $Perm.No $k@139@02)
    (=
      $t@140@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@118@02 $k@131@02) $k@139@02)))
(assert (<= (+ (- $k@118@02 $k@131@02) $k@139@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@118@02 $k@131@02) $k@139@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_a != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@118@02 $k@131@02) $k@139@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3209
;  :arith-add-rows          90
;  :arith-assert-diseq      166
;  :arith-assert-lower      490
;  :arith-assert-upper      303
;  :arith-bound-prop        13
;  :arith-conflicts         28
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         46
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2366
;  :mk-clause               1065
;  :num-allocs              4547801
;  :num-checks              420
;  :propagations            482
;  :quant-instantiations    196
;  :rlimit-count            211877
;  :time                    0.00)
(assert (not (= $t@140@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@118@02 $k@131@02) $k@139@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3215
;  :arith-add-rows          90
;  :arith-assert-diseq      166
;  :arith-assert-lower      490
;  :arith-assert-upper      304
;  :arith-bound-prop        13
;  :arith-conflicts         29
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         47
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.63
;  :memory                  4.63
;  :minimized-lits          2
;  :mk-bool-var             2369
;  :mk-clause               1065
;  :num-allocs              4547801
;  :num-checks              421
;  :propagations            482
;  :quant-instantiations    196
;  :rlimit-count            212251
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))))
(declare-const $k@141@02 $Perm)
(assert ($Perm.isReadVar $k@141@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@141@02 $Perm.No) (< $Perm.No $k@141@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3220
;  :arith-add-rows          90
;  :arith-assert-diseq      167
;  :arith-assert-lower      492
;  :arith-assert-upper      305
;  :arith-bound-prop        13
;  :arith-conflicts         29
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         47
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2374
;  :mk-clause               1067
;  :num-allocs              4742205
;  :num-checks              422
;  :propagations            483
;  :quant-instantiations    196
;  :rlimit-count            212702)
(declare-const $t@142@02 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@119@02 $k@132@02))
    (=
      $t@142@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
  (implies
    (< $Perm.No $k@141@02)
    (=
      $t@142@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@119@02 $k@132@02) $k@141@02)))
(assert (<= (+ (- $k@119@02 $k@132@02) $k@141@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@119@02 $k@132@02) $k@141@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_write_b != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@119@02 $k@132@02) $k@141@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3230
;  :arith-add-rows          91
;  :arith-assert-diseq      167
;  :arith-assert-lower      493
;  :arith-assert-upper      307
;  :arith-bound-prop        13
;  :arith-conflicts         30
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         48
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2382
;  :mk-clause               1067
;  :num-allocs              4742205
;  :num-checks              423
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            213542
;  :time                    0.01)
(assert (not (= $t@142@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@119@02 $k@132@02) $k@141@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3236
;  :arith-add-rows          91
;  :arith-assert-diseq      167
;  :arith-assert-lower      493
;  :arith-assert-upper      308
;  :arith-bound-prop        13
;  :arith-conflicts         31
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2385
;  :mk-clause               1067
;  :num-allocs              4742205
;  :num-checks              424
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            213944
;  :time                    0.01)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))))))
(declare-const $k@143@02 $Perm)
(assert ($Perm.isReadVar $k@143@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@143@02 $Perm.No) (< $Perm.No $k@143@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          91
;  :arith-assert-diseq      168
;  :arith-assert-lower      495
;  :arith-assert-upper      309
;  :arith-bound-prop        13
;  :arith-conflicts         31
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        9
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    225
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2390
;  :mk-clause               1069
;  :num-allocs              4742205
;  :num-checks              425
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            214425
;  :time                    0.00)
(declare-const $t@144@02 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@120@02 $k@133@02))
    (=
      $t@144@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@143@02)
    (=
      $t@144@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@120@02 $k@133@02) $k@143@02)))
(assert (<= (+ (- $k@120@02 $k@133@02) $k@143@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@120@02 $k@133@02) $k@143@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand_read != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@120@02 $k@133@02) $k@143@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.07s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3251
;  :arith-add-rows          92
;  :arith-assert-diseq      168
;  :arith-assert-lower      496
;  :arith-assert-upper      311
;  :arith-bound-prop        13
;  :arith-conflicts         32
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         50
;  :arith-offset-eqs        9
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2398
;  :mk-clause               1069
;  :num-allocs              4742205
;  :num-checks              426
;  :propagations            484
;  :quant-instantiations    198
;  :rlimit-count            215149
;  :time                    0.01)
(assert (not (= $t@144@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3256
;  :arith-add-rows          92
;  :arith-assert-diseq      168
;  :arith-assert-lower      496
;  :arith-assert-upper      312
;  :arith-bound-prop        13
;  :arith-conflicts         33
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        9
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2400
;  :mk-clause               1069
;  :num-allocs              4742205
;  :num-checks              427
;  :propagations            484
;  :quant-instantiations    198
;  :rlimit-count            215556
;  :time                    0.00)
(declare-const $k@145@02 $Perm)
(assert ($Perm.isReadVar $k@145@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@145@02 $Perm.No) (< $Perm.No $k@145@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3256
;  :arith-add-rows          92
;  :arith-assert-diseq      169
;  :arith-assert-lower      498
;  :arith-assert-upper      313
;  :arith-bound-prop        13
;  :arith-conflicts         33
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        9
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2404
;  :mk-clause               1071
;  :num-allocs              4742205
;  :num-checks              428
;  :propagations            485
;  :quant-instantiations    198
;  :rlimit-count            215754)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  $t@138@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3256
;  :arith-add-rows          92
;  :arith-assert-diseq      169
;  :arith-assert-lower      498
;  :arith-assert-upper      313
;  :arith-bound-prop        13
;  :arith-conflicts         33
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        9
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2404
;  :mk-clause               1071
;  :num-allocs              4742205
;  :num-checks              429
;  :propagations            485
;  :quant-instantiations    198
;  :rlimit-count            215765
;  :time                    0.01)
(declare-const $t@146@02 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@121@02 $k@134@02))
    (=
      $t@146@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@145@02)
    (=
      $t@146@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@121@02 $k@134@02) $k@145@02)))
(assert (<= (+ (- $k@121@02 $k@134@02) $k@145@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@121@02 $k@134@02) $k@145@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_nand.Nand_gate_m == diz
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3264
;  :arith-add-rows          93
;  :arith-assert-diseq      169
;  :arith-assert-lower      499
;  :arith-assert-upper      315
;  :arith-bound-prop        13
;  :arith-conflicts         34
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         52
;  :arith-offset-eqs        9
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2411
;  :mk-clause               1071
;  :num-allocs              4742205
;  :num-checks              430
;  :propagations            485
;  :quant-instantiations    199
;  :rlimit-count            216392)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  $t@138@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3264
;  :arith-add-rows          93
;  :arith-assert-diseq      169
;  :arith-assert-lower      499
;  :arith-assert-upper      315
;  :arith-bound-prop        13
;  :arith-conflicts         34
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         52
;  :arith-offset-eqs        9
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2411
;  :mk-clause               1071
;  :num-allocs              4742205
;  :num-checks              431
;  :propagations            485
;  :quant-instantiations    199
;  :rlimit-count            216403
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@121@02 $k@134@02) $k@145@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3264
;  :arith-add-rows          93
;  :arith-assert-diseq      169
;  :arith-assert-lower      499
;  :arith-assert-upper      316
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         53
;  :arith-offset-eqs        9
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 437
;  :datatype-occurs-check   199
;  :datatype-splits         357
;  :decisions               543
;  :del-clause              1016
;  :final-checks            89
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.72
;  :memory                  4.72
;  :minimized-lits          2
;  :mk-bool-var             2412
;  :mk-clause               1071
;  :num-allocs              4742205
;  :num-checks              432
;  :propagations            485
;  :quant-instantiations    199
;  :rlimit-count            216487)
(assert (= $t@146@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@135@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) globals@58@02))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Read_m, globals), write)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3485
;  :arith-add-rows          96
;  :arith-assert-diseq      173
;  :arith-assert-lower      514
;  :arith-assert-upper      323
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         56
;  :arith-offset-eqs        9
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   227
;  :datatype-splits         398
;  :decisions               587
;  :del-clause              1049
;  :final-checks            91
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2486
;  :mk-clause               1094
;  :num-allocs              4939098
;  :num-checks              434
;  :propagations            496
;  :quant-instantiations    205
;  :rlimit-count            218234
;  :time                    0.03)
(declare-const $t@147@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@148@02 $Perm)
(assert ($Perm.isReadVar $k@148@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@148@02 $Perm.No) (< $Perm.No $k@148@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      531
;  :arith-assert-upper      331
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2563
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              436
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220068)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@115@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      531
;  :arith-assert-upper      331
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2563
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              437
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220079
;  :time                    0.01)
(assert (< $k@148@02 $k@115@02))
(assert (<= $Perm.No (- $k@115@02 $k@148@02)))
(assert (<= (- $k@115@02 $k@148@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@115@02 $k@148@02)) (not (= diz@57@02 $Ref.null))))
; [eval] diz.Read_m != null
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      533
;  :arith-assert-upper      332
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2566
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              438
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220293
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      533
;  :arith-assert-upper      332
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2566
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              439
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220341
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      533
;  :arith-assert-upper      332
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2566
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              440
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220389
;  :time                    0.01)
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      533
;  :arith-assert-upper      332
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2566
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              441
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220437
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      533
;  :arith-assert-upper      332
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2566
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              442
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220485
;  :time                    0.02)
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      533
;  :arith-assert-upper      332
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2566
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              443
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220533
;  :time                    0.00)
; [eval] (forall i__27: Int :: { diz.Read_m.Main_process_state[i__27] } 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|)
(declare-const i__27@149@02 Int)
(push) ; 9
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__27 && i__27 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__27
(push) ; 10
; [then-branch: 63 | 0 <= i__27@149@02 | live]
; [else-branch: 63 | !(0 <= i__27@149@02) | live]
(push) ; 11
; [then-branch: 63 | 0 <= i__27@149@02]
(assert (<= 0 i__27@149@02))
; [eval] i__27 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      534
;  :arith-assert-upper      332
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2567
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              444
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220634
;  :time                    0.01)
(pop) ; 11
(push) ; 11
; [else-branch: 63 | !(0 <= i__27@149@02)]
(assert (not (<= 0 i__27@149@02)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 64 | i__27@149@02 < |First:(Second:(Second:(Second:($t@135@02))))| && 0 <= i__27@149@02 | live]
; [else-branch: 64 | !(i__27@149@02 < |First:(Second:(Second:(Second:($t@135@02))))| && 0 <= i__27@149@02) | live]
(push) ; 11
; [then-branch: 64 | i__27@149@02 < |First:(Second:(Second:(Second:($t@135@02))))| && 0 <= i__27@149@02]
(assert (and
  (<
    i__27@149@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
  (<= 0 i__27@149@02)))
; [eval] diz.Read_m.Main_process_state[i__27] == -1 || 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27] == -1
; [eval] diz.Read_m.Main_process_state[i__27]
(push) ; 12
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 12
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      535
;  :arith-assert-upper      333
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2569
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              445
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220791
;  :time                    0.04)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__27@149@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      178
;  :arith-assert-lower      535
;  :arith-assert-upper      333
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2569
;  :mk-clause               1119
;  :num-allocs              4939098
;  :num-checks              446
;  :propagations            508
;  :quant-instantiations    211
;  :rlimit-count            220800)
; [eval] -1
(push) ; 12
; [then-branch: 65 | First:(Second:(Second:(Second:($t@135@02))))[i__27@149@02] == -1 | live]
; [else-branch: 65 | First:(Second:(Second:(Second:($t@135@02))))[i__27@149@02] != -1 | live]
(push) ; 13
; [then-branch: 65 | First:(Second:(Second:(Second:($t@135@02))))[i__27@149@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
    i__27@149@02)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 65 | First:(Second:(Second:(Second:($t@135@02))))[i__27@149@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
      i__27@149@02)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__27] && diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__27]
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      179
;  :arith-assert-lower      538
;  :arith-assert-upper      334
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2575
;  :mk-clause               1123
;  :num-allocs              4939098
;  :num-checks              447
;  :propagations            510
;  :quant-instantiations    212
;  :rlimit-count            221071)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__27@149@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      179
;  :arith-assert-lower      538
;  :arith-assert-upper      334
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2575
;  :mk-clause               1123
;  :num-allocs              4939098
;  :num-checks              448
;  :propagations            510
;  :quant-instantiations    212
;  :rlimit-count            221080)
(push) ; 14
; [then-branch: 66 | 0 <= First:(Second:(Second:(Second:($t@135@02))))[i__27@149@02] | live]
; [else-branch: 66 | !(0 <= First:(Second:(Second:(Second:($t@135@02))))[i__27@149@02]) | live]
(push) ; 15
; [then-branch: 66 | 0 <= First:(Second:(Second:(Second:($t@135@02))))[i__27@149@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
    i__27@149@02)))
; [eval] diz.Read_m.Main_process_state[i__27] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__27]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      179
;  :arith-assert-lower      538
;  :arith-assert-upper      334
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2575
;  :mk-clause               1123
;  :num-allocs              4939098
;  :num-checks              449
;  :propagations            510
;  :quant-instantiations    212
;  :rlimit-count            221233)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__27@149@02 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      179
;  :arith-assert-lower      538
;  :arith-assert-upper      334
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2575
;  :mk-clause               1123
;  :num-allocs              4939098
;  :num-checks              450
;  :propagations            510
;  :quant-instantiations    212
;  :rlimit-count            221242)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      179
;  :arith-assert-lower      538
;  :arith-assert-upper      334
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1072
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2575
;  :mk-clause               1123
;  :num-allocs              4939098
;  :num-checks              451
;  :propagations            510
;  :quant-instantiations    212
;  :rlimit-count            221290)
(pop) ; 15
(push) ; 15
; [else-branch: 66 | !(0 <= First:(Second:(Second:(Second:($t@135@02))))[i__27@149@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
      i__27@149@02))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 64 | !(i__27@149@02 < |First:(Second:(Second:(Second:($t@135@02))))| && 0 <= i__27@149@02)]
(assert (not
  (and
    (<
      i__27@149@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
    (<= 0 i__27@149@02))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__27@149@02 Int)) (!
  (implies
    (and
      (<
        i__27@149@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
      (<= 0 i__27@149@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
          i__27@149@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
            i__27@149@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
            i__27@149@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
    i__27@149@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      181
;  :arith-assert-lower      539
;  :arith-assert-upper      335
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1090
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2583
;  :mk-clause               1137
;  :num-allocs              4939098
;  :num-checks              452
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            221736)
(assert (forall ((i__27@149@02 Int)) (!
  (implies
    (and
      (<
        i__27@149@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))
      (<= 0 i__27@149@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
          i__27@149@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
            i__27@149@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
            i__27@149@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@02)))))
    i__27@149@02))
  :qid |prog.l<no position>|)))
(declare-const $k@150@02 $Perm)
(assert ($Perm.isReadVar $k@150@02 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      182
;  :arith-assert-lower      541
;  :arith-assert-upper      336
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1090
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2588
;  :mk-clause               1139
;  :num-allocs              4939098
;  :num-checks              453
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            222294)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@150@02 $Perm.No) (< $Perm.No $k@150@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3707
;  :arith-add-rows          98
;  :arith-assert-diseq      182
;  :arith-assert-lower      541
;  :arith-assert-upper      336
;  :arith-bound-prop        13
;  :arith-conflicts         35
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1090
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2588
;  :mk-clause               1139
;  :num-allocs              4939098
;  :num-checks              454
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            222344)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@117@02 $k@130@02) $k@137@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          98
;  :arith-assert-diseq      182
;  :arith-assert-lower      541
;  :arith-assert-upper      337
;  :arith-bound-prop        13
;  :arith-conflicts         36
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2590
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              455
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            222424)
(assert (< $k@150@02 (+ (- $k@117@02 $k@130@02) $k@137@02)))
(assert (<= $Perm.No (- (+ (- $k@117@02 $k@130@02) $k@137@02) $k@150@02)))
(assert (<= (- (+ (- $k@117@02 $k@130@02) $k@137@02) $k@150@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@117@02 $k@130@02) $k@137@02) $k@150@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      182
;  :arith-assert-lower      543
;  :arith-assert-upper      338
;  :arith-bound-prop        13
;  :arith-conflicts         36
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2593
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              456
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            222660)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      182
;  :arith-assert-lower      543
;  :arith-assert-upper      339
;  :arith-bound-prop        13
;  :arith-conflicts         37
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         60
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2594
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              457
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            222741)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      182
;  :arith-assert-lower      543
;  :arith-assert-upper      339
;  :arith-bound-prop        13
;  :arith-conflicts         37
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         60
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2594
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              458
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            222789)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      182
;  :arith-assert-lower      543
;  :arith-assert-upper      340
;  :arith-bound-prop        13
;  :arith-conflicts         38
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         61
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2595
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              459
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            222870)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      182
;  :arith-assert-lower      543
;  :arith-assert-upper      340
;  :arith-bound-prop        13
;  :arith-conflicts         38
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         61
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2595
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              460
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            222918)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      182
;  :arith-assert-lower      543
;  :arith-assert-upper      341
;  :arith-bound-prop        13
;  :arith-conflicts         39
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2596
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              461
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            222999)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      182
;  :arith-assert-lower      543
;  :arith-assert-upper      341
;  :arith-bound-prop        13
;  :arith-conflicts         39
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         62
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2596
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              462
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            223047)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      182
;  :arith-assert-lower      543
;  :arith-assert-upper      342
;  :arith-bound-prop        13
;  :arith-conflicts         40
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2597
;  :mk-clause               1141
;  :num-allocs              4939098
;  :num-checks              463
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            223128)
(declare-const $k@151@02 $Perm)
(assert ($Perm.isReadVar $k@151@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      183
;  :arith-assert-lower      545
;  :arith-assert-upper      343
;  :arith-bound-prop        13
;  :arith-conflicts         40
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2601
;  :mk-clause               1143
;  :num-allocs              4939098
;  :num-checks              464
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            223325)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@151@02 $Perm.No) (< $Perm.No $k@151@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3708
;  :arith-add-rows          100
;  :arith-assert-diseq      183
;  :arith-assert-lower      545
;  :arith-assert-upper      343
;  :arith-bound-prop        13
;  :arith-conflicts         40
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1092
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2601
;  :mk-clause               1143
;  :num-allocs              4939098
;  :num-checks              465
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            223375)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@118@02 $k@131@02) $k@139@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3709
;  :arith-add-rows          100
;  :arith-assert-diseq      183
;  :arith-assert-lower      545
;  :arith-assert-upper      344
;  :arith-bound-prop        13
;  :arith-conflicts         41
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1094
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2603
;  :mk-clause               1145
;  :num-allocs              4939098
;  :num-checks              466
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            223455)
(assert (< $k@151@02 (+ (- $k@118@02 $k@131@02) $k@139@02)))
(assert (<= $Perm.No (- (+ (- $k@118@02 $k@131@02) $k@139@02) $k@151@02)))
(assert (<= (- (+ (- $k@118@02 $k@131@02) $k@139@02) $k@151@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@118@02 $k@131@02) $k@139@02) $k@151@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3709
;  :arith-add-rows          102
;  :arith-assert-diseq      183
;  :arith-assert-lower      547
;  :arith-assert-upper      345
;  :arith-bound-prop        13
;  :arith-conflicts         41
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1094
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2606
;  :mk-clause               1145
;  :num-allocs              4939098
;  :num-checks              467
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            223691)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@118@02 $k@131@02) $k@139@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3709
;  :arith-add-rows          102
;  :arith-assert-diseq      183
;  :arith-assert-lower      547
;  :arith-assert-upper      346
;  :arith-bound-prop        13
;  :arith-conflicts         42
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         64
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1094
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2607
;  :mk-clause               1145
;  :num-allocs              4939098
;  :num-checks              468
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            223772)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3709
;  :arith-add-rows          102
;  :arith-assert-diseq      183
;  :arith-assert-lower      547
;  :arith-assert-upper      346
;  :arith-bound-prop        13
;  :arith-conflicts         42
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         64
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1094
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2607
;  :mk-clause               1145
;  :num-allocs              4939098
;  :num-checks              469
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            223820)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@118@02 $k@131@02) $k@139@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3709
;  :arith-add-rows          102
;  :arith-assert-diseq      183
;  :arith-assert-lower      547
;  :arith-assert-upper      347
;  :arith-bound-prop        13
;  :arith-conflicts         43
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1094
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2608
;  :mk-clause               1145
;  :num-allocs              4939098
;  :num-checks              470
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            223901)
(declare-const $k@152@02 $Perm)
(assert ($Perm.isReadVar $k@152@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3709
;  :arith-add-rows          102
;  :arith-assert-diseq      184
;  :arith-assert-lower      549
;  :arith-assert-upper      348
;  :arith-bound-prop        13
;  :arith-conflicts         43
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1094
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2612
;  :mk-clause               1147
;  :num-allocs              4939098
;  :num-checks              471
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            224097
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@152@02 $Perm.No) (< $Perm.No $k@152@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3709
;  :arith-add-rows          102
;  :arith-assert-diseq      184
;  :arith-assert-lower      549
;  :arith-assert-upper      348
;  :arith-bound-prop        13
;  :arith-conflicts         43
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1094
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2612
;  :mk-clause               1147
;  :num-allocs              4939098
;  :num-checks              472
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            224147)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@119@02 $k@132@02) $k@141@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3710
;  :arith-add-rows          102
;  :arith-assert-diseq      184
;  :arith-assert-lower      549
;  :arith-assert-upper      349
;  :arith-bound-prop        13
;  :arith-conflicts         44
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        9
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1096
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2614
;  :mk-clause               1149
;  :num-allocs              4939098
;  :num-checks              473
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            224225)
(assert (< $k@152@02 (+ (- $k@119@02 $k@132@02) $k@141@02)))
(assert (<= $Perm.No (- (+ (- $k@119@02 $k@132@02) $k@141@02) $k@152@02)))
(assert (<= (- (+ (- $k@119@02 $k@132@02) $k@141@02) $k@152@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@119@02 $k@132@02) $k@141@02) $k@152@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3710
;  :arith-add-rows          103
;  :arith-assert-diseq      184
;  :arith-assert-lower      551
;  :arith-assert-upper      350
;  :arith-bound-prop        13
;  :arith-conflicts         44
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         65
;  :arith-offset-eqs        9
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1096
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2617
;  :mk-clause               1149
;  :num-allocs              4939098
;  :num-checks              474
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            224467)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@119@02 $k@132@02) $k@141@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3710
;  :arith-add-rows          103
;  :arith-assert-diseq      184
;  :arith-assert-lower      551
;  :arith-assert-upper      351
;  :arith-bound-prop        13
;  :arith-conflicts         45
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1096
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2618
;  :mk-clause               1149
;  :num-allocs              4939098
;  :num-checks              475
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            224545)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3710
;  :arith-add-rows          103
;  :arith-assert-diseq      184
;  :arith-assert-lower      551
;  :arith-assert-upper      351
;  :arith-bound-prop        13
;  :arith-conflicts         45
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        9
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1096
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2618
;  :mk-clause               1149
;  :num-allocs              4939098
;  :num-checks              476
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            224593)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@119@02 $k@132@02) $k@141@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3710
;  :arith-add-rows          103
;  :arith-assert-diseq      184
;  :arith-assert-lower      551
;  :arith-assert-upper      352
;  :arith-bound-prop        13
;  :arith-conflicts         46
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1096
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2619
;  :mk-clause               1149
;  :num-allocs              4939098
;  :num-checks              477
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            224671)
(declare-const $k@153@02 $Perm)
(assert ($Perm.isReadVar $k@153@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3710
;  :arith-add-rows          103
;  :arith-assert-diseq      185
;  :arith-assert-lower      553
;  :arith-assert-upper      353
;  :arith-bound-prop        13
;  :arith-conflicts         46
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1096
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2623
;  :mk-clause               1151
;  :num-allocs              4939098
;  :num-checks              478
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            224867)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@153@02 $Perm.No) (< $Perm.No $k@153@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3710
;  :arith-add-rows          103
;  :arith-assert-diseq      185
;  :arith-assert-lower      553
;  :arith-assert-upper      353
;  :arith-bound-prop        13
;  :arith-conflicts         46
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1096
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2623
;  :mk-clause               1151
;  :num-allocs              4939098
;  :num-checks              479
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            224917)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ (- $k@120@02 $k@133@02) $k@143@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3711
;  :arith-add-rows          103
;  :arith-assert-diseq      185
;  :arith-assert-lower      553
;  :arith-assert-upper      354
;  :arith-bound-prop        13
;  :arith-conflicts         47
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1098
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2625
;  :mk-clause               1153
;  :num-allocs              4939098
;  :num-checks              480
;  :propagations            520
;  :quant-instantiations    213
;  :rlimit-count            225005
;  :time                    0.01)
(assert (< $k@153@02 (+ (- $k@120@02 $k@133@02) $k@143@02)))
(assert (<= $Perm.No (- (+ (- $k@120@02 $k@133@02) $k@143@02) $k@153@02)))
(assert (<= (- (+ (- $k@120@02 $k@133@02) $k@143@02) $k@153@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@120@02 $k@133@02) $k@143@02) $k@153@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3711
;  :arith-add-rows          104
;  :arith-assert-diseq      185
;  :arith-assert-lower      555
;  :arith-assert-upper      355
;  :arith-bound-prop        13
;  :arith-conflicts         47
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        9
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1098
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2628
;  :mk-clause               1153
;  :num-allocs              4939098
;  :num-checks              481
;  :propagations            520
;  :quant-instantiations    213
;  :rlimit-count            225246
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@120@02 $k@133@02) $k@143@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3711
;  :arith-add-rows          104
;  :arith-assert-diseq      185
;  :arith-assert-lower      555
;  :arith-assert-upper      356
;  :arith-bound-prop        13
;  :arith-conflicts         48
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         68
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1098
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2629
;  :mk-clause               1153
;  :num-allocs              4939098
;  :num-checks              482
;  :propagations            520
;  :quant-instantiations    213
;  :rlimit-count            225335
;  :time                    0.00)
(declare-const $k@154@02 $Perm)
(assert ($Perm.isReadVar $k@154@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3711
;  :arith-add-rows          104
;  :arith-assert-diseq      186
;  :arith-assert-lower      557
;  :arith-assert-upper      357
;  :arith-bound-prop        13
;  :arith-conflicts         48
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         68
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1098
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2633
;  :mk-clause               1155
;  :num-allocs              4939098
;  :num-checks              483
;  :propagations            521
;  :quant-instantiations    213
;  :rlimit-count            225531
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3711
;  :arith-add-rows          104
;  :arith-assert-diseq      186
;  :arith-assert-lower      557
;  :arith-assert-upper      358
;  :arith-bound-prop        13
;  :arith-conflicts         49
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         69
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1098
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2634
;  :mk-clause               1155
;  :num-allocs              4939098
;  :num-checks              484
;  :propagations            521
;  :quant-instantiations    213
;  :rlimit-count            225612
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@154@02 $Perm.No) (< $Perm.No $k@154@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3711
;  :arith-add-rows          104
;  :arith-assert-diseq      186
;  :arith-assert-lower      557
;  :arith-assert-upper      358
;  :arith-bound-prop        13
;  :arith-conflicts         49
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         69
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1098
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2634
;  :mk-clause               1155
;  :num-allocs              4939098
;  :num-checks              485
;  :propagations            521
;  :quant-instantiations    213
;  :rlimit-count            225662)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  $t@138@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3711
;  :arith-add-rows          104
;  :arith-assert-diseq      186
;  :arith-assert-lower      557
;  :arith-assert-upper      358
;  :arith-bound-prop        13
;  :arith-conflicts         49
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         69
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1098
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2634
;  :mk-clause               1155
;  :num-allocs              4939098
;  :num-checks              486
;  :propagations            521
;  :quant-instantiations    213
;  :rlimit-count            225673
;  :time                    0.01)
(push) ; 9
(assert (not (not (= (+ (- $k@121@02 $k@134@02) $k@145@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          104
;  :arith-assert-diseq      186
;  :arith-assert-lower      557
;  :arith-assert-upper      359
;  :arith-bound-prop        13
;  :arith-conflicts         50
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         69
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2636
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              487
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            225753
;  :time                    0.00)
(assert (< $k@154@02 (+ (- $k@121@02 $k@134@02) $k@145@02)))
(assert (<= $Perm.No (- (+ (- $k@121@02 $k@134@02) $k@145@02) $k@154@02)))
(assert (<= (- (+ (- $k@121@02 $k@134@02) $k@145@02) $k@154@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@121@02 $k@134@02) $k@145@02) $k@154@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          106
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      360
;  :arith-bound-prop        13
;  :arith-conflicts         50
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         69
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2639
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              488
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            225989
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@117@02 $k@130@02) $k@137@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          106
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      361
;  :arith-bound-prop        13
;  :arith-conflicts         51
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         70
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2640
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              489
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            226070
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  $t@138@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          106
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      361
;  :arith-bound-prop        13
;  :arith-conflicts         51
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         70
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2640
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              490
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            226081
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@121@02 $k@134@02) $k@145@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          106
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      362
;  :arith-bound-prop        13
;  :arith-conflicts         52
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2641
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              491
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            226162
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          106
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      362
;  :arith-bound-prop        13
;  :arith-conflicts         52
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2641
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              492
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            226210
;  :time                    0.00)
; [eval] diz.Read_m.Main_nand_read == diz
(push) ; 9
(assert (not (< $Perm.No $k@115@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          106
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      362
;  :arith-bound-prop        13
;  :arith-conflicts         52
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        9
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2641
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              493
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            226258
;  :time                    0.03)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@120@02 $k@133@02) $k@143@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          106
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      363
;  :arith-bound-prop        13
;  :arith-conflicts         53
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-offset-eqs        9
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2642
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              494
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            226347)
(set-option :timeout 0)
(push) ; 9
(assert (not (= $t@144@02 diz@57@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3712
;  :arith-add-rows          106
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      363
;  :arith-bound-prop        13
;  :arith-conflicts         53
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-offset-eqs        9
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 523
;  :datatype-occurs-check   255
;  :datatype-splits         439
;  :decisions               631
;  :del-clause              1100
;  :final-checks            93
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2642
;  :mk-clause               1157
;  :num-allocs              4939098
;  :num-checks              495
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            226358)
(assert (= $t@144@02 diz@57@02))
(pop) ; 8
(push) ; 8
; [else-branch: 54 | !(First:(Second:(Second:(Second:($t@114@02))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
          2)
        (- 0 2))))))
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3913
;  :arith-add-rows          107
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      363
;  :arith-bound-prop        13
;  :arith-conflicts         53
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-offset-eqs        9
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    228
;  :datatype-constructor-ax 573
;  :datatype-occurs-check   267
;  :datatype-splits         475
;  :decisions               680
;  :del-clause              1114
;  :final-checks            96
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2682
;  :mk-clause               1158
;  :num-allocs              4939098
;  :num-checks              496
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            227988
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4080
;  :arith-add-rows          107
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      363
;  :arith-bound-prop        13
;  :arith-conflicts         53
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-offset-eqs        9
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 623
;  :datatype-occurs-check   279
;  :datatype-splits         511
;  :decisions               729
;  :del-clause              1115
;  :final-checks            99
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2722
;  :mk-clause               1159
;  :num-allocs              4939098
;  :num-checks              497
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            229300
;  :time                    0.01)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4247
;  :arith-add-rows          107
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      363
;  :arith-bound-prop        13
;  :arith-conflicts         53
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-offset-eqs        9
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 673
;  :datatype-occurs-check   291
;  :datatype-splits         547
;  :decisions               778
;  :del-clause              1116
;  :final-checks            102
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2762
;  :mk-clause               1160
;  :num-allocs              4939098
;  :num-checks              498
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            230612
;  :time                    0.01)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4414
;  :arith-add-rows          107
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      363
;  :arith-bound-prop        13
;  :arith-conflicts         53
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-offset-eqs        9
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    231
;  :datatype-constructor-ax 723
;  :datatype-occurs-check   303
;  :datatype-splits         583
;  :decisions               827
;  :del-clause              1117
;  :final-checks            105
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2802
;  :mk-clause               1161
;  :num-allocs              4939098
;  :num-checks              499
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            231924
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4581
;  :arith-add-rows          107
;  :arith-assert-diseq      186
;  :arith-assert-lower      559
;  :arith-assert-upper      363
;  :arith-bound-prop        13
;  :arith-conflicts         53
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         72
;  :arith-offset-eqs        9
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 773
;  :datatype-occurs-check   315
;  :datatype-splits         619
;  :decisions               876
;  :del-clause              1118
;  :final-checks            108
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2842
;  :mk-clause               1162
;  :num-allocs              4939098
;  :num-checks              500
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            233236
;  :time                    0.00)
(declare-const $t@155@02 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@115@02)
    (= $t@155@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))))
  (implies
    (< $Perm.No (- $k@97@02 $k@122@02))
    (= $t@155@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))))))
(assert (<= $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02))))
(assert (<= (+ $k@115@02 (- $k@97@02 $k@122@02)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))
  (not (= diz@57@02 $Ref.null))))
; [eval] !(diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2)
; [eval] diz.Read_m.Main_process_state[2] != -1 || diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_process_state[2] != -1
; [eval] diz.Read_m.Main_process_state[2]
(push) ; 8
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4588
;  :arith-add-rows          108
;  :arith-assert-diseq      186
;  :arith-assert-lower      560
;  :arith-assert-upper      365
;  :arith-bound-prop        13
;  :arith-conflicts         54
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         73
;  :arith-offset-eqs        9
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 773
;  :datatype-occurs-check   315
;  :datatype-splits         619
;  :decisions               876
;  :del-clause              1118
;  :final-checks            108
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2847
;  :mk-clause               1162
;  :num-allocs              4939098
;  :num-checks              501
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            233608
;  :time                    0.01)
(push) ; 8
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4588
;  :arith-add-rows          108
;  :arith-assert-diseq      186
;  :arith-assert-lower      560
;  :arith-assert-upper      365
;  :arith-bound-prop        13
;  :arith-conflicts         54
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         73
;  :arith-offset-eqs        9
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 773
;  :datatype-occurs-check   315
;  :datatype-splits         619
;  :decisions               876
;  :del-clause              1118
;  :final-checks            108
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2848
;  :mk-clause               1162
;  :num-allocs              4939098
;  :num-checks              502
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            233688
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4588
;  :arith-add-rows          108
;  :arith-assert-diseq      186
;  :arith-assert-lower      560
;  :arith-assert-upper      365
;  :arith-bound-prop        13
;  :arith-conflicts         54
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         73
;  :arith-offset-eqs        9
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 773
;  :datatype-occurs-check   315
;  :datatype-splits         619
;  :decisions               876
;  :del-clause              1118
;  :final-checks            108
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2848
;  :mk-clause               1162
;  :num-allocs              4939098
;  :num-checks              503
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            233703)
; [eval] -1
(push) ; 8
; [then-branch: 67 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1 | live]
; [else-branch: 67 | First:(Second:(Second:(Second:($t@114@02))))[2] == -1 | live]
(push) ; 9
; [then-branch: 67 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      2)
    (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 67 | First:(Second:(Second:(Second:($t@114@02))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    2)
  (- 0 1)))
; [eval] diz.Read_m.Main_event_state[2] != -2
; [eval] diz.Read_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4589
;  :arith-add-rows          109
;  :arith-assert-diseq      186
;  :arith-assert-lower      560
;  :arith-assert-upper      366
;  :arith-bound-prop        13
;  :arith-conflicts         55
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 773
;  :datatype-occurs-check   315
;  :datatype-splits         619
;  :decisions               876
;  :del-clause              1118
;  :final-checks            108
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2850
;  :mk-clause               1162
;  :num-allocs              4939098
;  :num-checks              504
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            233959
;  :time                    0.01)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4589
;  :arith-add-rows          109
;  :arith-assert-diseq      186
;  :arith-assert-lower      560
;  :arith-assert-upper      366
;  :arith-bound-prop        13
;  :arith-conflicts         55
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 773
;  :datatype-occurs-check   315
;  :datatype-splits         619
;  :decisions               876
;  :del-clause              1118
;  :final-checks            108
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2851
;  :mk-clause               1162
;  :num-allocs              4939098
;  :num-checks              505
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            234039
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4589
;  :arith-add-rows          109
;  :arith-assert-diseq      186
;  :arith-assert-lower      560
;  :arith-assert-upper      366
;  :arith-bound-prop        13
;  :arith-conflicts         55
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 773
;  :datatype-occurs-check   315
;  :datatype-splits         619
;  :decisions               876
;  :del-clause              1118
;  :final-checks            108
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2851
;  :mk-clause               1162
;  :num-allocs              4939098
;  :num-checks              506
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            234054)
; [eval] -2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 8
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4739
;  :arith-add-rows          109
;  :arith-assert-diseq      186
;  :arith-assert-lower      560
;  :arith-assert-upper      366
;  :arith-bound-prop        13
;  :arith-conflicts         55
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         74
;  :arith-offset-eqs        9
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 811
;  :datatype-occurs-check   327
;  :datatype-splits         654
;  :decisions               913
;  :del-clause              1119
;  :final-checks            111
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2892
;  :mk-clause               1163
;  :num-allocs              4939098
;  :num-checks              507
;  :propagations            522
;  :quant-instantiations    213
;  :rlimit-count            235366
;  :time                    0.00)
(push) ; 8
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4891
;  :arith-add-rows          110
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      371
;  :arith-bound-prop        13
;  :arith-conflicts         55
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         76
;  :arith-offset-eqs        9
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2950
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              508
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            236867
;  :time                    0.00)
; [then-branch: 68 | !(First:(Second:(Second:(Second:($t@114@02))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))[2] != -2) | live]
; [else-branch: 68 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))[2] != -2 | live]
(push) ; 8
; [then-branch: 68 | !(First:(Second:(Second:(Second:($t@114@02))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
          2)
        (- 0 2))))))
; [exec]
; __flatten_30__20 := diz.Read_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4893
;  :arith-add-rows          111
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      372
;  :arith-bound-prop        13
;  :arith-conflicts         56
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         77
;  :arith-offset-eqs        9
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2953
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              509
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237179
;  :time                    0.00)
; [exec]
; __flatten_29__19 := __flatten_30__20.Main_nand
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4893
;  :arith-add-rows          111
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      372
;  :arith-bound-prop        13
;  :arith-conflicts         56
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         77
;  :arith-offset-eqs        9
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2953
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              510
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237190)
(push) ; 9
(assert (not (< $Perm.No (- $k@99@02 $k@124@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4893
;  :arith-add-rows          111
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      372
;  :arith-bound-prop        13
;  :arith-conflicts         56
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         77
;  :arith-offset-eqs        9
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2953
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              511
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237209)
(declare-const __flatten_29__19@156@02 $Ref)
(assert (=
  __flatten_29__19@156@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
; [exec]
; __flatten_33__23 := diz.Read_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4894
;  :arith-add-rows          112
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      373
;  :arith-bound-prop        13
;  :arith-conflicts         57
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         78
;  :arith-offset-eqs        9
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2955
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              512
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237459
;  :time                    0.00)
; [exec]
; __flatten_32__22 := __flatten_33__23.Main_nand
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4894
;  :arith-add-rows          112
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      373
;  :arith-bound-prop        13
;  :arith-conflicts         57
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         78
;  :arith-offset-eqs        9
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2955
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              513
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237470)
(push) ; 9
(assert (not (< $Perm.No (- $k@99@02 $k@124@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4894
;  :arith-add-rows          112
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      373
;  :arith-bound-prop        13
;  :arith-conflicts         57
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         78
;  :arith-offset-eqs        9
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2955
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              514
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237489)
(declare-const __flatten_32__22@157@02 $Ref)
(assert (=
  __flatten_32__22@157@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
; [exec]
; __flatten_35__25 := diz.Read_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4895
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2957
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              515
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237634)
; [exec]
; __flatten_34__24 := __flatten_35__25.Main_nand
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4895
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2957
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              516
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237645)
(push) ; 9
(assert (not (< $Perm.No (- $k@99@02 $k@124@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4895
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 846
;  :datatype-occurs-check   334
;  :datatype-splits         687
;  :decisions               949
;  :del-clause              1137
;  :final-checks            113
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             2957
;  :mk-clause               1181
;  :num-allocs              4939098
;  :num-checks              517
;  :propagations            530
;  :quant-instantiations    217
;  :rlimit-count            237664)
(declare-const __flatten_34__24@158@02 $Ref)
(assert (=
  __flatten_34__24@158@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))
; [exec]
; __flatten_31__21 := !(__flatten_32__22.Nand_gate_A && __flatten_34__24.Nand_gate_B)
; [eval] !(__flatten_32__22.Nand_gate_A && __flatten_34__24.Nand_gate_B)
; [eval] __flatten_32__22.Nand_gate_A && __flatten_34__24.Nand_gate_B
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  __flatten_32__22@157@02)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5078
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 897
;  :datatype-occurs-check   346
;  :datatype-splits         724
;  :decisions               997
;  :del-clause              1139
;  :final-checks            116
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3004
;  :mk-clause               1183
;  :num-allocs              4939098
;  :num-checks              518
;  :propagations            531
;  :quant-instantiations    217
;  :rlimit-count            239147
;  :time                    0.01)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5540
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3115
;  :mk-clause               1185
;  :num-allocs              4939098
;  :num-checks              521
;  :propagations            533
;  :quant-instantiations    217
;  :rlimit-count            242735
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5540
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3116
;  :mk-clause               1185
;  :num-allocs              4939098
;  :num-checks              522
;  :propagations            533
;  :quant-instantiations    217
;  :rlimit-count            242815)
(declare-const $t@159@02 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5540
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3117
;  :mk-clause               1185
;  :num-allocs              4939098
;  :num-checks              523
;  :propagations            533
;  :quant-instantiations    217
;  :rlimit-count            242895)
(declare-const $t@160@02 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5540
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3118
;  :mk-clause               1185
;  :num-allocs              4939098
;  :num-checks              524
;  :propagations            533
;  :quant-instantiations    217
;  :rlimit-count            242975
;  :time                    0.00)
(declare-const $t@161@02 $Ref)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5540
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3119
;  :mk-clause               1185
;  :num-allocs              4939098
;  :num-checks              525
;  :propagations            533
;  :quant-instantiations    217
;  :rlimit-count            243055)
(declare-const $t@162@02 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@120@02)
    (=
      $t@159@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@102@02 $k@127@02))
    (=
      $t@159@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@119@02)
    (=
      $t@160@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@101@02 $k@126@02))
    (=
      $t@160@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@118@02)
    (=
      $t@161@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))
  (implies
    (< $Perm.No (- $k@100@02 $k@125@02))
    (=
      $t@161@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@117@02)
    (=
      $t@162@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))
  (implies
    (< $Perm.No (- $k@99@02 $k@124@02))
    (=
      $t@162@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5553
;  :arith-add-rows          113
;  :arith-assert-diseq      189
;  :arith-assert-lower      571
;  :arith-assert-upper      374
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3126
;  :mk-clause               1185
;  :num-allocs              4939098
;  :num-checks              526
;  :propagations            533
;  :quant-instantiations    217
;  :rlimit-count            244060
;  :time                    0.00)
(declare-const $t@163@02 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@103@02 $k@128@02))
    (=
      $t@163@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@121@02)
    (=
      $t@163@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@117@02 (- $k@99@02 $k@124@02))))
(assert (<= (+ $k@117@02 (- $k@99@02 $k@124@02)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@117@02 (- $k@99@02 $k@124@02)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (<= $Perm.No (+ $k@118@02 (- $k@100@02 $k@125@02))))
(assert (<= (+ $k@118@02 (- $k@100@02 $k@125@02)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@118@02 (- $k@100@02 $k@125@02)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (<= $Perm.No (+ $k@119@02 (- $k@101@02 $k@126@02))))
(assert (<= (+ $k@119@02 (- $k@101@02 $k@126@02)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@119@02 (- $k@101@02 $k@126@02)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (<= $Perm.No (+ $k@120@02 (- $k@102@02 $k@127@02))))
(assert (<= (+ $k@120@02 (- $k@102@02 $k@127@02)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@120@02 (- $k@102@02 $k@127@02)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@103@02 $k@128@02) $k@121@02)))
(assert (<= (+ (- $k@103@02 $k@128@02) $k@121@02) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@103@02 $k@128@02) $k@121@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
      $Ref.null))))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  __flatten_32__22@157@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5554
;  :arith-add-rows          115
;  :arith-assert-diseq      189
;  :arith-assert-lower      576
;  :arith-assert-upper      379
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3138
;  :mk-clause               1185
;  :num-allocs              4939098
;  :num-checks              527
;  :propagations            533
;  :quant-instantiations    217
;  :rlimit-count            244917)
(push) ; 9
; [then-branch: 69 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))))))) | live]
; [else-branch: 69 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@114@02)))))))))))) | live]
(push) ; 10
; [then-branch: 69 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@114@02)))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  __flatten_34__24@158@02)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5558
;  :arith-add-rows          115
;  :arith-assert-diseq      189
;  :arith-assert-lower      576
;  :arith-assert-upper      379
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3142
;  :mk-clause               1185
;  :num-allocs              4939098
;  :num-checks              528
;  :propagations            533
;  :quant-instantiations    219
;  :rlimit-count            245279)
(pop) ; 10
(push) ; 10
; [else-branch: 69 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const __flatten_31__21@164@02 Bool)
(assert (=
  __flatten_31__21@164@02
  (not
    (and
      ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
      ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))))))))
; [exec]
; __flatten_29__19.Nand_gate_out := __flatten_31__21
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
  __flatten_29__19@156@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5558
;  :arith-add-rows          115
;  :arith-assert-diseq      189
;  :arith-assert-lower      576
;  :arith-assert-upper      379
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3147
;  :mk-clause               1190
;  :num-allocs              4939098
;  :num-checks              529
;  :propagations            533
;  :quant-instantiations    219
;  :rlimit-count            245710)
(assert (not (= __flatten_29__19@156@02 $Ref.null)))
; Loop head block: Re-establish invariant
(declare-const $k@165@02 $Perm)
(assert ($Perm.isReadVar $k@165@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@165@02 $Perm.No) (< $Perm.No $k@165@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5559
;  :arith-add-rows          115
;  :arith-assert-diseq      190
;  :arith-assert-lower      578
;  :arith-assert-upper      380
;  :arith-bound-prop        13
;  :arith-conflicts         58
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1140
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3152
;  :mk-clause               1192
;  :num-allocs              4939098
;  :num-checks              530
;  :propagations            534
;  :quant-instantiations    219
;  :rlimit-count            245958)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (+ $k@115@02 (- $k@97@02 $k@122@02)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          116
;  :arith-assert-diseq      190
;  :arith-assert-lower      578
;  :arith-assert-upper      381
;  :arith-bound-prop        13
;  :arith-conflicts         59
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         79
;  :arith-offset-eqs        9
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3154
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              531
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246071
;  :time                    0.00)
(assert (< $k@165@02 (+ $k@115@02 (- $k@97@02 $k@122@02))))
(assert (<= $Perm.No (- (+ $k@115@02 (- $k@97@02 $k@122@02)) $k@165@02)))
(assert (<= (- (+ $k@115@02 (- $k@97@02 $k@122@02)) $k@165@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@115@02 (- $k@97@02 $k@122@02)) $k@165@02))
  (not (= diz@57@02 $Ref.null))))
; [eval] diz.Read_m != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          119
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      383
;  :arith-bound-prop        13
;  :arith-conflicts         60
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         80
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3158
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              532
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246368
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= $t@155@02 $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          119
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      383
;  :arith-bound-prop        13
;  :arith-conflicts         60
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         80
;  :arith-offset-eqs        9
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3158
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              533
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246386)
(assert (not (= $t@155@02 $Ref.null)))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          120
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      384
;  :arith-bound-prop        13
;  :arith-conflicts         61
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         81
;  :arith-offset-eqs        9
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3159
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              534
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246520
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          120
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      384
;  :arith-bound-prop        13
;  :arith-conflicts         61
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         81
;  :arith-offset-eqs        9
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3160
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              535
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246600
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          121
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      385
;  :arith-bound-prop        13
;  :arith-conflicts         62
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3161
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              536
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246709
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          121
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      385
;  :arith-bound-prop        13
;  :arith-conflicts         62
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        9
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3162
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              537
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246789)
; [eval] |diz.Read_m.Main_process_state| == 3
; [eval] |diz.Read_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          122
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      386
;  :arith-bound-prop        13
;  :arith-conflicts         63
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         83
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3163
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              538
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246903)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          122
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      386
;  :arith-bound-prop        13
;  :arith-conflicts         63
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         83
;  :arith-offset-eqs        9
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3164
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              539
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            246983
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          123
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      387
;  :arith-bound-prop        13
;  :arith-conflicts         64
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        9
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3165
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              540
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247092)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          123
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      387
;  :arith-bound-prop        13
;  :arith-conflicts         64
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        9
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3166
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              541
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247172)
; [eval] |diz.Read_m.Main_event_state| == 3
; [eval] |diz.Read_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          124
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      388
;  :arith-bound-prop        13
;  :arith-conflicts         65
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         85
;  :arith-offset-eqs        9
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3167
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              542
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247286)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          124
;  :arith-assert-diseq      190
;  :arith-assert-lower      580
;  :arith-assert-upper      388
;  :arith-bound-prop        13
;  :arith-conflicts         65
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         85
;  :arith-offset-eqs        9
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3168
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              543
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247366)
; [eval] (forall i__26: Int :: { diz.Read_m.Main_process_state[i__26] } 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|)
(declare-const i__26@166@02 Int)
(push) ; 9
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state| ==> diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= i__26 && i__26 < |diz.Read_m.Main_process_state|
; [eval] 0 <= i__26
(push) ; 10
; [then-branch: 70 | 0 <= i__26@166@02 | live]
; [else-branch: 70 | !(0 <= i__26@166@02) | live]
(push) ; 11
; [then-branch: 70 | 0 <= i__26@166@02]
(assert (<= 0 i__26@166@02))
; [eval] i__26 < |diz.Read_m.Main_process_state|
; [eval] |diz.Read_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          125
;  :arith-assert-diseq      190
;  :arith-assert-lower      581
;  :arith-assert-upper      389
;  :arith-bound-prop        13
;  :arith-conflicts         66
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         86
;  :arith-offset-eqs        9
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3170
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              544
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247527
;  :time                    0.00)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          125
;  :arith-assert-diseq      190
;  :arith-assert-lower      581
;  :arith-assert-upper      389
;  :arith-bound-prop        13
;  :arith-conflicts         66
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         86
;  :arith-offset-eqs        9
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3171
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              545
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247607)
(pop) ; 11
(push) ; 11
; [else-branch: 70 | !(0 <= i__26@166@02)]
(assert (not (<= 0 i__26@166@02)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 71 | i__26@166@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i__26@166@02 | live]
; [else-branch: 71 | !(i__26@166@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i__26@166@02) | live]
(push) ; 11
; [then-branch: 71 | i__26@166@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i__26@166@02]
(assert (and
  (<
    i__26@166@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
  (<= 0 i__26@166@02)))
; [eval] diz.Read_m.Main_process_state[i__26] == -1 || 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26] == -1
; [eval] diz.Read_m.Main_process_state[i__26]
(push) ; 12
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          126
;  :arith-assert-diseq      190
;  :arith-assert-lower      582
;  :arith-assert-upper      391
;  :arith-bound-prop        13
;  :arith-conflicts         67
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         87
;  :arith-offset-eqs        9
;  :arith-pivots            137
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3174
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              546
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247830)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          126
;  :arith-assert-diseq      190
;  :arith-assert-lower      582
;  :arith-assert-upper      391
;  :arith-bound-prop        13
;  :arith-conflicts         67
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         87
;  :arith-offset-eqs        9
;  :arith-pivots            137
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3175
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              547
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247910)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__26@166@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          126
;  :arith-assert-diseq      190
;  :arith-assert-lower      582
;  :arith-assert-upper      391
;  :arith-bound-prop        13
;  :arith-conflicts         67
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         87
;  :arith-offset-eqs        9
;  :arith-pivots            137
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3175
;  :mk-clause               1194
;  :num-allocs              4939098
;  :num-checks              548
;  :propagations            535
;  :quant-instantiations    219
;  :rlimit-count            247919)
; [eval] -1
(push) ; 12
; [then-branch: 72 | First:(Second:(Second:(Second:($t@114@02))))[i__26@166@02] == -1 | live]
; [else-branch: 72 | First:(Second:(Second:(Second:($t@114@02))))[i__26@166@02] != -1 | live]
(push) ; 13
; [then-branch: 72 | First:(Second:(Second:(Second:($t@114@02))))[i__26@166@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i__26@166@02)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 72 | First:(Second:(Second:(Second:($t@114@02))))[i__26@166@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      i__26@166@02)
    (- 0 1))))
; [eval] 0 <= diz.Read_m.Main_process_state[i__26] && diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] 0 <= diz.Read_m.Main_process_state[i__26]
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          127
;  :arith-assert-diseq      191
;  :arith-assert-lower      585
;  :arith-assert-upper      393
;  :arith-bound-prop        13
;  :arith-conflicts         68
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         88
;  :arith-offset-eqs        9
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3182
;  :mk-clause               1198
;  :num-allocs              4939098
;  :num-checks              549
;  :propagations            537
;  :quant-instantiations    220
;  :rlimit-count            248251)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          127
;  :arith-assert-diseq      191
;  :arith-assert-lower      585
;  :arith-assert-upper      393
;  :arith-bound-prop        13
;  :arith-conflicts         68
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         88
;  :arith-offset-eqs        9
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3183
;  :mk-clause               1198
;  :num-allocs              4939098
;  :num-checks              550
;  :propagations            537
;  :quant-instantiations    220
;  :rlimit-count            248331)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__26@166@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          127
;  :arith-assert-diseq      191
;  :arith-assert-lower      585
;  :arith-assert-upper      393
;  :arith-bound-prop        13
;  :arith-conflicts         68
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         88
;  :arith-offset-eqs        9
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3183
;  :mk-clause               1198
;  :num-allocs              4939098
;  :num-checks              551
;  :propagations            537
;  :quant-instantiations    220
;  :rlimit-count            248340)
(push) ; 14
; [then-branch: 73 | 0 <= First:(Second:(Second:(Second:($t@114@02))))[i__26@166@02] | live]
; [else-branch: 73 | !(0 <= First:(Second:(Second:(Second:($t@114@02))))[i__26@166@02]) | live]
(push) ; 15
; [then-branch: 73 | 0 <= First:(Second:(Second:(Second:($t@114@02))))[i__26@166@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i__26@166@02)))
; [eval] diz.Read_m.Main_process_state[i__26] < |diz.Read_m.Main_event_state|
; [eval] diz.Read_m.Main_process_state[i__26]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          128
;  :arith-assert-diseq      191
;  :arith-assert-lower      585
;  :arith-assert-upper      394
;  :arith-bound-prop        13
;  :arith-conflicts         69
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         89
;  :arith-offset-eqs        9
;  :arith-pivots            142
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3184
;  :mk-clause               1198
;  :num-allocs              4939098
;  :num-checks              552
;  :propagations            537
;  :quant-instantiations    220
;  :rlimit-count            248559)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          128
;  :arith-assert-diseq      191
;  :arith-assert-lower      585
;  :arith-assert-upper      394
;  :arith-bound-prop        13
;  :arith-conflicts         69
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         89
;  :arith-offset-eqs        9
;  :arith-pivots            142
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3185
;  :mk-clause               1198
;  :num-allocs              4939098
;  :num-checks              553
;  :propagations            537
;  :quant-instantiations    220
;  :rlimit-count            248639)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__26@166@02 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          128
;  :arith-assert-diseq      191
;  :arith-assert-lower      585
;  :arith-assert-upper      394
;  :arith-bound-prop        13
;  :arith-conflicts         69
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         89
;  :arith-offset-eqs        9
;  :arith-pivots            142
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3185
;  :mk-clause               1198
;  :num-allocs              4939098
;  :num-checks              554
;  :propagations            537
;  :quant-instantiations    220
;  :rlimit-count            248648)
; [eval] |diz.Read_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          129
;  :arith-assert-diseq      191
;  :arith-assert-lower      585
;  :arith-assert-upper      395
;  :arith-bound-prop        13
;  :arith-conflicts         70
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         90
;  :arith-offset-eqs        9
;  :arith-pivots            144
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3186
;  :mk-clause               1198
;  :num-allocs              4939098
;  :num-checks              555
;  :propagations            537
;  :quant-instantiations    220
;  :rlimit-count            248757
;  :time                    0.00)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          129
;  :arith-assert-diseq      191
;  :arith-assert-lower      585
;  :arith-assert-upper      395
;  :arith-bound-prop        13
;  :arith-conflicts         70
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         90
;  :arith-offset-eqs        9
;  :arith-pivots            144
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1142
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3187
;  :mk-clause               1198
;  :num-allocs              4939098
;  :num-checks              556
;  :propagations            537
;  :quant-instantiations    220
;  :rlimit-count            248837)
(pop) ; 15
(push) ; 15
; [else-branch: 73 | !(0 <= First:(Second:(Second:(Second:($t@114@02))))[i__26@166@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
      i__26@166@02))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 71 | !(i__26@166@02 < |First:(Second:(Second:(Second:($t@114@02))))| && 0 <= i__26@166@02)]
(assert (not
  (and
    (<
      i__26@166@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
    (<= 0 i__26@166@02))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i__26@166@02 Int)) (!
  (implies
    (and
      (<
        i__26@166@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
      (<= 0 i__26@166@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          i__26@166@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i__26@166@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i__26@166@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i__26@166@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          129
;  :arith-assert-diseq      192
;  :arith-assert-lower      586
;  :arith-assert-upper      396
;  :arith-bound-prop        13
;  :arith-conflicts         70
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         90
;  :arith-offset-eqs        9
;  :arith-pivots            144
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3195
;  :mk-clause               1210
;  :num-allocs              4939098
;  :num-checks              557
;  :propagations            539
;  :quant-instantiations    221
;  :rlimit-count            249283)
(assert (forall ((i__26@166@02 Int)) (!
  (implies
    (and
      (<
        i__26@166@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
      (<= 0 i__26@166@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
          i__26@166@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i__26@166@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
            i__26@166@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
    i__26@166@02))
  :qid |prog.l<no position>|)))
(declare-const $k@167@02 $Perm)
(assert ($Perm.isReadVar $k@167@02 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          130
;  :arith-assert-diseq      193
;  :arith-assert-lower      588
;  :arith-assert-upper      398
;  :arith-bound-prop        13
;  :arith-conflicts         71
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         91
;  :arith-offset-eqs        9
;  :arith-pivots            147
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3201
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              558
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            249909)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@167@02 $Perm.No) (< $Perm.No $k@167@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          130
;  :arith-assert-diseq      193
;  :arith-assert-lower      588
;  :arith-assert-upper      398
;  :arith-bound-prop        13
;  :arith-conflicts         71
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         91
;  :arith-offset-eqs        9
;  :arith-pivots            147
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3201
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              559
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            249959)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          130
;  :arith-assert-diseq      193
;  :arith-assert-lower      588
;  :arith-assert-upper      398
;  :arith-bound-prop        13
;  :arith-conflicts         71
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         91
;  :arith-offset-eqs        9
;  :arith-pivots            147
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3202
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              560
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250039
;  :time                    0.01)
(push) ; 9
(assert (not (not (= $k@117@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          130
;  :arith-assert-diseq      193
;  :arith-assert-lower      588
;  :arith-assert-upper      398
;  :arith-bound-prop        13
;  :arith-conflicts         71
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         91
;  :arith-offset-eqs        9
;  :arith-pivots            147
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3202
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              561
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250050
;  :time                    0.01)
(assert (< $k@167@02 $k@117@02))
(assert (<= $Perm.No (- $k@117@02 $k@167@02)))
(assert (<= (- $k@117@02 $k@167@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@117@02 $k@167@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          131
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      400
;  :arith-bound-prop        13
;  :arith-conflicts         72
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        9
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3206
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              562
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250319
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          131
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      400
;  :arith-bound-prop        13
;  :arith-conflicts         72
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        9
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3207
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              563
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250399)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          131
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      400
;  :arith-bound-prop        13
;  :arith-conflicts         72
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        9
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3207
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              564
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250447)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          132
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      401
;  :arith-bound-prop        13
;  :arith-conflicts         73
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         93
;  :arith-offset-eqs        9
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3208
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              565
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250561
;  :time                    0.01)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          132
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      401
;  :arith-bound-prop        13
;  :arith-conflicts         73
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         93
;  :arith-offset-eqs        9
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3209
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              566
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250641)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          132
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      401
;  :arith-bound-prop        13
;  :arith-conflicts         73
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         93
;  :arith-offset-eqs        9
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3209
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              567
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250689
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          133
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      402
;  :arith-bound-prop        13
;  :arith-conflicts         74
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        9
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3210
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              568
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250798)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          133
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      402
;  :arith-bound-prop        13
;  :arith-conflicts         74
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        9
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3211
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              569
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250878)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          133
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      402
;  :arith-bound-prop        13
;  :arith-conflicts         74
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        9
;  :arith-pivots            154
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3211
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              570
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            250926)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          134
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      403
;  :arith-bound-prop        13
;  :arith-conflicts         75
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         95
;  :arith-offset-eqs        9
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3212
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              571
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            251040)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          134
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      403
;  :arith-bound-prop        13
;  :arith-conflicts         75
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         95
;  :arith-offset-eqs        9
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3213
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              572
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            251120
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          134
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      403
;  :arith-bound-prop        13
;  :arith-conflicts         75
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         95
;  :arith-offset-eqs        9
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3213
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              573
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            251168
;  :time                    0.00)
(push) ; 9
(assert (not (=
  __flatten_29__19@156@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          134
;  :arith-assert-diseq      193
;  :arith-assert-lower      590
;  :arith-assert-upper      403
;  :arith-bound-prop        13
;  :arith-conflicts         75
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         95
;  :arith-offset-eqs        9
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3213
;  :mk-clause               1212
;  :num-allocs              4939098
;  :num-checks              574
;  :propagations            540
;  :quant-instantiations    221
;  :rlimit-count            251320)
(declare-const $k@168@02 $Perm)
(assert ($Perm.isReadVar $k@168@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          135
;  :arith-assert-diseq      194
;  :arith-assert-lower      592
;  :arith-assert-upper      405
;  :arith-bound-prop        13
;  :arith-conflicts         76
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         96
;  :arith-offset-eqs        9
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3218
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              575
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            251577
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@168@02 $Perm.No) (< $Perm.No $k@168@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          135
;  :arith-assert-diseq      194
;  :arith-assert-lower      592
;  :arith-assert-upper      405
;  :arith-bound-prop        13
;  :arith-conflicts         76
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         96
;  :arith-offset-eqs        9
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3218
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              576
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            251627)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          135
;  :arith-assert-diseq      194
;  :arith-assert-lower      592
;  :arith-assert-upper      405
;  :arith-bound-prop        13
;  :arith-conflicts         76
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         96
;  :arith-offset-eqs        9
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3219
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              577
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            251707
;  :time                    0.01)
(push) ; 9
(assert (not (not (= $k@118@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          135
;  :arith-assert-diseq      194
;  :arith-assert-lower      592
;  :arith-assert-upper      405
;  :arith-bound-prop        13
;  :arith-conflicts         76
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         96
;  :arith-offset-eqs        9
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3219
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              578
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            251718
;  :time                    0.01)
(assert (< $k@168@02 $k@118@02))
(assert (<= $Perm.No (- $k@118@02 $k@168@02)))
(assert (<= (- $k@118@02 $k@168@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@118@02 $k@168@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_a != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          136
;  :arith-assert-diseq      194
;  :arith-assert-lower      594
;  :arith-assert-upper      407
;  :arith-bound-prop        13
;  :arith-conflicts         77
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         97
;  :arith-offset-eqs        9
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3223
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              579
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            251998
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          136
;  :arith-assert-diseq      194
;  :arith-assert-lower      594
;  :arith-assert-upper      407
;  :arith-bound-prop        13
;  :arith-conflicts         77
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         97
;  :arith-offset-eqs        9
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3224
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              580
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            252078)
(push) ; 9
(assert (not (< $Perm.No $k@118@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          136
;  :arith-assert-diseq      194
;  :arith-assert-lower      594
;  :arith-assert-upper      407
;  :arith-bound-prop        13
;  :arith-conflicts         77
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         97
;  :arith-offset-eqs        9
;  :arith-pivots            163
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3224
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              581
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            252126)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          137
;  :arith-assert-diseq      194
;  :arith-assert-lower      594
;  :arith-assert-upper      408
;  :arith-bound-prop        13
;  :arith-conflicts         78
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         98
;  :arith-offset-eqs        9
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3225
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              582
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            252235)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          137
;  :arith-assert-diseq      194
;  :arith-assert-lower      594
;  :arith-assert-upper      408
;  :arith-bound-prop        13
;  :arith-conflicts         78
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         98
;  :arith-offset-eqs        9
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3226
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              583
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            252315)
(push) ; 9
(assert (not (< $Perm.No $k@118@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          137
;  :arith-assert-diseq      194
;  :arith-assert-lower      594
;  :arith-assert-upper      408
;  :arith-bound-prop        13
;  :arith-conflicts         78
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         98
;  :arith-offset-eqs        9
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3226
;  :mk-clause               1214
;  :num-allocs              4939098
;  :num-checks              584
;  :propagations            541
;  :quant-instantiations    221
;  :rlimit-count            252363)
(declare-const $k@169@02 $Perm)
(assert ($Perm.isReadVar $k@169@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          138
;  :arith-assert-diseq      195
;  :arith-assert-lower      596
;  :arith-assert-upper      410
;  :arith-bound-prop        13
;  :arith-conflicts         79
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         99
;  :arith-offset-eqs        9
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3231
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              585
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            252626
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@169@02 $Perm.No) (< $Perm.No $k@169@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          138
;  :arith-assert-diseq      195
;  :arith-assert-lower      596
;  :arith-assert-upper      410
;  :arith-bound-prop        13
;  :arith-conflicts         79
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         99
;  :arith-offset-eqs        9
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3231
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              586
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            252676)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          138
;  :arith-assert-diseq      195
;  :arith-assert-lower      596
;  :arith-assert-upper      410
;  :arith-bound-prop        13
;  :arith-conflicts         79
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         99
;  :arith-offset-eqs        9
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3232
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              587
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            252756
;  :time                    0.00)
(push) ; 9
(assert (not (not (= $k@119@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          138
;  :arith-assert-diseq      195
;  :arith-assert-lower      596
;  :arith-assert-upper      410
;  :arith-bound-prop        13
;  :arith-conflicts         79
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         99
;  :arith-offset-eqs        9
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3232
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              588
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            252767
;  :time                    0.01)
(assert (< $k@169@02 $k@119@02))
(assert (<= $Perm.No (- $k@119@02 $k@169@02)))
(assert (<= (- $k@119@02 $k@169@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@119@02 $k@169@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_write_b != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          139
;  :arith-assert-diseq      195
;  :arith-assert-lower      598
;  :arith-assert-upper      412
;  :arith-bound-prop        13
;  :arith-conflicts         80
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         100
;  :arith-offset-eqs        9
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3236
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              589
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            253036)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          139
;  :arith-assert-diseq      195
;  :arith-assert-lower      598
;  :arith-assert-upper      412
;  :arith-bound-prop        13
;  :arith-conflicts         80
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         100
;  :arith-offset-eqs        9
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3237
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              590
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            253116
;  :time                    0.02)
(push) ; 9
(assert (not (< $Perm.No $k@119@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          139
;  :arith-assert-diseq      195
;  :arith-assert-lower      598
;  :arith-assert-upper      412
;  :arith-bound-prop        13
;  :arith-conflicts         80
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         100
;  :arith-offset-eqs        9
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3237
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              591
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            253164
;  :time                    0.00)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          140
;  :arith-assert-diseq      195
;  :arith-assert-lower      598
;  :arith-assert-upper      413
;  :arith-bound-prop        13
;  :arith-conflicts         81
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         101
;  :arith-offset-eqs        9
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3238
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              592
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            253278
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          140
;  :arith-assert-diseq      195
;  :arith-assert-lower      598
;  :arith-assert-upper      413
;  :arith-bound-prop        13
;  :arith-conflicts         81
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         101
;  :arith-offset-eqs        9
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3239
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              593
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            253358)
(push) ; 9
(assert (not (< $Perm.No $k@119@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          140
;  :arith-assert-diseq      195
;  :arith-assert-lower      598
;  :arith-assert-upper      413
;  :arith-bound-prop        13
;  :arith-conflicts         81
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         101
;  :arith-offset-eqs        9
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3239
;  :mk-clause               1216
;  :num-allocs              4939098
;  :num-checks              594
;  :propagations            542
;  :quant-instantiations    221
;  :rlimit-count            253406
;  :time                    0.02)
(declare-const $k@170@02 $Perm)
(assert ($Perm.isReadVar $k@170@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          141
;  :arith-assert-diseq      196
;  :arith-assert-lower      600
;  :arith-assert-upper      415
;  :arith-bound-prop        13
;  :arith-conflicts         82
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3244
;  :mk-clause               1218
;  :num-allocs              4939098
;  :num-checks              595
;  :propagations            543
;  :quant-instantiations    221
;  :rlimit-count            253663)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@170@02 $Perm.No) (< $Perm.No $k@170@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          141
;  :arith-assert-diseq      196
;  :arith-assert-lower      600
;  :arith-assert-upper      415
;  :arith-bound-prop        13
;  :arith-conflicts         82
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3244
;  :mk-clause               1218
;  :num-allocs              4939098
;  :num-checks              596
;  :propagations            543
;  :quant-instantiations    221
;  :rlimit-count            253713)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          141
;  :arith-assert-diseq      196
;  :arith-assert-lower      600
;  :arith-assert-upper      415
;  :arith-bound-prop        13
;  :arith-conflicts         82
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3245
;  :mk-clause               1218
;  :num-allocs              4939098
;  :num-checks              597
;  :propagations            543
;  :quant-instantiations    221
;  :rlimit-count            253793)
(push) ; 9
(assert (not (not (= $k@120@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          141
;  :arith-assert-diseq      196
;  :arith-assert-lower      600
;  :arith-assert-upper      415
;  :arith-bound-prop        13
;  :arith-conflicts         82
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        9
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3245
;  :mk-clause               1218
;  :num-allocs              4939098
;  :num-checks              598
;  :propagations            543
;  :quant-instantiations    221
;  :rlimit-count            253804
;  :time                    0.01)
(assert (< $k@170@02 $k@120@02))
(assert (<= $Perm.No (- $k@120@02 $k@170@02)))
(assert (<= (- $k@120@02 $k@170@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@120@02 $k@170@02))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $Ref.null))))
; [eval] diz.Read_m.Main_nand_read != null
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          142
;  :arith-assert-diseq      196
;  :arith-assert-lower      602
;  :arith-assert-upper      417
;  :arith-bound-prop        13
;  :arith-conflicts         83
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         103
;  :arith-offset-eqs        9
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3249
;  :mk-clause               1218
;  :num-allocs              4939098
;  :num-checks              599
;  :propagations            543
;  :quant-instantiations    221
;  :rlimit-count            254084)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          142
;  :arith-assert-diseq      196
;  :arith-assert-lower      602
;  :arith-assert-upper      417
;  :arith-bound-prop        13
;  :arith-conflicts         83
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         103
;  :arith-offset-eqs        9
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3250
;  :mk-clause               1218
;  :num-allocs              4939098
;  :num-checks              600
;  :propagations            543
;  :quant-instantiations    221
;  :rlimit-count            254164
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@120@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          142
;  :arith-assert-diseq      196
;  :arith-assert-lower      602
;  :arith-assert-upper      417
;  :arith-bound-prop        13
;  :arith-conflicts         83
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         103
;  :arith-offset-eqs        9
;  :arith-pivots            179
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3250
;  :mk-clause               1218
;  :num-allocs              4939098
;  :num-checks              601
;  :propagations            543
;  :quant-instantiations    221
;  :rlimit-count            254212
;  :time                    0.00)
(declare-const $k@171@02 $Perm)
(assert ($Perm.isReadVar $k@171@02 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          143
;  :arith-assert-diseq      197
;  :arith-assert-lower      604
;  :arith-assert-upper      419
;  :arith-bound-prop        13
;  :arith-conflicts         84
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        9
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3255
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              602
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            254469)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          143
;  :arith-assert-diseq      197
;  :arith-assert-lower      604
;  :arith-assert-upper      419
;  :arith-bound-prop        13
;  :arith-conflicts         84
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        9
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3256
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              603
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            254549
;  :time                    0.03)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          143
;  :arith-assert-diseq      197
;  :arith-assert-lower      604
;  :arith-assert-upper      419
;  :arith-bound-prop        13
;  :arith-conflicts         84
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        9
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3256
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              604
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            254597)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@171@02 $Perm.No) (< $Perm.No $k@171@02))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          143
;  :arith-assert-diseq      197
;  :arith-assert-lower      604
;  :arith-assert-upper      419
;  :arith-bound-prop        13
;  :arith-conflicts         84
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        9
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3256
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              605
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            254647)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@121@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          143
;  :arith-assert-diseq      197
;  :arith-assert-lower      604
;  :arith-assert-upper      419
;  :arith-bound-prop        13
;  :arith-conflicts         84
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        9
;  :arith-pivots            181
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3256
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              606
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            254658
;  :time                    0.03)
(assert (< $k@171@02 $k@121@02))
(assert (<= $Perm.No (- $k@121@02 $k@171@02)))
(assert (<= (- $k@121@02 $k@171@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@02 $k@171@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02))))))))))
      $Ref.null))))
; [eval] diz.Read_m.Main_nand.Nand_gate_m == diz.Read_m
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          144
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      421
;  :arith-bound-prop        13
;  :arith-conflicts         85
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         105
;  :arith-offset-eqs        9
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3260
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              607
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            254938)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.14s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          144
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      421
;  :arith-bound-prop        13
;  :arith-conflicts         85
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         105
;  :arith-offset-eqs        9
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3261
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              608
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            255018
;  :time                    0.14)
(push) ; 9
(assert (not (< $Perm.No $k@117@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          144
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      421
;  :arith-bound-prop        13
;  :arith-conflicts         85
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         105
;  :arith-offset-eqs        9
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3261
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              609
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            255066)
(push) ; 9
(assert (not (< $Perm.No $k@121@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          144
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      421
;  :arith-bound-prop        13
;  :arith-conflicts         85
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         105
;  :arith-offset-eqs        9
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3261
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              610
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            255114
;  :time                    0.02)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          145
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      422
;  :arith-bound-prop        13
;  :arith-conflicts         86
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         106
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3262
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              611
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            255223
;  :time                    0.04)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          145
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      422
;  :arith-bound-prop        13
;  :arith-conflicts         86
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         106
;  :arith-offset-eqs        9
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3263
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              612
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            255299)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))))))))))))))))))
  $t@155@02))
; [eval] diz.Read_m.Main_nand_read == diz
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ $k@115@02 (- $k@97@02 $k@122@02)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5561
;  :arith-add-rows          146
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      423
;  :arith-bound-prop        13
;  :arith-conflicts         87
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3265
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              613
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            255466
;  :time                    0.00)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@114@02)) $t@155@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5561
;  :arith-add-rows          146
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      423
;  :arith-bound-prop        13
;  :arith-conflicts         87
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3265
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              614
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            255477
;  :time                    0.01)
(push) ; 9
(assert (not (< $Perm.No $k@120@02)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5561
;  :arith-add-rows          146
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      423
;  :arith-bound-prop        13
;  :arith-conflicts         87
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1020
;  :datatype-occurs-check   382
;  :datatype-splits         831
;  :decisions               1116
;  :del-clause              1158
;  :final-checks            125
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3265
;  :mk-clause               1220
;  :num-allocs              4939098
;  :num-checks              615
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            255525)
(pop) ; 8
(push) ; 8
; [else-branch: 68 | First:(Second:(Second:(Second:($t@114@02))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@114@02))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@02)))))))
        2)
      (- 0 2)))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@96@02))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@77@02)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5683
;  :arith-add-rows          147
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      423
;  :arith-bound-prop        13
;  :arith-conflicts         87
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1057
;  :datatype-occurs-check   391
;  :datatype-splits         855
;  :decisions               1152
;  :del-clause              1208
;  :final-checks            128
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3293
;  :mk-clause               1221
;  :num-allocs              4939098
;  :num-checks              616
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            256827
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02))))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5831
;  :arith-add-rows          147
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      423
;  :arith-bound-prop        13
;  :arith-conflicts         87
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    242
;  :datatype-constructor-ax 1106
;  :datatype-occurs-check   400
;  :datatype-splits         900
;  :decisions               1200
;  :del-clause              1209
;  :final-checks            131
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3342
;  :mk-clause               1222
;  :num-allocs              4939098
;  :num-checks              617
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            258031
;  :time                    0.02)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5979
;  :arith-add-rows          147
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      423
;  :arith-bound-prop        13
;  :arith-conflicts         87
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    243
;  :datatype-constructor-ax 1155
;  :datatype-occurs-check   409
;  :datatype-splits         945
;  :decisions               1248
;  :del-clause              1210
;  :final-checks            134
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3391
;  :mk-clause               1223
;  :num-allocs              4939098
;  :num-checks              618
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            259235
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02))))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6127
;  :arith-add-rows          147
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      423
;  :arith-bound-prop        13
;  :arith-conflicts         87
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    244
;  :datatype-constructor-ax 1204
;  :datatype-occurs-check   418
;  :datatype-splits         990
;  :decisions               1296
;  :del-clause              1211
;  :final-checks            137
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3440
;  :mk-clause               1224
;  :num-allocs              4939098
;  :num-checks              619
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            260439
;  :time                    0.01)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6275
;  :arith-add-rows          147
;  :arith-assert-diseq      197
;  :arith-assert-lower      606
;  :arith-assert-upper      423
;  :arith-bound-prop        13
;  :arith-conflicts         87
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 1253
;  :datatype-occurs-check   427
;  :datatype-splits         1035
;  :decisions               1344
;  :del-clause              1212
;  :final-checks            140
;  :interface-eqs           17
;  :max-generation          4
;  :max-memory              4.82
;  :memory                  4.82
;  :minimized-lits          2
;  :mk-bool-var             3489
;  :mk-clause               1225
;  :num-allocs              4939098
;  :num-checks              620
;  :propagations            544
;  :quant-instantiations    221
;  :rlimit-count            261643
;  :time                    0.00)
(declare-const $t@172@02 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@97@02)
    (= $t@172@02 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@96@02))))
  (implies
    (< $Perm.No (- $k@61@02 $k@104@02))
    (=
      $t@172@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@60@02)))))))
(assert (<= $Perm.No (+ $k@97@02 (- $k@61@02 $k@104@02))))
(assert (<= (+ $k@97@02 (- $k@61@02 $k@104@02)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@97@02 (- $k@61@02 $k@104@02)))
  (not (= diz@57@02 $Ref.null))))
; [eval] !true
; [then-branch: 74 | False | dead]
; [else-branch: 74 | True | live]
(push) ; 5
; [else-branch: 74 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
