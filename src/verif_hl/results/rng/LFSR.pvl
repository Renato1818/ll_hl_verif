class LFSR { 
    //Auto-generated fields of the LFSR class:
    Main m;
    int LFSR_var;
    int outbit;
    
    //Auto-generated constructor:
    //Auto-generated specifications of the constructor LFSR:
    ensures Perm(m, write) **
            Perm(LFSR_var, write) **
            Perm(outbit, write) **
            (m == m_param) ;
    LFSR(Main m_param){
        m = m_param;
    }
    
    
    //Auto-generated functions:
    //Auto-generated specifications of the function run:
    context Perm(m, read) **
            (m != null) **
            Perm(m.rn_lfsr, read) **
            (m.rn_lfsr == this) ;
    void run(){
        lock m;
        m.process_state = m.process_state[1 -> 2];
        m.event_state = m.event_state[2 -> 2];
        loop_invariant true ** 
                Perm(m, read) ** 
                (m != null) ** 
                held(m)  ** 
                m.global_permission_invariant() ** 
                (m.rn_lfsr == this) ;
        while (m.process_state[1] != -1 || m.event_state[2] != -2) {
            unlock m;
            lock m;
        }
        loop_invariant true ** 
                Perm(m, read) ** 
                (m != null) ** 
                held(m)  ** 
                m.global_permission_invariant() ** 
                (m.rn_lfsr == this) ;
        while (true) {
            if (!m.rn.reset) {
                m.rn.LFSR_reg = 1;
            } else {
                if (m.rn.loadseed_i) {
                    if (m.rn.seed_i == 0) {
                        m.rn.LFSR_reg = 0;
                    } else {
                        m.rn.LFSR_reg = m.rn.seed_i % m.rn.exp2_(32);
                    }
                } else {
                    if (m.rn.LFSR_reg == 0) {
                        LFSR_var = 0;
                        outbit = 0;
                    } else {
                        LFSR_var = m.rn.LFSR_reg % m.rn.exp2_(43);
                        outbit = LFSR_var / m.rn.exp2_(42);
                        LFSR_var = (LFSR_var % m.rn.exp2_(42)) * 2 + outbit;
                    }
                    LFSR_var = m.rn.xor_(LFSR_var, 41, outbit, m.rn.bit_(LFSR_var, 41));
                    LFSR_var = m.rn.xor_(LFSR_var, 20, outbit, m.rn.bit_(LFSR_var, 20));
                    LFSR_var = m.rn.xor_(LFSR_var, 1, outbit, m.rn.bit_(LFSR_var, 1));
                    if (LFSR_var == 0) {
                        m.rn.LFSR_reg = 0;
                    } else {
                        m.rn.LFSR_reg = LFSR_var % m.rn.exp2_(43);
                    }
                }
            }
            m.process_state = m.process_state[1 -> 3];
            m.event_state = m.event_state[3 -> 5];
            loop_invariant true ** 
                    Perm(m, read) ** 
                    (m != null) ** 
                    held(m)  ** 
                    m.global_permission_invariant() ** 
                    (m.rn_lfsr == this) ;
            while (m.process_state[1] != -1 || m.event_state[3] != -2) {
                unlock m;
                lock m;
            }
        }
        unlock m;
    }
    
}

