class Rng { 
    //Auto-generated fields of the Rng class:
    Main m;
    boolean clk;
    boolean reset;
    boolean loadseed_i;
    int seed_i;
    int number_o;
    int LFSR_reg;
    int CASR_reg;
    int result;
    int i;
    int aux;
    
    //Auto-generated constructor:
    //Auto-generated specifications of the constructor Rng:
    ensures Perm(m, write) **
            Perm(clk, write) **
            Perm(reset, write) **
            Perm(loadseed_i, write) **
            Perm(seed_i, write) **
            Perm(number_o, write) **
            Perm(LFSR_reg, write) **
            Perm(CASR_reg, write) **
            Perm(result, write) **
            Perm(i, write) **
            Perm(aux, write) **
            (m == m_param) ;
    Rng(Main m_param){
        m = m_param;
    }
    
    
    //Auto-generated functions:
    //Auto-generated specifications of the function exp2_:
    context Perm(m, read) **
            (m != null) **
            held(m) **
            m.global_permission_invariant() **
            (m.rn == this) ;
    int exp2_(int exponent){
        result = 1;
        loop_invariant true ** 
                Perm(m, read) ** 
                (m != null) ** 
                held(m)  ** 
                m.global_permission_invariant() ** 
                (m.rn == this) ;
        for (i = 0; i < exponent; i = 1 + i) {
            result = result * 2;
        }
        return result;
    }
    
    //Auto-generated specifications of the function bit_:
    context Perm(m, read) **
            (m != null) **
            held(m) **
            m.global_permission_invariant() **
            (m.rn == this) ;
    int bit_(int var, int pos){
        if (var == 0) {
            return 0;
        }
        else {            
            aux = var % exp2_(pos+1);
        }  
        
        if (aux == 0) {
            return 0;
        }
        return (aux / exp2_(pos));
    }
    
    //Auto-generated specifications of the function xor_:
    context Perm(m, read) **
            (m != null) **
            held(m) **
            m.global_permission_invariant() **
            (m.rn == this) ;
    int xor_(int var, int pos, int A, int B){
        if (A == 1) {
            if (B == 1) {
                var = var - exp2_(pos);
            } else {
                var = var + exp2_(pos);
            }
        } else {
            var = B * exp2_(pos);
        }
        return var;
    }
    
}

