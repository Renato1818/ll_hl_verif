class ALU { 
    //Auto-generated fields of the ALU class:
    Main m;

    int OPCODE;
    int OP1;
    int OP2;
    boolean CARRY;
    boolean ZERO;
    int RESULT;
    
    boolean init;

    //int data1;
    //int data2;
    //int result;
    //int i;
    //int bit;
    //int divisor;
    //int current_bit;
    
    //Auto-generated constructor:
    //Auto-generated specifications of the constructor ALU:
    ensures Perm(m, write) **
            Perm(OPCODE, write) **  OPCODE == 0 **
            Perm(OP1, write) **  OP1 == 0 **
            Perm(OP2, write) **  OP2 == 0 **
            Perm(CARRY, write) ** !CARRY **
            Perm(ZERO, write) ** !ZERO **
            Perm(RESULT, write) ** RESULT == 0 **
            //Perm(data1, write) **
            //Perm(data2, write) **
            //Perm(result, write) **
            //Perm(i, write) **
            //Perm(bit, write) **
            //Perm(divisor, write) **
            //Perm(current_bit, write) **
            (m == m_param) ;
    ensures Perm(init, write)
            ** !init;
    ALU(Main m_param){
        m = m_param;

        OPCODE = 0;
	    OP1 = 0;
	    OP2 = 0;
	    CARRY = false;
	    ZERO = false;
	    RESULT = 0;

        init = false;
    }
    
    
    //Auto-generated functions:
    //Auto-generated specifications of the function get_bit:
    context Perm(m, 1\2) 
            ** (m != null) 
            ** held(m) 
            ** m.global_permission_invariant() 
            ** (m.alu == this) 
            ** Perm(init, 1\2)
            ** !init
            ;
    int get_bit(int value, int pos){
        int i;
        int divisor;
        divisor = 1;
        loop_invariant true 
                ** Perm(m, 1\2) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission_invariant()  
                ** (m.alu == this) 
                ** Perm(init, 1\2)
                ** init;
        for (i = 0; i < pos; i++) {
            divisor = divisor * 2;
        }
        if (divisor != 0) {
            return (value / divisor) % 2;
        } else {
            return 0;
        }
    }
    
    //Auto-generated specifications of the function set_bit:
    context Perm(m, 1\2) 
            ** (m != null) 
            ** held(m) 
            ** m.global_permission_invariant() 
            ** (m.alu == this) 
            ** Perm(init, 1\2)
            ** !init
            ;
    int set_bit(int value, int pos, int bit){
        int i;
        int divisor;
        int current_bit;
        current_bit = m.alu.get_bit(value, pos);
        divisor = 1;
        loop_invariant true 
                ** Perm(m, 1\2) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission_invariant()  
                ** (m.alu == this) 
                ** Perm(init, 1\2)
                ** init;
        for (i = 0; i < pos; i++) {
            divisor = divisor * 2;
        }
        if (current_bit == bit) {
            return value;
        } else {
            if (bit == 1) {
                return value + divisor;
            } else {
                return value - divisor;
            }
        }
    }
    
    //Auto-generated specifications of the function run:
    context Perm(m, 1\2) 
            ** (m != null) 
            ** Perm(m.alu, read) 
            ** (m.alu == this) 
            ** Perm(init, 1\2)
            ** !init;
    void run(){        
        int i;
        int data1;
        int data2;
        int result;
        int bit;

        lock m;
        m.process_state = m.process_state[0 -> 0];
        m.event_state = m.event_state[0 -> 2000000];
        init = true;

        loop_invariant true 
                ** Perm(m, 1\2) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission_invariant()  
                ** (m.alu == this) 
                ** Perm(init, 1\2)
                ** init;
        while (m.process_state[0] != -1 || m.event_state[0] != -2) {
            unlock m;
            lock m;
        }
        loop_invariant true 
                ** Perm(m, 1\2) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission_invariant()  
                ** (m.alu == this) 
                ** Perm(init, 1\2)
                ** init;
        while (true) {
            ZERO = false;
            data1 = OP1 % 16;
            data2 = OP2 % 16;
            if (OPCODE % 8 == 0) {
                result = data1 + data2;
            } else {
                if (OPCODE % 8 == 1) {
                    result = data1 - data2;
                } else {
                    if (OPCODE % 8 == 2) {
                        result = data1 + 1;
                    } else {
                        if (OPCODE % 8 == 3) {
                            result = data1 - 1;
                        } else {
                            if (OPCODE % 8 == 4) {
                                loop_invariant true 
                                    ** Perm(m, 1\2) 
                                    ** (m != null) 
                                    ** held(m)  
                                    ** m.global_permission_invariant()  
                                    ** (m.alu == this) 
                                    ** Perm(init, 1\2)
                                    ** init;
                                for (i = 0; i < 4; i++) {
                                    bit = get_bit(data1, i) * get_bit(data2, i);
                                    result = set_bit(result, i, bit);
                                }
                            } else {
                                if (OPCODE % 8 == 5) {
                                    loop_invariant true 
                                        ** Perm(m, 1\2) 
                                        ** (m != null) 
                                        ** held(m)  
                                        ** m.global_permission_invariant()  
                                        ** (m.alu == this) 
                                        ** Perm(init, 1\2)
                                        ** init;
                                    for (i = 0; i < 4; i++) {
                                        bit = get_bit(data1, i) + get_bit(data2, i);
                                        result = set_bit(result, i, (bit > 0) ? 1 : 0 );
                                    }
                                } else {
                                    if (OPCODE % 8 == 6) {
                                        loop_invariant true 
                                            ** Perm(m, 1\2) 
                                            ** (m != null) 
                                            ** held(m)  
                                            ** m.global_permission_invariant()  
                                            ** (m.alu == this) 
                                            ** Perm(init, 1\2)
                                            ** init;
                                        for (i = 0; i < 4; i++) {
                                            bit = get_bit(data1, i) * get_bit(data2, i);
                                            result = set_bit(result, i, (bit == 1) ? 0 : 1);
                                        }
                                    } else {
                                        if (OPCODE % 8 == 7) {
                                            loop_invariant true 
                                                ** Perm(m, 1\2) 
                                                ** (m != null) 
                                                ** held(m)  
                                                ** m.global_permission_invariant()  
                                                ** (m.alu == this) 
                                                ** Perm(init, 1\2)
                                                ** init;
                                            for (i = 0; i < 4; i++) {
                                                bit = get_bit(data1, i) + get_bit(data2, i);
                                                result = set_bit(result, i, (bit == 1) ? 1 : 0 );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            RESULT = (result % 16);
            CARRY = ((result / 16) % 2) == 1 ? true : false;

            if ((result % 16) == 0) {
                ZERO = (true);
            }

            m.process_state = m.process_state[0 -> 1];
            m.event_state = m.event_state[1 -> 5000000];
            loop_invariant true 
                ** Perm(m, 1\2) 
                ** (m != null) 
                ** held(m)  
                ** m.global_permission_invariant()  
                ** (m.alu == this) 
                ** Perm(init, 1\2)
                ** init;
            while (m.process_state[0] != -1 || m.event_state[1] != -2) {
                unlock m;
                lock m;
            }
        }
        unlock m;
    }
    
}

