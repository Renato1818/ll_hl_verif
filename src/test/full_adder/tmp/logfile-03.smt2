(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-17 23:27:22
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_Full_adder<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Prc_half_adder_1<TYPE> TYPE)
(declare-const class_Prc_half_adder_2<TYPE> TYPE)
(declare-const class_Prc_or<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Full_adder_m: Ref]
(declare-fun $FVF.domain_Full_adder_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Full_adder_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Full_adder_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Full_adder_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Full_adder_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Full_adder_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_half_adder_1_m: Ref]
(declare-fun $FVF.domain_Prc_half_adder_1_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_half_adder_1_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_half_adder_1_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_half_adder_1_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_half_adder_1_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_half_adder_1_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_half_adder_2_m: Ref]
(declare-fun $FVF.domain_Prc_half_adder_2_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_half_adder_2_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_half_adder_2_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_half_adder_2_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_half_adder_2_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_half_adder_2_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_or_m: Ref]
(declare-fun $FVF.domain_Prc_or_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_or_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_or_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_or_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_or_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_or_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Prc_half_adder_1_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_1_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_2_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_2_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_or_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_or_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Full_adder<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Prc_half_adder_1<TYPE> class_Prc_half_adder_2<TYPE> class_Prc_or<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Full_adder<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_half_adder_1<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_half_adder_2<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_or<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Full_adder_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Full_adder_m vs) ($FVF.domain_Full_adder_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Full_adder_m vs))
            (= ($FVF.lookup_Full_adder_m vs x) ($FVF.lookup_Full_adder_m ws x)))
          :pattern (($FVF.lookup_Full_adder_m vs x) ($FVF.lookup_Full_adder_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Full_adder_m pm r))
    :pattern ($FVF.perm_Full_adder_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Full_adder_m f r) true)
    :pattern ($FVF.loc_Full_adder_m f r))))
; /field_value_functions_axioms.smt2 [Prc_half_adder_1_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_half_adder_1_m vs) ($FVF.domain_Prc_half_adder_1_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_half_adder_1_m vs))
            (= ($FVF.lookup_Prc_half_adder_1_m vs x) ($FVF.lookup_Prc_half_adder_1_m ws x)))
          :pattern (($FVF.lookup_Prc_half_adder_1_m vs x) ($FVF.lookup_Prc_half_adder_1_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_half_adder_1_m pm r))
    :pattern ($FVF.perm_Prc_half_adder_1_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_half_adder_1_m f r) true)
    :pattern ($FVF.loc_Prc_half_adder_1_m f r))))
; /field_value_functions_axioms.smt2 [Prc_half_adder_2_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_half_adder_2_m vs) ($FVF.domain_Prc_half_adder_2_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_half_adder_2_m vs))
            (= ($FVF.lookup_Prc_half_adder_2_m vs x) ($FVF.lookup_Prc_half_adder_2_m ws x)))
          :pattern (($FVF.lookup_Prc_half_adder_2_m vs x) ($FVF.lookup_Prc_half_adder_2_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_half_adder_2_m pm r))
    :pattern ($FVF.perm_Prc_half_adder_2_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_half_adder_2_m f r) true)
    :pattern ($FVF.loc_Prc_half_adder_2_m f r))))
; /field_value_functions_axioms.smt2 [Prc_or_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_or_m vs) ($FVF.domain_Prc_or_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_or_m vs))
            (= ($FVF.lookup_Prc_or_m vs x) ($FVF.lookup_Prc_or_m ws x)))
          :pattern (($FVF.lookup_Prc_or_m vs x) ($FVF.lookup_Prc_or_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_or_m pm r))
    :pattern ($FVF.perm_Prc_or_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_or_m f r) true)
    :pattern ($FVF.loc_Prc_or_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Prc_half_adder_1_Prc_half_adder_1_EncodedGlobalVariables_Main ----------
(declare-const globals@0@03 $Ref)
(declare-const m_param@1@03 $Ref)
(declare-const sys__result@2@03 $Ref)
(declare-const globals@3@03 $Ref)
(declare-const m_param@4@03 $Ref)
(declare-const sys__result@5@03 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@6@03 $Snap)
(assert (= $t@6@03 ($Snap.combine ($Snap.first $t@6@03) ($Snap.second $t@6@03))))
(assert (= ($Snap.first $t@6@03) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@5@03 $Ref.null)))
(assert (=
  ($Snap.second $t@6@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@03))
    ($Snap.second ($Snap.second $t@6@03)))))
(assert (= ($Snap.first ($Snap.second $t@6@03)) $Snap.unit))
; [eval] type_of(sys__result) == class_Prc_half_adder_1()
; [eval] type_of(sys__result)
; [eval] class_Prc_half_adder_1()
(assert (= (type_of<TYPE> sys__result@5@03) (as class_Prc_half_adder_1<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@6@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@6@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03))))))
  $Snap.unit))
; [eval] !sys__result.Prc_half_adder_1_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@03))))))
  $Snap.unit))
; [eval] sys__result.Prc_half_adder_1_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@03)))))
  m_param@4@03))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__6: Ref
(declare-const diz__6@7@03 $Ref)
; [exec]
; diz__6 := new(Prc_half_adder_1_m, Prc_half_adder_1_init)
(declare-const diz__6@8@03 $Ref)
(assert (not (= diz__6@8@03 $Ref.null)))
(declare-const Prc_half_adder_1_m@9@03 $Ref)
(declare-const Prc_half_adder_1_init@10@03 Bool)
(assert (not (= diz__6@8@03 globals@3@03)))
(assert (not (= diz__6@8@03 diz__6@7@03)))
(assert (not (= diz__6@8@03 m_param@4@03)))
(assert (not (= diz__6@8@03 sys__result@5@03)))
; [exec]
; inhale type_of(diz__6) == class_Prc_half_adder_1()
(declare-const $t@11@03 $Snap)
(assert (= $t@11@03 $Snap.unit))
; [eval] type_of(diz__6) == class_Prc_half_adder_1()
; [eval] type_of(diz__6)
; [eval] class_Prc_half_adder_1()
(assert (= (type_of<TYPE> diz__6@8@03) (as class_Prc_half_adder_1<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__6.Prc_half_adder_1_m := m_param
; [exec]
; diz__6.Prc_half_adder_1_init := false
; [exec]
; inhale acc(Prc_half_adder_1_idleToken_EncodedGlobalVariables(diz__6, globals), write)
(declare-const $t@12@03 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__6
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Prc_half_adder_1() && acc(Prc_half_adder_1_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Prc_half_adder_1_m, write) && acc(sys__result.Prc_half_adder_1_init, write) && !sys__result.Prc_half_adder_1_init && sys__result.Prc_half_adder_1_m == m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Prc_half_adder_1()
; [eval] type_of(sys__result)
; [eval] class_Prc_half_adder_1()
; [eval] !sys__result.Prc_half_adder_1_init
; [eval] sys__result.Prc_half_adder_1_m == m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Prc_half_adder_2_Prc_half_adder_2_EncodedGlobalVariables_Main ----------
(declare-const globals@13@03 $Ref)
(declare-const m_param@14@03 $Ref)
(declare-const sys__result@15@03 $Ref)
(declare-const globals@16@03 $Ref)
(declare-const m_param@17@03 $Ref)
(declare-const sys__result@18@03 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@19@03 $Snap)
(assert (= $t@19@03 ($Snap.combine ($Snap.first $t@19@03) ($Snap.second $t@19@03))))
(assert (= ($Snap.first $t@19@03) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@18@03 $Ref.null)))
(assert (=
  ($Snap.second $t@19@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@19@03))
    ($Snap.second ($Snap.second $t@19@03)))))
(assert (= ($Snap.first ($Snap.second $t@19@03)) $Snap.unit))
; [eval] type_of(sys__result) == class_Prc_half_adder_2()
; [eval] type_of(sys__result)
; [eval] class_Prc_half_adder_2()
(assert (= (type_of<TYPE> sys__result@18@03) (as class_Prc_half_adder_2<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@19@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@19@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@19@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))
  $Snap.unit))
; [eval] !sys__result.Prc_half_adder_2_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@03))))))
  $Snap.unit))
; [eval] sys__result.Prc_half_adder_2_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@03)))))
  m_param@17@03))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__37: Ref
(declare-const diz__37@20@03 $Ref)
; [exec]
; diz__37 := new(Prc_half_adder_2_m, Prc_half_adder_2_init)
(declare-const diz__37@21@03 $Ref)
(assert (not (= diz__37@21@03 $Ref.null)))
(declare-const Prc_half_adder_2_m@22@03 $Ref)
(declare-const Prc_half_adder_2_init@23@03 Bool)
(assert (not (= diz__37@21@03 sys__result@18@03)))
(assert (not (= diz__37@21@03 diz__37@20@03)))
(assert (not (= diz__37@21@03 m_param@17@03)))
(assert (not (= diz__37@21@03 globals@16@03)))
; [exec]
; inhale type_of(diz__37) == class_Prc_half_adder_2()
(declare-const $t@24@03 $Snap)
(assert (= $t@24@03 $Snap.unit))
; [eval] type_of(diz__37) == class_Prc_half_adder_2()
; [eval] type_of(diz__37)
; [eval] class_Prc_half_adder_2()
(assert (= (type_of<TYPE> diz__37@21@03) (as class_Prc_half_adder_2<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__37.Prc_half_adder_2_m := m_param
; [exec]
; diz__37.Prc_half_adder_2_init := false
; [exec]
; inhale acc(Prc_half_adder_2_idleToken_EncodedGlobalVariables(diz__37, globals), write)
(declare-const $t@25@03 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__37
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Prc_half_adder_2() && acc(Prc_half_adder_2_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Prc_half_adder_2_m, write) && acc(sys__result.Prc_half_adder_2_init, write) && !sys__result.Prc_half_adder_2_init && sys__result.Prc_half_adder_2_m == m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Prc_half_adder_2()
; [eval] type_of(sys__result)
; [eval] class_Prc_half_adder_2()
; [eval] !sys__result.Prc_half_adder_2_init
; [eval] sys__result.Prc_half_adder_2_m == m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Prc_or___contract_unsatisfiable__Prc_or_EncodedGlobalVariables_Main ----------
(declare-const diz@26@03 $Ref)
(declare-const globals@27@03 $Ref)
(declare-const m_param@28@03 $Ref)
(declare-const diz@29@03 $Ref)
(declare-const globals@30@03 $Ref)
(declare-const m_param@31@03 $Ref)
(push) ; 1
(declare-const $t@32@03 $Snap)
(assert (= $t@32@03 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@29@03 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@33@03 $Snap)
(assert (= $t@33@03 ($Snap.combine ($Snap.first $t@33@03) ($Snap.second $t@33@03))))
(assert (= ($Snap.first $t@33@03) $Snap.unit))
(assert (= ($Snap.second $t@33@03) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Prc_or_Prc_or_EncodedGlobalVariables_Main ----------
(declare-const globals@34@03 $Ref)
(declare-const m_param@35@03 $Ref)
(declare-const sys__result@36@03 $Ref)
(declare-const globals@37@03 $Ref)
(declare-const m_param@38@03 $Ref)
(declare-const sys__result@39@03 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@40@03 $Snap)
(assert (= $t@40@03 ($Snap.combine ($Snap.first $t@40@03) ($Snap.second $t@40@03))))
(assert (= ($Snap.first $t@40@03) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@39@03 $Ref.null)))
(assert (=
  ($Snap.second $t@40@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@40@03))
    ($Snap.second ($Snap.second $t@40@03)))))
(assert (= ($Snap.first ($Snap.second $t@40@03)) $Snap.unit))
; [eval] type_of(sys__result) == class_Prc_or()
; [eval] type_of(sys__result)
; [eval] class_Prc_or()
(assert (= (type_of<TYPE> sys__result@39@03) (as class_Prc_or<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@40@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@40@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@40@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@40@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@40@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03))))))
  $Snap.unit))
; [eval] !sys__result.Prc_or_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@03))))))
  $Snap.unit))
; [eval] sys__result.Prc_or_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@40@03)))))
  m_param@38@03))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__68: Ref
(declare-const diz__68@41@03 $Ref)
; [exec]
; diz__68 := new(Prc_or_m, Prc_or_init)
(declare-const diz__68@42@03 $Ref)
(assert (not (= diz__68@42@03 $Ref.null)))
(declare-const Prc_or_m@43@03 $Ref)
(declare-const Prc_or_init@44@03 Bool)
(assert (not (= diz__68@42@03 diz__68@41@03)))
(assert (not (= diz__68@42@03 globals@37@03)))
(assert (not (= diz__68@42@03 m_param@38@03)))
(assert (not (= diz__68@42@03 sys__result@39@03)))
; [exec]
; inhale type_of(diz__68) == class_Prc_or()
(declare-const $t@45@03 $Snap)
(assert (= $t@45@03 $Snap.unit))
; [eval] type_of(diz__68) == class_Prc_or()
; [eval] type_of(diz__68)
; [eval] class_Prc_or()
(assert (= (type_of<TYPE> diz__68@42@03) (as class_Prc_or<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__68.Prc_or_m := m_param
; [exec]
; diz__68.Prc_or_init := false
; [exec]
; inhale acc(Prc_or_idleToken_EncodedGlobalVariables(diz__68, globals), write)
(declare-const $t@46@03 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__68
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Prc_or() && acc(Prc_or_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Prc_or_m, write) && acc(sys__result.Prc_or_init, write) && !sys__result.Prc_or_init && sys__result.Prc_or_m == m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Prc_or()
; [eval] type_of(sys__result)
; [eval] class_Prc_or()
; [eval] !sys__result.Prc_or_init
; [eval] sys__result.Prc_or_m == m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Prc_or_run_EncodedGlobalVariables ----------
(declare-const diz@47@03 $Ref)
(declare-const globals@48@03 $Ref)
(declare-const diz@49@03 $Ref)
(declare-const globals@50@03 $Ref)
(push) ; 1
(declare-const $t@51@03 $Snap)
(assert (= $t@51@03 ($Snap.combine ($Snap.first $t@51@03) ($Snap.second $t@51@03))))
(assert (= ($Snap.first $t@51@03) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@49@03 $Ref.null)))
(assert (=
  ($Snap.second $t@51@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@51@03))
    ($Snap.second ($Snap.second $t@51@03)))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             32
;  :arith-assert-lower    1
;  :arith-assert-upper    1
;  :arith-eq-adapter      1
;  :binary-propagations   22
;  :datatype-accessor-ax  8
;  :datatype-occurs-check 15
;  :final-checks          14
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           267
;  :mk-clause             1
;  :num-allocs            3250513
;  :num-checks            15
;  :propagations          22
;  :quant-instantiations  1
;  :rlimit-count          105453)
(assert (=
  ($Snap.second ($Snap.second $t@51@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@51@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@51@03))) $Snap.unit))
; [eval] diz.Prc_or_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@51@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
(declare-const $k@52@03 $Perm)
(assert ($Perm.isReadVar $k@52@03 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@52@03 $Perm.No) (< $Perm.No $k@52@03))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             44
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    2
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             1
;  :datatype-accessor-ax  10
;  :datatype-occurs-check 15
;  :final-checks          14
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           276
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            16
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          106025)
(assert (<= $Perm.No $k@52@03))
(assert (<= $k@52@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@52@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@52@03)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             50
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             2
;  :datatype-accessor-ax  11
;  :datatype-occurs-check 15
;  :final-checks          14
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           279
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            17
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          106298)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
  diz@49@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             57
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             2
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 15
;  :final-checks          14
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           282
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            18
;  :propagations          23
;  :quant-instantiations  3
;  :rlimit-count          106549)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03))))))
  $Snap.unit))
; [eval] !diz.Prc_or_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@53@03 $Snap)
(assert (= $t@53@03 ($Snap.combine ($Snap.first $t@53@03) ($Snap.second $t@53@03))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               75
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    13
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   17
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            16
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             290
;  :mk-clause               3
;  :num-allocs              3365902
;  :num-checks              20
;  :propagations            23
;  :quant-instantiations    5
;  :rlimit-count            107177)
(assert (=
  ($Snap.second $t@53@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@53@03))
    ($Snap.second ($Snap.second $t@53@03)))))
(assert (= ($Snap.first ($Snap.second $t@53@03)) $Snap.unit))
; [eval] diz.Prc_or_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@53@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@53@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@53@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@53@03))))))
(declare-const $k@54@03 $Perm)
(assert ($Perm.isReadVar $k@54@03 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@54@03 $Perm.No) (< $Perm.No $k@54@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               3
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   17
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            16
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             299
;  :mk-clause               5
;  :num-allocs              3365902
;  :num-checks              21
;  :propagations            24
;  :quant-instantiations    6
;  :rlimit-count            107738)
(assert (<= $Perm.No $k@54@03))
(assert (<= $k@54@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@54@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@53@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@53@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@03)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@03))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@54@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   17
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            16
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             302
;  :mk-clause               5
;  :num-allocs              3365902
;  :num-checks              22
;  :propagations            24
;  :quant-instantiations    6
;  :rlimit-count            108001)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@53@03))))
  diz@49@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@03))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               101
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   17
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              2
;  :final-checks            16
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             305
;  :mk-clause               5
;  :num-allocs              3365902
;  :num-checks              23
;  :propagations            24
;  :quant-instantiations    7
;  :rlimit-count            108241)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@03)))))
  $Snap.unit))
; [eval] !diz.Prc_or_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@03))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_57__69: Ref
(declare-const __flatten_57__69@55@03 $Ref)
; [exec]
; var __flatten_58__70: Seq[Int]
(declare-const __flatten_58__70@56@03 Seq<Int>)
; [exec]
; var __flatten_59__71: Ref
(declare-const __flatten_59__71@57@03 $Ref)
; [exec]
; var __flatten_60__72: Ref
(declare-const __flatten_60__72@58@03 $Ref)
; [exec]
; var __flatten_61__73: Seq[Int]
(declare-const __flatten_61__73@59@03 Seq<Int>)
; [exec]
; var __flatten_62__74: Ref
(declare-const __flatten_62__74@60@03 $Ref)
; [exec]
; var __flatten_63__76: Ref
(declare-const __flatten_63__76@61@03 $Ref)
; [exec]
; var __flatten_64__77: Ref
(declare-const __flatten_64__77@62@03 $Ref)
; [exec]
; var __flatten_65__78: Bool
(declare-const __flatten_65__78@63@03 Bool)
; [exec]
; var __flatten_66__79: Ref
(declare-const __flatten_66__79@64@03 $Ref)
; [exec]
; var __flatten_67__80: Ref
(declare-const __flatten_67__80@65@03 $Ref)
; [exec]
; var __flatten_68__81: Ref
(declare-const __flatten_68__81@66@03 $Ref)
; [exec]
; var __flatten_69__82: Ref
(declare-const __flatten_69__82@67@03 $Ref)
; [exec]
; var __flatten_70__83: Ref
(declare-const __flatten_70__83@68@03 $Ref)
; [exec]
; var __flatten_71__84: Ref
(declare-const __flatten_71__84@69@03 $Ref)
; [exec]
; var __flatten_72__85: Bool
(declare-const __flatten_72__85@70@03 Bool)
; [exec]
; var __flatten_73__86: Ref
(declare-const __flatten_73__86@71@03 $Ref)
; [exec]
; var __flatten_74__87: Ref
(declare-const __flatten_74__87@72@03 $Ref)
; [exec]
; var __flatten_75__88: Ref
(declare-const __flatten_75__88@73@03 $Ref)
; [exec]
; var __flatten_76__89: Seq[Int]
(declare-const __flatten_76__89@74@03 Seq<Int>)
; [exec]
; var __flatten_77__90: Ref
(declare-const __flatten_77__90@75@03 $Ref)
; [exec]
; var __flatten_78__91: Ref
(declare-const __flatten_78__91@76@03 $Ref)
; [exec]
; var __flatten_79__92: Seq[Int]
(declare-const __flatten_79__92@77@03 Seq<Int>)
; [exec]
; var __flatten_80__93: Ref
(declare-const __flatten_80__93@78@03 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(declare-const $t@79@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(assert (= $t@79@03 ($Snap.combine ($Snap.first $t@79@03) ($Snap.second $t@79@03))))
(assert (= ($Snap.first $t@79@03) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@79@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@79@03))
    ($Snap.second ($Snap.second $t@79@03)))))
(assert (= ($Snap.first ($Snap.second $t@79@03)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@79@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@79@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@79@03))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@79@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@80@03 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@80@03 | live]
; [else-branch: 0 | !(0 <= i@80@03) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@80@03]
(assert (<= 0 i@80@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@80@03)]
(assert (not (<= 0 i@80@03)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@80@03 < |First:(Second:(Second:(Second:($t@79@03))))| && 0 <= i@80@03 | live]
; [else-branch: 1 | !(i@80@03 < |First:(Second:(Second:(Second:($t@79@03))))| && 0 <= i@80@03) | live]
(push) ; 5
; [then-branch: 1 | i@80@03 < |First:(Second:(Second:(Second:($t@79@03))))| && 0 <= i@80@03]
(assert (and
  (<
    i@80@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
  (<= 0 i@80@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@80@03 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               159
;  :arith-assert-diseq      4
;  :arith-assert-lower      12
;  :arith-assert-upper      8
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             337
;  :mk-clause               11
;  :num-allocs              3483090
;  :num-checks              25
;  :propagations            26
;  :quant-instantiations    13
;  :rlimit-count            109899)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@79@03))))[i@80@03] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@79@03))))[i@80@03] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@79@03))))[i@80@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
    i@80@03)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@79@03))))[i@80@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
      i@80@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@80@03 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               159
;  :arith-assert-diseq      4
;  :arith-assert-lower      12
;  :arith-assert-upper      8
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             338
;  :mk-clause               11
;  :num-allocs              3483090
;  :num-checks              26
;  :propagations            26
;  :quant-instantiations    13
;  :rlimit-count            110074)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@79@03))))[i@80@03] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@79@03))))[i@80@03]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@79@03))))[i@80@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
    i@80@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@80@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               159
;  :arith-assert-diseq      5
;  :arith-assert-lower      15
;  :arith-assert-upper      8
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              4
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             341
;  :mk-clause               12
;  :num-allocs              3483090
;  :num-checks              27
;  :propagations            26
;  :quant-instantiations    13
;  :rlimit-count            110198)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@79@03))))[i@80@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
      i@80@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@80@03 < |First:(Second:(Second:(Second:($t@79@03))))| && 0 <= i@80@03)]
(assert (not
  (and
    (<
      i@80@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
    (<= 0 i@80@03))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@80@03 Int)) (!
  (implies
    (and
      (<
        i@80@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
      (<= 0 i@80@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
          i@80@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
            i@80@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
            i@80@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
    i@80@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))
(declare-const $k@81@03 $Perm)
(assert ($Perm.isReadVar $k@81@03 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@81@03 $Perm.No) (< $Perm.No $k@81@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               164
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      9
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               5
;  :datatype-accessor-ax    26
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             347
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              28
;  :propagations            27
;  :quant-instantiations    13
;  :rlimit-count            110966)
(assert (<= $Perm.No $k@81@03))
(assert (<= $k@81@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@81@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               170
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             350
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              29
;  :propagations            27
;  :quant-instantiations    13
;  :rlimit-count            111289
;  :time                    0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               176
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             353
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              30
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            111645)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               181
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             354
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              31
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            111902)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               186
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             355
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              32
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            112169)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               191
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               10
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             356
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              33
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            112446)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               196
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               11
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             357
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              34
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            112733)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               201
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               12
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             358
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              35
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            113030)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               206
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             359
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              36
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            113337)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               211
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               14
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             360
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              37
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            113654)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               216
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               15
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             361
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              38
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            113981)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               221
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               16
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             362
;  :mk-clause               14
;  :num-allocs              3483090
;  :num-checks              39
;  :propagations            27
;  :quant-instantiations    14
;  :rlimit-count            114318)
(declare-const $k@82@03 $Perm)
(assert ($Perm.isReadVar $k@82@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@82@03 $Perm.No) (< $Perm.No $k@82@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               221
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      11
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               17
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             366
;  :mk-clause               16
;  :num-allocs              3483090
;  :num-checks              40
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            114517)
(assert (<= $Perm.No $k@82@03))
(assert (<= $k@82@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@82@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               227
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               18
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             369
;  :mk-clause               16
;  :num-allocs              3483090
;  :num-checks              41
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            114950)
(push) ; 3
(assert (not (< $Perm.No $k@82@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               227
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             369
;  :mk-clause               16
;  :num-allocs              3483090
;  :num-checks              42
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            114998)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))
(declare-const $k@83@03 $Perm)
(assert ($Perm.isReadVar $k@83@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@83@03 $Perm.No) (< $Perm.No $k@83@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               235
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      13
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             376
;  :mk-clause               18
;  :num-allocs              3483090
;  :num-checks              43
;  :propagations            29
;  :quant-instantiations    15
;  :rlimit-count            115639)
(declare-const $t@84@03 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@52@03)
    (=
      $t@84@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  (implies
    (< $Perm.No $k@83@03)
    (=
      $t@84@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@52@03 $k@83@03)))
(assert (<= (+ $k@52@03 $k@83@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@52@03 $k@83@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@52@03 $k@83@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               245
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      15
;  :arith-conflicts         1
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             384
;  :mk-clause               18
;  :num-allocs              3483090
;  :num-checks              44
;  :propagations            29
;  :quant-instantiations    16
;  :rlimit-count            116344)
(assert (not (= $t@84@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@52@03 $k@83@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               251
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      16
;  :arith-conflicts         2
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             387
;  :mk-clause               18
;  :num-allocs              3483090
;  :num-checks              45
;  :propagations            29
;  :quant-instantiations    16
;  :rlimit-count            116780)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               251
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      16
;  :arith-conflicts         2
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             387
;  :mk-clause               18
;  :num-allocs              3483090
;  :num-checks              46
;  :propagations            29
;  :quant-instantiations    16
;  :rlimit-count            116793)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@49@03 $t@84@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               251
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      16
;  :arith-conflicts         2
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             388
;  :mk-clause               18
;  :num-allocs              3483090
;  :num-checks              47
;  :propagations            29
;  :quant-instantiations    16
;  :rlimit-count            116853
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@51@03)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))))
(declare-const $k@85@03 $Perm)
(assert ($Perm.isReadVar $k@85@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@85@03 $Perm.No) (< $Perm.No $k@85@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               259
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      17
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             395
;  :mk-clause               20
;  :num-allocs              3483090
;  :num-checks              48
;  :propagations            30
;  :quant-instantiations    17
;  :rlimit-count            117473)
(assert (<= $Perm.No $k@85@03))
(assert (<= $k@85@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@85@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@85@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               265
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      18
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             398
;  :mk-clause               20
;  :num-allocs              3483090
;  :num-checks              49
;  :propagations            30
;  :quant-instantiations    17
;  :rlimit-count            117956)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@85@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               271
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      18
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             401
;  :mk-clause               20
;  :num-allocs              3483090
;  :num-checks              50
;  :propagations            30
;  :quant-instantiations    18
;  :rlimit-count            118468)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               271
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      18
;  :arith-conflicts         2
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             401
;  :mk-clause               20
;  :num-allocs              3483090
;  :num-checks              51
;  :propagations            30
;  :quant-instantiations    18
;  :rlimit-count            118481)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))))))
(declare-const $k@86@03 $Perm)
(assert ($Perm.isReadVar $k@86@03 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@86@03 $Perm.No) (< $Perm.No $k@86@03))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               276
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      19
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             406
;  :mk-clause               22
;  :num-allocs              3483090
;  :num-checks              52
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            119042)
(assert (<= $Perm.No $k@86@03))
(assert (<= $k@86@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@86@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@86@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               282
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             409
;  :mk-clause               22
;  :num-allocs              3483090
;  :num-checks              53
;  :propagations            31
;  :quant-instantiations    18
;  :rlimit-count            119555)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))))))))))))))))))
    $Ref.null)))
(push) ; 3
(assert (not (< $Perm.No $k@86@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               283
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             411
;  :mk-clause               22
;  :num-allocs              3483090
;  :num-checks              54
;  :propagations            31
;  :quant-instantiations    19
;  :rlimit-count            119993)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               283
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 6
;  :datatype-occurs-check   18
;  :datatype-splits         3
;  :decisions               6
;  :del-clause              5
;  :final-checks            17
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             411
;  :mk-clause               22
;  :num-allocs              3483090
;  :num-checks              55
;  :propagations            31
;  :quant-instantiations    19
;  :rlimit-count            120006)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@79@03 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))) globals@50@03))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(declare-const $t@87@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz.Prc_or_init := true
; [exec]
; __flatten_57__69 := diz.Prc_or_m
(declare-const __flatten_57__69@88@03 $Ref)
(assert (=
  __flatten_57__69@88@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))))
; [exec]
; __flatten_59__71 := diz.Prc_or_m
(declare-const __flatten_59__71@89@03 $Ref)
(assert (=
  __flatten_59__71@89@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))))
; [exec]
; __flatten_58__70 := __flatten_59__71.Main_process_state[0 := 0]
; [eval] __flatten_59__71.Main_process_state[0 := 0]
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
  __flatten_59__71@89@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               409
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             452
;  :mk-clause               23
;  :num-allocs              3607078
;  :num-checks              58
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            121427)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               409
;  :arith-assert-diseq      10
;  :arith-assert-lower      26
;  :arith-assert-upper      20
;  :arith-conflicts         2
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             452
;  :mk-clause               23
;  :num-allocs              3607078
;  :num-checks              59
;  :propagations            32
;  :quant-instantiations    19
;  :rlimit-count            121442)
(declare-const __flatten_58__70@90@03 Seq<Int>)
(assert (Seq_equal
  __flatten_58__70@90@03
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))
    0
    0)))
; [exec]
; __flatten_57__69.Main_process_state := __flatten_58__70
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
  __flatten_57__69@88@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               419
;  :arith-add-rows          2
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             474
;  :mk-clause               41
;  :num-allocs              3607078
;  :num-checks              60
;  :propagations            40
;  :quant-instantiations    24
;  :rlimit-count            121904)
(assert (not (= __flatten_57__69@88@03 $Ref.null)))
; [exec]
; __flatten_60__72 := diz.Prc_or_m
(declare-const __flatten_60__72@91@03 $Ref)
(assert (=
  __flatten_60__72@91@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))))
; [exec]
; __flatten_62__74 := diz.Prc_or_m
(declare-const __flatten_62__74@92@03 $Ref)
(assert (=
  __flatten_62__74@92@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))))
; [exec]
; __flatten_61__73 := __flatten_62__74.Main_event_state[0 := 2]
; [eval] __flatten_62__74.Main_event_state[0 := 2]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
  __flatten_62__74@92@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               422
;  :arith-add-rows          2
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             477
;  :mk-clause               41
;  :num-allocs              3607078
;  :num-checks              61
;  :propagations            40
;  :quant-instantiations    24
;  :rlimit-count            122031)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               422
;  :arith-add-rows          2
;  :arith-assert-diseq      11
;  :arith-assert-lower      30
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         4
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             477
;  :mk-clause               41
;  :num-allocs              3607078
;  :num-checks              62
;  :propagations            40
;  :quant-instantiations    24
;  :rlimit-count            122046)
(declare-const __flatten_61__73@93@03 Seq<Int>)
(assert (Seq_equal
  __flatten_61__73@93@03
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))
    0
    2)))
; [exec]
; __flatten_60__72.Main_event_state := __flatten_61__73
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
  __flatten_60__72@91@03)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               432
;  :arith-add-rows          4
;  :arith-assert-diseq      12
;  :arith-assert-lower      34
;  :arith-assert-upper      24
;  :arith-conflicts         2
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             499
;  :mk-clause               59
;  :num-allocs              3607078
;  :num-checks              63
;  :propagations            48
;  :quant-instantiations    29
;  :rlimit-count            122538)
(assert (not (= __flatten_60__72@91@03 $Ref.null)))
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@94@03 $Snap)
(assert (= $t@94@03 ($Snap.combine ($Snap.first $t@94@03) ($Snap.second $t@94@03))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               437
;  :arith-add-rows          4
;  :arith-assert-diseq      12
;  :arith-assert-lower      34
;  :arith-assert-upper      24
;  :arith-conflicts         2
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             500
;  :mk-clause               59
;  :num-allocs              3607078
;  :num-checks              64
;  :propagations            48
;  :quant-instantiations    29
;  :rlimit-count            122671)
(assert (=
  ($Snap.second $t@94@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@94@03))
    ($Snap.second ($Snap.second $t@94@03)))))
(assert (= ($Snap.first ($Snap.second $t@94@03)) $Snap.unit))
; [eval] diz.Prc_or_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@94@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@94@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@94@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
  $Snap.unit))
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
  $Snap.unit))
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
  $Snap.unit))
; [eval] (forall i__75: Int :: { diz.Prc_or_m.Main_process_state[i__75] } 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__75@95@03 Int)
(push) ; 4
; [eval] 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__75
(push) ; 5
; [then-branch: 4 | 0 <= i__75@95@03 | live]
; [else-branch: 4 | !(0 <= i__75@95@03) | live]
(push) ; 6
; [then-branch: 4 | 0 <= i__75@95@03]
(assert (<= 0 i__75@95@03))
; [eval] i__75 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 4 | !(0 <= i__75@95@03)]
(assert (not (<= 0 i__75@95@03)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 5 | i__75@95@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i__75@95@03 | live]
; [else-branch: 5 | !(i__75@95@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i__75@95@03) | live]
(push) ; 6
; [then-branch: 5 | i__75@95@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i__75@95@03]
(assert (and
  (<
    i__75@95@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
  (<= 0 i__75@95@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__75] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 7
(assert (not (>= i__75@95@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               481
;  :arith-add-rows          4
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      27
;  :arith-conflicts         2
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             525
;  :mk-clause               59
;  :num-allocs              3733826
;  :num-checks              65
;  :propagations            48
;  :quant-instantiations    34
;  :rlimit-count            123950)
; [eval] -1
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@94@03))))[i__75@95@03] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@94@03))))[i__75@95@03] != -1 | live]
(push) ; 8
; [then-branch: 6 | First:(Second:(Second:(Second:($t@94@03))))[i__75@95@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i__75@95@03)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 6 | First:(Second:(Second:(Second:($t@94@03))))[i__75@95@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      i__75@95@03)
    (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__75]
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 9
(assert (not (>= i__75@95@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               481
;  :arith-add-rows          4
;  :arith-assert-diseq      12
;  :arith-assert-lower      39
;  :arith-assert-upper      27
;  :arith-conflicts         2
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             526
;  :mk-clause               59
;  :num-allocs              3733826
;  :num-checks              66
;  :propagations            48
;  :quant-instantiations    34
;  :rlimit-count            124125)
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@94@03))))[i__75@95@03] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@94@03))))[i__75@95@03]) | live]
(push) ; 10
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@94@03))))[i__75@95@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i__75@95@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 11
(assert (not (>= i__75@95@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               481
;  :arith-add-rows          4
;  :arith-assert-diseq      13
;  :arith-assert-lower      42
;  :arith-assert-upper      27
;  :arith-conflicts         2
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              21
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             529
;  :mk-clause               60
;  :num-allocs              3733826
;  :num-checks              67
;  :propagations            48
;  :quant-instantiations    34
;  :rlimit-count            124248)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@94@03))))[i__75@95@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      i__75@95@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 5 | !(i__75@95@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i__75@95@03)]
(assert (not
  (and
    (<
      i__75@95@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
    (<= 0 i__75@95@03))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__75@95@03 Int)) (!
  (implies
    (and
      (<
        i__75@95@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
      (<= 0 i__75@95@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          i__75@95@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i__75@95@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i__75@95@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i__75@95@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))
(declare-const $k@96@03 $Perm)
(assert ($Perm.isReadVar $k@96@03 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@96@03 $Perm.No) (< $Perm.No $k@96@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               486
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      28
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             535
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              68
;  :propagations            49
;  :quant-instantiations    34
;  :rlimit-count            125016)
(assert (<= $Perm.No $k@96@03))
(assert (<= $k@96@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@96@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               492
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             538
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              69
;  :propagations            49
;  :quant-instantiations    34
;  :rlimit-count            125339)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               498
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             541
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              70
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            125695)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               503
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             542
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              71
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            125952)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               508
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             543
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              72
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            126219)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               513
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             544
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              73
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            126496)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               518
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               37
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             545
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              74
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            126783)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               523
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             546
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              75
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            127080)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               528
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             547
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              76
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            127387)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               533
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             548
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              77
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            127704)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               538
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               41
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             549
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              78
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            128031)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               543
;  :arith-add-rows          4
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             550
;  :mk-clause               62
;  :num-allocs              3733826
;  :num-checks              79
;  :propagations            49
;  :quant-instantiations    35
;  :rlimit-count            128368)
(declare-const $k@97@03 $Perm)
(assert ($Perm.isReadVar $k@97@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@97@03 $Perm.No) (< $Perm.No $k@97@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               543
;  :arith-add-rows          4
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      30
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             554
;  :mk-clause               64
;  :num-allocs              3733826
;  :num-checks              80
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            128567)
(assert (<= $Perm.No $k@97@03))
(assert (<= $k@97@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@97@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             557
;  :mk-clause               64
;  :num-allocs              3733826
;  :num-checks              81
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            129000)
(push) ; 4
(assert (not (< $Perm.No $k@97@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          4
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             557
;  :mk-clause               64
;  :num-allocs              3733826
;  :num-checks              82
;  :propagations            50
;  :quant-instantiations    35
;  :rlimit-count            129048)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
(declare-const $k@98@03 $Perm)
(assert ($Perm.isReadVar $k@98@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@98@03 $Perm.No) (< $Perm.No $k@98@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               557
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      32
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               46
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             564
;  :mk-clause               66
;  :num-allocs              3733826
;  :num-checks              83
;  :propagations            51
;  :quant-instantiations    36
;  :rlimit-count            129679)
(assert (<= $Perm.No $k@98@03))
(assert (<= $k@98@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@98@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@98@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               563
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               47
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             567
;  :mk-clause               66
;  :num-allocs              3733826
;  :num-checks              84
;  :propagations            51
;  :quant-instantiations    36
;  :rlimit-count            130132)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@98@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               569
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             570
;  :mk-clause               66
;  :num-allocs              3733826
;  :num-checks              85
;  :propagations            51
;  :quant-instantiations    37
;  :rlimit-count            130616)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               569
;  :arith-add-rows          4
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             570
;  :mk-clause               66
;  :num-allocs              3733826
;  :num-checks              86
;  :propagations            51
;  :quant-instantiations    37
;  :rlimit-count            130629)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))
(declare-const $k@99@03 $Perm)
(assert ($Perm.isReadVar $k@99@03 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@99@03 $Perm.No) (< $Perm.No $k@99@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      34
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.15
;  :memory                  4.15
;  :mk-bool-var             575
;  :mk-clause               68
;  :num-allocs              3733826
;  :num-checks              87
;  :propagations            52
;  :quant-instantiations    37
;  :rlimit-count            131160)
(assert (<= $Perm.No $k@99@03))
(assert (<= $k@99@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@99@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@99@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               580
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             578
;  :mk-clause               68
;  :num-allocs              3865233
;  :num-checks              88
;  :propagations            52
;  :quant-instantiations    37
;  :rlimit-count            131643)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@99@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             581
;  :mk-clause               68
;  :num-allocs              3865233
;  :num-checks              89
;  :propagations            52
;  :quant-instantiations    38
;  :rlimit-count            132159)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-add-rows          4
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             581
;  :mk-clause               68
;  :num-allocs              3865233
;  :num-checks              90
;  :propagations            52
;  :quant-instantiations    38
;  :rlimit-count            132172)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
(declare-const $k@100@03 $Perm)
(assert ($Perm.isReadVar $k@100@03 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@100@03 $Perm.No) (< $Perm.No $k@100@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               591
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      36
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               52
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             586
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              91
;  :propagations            53
;  :quant-instantiations    38
;  :rlimit-count            132732)
(assert (<= $Perm.No $k@100@03))
(assert (<= $k@100@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@100@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@100@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               597
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               53
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             589
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              92
;  :propagations            53
;  :quant-instantiations    38
;  :rlimit-count            133245)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@100@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               603
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             592
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              93
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            133791)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               603
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             592
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              94
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            133804)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@98@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               609
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             594
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              95
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            134283)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  diz@49@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               617
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             596
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              96
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            134757)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[0] != -2
; [eval] diz.Prc_or_m.Main_process_state[0] != -1
; [eval] diz.Prc_or_m.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               625
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             602
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              97
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            135324)
; [eval] -1
(push) ; 5
; [then-branch: 8 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1 | live]
; [else-branch: 8 | First:(Second:(Second:(Second:($t@94@03))))[0] == -1 | live]
(push) ; 6
; [then-branch: 8 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      0)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 8 | First:(Second:(Second:(Second:($t@94@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    0)
  (- 0 1)))
; [eval] diz.Prc_or_m.Main_event_state[0] != -2
; [eval] diz.Prc_or_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               626
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             603
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              98
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            135486)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [eval] !(diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[0] != -2)
; [eval] diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[0] != -2
; [eval] diz.Prc_or_m.Main_process_state[0] != -1
; [eval] diz.Prc_or_m.Main_process_state[0]
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               626
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             603
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              99
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            135506)
; [eval] -1
(push) ; 5
; [then-branch: 9 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1 | live]
; [else-branch: 9 | First:(Second:(Second:(Second:($t@94@03))))[0] == -1 | live]
(push) ; 6
; [then-branch: 9 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      0)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 9 | First:(Second:(Second:(Second:($t@94@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    0)
  (- 0 1)))
; [eval] diz.Prc_or_m.Main_event_state[0] != -2
; [eval] diz.Prc_or_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               627
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              22
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             604
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              100
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            135664)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               627
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             604
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              101
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            135682)
; [eval] diz.Prc_or_m != null
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_58__70@90@03) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               627
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             607
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              102
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            135756)
(assert (= (Seq_length __flatten_58__70@90@03) 3))
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_61__73@93@03) 6)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               628
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      53
;  :arith-assert-upper      38
;  :arith-conflicts         2
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             613
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              103
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            135881)
(assert (= (Seq_length __flatten_61__73@93@03) 6))
; [eval] (forall i__75: Int :: { diz.Prc_or_m.Main_process_state[i__75] } 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__75@101@03 Int)
(push) ; 4
; [eval] 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__75
(push) ; 5
; [then-branch: 10 | 0 <= i__75@101@03 | live]
; [else-branch: 10 | !(0 <= i__75@101@03) | live]
(push) ; 6
; [then-branch: 10 | 0 <= i__75@101@03]
(assert (<= 0 i__75@101@03))
; [eval] i__75 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 10 | !(0 <= i__75@101@03)]
(assert (not (<= 0 i__75@101@03)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 11 | i__75@101@03 < |__flatten_58__70@90@03| && 0 <= i__75@101@03 | live]
; [else-branch: 11 | !(i__75@101@03 < |__flatten_58__70@90@03| && 0 <= i__75@101@03) | live]
(push) ; 6
; [then-branch: 11 | i__75@101@03 < |__flatten_58__70@90@03| && 0 <= i__75@101@03]
(assert (and (< i__75@101@03 (Seq_length __flatten_58__70@90@03)) (<= 0 i__75@101@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__75] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 7
(assert (not (>= i__75@101@03 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               629
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      55
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             618
;  :mk-clause               70
;  :num-allocs              3865233
;  :num-checks              104
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            136068)
; [eval] -1
(push) ; 7
; [then-branch: 12 | __flatten_58__70@90@03[i__75@101@03] == -1 | live]
; [else-branch: 12 | __flatten_58__70@90@03[i__75@101@03] != -1 | live]
(push) ; 8
; [then-branch: 12 | __flatten_58__70@90@03[i__75@101@03] == -1]
(assert (= (Seq_index __flatten_58__70@90@03 i__75@101@03) (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 12 | __flatten_58__70@90@03[i__75@101@03] != -1]
(assert (not (= (Seq_index __flatten_58__70@90@03 i__75@101@03) (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__75]
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 9
(assert (not (>= i__75@101@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               630
;  :arith-add-rows          4
;  :arith-assert-diseq      18
;  :arith-assert-lower      55
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             625
;  :mk-clause               78
;  :num-allocs              3865233
;  :num-checks              105
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            136231)
(push) ; 9
; [then-branch: 13 | 0 <= __flatten_58__70@90@03[i__75@101@03] | live]
; [else-branch: 13 | !(0 <= __flatten_58__70@90@03[i__75@101@03]) | live]
(push) ; 10
; [then-branch: 13 | 0 <= __flatten_58__70@90@03[i__75@101@03]]
(assert (<= 0 (Seq_index __flatten_58__70@90@03 i__75@101@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 11
(assert (not (>= i__75@101@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               630
;  :arith-add-rows          4
;  :arith-assert-diseq      19
;  :arith-assert-lower      58
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 49
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               47
;  :del-clause              32
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             628
;  :mk-clause               79
;  :num-allocs              3865233
;  :num-checks              106
;  :propagations            53
;  :quant-instantiations    43
;  :rlimit-count            136305)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 13 | !(0 <= __flatten_58__70@90@03[i__75@101@03])]
(assert (not (<= 0 (Seq_index __flatten_58__70@90@03 i__75@101@03))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 11 | !(i__75@101@03 < |__flatten_58__70@90@03| && 0 <= i__75@101@03)]
(assert (not
  (and (< i__75@101@03 (Seq_length __flatten_58__70@90@03)) (<= 0 i__75@101@03))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((i__75@101@03 Int)) (!
  (implies
    (and
      (< i__75@101@03 (Seq_length __flatten_58__70@90@03))
      (<= 0 i__75@101@03))
    (or
      (= (Seq_index __flatten_58__70@90@03 i__75@101@03) (- 0 1))
      (and
        (<
          (Seq_index __flatten_58__70@90@03 i__75@101@03)
          (Seq_length __flatten_61__73@93@03))
        (<= 0 (Seq_index __flatten_58__70@90@03 i__75@101@03)))))
  :pattern ((Seq_index __flatten_58__70@90@03 i__75@101@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      72
;  :arith-assert-upper      51
;  :arith-conflicts         5
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               64
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             669
;  :mk-clause               135
;  :num-allocs              3865233
;  :num-checks              107
;  :propagations            83
;  :quant-instantiations    47
;  :rlimit-count            137010)
(assert (forall ((i__75@101@03 Int)) (!
  (implies
    (and
      (< i__75@101@03 (Seq_length __flatten_58__70@90@03))
      (<= 0 i__75@101@03))
    (or
      (= (Seq_index __flatten_58__70@90@03 i__75@101@03) (- 0 1))
      (and
        (<
          (Seq_index __flatten_58__70@90@03 i__75@101@03)
          (Seq_length __flatten_61__73@93@03))
        (<= 0 (Seq_index __flatten_58__70@90@03 i__75@101@03)))))
  :pattern ((Seq_index __flatten_58__70@90@03 i__75@101@03))
  :qid |prog.l<no position>|)))
(declare-const $k@102@03 $Perm)
(assert ($Perm.isReadVar $k@102@03 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@102@03 $Perm.No) (< $Perm.No $k@102@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      74
;  :arith-assert-upper      52
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             674
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              108
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137480)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@81@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      74
;  :arith-assert-upper      52
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             674
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              109
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137491)
(assert (< $k@102@03 $k@81@03))
(assert (<= $Perm.No (- $k@81@03 $k@102@03)))
(assert (<= (- $k@81@03 $k@102@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@81@03 $k@102@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder != null
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              110
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137705)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              111
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137753)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              112
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137801)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              113
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137849)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              114
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137897)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              115
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137945)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              116
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            137993)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              117
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            138041)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              118
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            138089)
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      53
;  :arith-conflicts         5
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             677
;  :mk-clause               137
;  :num-allocs              3865233
;  :num-checks              119
;  :propagations            84
;  :quant-instantiations    47
;  :rlimit-count            138137)
(declare-const $k@103@03 $Perm)
(assert ($Perm.isReadVar $k@103@03 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      28
;  :arith-assert-lower      78
;  :arith-assert-upper      54
;  :arith-conflicts         5
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             681
;  :mk-clause               139
;  :num-allocs              3865233
;  :num-checks              120
;  :propagations            85
;  :quant-instantiations    47
;  :rlimit-count            138334)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@103@03 $Perm.No) (< $Perm.No $k@103@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      28
;  :arith-assert-lower      78
;  :arith-assert-upper      54
;  :arith-conflicts         5
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             681
;  :mk-clause               139
;  :num-allocs              3865233
;  :num-checks              121
;  :propagations            85
;  :quant-instantiations    47
;  :rlimit-count            138384)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@82@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      28
;  :arith-assert-lower      78
;  :arith-assert-upper      54
;  :arith-conflicts         5
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             681
;  :mk-clause               139
;  :num-allocs              3865233
;  :num-checks              122
;  :propagations            85
;  :quant-instantiations    47
;  :rlimit-count            138395)
(assert (< $k@103@03 $k@82@03))
(assert (<= $Perm.No (- $k@82@03 $k@103@03)))
(assert (<= (- $k@82@03 $k@103@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@82@03 $k@103@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03))))))))))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(push) ; 4
(assert (not (< $Perm.No $k@81@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      28
;  :arith-assert-lower      80
;  :arith-assert-upper      55
;  :arith-conflicts         5
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             684
;  :mk-clause               139
;  :num-allocs              3865233
;  :num-checks              123
;  :propagations            85
;  :quant-instantiations    47
;  :rlimit-count            138609)
(push) ; 4
(assert (not (< $Perm.No $k@82@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      28
;  :arith-assert-lower      80
;  :arith-assert-upper      55
;  :arith-conflicts         5
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             684
;  :mk-clause               139
;  :num-allocs              3865233
;  :num-checks              124
;  :propagations            85
;  :quant-instantiations    47
;  :rlimit-count            138657)
(declare-const $k@104@03 $Perm)
(assert ($Perm.isReadVar $k@104@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@104@03 $Perm.No) (< $Perm.No $k@104@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      82
;  :arith-assert-upper      56
;  :arith-conflicts         5
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              97
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             688
;  :mk-clause               141
;  :num-allocs              3865233
;  :num-checks              125
;  :propagations            86
;  :quant-instantiations    47
;  :rlimit-count            138856)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@52@03 $k@83@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               652
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      82
;  :arith-assert-upper      57
;  :arith-conflicts         6
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         8
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              99
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             690
;  :mk-clause               143
;  :num-allocs              3865233
;  :num-checks              126
;  :propagations            87
;  :quant-instantiations    47
;  :rlimit-count            138918)
(assert (< $k@104@03 (+ $k@52@03 $k@83@03)))
(assert (<= $Perm.No (- (+ $k@52@03 $k@83@03) $k@104@03)))
(assert (<= (- (+ $k@52@03 $k@83@03) $k@104@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@52@03 $k@83@03) $k@104@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(push) ; 4
(assert (not (< $Perm.No (+ $k@52@03 $k@83@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               652
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      84
;  :arith-assert-upper      59
;  :arith-conflicts         7
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              99
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             694
;  :mk-clause               143
;  :num-allocs              3865233
;  :num-checks              127
;  :propagations            87
;  :quant-instantiations    47
;  :rlimit-count            139150)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               652
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      84
;  :arith-assert-upper      59
;  :arith-conflicts         7
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              99
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             694
;  :mk-clause               143
;  :num-allocs              3865233
;  :num-checks              128
;  :propagations            87
;  :quant-instantiations    47
;  :rlimit-count            139163)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ $k@52@03 $k@83@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               652
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      84
;  :arith-assert-upper      60
;  :arith-conflicts         8
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              99
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             695
;  :mk-clause               143
;  :num-allocs              3865233
;  :num-checks              129
;  :propagations            87
;  :quant-instantiations    47
;  :rlimit-count            139226)
(push) ; 4
(assert (not (= diz@49@03 $t@84@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               652
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      84
;  :arith-assert-upper      60
;  :arith-conflicts         8
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 52
;  :datatype-occurs-check   30
;  :datatype-splits         39
;  :decisions               53
;  :del-clause              99
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             696
;  :mk-clause               143
;  :num-allocs              3865233
;  :num-checks              130
;  :propagations            87
;  :quant-instantiations    47
;  :rlimit-count            139286)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      29
;  :arith-assert-lower      84
;  :arith-assert-upper      60
;  :arith-conflicts         8
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             713
;  :mk-clause               143
;  :num-allocs              3865233
;  :num-checks              131
;  :propagations            88
;  :quant-instantiations    47
;  :rlimit-count            139941
;  :time                    0.00)
(declare-const $k@105@03 $Perm)
(assert ($Perm.isReadVar $k@105@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@105@03 $Perm.No) (< $Perm.No $k@105@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      30
;  :arith-assert-lower      86
;  :arith-assert-upper      61
;  :arith-conflicts         8
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             717
;  :mk-clause               145
;  :num-allocs              3865233
;  :num-checks              132
;  :propagations            89
;  :quant-instantiations    47
;  :rlimit-count            140140)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@85@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      30
;  :arith-assert-lower      86
;  :arith-assert-upper      61
;  :arith-conflicts         8
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             717
;  :mk-clause               145
;  :num-allocs              3865233
;  :num-checks              133
;  :propagations            89
;  :quant-instantiations    47
;  :rlimit-count            140151)
(assert (< $k@105@03 $k@85@03))
(assert (<= $Perm.No (- $k@85@03 $k@105@03)))
(assert (<= (- $k@85@03 $k@105@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@85@03 $k@105@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(push) ; 4
(assert (not (< $Perm.No $k@85@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      30
;  :arith-assert-lower      88
;  :arith-assert-upper      62
;  :arith-conflicts         8
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             720
;  :mk-clause               145
;  :num-allocs              3865233
;  :num-checks              134
;  :propagations            89
;  :quant-instantiations    47
;  :rlimit-count            140365)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      30
;  :arith-assert-lower      88
;  :arith-assert-upper      62
;  :arith-conflicts         8
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             720
;  :mk-clause               145
;  :num-allocs              3865233
;  :num-checks              135
;  :propagations            89
;  :quant-instantiations    47
;  :rlimit-count            140378)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@85@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      30
;  :arith-assert-lower      88
;  :arith-assert-upper      62
;  :arith-conflicts         8
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         10
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             720
;  :mk-clause               145
;  :num-allocs              3865233
;  :num-checks              136
;  :propagations            89
;  :quant-instantiations    47
;  :rlimit-count            140426)
(declare-const $k@106@03 $Perm)
(assert ($Perm.isReadVar $k@106@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@106@03 $Perm.No) (< $Perm.No $k@106@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      31
;  :arith-assert-lower      90
;  :arith-assert-upper      63
;  :arith-conflicts         8
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         10
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             724
;  :mk-clause               147
;  :num-allocs              3865233
;  :num-checks              137
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            140625)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@86@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      31
;  :arith-assert-lower      90
;  :arith-assert-upper      63
;  :arith-conflicts         8
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         10
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             724
;  :mk-clause               147
;  :num-allocs              3865233
;  :num-checks              138
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            140636)
(assert (< $k@106@03 $k@86@03))
(assert (<= $Perm.No (- $k@86@03 $k@106@03)))
(assert (<= (- $k@86@03 $k@106@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@86@03 $k@106@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03)))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(push) ; 4
(assert (not (< $Perm.No $k@86@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      31
;  :arith-assert-lower      92
;  :arith-assert-upper      64
;  :arith-conflicts         8
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         10
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             727
;  :mk-clause               147
;  :num-allocs              3865233
;  :num-checks              139
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            140850)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      31
;  :arith-assert-lower      92
;  :arith-assert-upper      64
;  :arith-conflicts         8
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         10
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             727
;  :mk-clause               147
;  :num-allocs              3865233
;  :num-checks              140
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            140863)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@86@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      31
;  :arith-assert-lower      92
;  :arith-assert-upper      64
;  :arith-conflicts         8
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         10
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             727
;  :mk-clause               147
;  :num-allocs              3865233
;  :num-checks              141
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            140911)
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(push) ; 4
(assert (not (< $Perm.No (+ $k@52@03 $k@83@03))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      31
;  :arith-assert-lower      92
;  :arith-assert-upper      65
;  :arith-conflicts         9
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         11
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             728
;  :mk-clause               147
;  :num-allocs              3865233
;  :num-checks              142
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            140974)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@84@03 diz@49@03)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      31
;  :arith-assert-lower      92
;  :arith-assert-upper      65
;  :arith-conflicts         9
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         11
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             728
;  :mk-clause               147
;  :num-allocs              3865233
;  :num-checks              143
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            141030)
(assert (= $t@84@03 diz@49@03))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               712
;  :arith-add-rows          5
;  :arith-assert-diseq      31
;  :arith-assert-lower      92
;  :arith-assert-upper      65
;  :arith-conflicts         9
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         11
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 73
;  :datatype-occurs-check   36
;  :datatype-splits         57
;  :decisions               73
;  :del-clause              99
;  :final-checks            26
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             728
;  :mk-clause               147
;  :num-allocs              3865233
;  :num-checks              144
;  :propagations            90
;  :quant-instantiations    47
;  :rlimit-count            141078)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@96@03 $Perm.Write))
(assert ($Perm.isReadVar $k@97@03 $Perm.Write))
(assert ($Perm.isReadVar $k@98@03 $Perm.Write))
(assert ($Perm.isReadVar $k@99@03 $Perm.Write))
(assert ($Perm.isReadVar $k@100@03 $Perm.Write))
(assert (= $t@94@03 ($Snap.combine ($Snap.first $t@94@03) ($Snap.second $t@94@03))))
(assert (=
  ($Snap.second $t@94@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@94@03))
    ($Snap.second ($Snap.second $t@94@03)))))
(assert (= ($Snap.first ($Snap.second $t@94@03)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@94@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@94@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@94@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
  $Snap.unit))
(assert (forall ((i__75@95@03 Int)) (!
  (implies
    (and
      (<
        i__75@95@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
      (<= 0 i__75@95@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          i__75@95@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i__75@95@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i__75@95@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i__75@95@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))
(assert (<= $Perm.No $k@96@03))
(assert (<= $k@96@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@96@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
(assert (<= $Perm.No $k@97@03))
(assert (<= $k@97@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@97@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
(assert (<= $Perm.No $k@98@03))
(assert (<= $k@98@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@98@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@99@03))
(assert (<= $k@99@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@99@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@100@03))
(assert (<= $k@100@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@100@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  diz@49@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[0] != -2
; [eval] diz.Prc_or_m.Main_process_state[0] != -1
; [eval] diz.Prc_or_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1288
;  :arith-add-rows          5
;  :arith-assert-diseq      36
;  :arith-assert-lower      106
;  :arith-assert-upper      77
;  :arith-conflicts         9
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         11
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 209
;  :datatype-occurs-check   54
;  :datatype-splits         139
;  :decisions               201
;  :del-clause              111
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             910
;  :mk-clause               161
;  :num-allocs              4148056
;  :num-checks              147
;  :propagations            101
;  :quant-instantiations    60
;  :rlimit-count            148958)
; [eval] -1
(push) ; 5
; [then-branch: 14 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@94@03))))[0] == -1 | live]
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      0)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 14 | First:(Second:(Second:(Second:($t@94@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    0)
  (- 0 1)))
; [eval] diz.Prc_or_m.Main_event_state[0] != -2
; [eval] diz.Prc_or_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          5
;  :arith-assert-diseq      36
;  :arith-assert-lower      106
;  :arith-assert-upper      77
;  :arith-conflicts         9
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         11
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 209
;  :datatype-occurs-check   54
;  :datatype-splits         139
;  :decisions               201
;  :del-clause              111
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             911
;  :mk-clause               161
;  :num-allocs              4148056
;  :num-checks              148
;  :propagations            101
;  :quant-instantiations    60
;  :rlimit-count            149116)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1417
;  :arith-add-rows          5
;  :arith-assert-diseq      38
;  :arith-assert-lower      113
;  :arith-assert-upper      80
;  :arith-conflicts         9
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 253
;  :datatype-occurs-check   63
;  :datatype-splits         180
;  :decisions               243
;  :del-clause              122
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             967
;  :mk-clause               172
;  :num-allocs              4148056
;  :num-checks              149
;  :propagations            109
;  :quant-instantiations    62
;  :rlimit-count            150509
;  :time                    0.00)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      38
;  :arith-assert-lower      113
;  :arith-assert-upper      80
;  :arith-conflicts         9
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              122
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1009
;  :mk-clause               172
;  :num-allocs              4148056
;  :num-checks              150
;  :propagations            112
;  :quant-instantiations    62
;  :rlimit-count            151731
;  :time                    0.00)
; [then-branch: 15 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@94@03))))))[0] != -2 | live]
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@94@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@94@03))))))[0] != -2) | live]
(push) ; 5
; [then-branch: 15 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@94@03))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
        0)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@107@03 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 16 | 0 <= i@107@03 | live]
; [else-branch: 16 | !(0 <= i@107@03) | live]
(push) ; 8
; [then-branch: 16 | 0 <= i@107@03]
(assert (<= 0 i@107@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 16 | !(0 <= i@107@03)]
(assert (not (<= 0 i@107@03)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 17 | i@107@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i@107@03 | live]
; [else-branch: 17 | !(i@107@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i@107@03) | live]
(push) ; 8
; [then-branch: 17 | i@107@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i@107@03]
(assert (and
  (<
    i@107@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
  (<= 0 i@107@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@107@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      38
;  :arith-assert-lower      114
;  :arith-assert-upper      81
;  :arith-conflicts         9
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              122
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1013
;  :mk-clause               173
;  :num-allocs              4148056
;  :num-checks              151
;  :propagations            112
;  :quant-instantiations    62
;  :rlimit-count            152097)
; [eval] -1
(push) ; 9
; [then-branch: 18 | First:(Second:(Second:(Second:($t@94@03))))[i@107@03] == -1 | live]
; [else-branch: 18 | First:(Second:(Second:(Second:($t@94@03))))[i@107@03] != -1 | live]
(push) ; 10
; [then-branch: 18 | First:(Second:(Second:(Second:($t@94@03))))[i@107@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i@107@03)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 18 | First:(Second:(Second:(Second:($t@94@03))))[i@107@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      i@107@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@107@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      39
;  :arith-assert-lower      117
;  :arith-assert-upper      82
;  :arith-conflicts         9
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              122
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1019
;  :mk-clause               177
;  :num-allocs              4148056
;  :num-checks              152
;  :propagations            114
;  :quant-instantiations    63
;  :rlimit-count            152329)
(push) ; 11
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@94@03))))[i@107@03] | live]
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@94@03))))[i@107@03]) | live]
(push) ; 12
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@94@03))))[i@107@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i@107@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@107@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      39
;  :arith-assert-lower      117
;  :arith-assert-upper      82
;  :arith-conflicts         9
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              122
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1019
;  :mk-clause               177
;  :num-allocs              4148056
;  :num-checks              153
;  :propagations            114
;  :quant-instantiations    63
;  :rlimit-count            152443)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@94@03))))[i@107@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      i@107@03))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(i@107@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i@107@03)]
(assert (not
  (and
    (<
      i@107@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
    (<= 0 i@107@03))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@107@03 Int)) (!
  (implies
    (and
      (<
        i@107@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
      (<= 0 i@107@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          i@107@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i@107@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i@107@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i@107@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      41
;  :arith-assert-lower      118
;  :arith-assert-upper      83
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1027
;  :mk-clause               191
;  :num-allocs              4148056
;  :num-checks              154
;  :propagations            116
;  :quant-instantiations    64
;  :rlimit-count            152889)
(assert (forall ((i@107@03 Int)) (!
  (implies
    (and
      (<
        i@107@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
      (<= 0 i@107@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          i@107@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i@107@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i@107@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i@107@03))
  :qid |prog.l<no position>|)))
(declare-const $k@108@03 $Perm)
(assert ($Perm.isReadVar $k@108@03 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@108@03 $Perm.No) (< $Perm.No $k@108@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      120
;  :arith-assert-upper      84
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1032
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              155
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153450)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@96@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      120
;  :arith-assert-upper      84
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1032
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              156
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153461)
(assert (< $k@108@03 $k@96@03))
(assert (<= $Perm.No (- $k@96@03 $k@108@03)))
(assert (<= (- $k@96@03 $k@108@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@96@03 $k@108@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              157
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153675)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              158
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153723)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              159
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153771)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              160
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153819)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              161
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153867)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              162
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153915)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              163
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            153963)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              164
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            154011)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              165
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            154059)
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      85
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1035
;  :mk-clause               193
;  :num-allocs              4148056
;  :num-checks              166
;  :propagations            117
;  :quant-instantiations    64
;  :rlimit-count            154107)
(declare-const $k@109@03 $Perm)
(assert ($Perm.isReadVar $k@109@03 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      86
;  :arith-conflicts         9
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1039
;  :mk-clause               195
;  :num-allocs              4148056
;  :num-checks              167
;  :propagations            118
;  :quant-instantiations    64
;  :rlimit-count            154303)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@109@03 $Perm.No) (< $Perm.No $k@109@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      86
;  :arith-conflicts         9
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1039
;  :mk-clause               195
;  :num-allocs              4148056
;  :num-checks              168
;  :propagations            118
;  :quant-instantiations    64
;  :rlimit-count            154353)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@97@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      86
;  :arith-conflicts         9
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1039
;  :mk-clause               195
;  :num-allocs              4148056
;  :num-checks              169
;  :propagations            118
;  :quant-instantiations    64
;  :rlimit-count            154364)
(assert (< $k@109@03 $k@97@03))
(assert (<= $Perm.No (- $k@97@03 $k@109@03)))
(assert (<= (- $k@97@03 $k@109@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@97@03 $k@109@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 6
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      43
;  :arith-assert-lower      126
;  :arith-assert-upper      87
;  :arith-conflicts         9
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1042
;  :mk-clause               195
;  :num-allocs              4148056
;  :num-checks              170
;  :propagations            118
;  :quant-instantiations    64
;  :rlimit-count            154578)
(push) ; 6
(assert (not (< $Perm.No $k@97@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      43
;  :arith-assert-lower      126
;  :arith-assert-upper      87
;  :arith-conflicts         9
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1042
;  :mk-clause               195
;  :num-allocs              4148056
;  :num-checks              171
;  :propagations            118
;  :quant-instantiations    64
;  :rlimit-count            154626)
(declare-const $k@110@03 $Perm)
(assert ($Perm.isReadVar $k@110@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@110@03 $Perm.No) (< $Perm.No $k@110@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      128
;  :arith-assert-upper      88
;  :arith-conflicts         9
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1046
;  :mk-clause               197
;  :num-allocs              4148056
;  :num-checks              172
;  :propagations            119
;  :quant-instantiations    64
;  :rlimit-count            154825)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@98@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      128
;  :arith-assert-upper      88
;  :arith-conflicts         9
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1046
;  :mk-clause               197
;  :num-allocs              4148056
;  :num-checks              173
;  :propagations            119
;  :quant-instantiations    64
;  :rlimit-count            154836)
(assert (< $k@110@03 $k@98@03))
(assert (<= $Perm.No (- $k@98@03 $k@110@03)))
(assert (<= (- $k@98@03 $k@110@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@98@03 $k@110@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 6
(assert (not (< $Perm.No $k@98@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      89
;  :arith-conflicts         9
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1049
;  :mk-clause               197
;  :num-allocs              4148056
;  :num-checks              174
;  :propagations            119
;  :quant-instantiations    64
;  :rlimit-count            155044)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      89
;  :arith-conflicts         9
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1049
;  :mk-clause               197
;  :num-allocs              4148056
;  :num-checks              175
;  :propagations            119
;  :quant-instantiations    64
;  :rlimit-count            155057)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@98@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1543
;  :arith-add-rows          5
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      89
;  :arith-conflicts         9
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 297
;  :datatype-occurs-check   72
;  :datatype-splits         221
;  :decisions               284
;  :del-clause              140
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1049
;  :mk-clause               197
;  :num-allocs              4148056
;  :num-checks              176
;  :propagations            119
;  :quant-instantiations    64
;  :rlimit-count            155105)
(push) ; 6
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      46
;  :arith-assert-lower      137
;  :arith-assert-upper      92
;  :arith-conflicts         9
;  :arith-eq-adapter        66
;  :arith-fixed-eqs         13
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1103
;  :mk-clause               207
;  :num-allocs              4148056
;  :num-checks              177
;  :propagations            127
;  :quant-instantiations    67
;  :rlimit-count            156300
;  :time                    0.00)
(declare-const $k@111@03 $Perm)
(assert ($Perm.isReadVar $k@111@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@111@03 $Perm.No) (< $Perm.No $k@111@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      47
;  :arith-assert-lower      139
;  :arith-assert-upper      93
;  :arith-conflicts         9
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1107
;  :mk-clause               209
;  :num-allocs              4148056
;  :num-checks              178
;  :propagations            128
;  :quant-instantiations    67
;  :rlimit-count            156499)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@99@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      47
;  :arith-assert-lower      139
;  :arith-assert-upper      93
;  :arith-conflicts         9
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1107
;  :mk-clause               209
;  :num-allocs              4148056
;  :num-checks              179
;  :propagations            128
;  :quant-instantiations    67
;  :rlimit-count            156510)
(assert (< $k@111@03 $k@99@03))
(assert (<= $Perm.No (- $k@99@03 $k@111@03)))
(assert (<= (- $k@99@03 $k@111@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@99@03 $k@111@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 6
(assert (not (< $Perm.No $k@99@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      47
;  :arith-assert-lower      141
;  :arith-assert-upper      94
;  :arith-conflicts         9
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1110
;  :mk-clause               209
;  :num-allocs              4148056
;  :num-checks              180
;  :propagations            128
;  :quant-instantiations    67
;  :rlimit-count            156724)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      47
;  :arith-assert-lower      141
;  :arith-assert-upper      94
;  :arith-conflicts         9
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1110
;  :mk-clause               209
;  :num-allocs              4148056
;  :num-checks              181
;  :propagations            128
;  :quant-instantiations    67
;  :rlimit-count            156737)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@99@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      47
;  :arith-assert-lower      141
;  :arith-assert-upper      94
;  :arith-conflicts         9
;  :arith-eq-adapter        67
;  :arith-fixed-eqs         13
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1110
;  :mk-clause               209
;  :num-allocs              4148056
;  :num-checks              182
;  :propagations            128
;  :quant-instantiations    67
;  :rlimit-count            156785)
(declare-const $k@112@03 $Perm)
(assert ($Perm.isReadVar $k@112@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@112@03 $Perm.No) (< $Perm.No $k@112@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      48
;  :arith-assert-lower      143
;  :arith-assert-upper      95
;  :arith-conflicts         9
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         13
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1114
;  :mk-clause               211
;  :num-allocs              4148056
;  :num-checks              183
;  :propagations            129
;  :quant-instantiations    67
;  :rlimit-count            156983)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@100@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      48
;  :arith-assert-lower      143
;  :arith-assert-upper      95
;  :arith-conflicts         9
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         13
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1114
;  :mk-clause               211
;  :num-allocs              4148056
;  :num-checks              184
;  :propagations            129
;  :quant-instantiations    67
;  :rlimit-count            156994)
(assert (< $k@112@03 $k@100@03))
(assert (<= $Perm.No (- $k@100@03 $k@112@03)))
(assert (<= (- $k@100@03 $k@112@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@100@03 $k@112@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 6
(assert (not (< $Perm.No $k@100@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      48
;  :arith-assert-lower      145
;  :arith-assert-upper      96
;  :arith-conflicts         9
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         13
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1117
;  :mk-clause               211
;  :num-allocs              4148056
;  :num-checks              185
;  :propagations            129
;  :quant-instantiations    67
;  :rlimit-count            157214)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      48
;  :arith-assert-lower      145
;  :arith-assert-upper      96
;  :arith-conflicts         9
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         13
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1117
;  :mk-clause               211
;  :num-allocs              4148056
;  :num-checks              186
;  :propagations            129
;  :quant-instantiations    67
;  :rlimit-count            157227)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@100@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1671
;  :arith-add-rows          5
;  :arith-assert-diseq      48
;  :arith-assert-lower      145
;  :arith-assert-upper      96
;  :arith-conflicts         9
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         13
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 341
;  :datatype-occurs-check   81
;  :datatype-splits         262
;  :decisions               326
;  :del-clause              150
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1117
;  :mk-clause               211
;  :num-allocs              4148056
;  :num-checks              187
;  :propagations            129
;  :quant-instantiations    67
;  :rlimit-count            157275)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) globals@50@03))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(declare-const $t@113@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(assert (= $t@113@03 ($Snap.combine ($Snap.first $t@113@03) ($Snap.second $t@113@03))))
(assert (= ($Snap.first $t@113@03) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@113@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@113@03))
    ($Snap.second ($Snap.second $t@113@03)))))
(assert (= ($Snap.first ($Snap.second $t@113@03)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@113@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@113@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@113@03))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@113@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@114@03 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 20 | 0 <= i@114@03 | live]
; [else-branch: 20 | !(0 <= i@114@03) | live]
(push) ; 8
; [then-branch: 20 | 0 <= i@114@03]
(assert (<= 0 i@114@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 20 | !(0 <= i@114@03)]
(assert (not (<= 0 i@114@03)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 21 | i@114@03 < |First:(Second:(Second:(Second:($t@113@03))))| && 0 <= i@114@03 | live]
; [else-branch: 21 | !(i@114@03 < |First:(Second:(Second:(Second:($t@113@03))))| && 0 <= i@114@03) | live]
(push) ; 8
; [then-branch: 21 | i@114@03 < |First:(Second:(Second:(Second:($t@113@03))))| && 0 <= i@114@03]
(assert (and
  (<
    i@114@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
  (<= 0 i@114@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@114@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1912
;  :arith-add-rows          5
;  :arith-assert-diseq      50
;  :arith-assert-lower      157
;  :arith-assert-upper      102
;  :arith-conflicts         9
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         14
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              170
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1198
;  :mk-clause               221
;  :num-allocs              4300759
;  :num-checks              189
;  :propagations            137
;  :quant-instantiations    74
;  :rlimit-count            160936)
; [eval] -1
(push) ; 9
; [then-branch: 22 | First:(Second:(Second:(Second:($t@113@03))))[i@114@03] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@113@03))))[i@114@03] != -1 | live]
(push) ; 10
; [then-branch: 22 | First:(Second:(Second:(Second:($t@113@03))))[i@114@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
    i@114@03)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 22 | First:(Second:(Second:(Second:($t@113@03))))[i@114@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
      i@114@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@114@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1912
;  :arith-add-rows          5
;  :arith-assert-diseq      50
;  :arith-assert-lower      157
;  :arith-assert-upper      102
;  :arith-conflicts         9
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         14
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              170
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1199
;  :mk-clause               221
;  :num-allocs              4300759
;  :num-checks              190
;  :propagations            137
;  :quant-instantiations    74
;  :rlimit-count            161111)
(push) ; 11
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@113@03))))[i@114@03] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@113@03))))[i@114@03]) | live]
(push) ; 12
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@113@03))))[i@114@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
    i@114@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@114@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1912
;  :arith-add-rows          5
;  :arith-assert-diseq      51
;  :arith-assert-lower      160
;  :arith-assert-upper      102
;  :arith-conflicts         9
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         14
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    170
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              170
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1202
;  :mk-clause               222
;  :num-allocs              4300759
;  :num-checks              191
;  :propagations            137
;  :quant-instantiations    74
;  :rlimit-count            161235)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@113@03))))[i@114@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
      i@114@03))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(i@114@03 < |First:(Second:(Second:(Second:($t@113@03))))| && 0 <= i@114@03)]
(assert (not
  (and
    (<
      i@114@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
    (<= 0 i@114@03))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@114@03 Int)) (!
  (implies
    (and
      (<
        i@114@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
      (<= 0 i@114@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
          i@114@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
            i@114@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
            i@114@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
    i@114@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))
(declare-const $k@115@03 $Perm)
(assert ($Perm.isReadVar $k@115@03 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@115@03 $Perm.No) (< $Perm.No $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1917
;  :arith-add-rows          5
;  :arith-assert-diseq      52
;  :arith-assert-lower      162
;  :arith-assert-upper      103
;  :arith-conflicts         9
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1208
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              192
;  :propagations            138
;  :quant-instantiations    74
;  :rlimit-count            162004)
(declare-const $t@116@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@96@03 $k@108@03))
    (=
      $t@116@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))
  (implies
    (< $Perm.No $k@115@03)
    (=
      $t@116@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))
(assert (<= $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03)))
(assert (<= (+ (- $k@96@03 $k@108@03) $k@115@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1927
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      105
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         15
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    172
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1216
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              193
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            162684)
(assert (not (= $t@116@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1933
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      106
;  :arith-conflicts         11
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         16
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    173
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1219
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              194
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            163006)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1938
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      107
;  :arith-conflicts         12
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         17
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    174
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1221
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              195
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            163293)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1943
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      108
;  :arith-conflicts         13
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         18
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1223
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              196
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            163590)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1948
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      109
;  :arith-conflicts         14
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         19
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1225
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              197
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            163897)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1953
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      110
;  :arith-conflicts         15
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         20
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1227
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              198
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            164214)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1958
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      111
;  :arith-conflicts         16
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         21
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1229
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              199
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            164541)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1963
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      112
;  :arith-conflicts         17
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         22
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1231
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              200
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            164878)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1968
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      113
;  :arith-conflicts         18
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         23
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1233
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              201
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            165225)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1973
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      114
;  :arith-conflicts         19
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         24
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1235
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              202
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            165582)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1978
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      163
;  :arith-assert-upper      115
;  :arith-conflicts         20
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         25
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1237
;  :mk-clause               224
;  :num-allocs              4300759
;  :num-checks              203
;  :propagations            138
;  :quant-instantiations    75
;  :rlimit-count            165949)
(declare-const $k@117@03 $Perm)
(assert ($Perm.isReadVar $k@117@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@117@03 $Perm.No) (< $Perm.No $k@117@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1978
;  :arith-add-rows          6
;  :arith-assert-diseq      53
;  :arith-assert-lower      165
;  :arith-assert-upper      116
;  :arith-conflicts         20
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         25
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1241
;  :mk-clause               226
;  :num-allocs              4300759
;  :num-checks              204
;  :propagations            139
;  :quant-instantiations    75
;  :rlimit-count            166147)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  $t@116@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1978
;  :arith-add-rows          6
;  :arith-assert-diseq      53
;  :arith-assert-lower      165
;  :arith-assert-upper      116
;  :arith-conflicts         20
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         25
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1241
;  :mk-clause               226
;  :num-allocs              4300759
;  :num-checks              205
;  :propagations            139
;  :quant-instantiations    75
;  :rlimit-count            166158)
(declare-const $t@118@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@97@03 $k@109@03))
    (=
      $t@118@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@117@03)
    (=
      $t@118@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@97@03 $k@109@03) $k@117@03)))
(assert (<= (+ (- $k@97@03 $k@109@03) $k@117@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@97@03 $k@109@03) $k@117@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1988
;  :arith-add-rows          7
;  :arith-assert-diseq      53
;  :arith-assert-lower      166
;  :arith-assert-upper      118
;  :arith-conflicts         21
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         26
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1249
;  :mk-clause               226
;  :num-allocs              4300759
;  :num-checks              206
;  :propagations            139
;  :quant-instantiations    76
;  :rlimit-count            166880)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  $t@116@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1988
;  :arith-add-rows          7
;  :arith-assert-diseq      53
;  :arith-assert-lower      166
;  :arith-assert-upper      118
;  :arith-conflicts         21
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         26
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1249
;  :mk-clause               226
;  :num-allocs              4300759
;  :num-checks              207
;  :propagations            139
;  :quant-instantiations    76
;  :rlimit-count            166891)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@97@03 $k@109@03) $k@117@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1988
;  :arith-add-rows          7
;  :arith-assert-diseq      53
;  :arith-assert-lower      166
;  :arith-assert-upper      119
;  :arith-conflicts         22
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         27
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1250
;  :mk-clause               226
;  :num-allocs              4300759
;  :num-checks              208
;  :propagations            139
;  :quant-instantiations    76
;  :rlimit-count            166975)
(assert (= $t@118@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))
(declare-const $k@119@03 $Perm)
(assert ($Perm.isReadVar $k@119@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@119@03 $Perm.No) (< $Perm.No $k@119@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1993
;  :arith-add-rows          7
;  :arith-assert-diseq      54
;  :arith-assert-lower      168
;  :arith-assert-upper      120
;  :arith-conflicts         22
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         27
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1255
;  :mk-clause               228
;  :num-allocs              4300759
;  :num-checks              209
;  :propagations            140
;  :quant-instantiations    76
;  :rlimit-count            167474)
(declare-const $t@120@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@98@03 $k@110@03))
    (=
      $t@120@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@119@03)
    (=
      $t@120@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@98@03 $k@110@03) $k@119@03)))
(assert (<= (+ (- $k@98@03 $k@110@03) $k@119@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@98@03 $k@110@03) $k@119@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@98@03 $k@110@03) $k@119@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2003
;  :arith-add-rows          8
;  :arith-assert-diseq      54
;  :arith-assert-lower      169
;  :arith-assert-upper      122
;  :arith-conflicts         23
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         28
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    185
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1263
;  :mk-clause               228
;  :num-allocs              4300759
;  :num-checks              210
;  :propagations            140
;  :quant-instantiations    77
;  :rlimit-count            168225)
(assert (not (= $t@120@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@98@03 $k@110@03) $k@119@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2008
;  :arith-add-rows          9
;  :arith-assert-diseq      54
;  :arith-assert-lower      169
;  :arith-assert-upper      123
;  :arith-conflicts         24
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1265
;  :mk-clause               228
;  :num-allocs              4300759
;  :num-checks              211
;  :propagations            140
;  :quant-instantiations    77
;  :rlimit-count            168685)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2008
;  :arith-add-rows          9
;  :arith-assert-diseq      54
;  :arith-assert-lower      169
;  :arith-assert-upper      123
;  :arith-conflicts         24
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1265
;  :mk-clause               228
;  :num-allocs              4300759
;  :num-checks              212
;  :propagations            140
;  :quant-instantiations    77
;  :rlimit-count            168698)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  $t@120@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2008
;  :arith-add-rows          9
;  :arith-assert-diseq      54
;  :arith-assert-lower      169
;  :arith-assert-upper      123
;  :arith-conflicts         24
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1265
;  :mk-clause               228
;  :num-allocs              4300759
;  :num-checks              213
;  :propagations            140
;  :quant-instantiations    77
;  :rlimit-count            168709)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))))
(declare-const $k@121@03 $Perm)
(assert ($Perm.isReadVar $k@121@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@121@03 $Perm.No) (< $Perm.No $k@121@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2016
;  :arith-add-rows          9
;  :arith-assert-diseq      55
;  :arith-assert-lower      171
;  :arith-assert-upper      124
;  :arith-conflicts         24
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         29
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1272
;  :mk-clause               230
;  :num-allocs              4300759
;  :num-checks              214
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            169317)
(declare-const $t@122@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@99@03 $k@111@03))
    (=
      $t@122@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@121@03)
    (=
      $t@122@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@99@03 $k@111@03) $k@121@03)))
(assert (<= (+ (- $k@99@03 $k@111@03) $k@121@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@99@03 $k@111@03) $k@121@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@99@03 $k@111@03) $k@121@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2026
;  :arith-add-rows          10
;  :arith-assert-diseq      55
;  :arith-assert-lower      172
;  :arith-assert-upper      126
;  :arith-conflicts         25
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         30
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1280
;  :mk-clause               230
;  :num-allocs              4300759
;  :num-checks              215
;  :propagations            141
;  :quant-instantiations    79
;  :rlimit-count            170313)
(assert (not (= $t@122@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@99@03 $k@111@03) $k@121@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2032
;  :arith-add-rows          10
;  :arith-assert-diseq      55
;  :arith-assert-lower      172
;  :arith-assert-upper      127
;  :arith-conflicts         26
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         31
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1283
;  :mk-clause               230
;  :num-allocs              4300759
;  :num-checks              216
;  :propagations            141
;  :quant-instantiations    79
;  :rlimit-count            170795)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2032
;  :arith-add-rows          10
;  :arith-assert-diseq      55
;  :arith-assert-lower      172
;  :arith-assert-upper      127
;  :arith-conflicts         26
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         31
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1283
;  :mk-clause               230
;  :num-allocs              4300759
;  :num-checks              217
;  :propagations            141
;  :quant-instantiations    79
;  :rlimit-count            170808)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))))))
(declare-const $k@123@03 $Perm)
(assert ($Perm.isReadVar $k@123@03 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@123@03 $Perm.No) (< $Perm.No $k@123@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2037
;  :arith-add-rows          10
;  :arith-assert-diseq      56
;  :arith-assert-lower      174
;  :arith-assert-upper      128
;  :arith-conflicts         26
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         31
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1288
;  :mk-clause               232
;  :num-allocs              4300759
;  :num-checks              218
;  :propagations            142
;  :quant-instantiations    79
;  :rlimit-count            171369)
(declare-const $t@124@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@100@03 $k@112@03))
    (=
      $t@124@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@123@03)
    (=
      $t@124@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@100@03 $k@112@03) $k@123@03)))
(assert (<= (+ (- $k@100@03 $k@112@03) $k@123@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@100@03 $k@112@03) $k@123@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@100@03 $k@112@03) $k@123@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2047
;  :arith-add-rows          11
;  :arith-assert-diseq      56
;  :arith-assert-lower      175
;  :arith-assert-upper      130
;  :arith-conflicts         27
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         32
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1296
;  :mk-clause               232
;  :num-allocs              4300759
;  :num-checks              219
;  :propagations            142
;  :quant-instantiations    80
;  :rlimit-count            172429)
(assert (not (= $t@124@03 $Ref.null)))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@100@03 $k@112@03) $k@123@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2048
;  :arith-add-rows          11
;  :arith-assert-diseq      56
;  :arith-assert-lower      175
;  :arith-assert-upper      131
;  :arith-conflicts         28
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         33
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1298
;  :mk-clause               232
;  :num-allocs              4300759
;  :num-checks              220
;  :propagations            142
;  :quant-instantiations    80
;  :rlimit-count            172563)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2048
;  :arith-add-rows          11
;  :arith-assert-diseq      56
;  :arith-assert-lower      175
;  :arith-assert-upper      131
;  :arith-conflicts         28
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         33
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 385
;  :datatype-occurs-check   167
;  :datatype-splits         303
;  :decisions               368
;  :del-clause              171
;  :final-checks            44
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1298
;  :mk-clause               232
;  :num-allocs              4300759
;  :num-checks              221
;  :propagations            142
;  :quant-instantiations    80
;  :rlimit-count            172576)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@113@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) globals@50@03))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(declare-const $t@125@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2556
;  :arith-add-rows          13
;  :arith-assert-diseq      64
;  :arith-assert-lower      205
;  :arith-assert-upper      145
;  :arith-conflicts         28
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         39
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              225
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1475
;  :mk-clause               277
;  :num-allocs              4621578
;  :num-checks              224
;  :propagations            171
;  :quant-instantiations    90
;  :rlimit-count            176325)
; [eval] diz.Prc_or_m != null
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
; [eval] (forall i__75: Int :: { diz.Prc_or_m.Main_process_state[i__75] } 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__75@126@03 Int)
(push) ; 6
; [eval] 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__75 && i__75 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__75
(push) ; 7
; [then-branch: 24 | 0 <= i__75@126@03 | live]
; [else-branch: 24 | !(0 <= i__75@126@03) | live]
(push) ; 8
; [then-branch: 24 | 0 <= i__75@126@03]
(assert (<= 0 i__75@126@03))
; [eval] i__75 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 24 | !(0 <= i__75@126@03)]
(assert (not (<= 0 i__75@126@03)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 25 | i__75@126@03 < |First:(Second:(Second:(Second:($t@113@03))))| && 0 <= i__75@126@03 | live]
; [else-branch: 25 | !(i__75@126@03 < |First:(Second:(Second:(Second:($t@113@03))))| && 0 <= i__75@126@03) | live]
(push) ; 8
; [then-branch: 25 | i__75@126@03 < |First:(Second:(Second:(Second:($t@113@03))))| && 0 <= i__75@126@03]
(assert (and
  (<
    i__75@126@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
  (<= 0 i__75@126@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__75] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__75] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 9
(assert (not (>= i__75@126@03 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2556
;  :arith-add-rows          13
;  :arith-assert-diseq      64
;  :arith-assert-lower      206
;  :arith-assert-upper      146
;  :arith-conflicts         28
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         39
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              225
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1477
;  :mk-clause               277
;  :num-allocs              4621578
;  :num-checks              225
;  :propagations            171
;  :quant-instantiations    90
;  :rlimit-count            176461)
; [eval] -1
(push) ; 9
; [then-branch: 26 | First:(Second:(Second:(Second:($t@113@03))))[i__75@126@03] == -1 | live]
; [else-branch: 26 | First:(Second:(Second:(Second:($t@113@03))))[i__75@126@03] != -1 | live]
(push) ; 10
; [then-branch: 26 | First:(Second:(Second:(Second:($t@113@03))))[i__75@126@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
    i__75@126@03)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 26 | First:(Second:(Second:(Second:($t@113@03))))[i__75@126@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
      i__75@126@03)
    (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__75] && diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__75]
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 11
(assert (not (>= i__75@126@03 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2556
;  :arith-add-rows          13
;  :arith-assert-diseq      65
;  :arith-assert-lower      209
;  :arith-assert-upper      147
;  :arith-conflicts         28
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         39
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              225
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1483
;  :mk-clause               281
;  :num-allocs              4621578
;  :num-checks              226
;  :propagations            173
;  :quant-instantiations    91
;  :rlimit-count            176693)
(push) ; 11
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@113@03))))[i__75@126@03] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@113@03))))[i__75@126@03]) | live]
(push) ; 12
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@113@03))))[i__75@126@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
    i__75@126@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__75] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__75]
(push) ; 13
(assert (not (>= i__75@126@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2556
;  :arith-add-rows          13
;  :arith-assert-diseq      65
;  :arith-assert-lower      209
;  :arith-assert-upper      147
;  :arith-conflicts         28
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         39
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              225
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1483
;  :mk-clause               281
;  :num-allocs              4621578
;  :num-checks              227
;  :propagations            173
;  :quant-instantiations    91
;  :rlimit-count            176807)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@113@03))))[i__75@126@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
      i__75@126@03))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(i__75@126@03 < |First:(Second:(Second:(Second:($t@113@03))))| && 0 <= i__75@126@03)]
(assert (not
  (and
    (<
      i__75@126@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
    (<= 0 i__75@126@03))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i__75@126@03 Int)) (!
  (implies
    (and
      (<
        i__75@126@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
      (<= 0 i__75@126@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
          i__75@126@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
            i__75@126@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
            i__75@126@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
    i__75@126@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2556
;  :arith-add-rows          13
;  :arith-assert-diseq      67
;  :arith-assert-lower      210
;  :arith-assert-upper      148
;  :arith-conflicts         28
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         39
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              243
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1491
;  :mk-clause               295
;  :num-allocs              4621578
;  :num-checks              228
;  :propagations            175
;  :quant-instantiations    92
;  :rlimit-count            177253)
(assert (forall ((i__75@126@03 Int)) (!
  (implies
    (and
      (<
        i__75@126@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))
      (<= 0 i__75@126@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
          i__75@126@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
            i__75@126@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
            i__75@126@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@113@03)))))
    i__75@126@03))
  :qid |prog.l<no position>|)))
(declare-const $k@127@03 $Perm)
(assert ($Perm.isReadVar $k@127@03 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@127@03 $Perm.No) (< $Perm.No $k@127@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2556
;  :arith-add-rows          13
;  :arith-assert-diseq      68
;  :arith-assert-lower      212
;  :arith-assert-upper      149
;  :arith-conflicts         28
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         39
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              243
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1496
;  :mk-clause               297
;  :num-allocs              4621578
;  :num-checks              229
;  :propagations            176
;  :quant-instantiations    92
;  :rlimit-count            177814)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@96@03 $k@108@03) $k@115@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          13
;  :arith-assert-diseq      68
;  :arith-assert-lower      212
;  :arith-assert-upper      150
;  :arith-conflicts         29
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         39
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1498
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              230
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            177892)
(assert (< $k@127@03 (+ (- $k@96@03 $k@108@03) $k@115@03)))
(assert (<= $Perm.No (- (+ (- $k@96@03 $k@108@03) $k@115@03) $k@127@03)))
(assert (<= (- (+ (- $k@96@03 $k@108@03) $k@115@03) $k@127@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@96@03 $k@108@03) $k@115@03) $k@127@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      152
;  :arith-conflicts         30
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         40
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1502
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              231
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178157)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      153
;  :arith-conflicts         31
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         41
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1503
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              232
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178235)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      154
;  :arith-conflicts         32
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         42
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1504
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              233
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178313)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      155
;  :arith-conflicts         33
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         43
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1505
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              234
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178391)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      156
;  :arith-conflicts         34
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         44
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1506
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              235
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178469)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      157
;  :arith-conflicts         35
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         45
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1507
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              236
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178547)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      158
;  :arith-conflicts         36
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         46
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1508
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              237
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178625)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      159
;  :arith-conflicts         37
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         47
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1509
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              238
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178703)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      160
;  :arith-conflicts         38
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         48
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1510
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              239
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178781)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      161
;  :arith-conflicts         39
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         49
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1511
;  :mk-clause               299
;  :num-allocs              4621578
;  :num-checks              240
;  :propagations            177
;  :quant-instantiations    92
;  :rlimit-count            178859)
(declare-const $k@128@03 $Perm)
(assert ($Perm.isReadVar $k@128@03 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      69
;  :arith-assert-lower      216
;  :arith-assert-upper      163
;  :arith-conflicts         40
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         50
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1516
;  :mk-clause               301
;  :num-allocs              4621578
;  :num-checks              241
;  :propagations            178
;  :quant-instantiations    92
;  :rlimit-count            179085)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@128@03 $Perm.No) (< $Perm.No $k@128@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      69
;  :arith-assert-lower      216
;  :arith-assert-upper      163
;  :arith-conflicts         40
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         50
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1516
;  :mk-clause               301
;  :num-allocs              4621578
;  :num-checks              242
;  :propagations            178
;  :quant-instantiations    92
;  :rlimit-count            179135)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  $t@116@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2557
;  :arith-add-rows          14
;  :arith-assert-diseq      69
;  :arith-assert-lower      216
;  :arith-assert-upper      163
;  :arith-conflicts         40
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         50
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              245
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1516
;  :mk-clause               301
;  :num-allocs              4621578
;  :num-checks              243
;  :propagations            178
;  :quant-instantiations    92
;  :rlimit-count            179146)
(push) ; 6
(assert (not (not (= (+ (- $k@97@03 $k@109@03) $k@117@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2558
;  :arith-add-rows          14
;  :arith-assert-diseq      69
;  :arith-assert-lower      216
;  :arith-assert-upper      164
;  :arith-conflicts         41
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         50
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              247
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1518
;  :mk-clause               303
;  :num-allocs              4621578
;  :num-checks              244
;  :propagations            179
;  :quant-instantiations    92
;  :rlimit-count            179226)
(assert (< $k@128@03 (+ (- $k@97@03 $k@109@03) $k@117@03)))
(assert (<= $Perm.No (- (+ (- $k@97@03 $k@109@03) $k@117@03) $k@128@03)))
(assert (<= (- (+ (- $k@97@03 $k@109@03) $k@117@03) $k@128@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@97@03 $k@109@03) $k@117@03) $k@128@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@96@03 $k@108@03) $k@115@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2558
;  :arith-add-rows          16
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      166
;  :arith-conflicts         42
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         51
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              247
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1522
;  :mk-clause               303
;  :num-allocs              4621578
;  :num-checks              245
;  :propagations            179
;  :quant-instantiations    92
;  :rlimit-count            179492)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  $t@116@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2558
;  :arith-add-rows          16
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      166
;  :arith-conflicts         42
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         51
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              247
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1522
;  :mk-clause               303
;  :num-allocs              4621578
;  :num-checks              246
;  :propagations            179
;  :quant-instantiations    92
;  :rlimit-count            179503)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@97@03 $k@109@03) $k@117@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2558
;  :arith-add-rows          16
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      167
;  :arith-conflicts         43
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         52
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              247
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1523
;  :mk-clause               303
;  :num-allocs              4621578
;  :num-checks              247
;  :propagations            179
;  :quant-instantiations    92
;  :rlimit-count            179584)
(declare-const $k@129@03 $Perm)
(assert ($Perm.isReadVar $k@129@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@129@03 $Perm.No) (< $Perm.No $k@129@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2558
;  :arith-add-rows          16
;  :arith-assert-diseq      70
;  :arith-assert-lower      220
;  :arith-assert-upper      168
;  :arith-conflicts         43
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         52
;  :arith-pivots            44
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              247
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1527
;  :mk-clause               305
;  :num-allocs              4621578
;  :num-checks              248
;  :propagations            180
;  :quant-instantiations    92
;  :rlimit-count            179782)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@98@03 $k@110@03) $k@119@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2559
;  :arith-add-rows          17
;  :arith-assert-diseq      70
;  :arith-assert-lower      220
;  :arith-assert-upper      169
;  :arith-conflicts         44
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         52
;  :arith-pivots            46
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              249
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1529
;  :mk-clause               307
;  :num-allocs              4621578
;  :num-checks              249
;  :propagations            181
;  :quant-instantiations    92
;  :rlimit-count            179890)
(assert (< $k@129@03 (+ (- $k@98@03 $k@110@03) $k@119@03)))
(assert (<= $Perm.No (- (+ (- $k@98@03 $k@110@03) $k@119@03) $k@129@03)))
(assert (<= (- (+ (- $k@98@03 $k@110@03) $k@119@03) $k@129@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@98@03 $k@110@03) $k@119@03) $k@129@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@98@03 $k@110@03) $k@119@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2559
;  :arith-add-rows          19
;  :arith-assert-diseq      70
;  :arith-assert-lower      222
;  :arith-assert-upper      171
;  :arith-conflicts         45
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         53
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              249
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1533
;  :mk-clause               307
;  :num-allocs              4621578
;  :num-checks              250
;  :propagations            181
;  :quant-instantiations    92
;  :rlimit-count            180191)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2559
;  :arith-add-rows          19
;  :arith-assert-diseq      70
;  :arith-assert-lower      222
;  :arith-assert-upper      171
;  :arith-conflicts         45
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         53
;  :arith-pivots            49
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              249
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1533
;  :mk-clause               307
;  :num-allocs              4621578
;  :num-checks              251
;  :propagations            181
;  :quant-instantiations    92
;  :rlimit-count            180204)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@98@03 $k@110@03) $k@119@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2559
;  :arith-add-rows          20
;  :arith-assert-diseq      70
;  :arith-assert-lower      222
;  :arith-assert-upper      172
;  :arith-conflicts         46
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         54
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              249
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1534
;  :mk-clause               307
;  :num-allocs              4621578
;  :num-checks              252
;  :propagations            181
;  :quant-instantiations    92
;  :rlimit-count            180313)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))))))))))))
  $t@120@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2559
;  :arith-add-rows          20
;  :arith-assert-diseq      70
;  :arith-assert-lower      222
;  :arith-assert-upper      172
;  :arith-conflicts         46
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         54
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 536
;  :datatype-occurs-check   261
;  :datatype-splits         415
;  :decisions               513
;  :del-clause              249
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1534
;  :mk-clause               307
;  :num-allocs              4621578
;  :num-checks              253
;  :propagations            181
;  :quant-instantiations    92
;  :rlimit-count            180324)
(push) ; 6
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2762
;  :arith-add-rows          21
;  :arith-assert-diseq      73
;  :arith-assert-lower      233
;  :arith-assert-upper      177
;  :arith-conflicts         46
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         56
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              266
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1612
;  :mk-clause               324
;  :num-allocs              4621578
;  :num-checks              254
;  :propagations            193
;  :quant-instantiations    97
;  :rlimit-count            181954
;  :time                    0.00)
(declare-const $k@130@03 $Perm)
(assert ($Perm.isReadVar $k@130@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@130@03 $Perm.No) (< $Perm.No $k@130@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2762
;  :arith-add-rows          21
;  :arith-assert-diseq      74
;  :arith-assert-lower      235
;  :arith-assert-upper      178
;  :arith-conflicts         46
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         56
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              266
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1616
;  :mk-clause               326
;  :num-allocs              4621578
;  :num-checks              255
;  :propagations            194
;  :quant-instantiations    97
;  :rlimit-count            182152)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@99@03 $k@111@03) $k@121@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2763
;  :arith-add-rows          21
;  :arith-assert-diseq      74
;  :arith-assert-lower      235
;  :arith-assert-upper      179
;  :arith-conflicts         47
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         56
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              268
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1618
;  :mk-clause               328
;  :num-allocs              4621578
;  :num-checks              256
;  :propagations            195
;  :quant-instantiations    97
;  :rlimit-count            182230)
(assert (< $k@130@03 (+ (- $k@99@03 $k@111@03) $k@121@03)))
(assert (<= $Perm.No (- (+ (- $k@99@03 $k@111@03) $k@121@03) $k@130@03)))
(assert (<= (- (+ (- $k@99@03 $k@111@03) $k@121@03) $k@130@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@99@03 $k@111@03) $k@121@03) $k@130@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@99@03 $k@111@03) $k@121@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2763
;  :arith-add-rows          22
;  :arith-assert-diseq      74
;  :arith-assert-lower      237
;  :arith-assert-upper      181
;  :arith-conflicts         48
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         57
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              268
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1622
;  :mk-clause               328
;  :num-allocs              4621578
;  :num-checks              257
;  :propagations            195
;  :quant-instantiations    97
;  :rlimit-count            182502)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2763
;  :arith-add-rows          22
;  :arith-assert-diseq      74
;  :arith-assert-lower      237
;  :arith-assert-upper      181
;  :arith-conflicts         48
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         57
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              268
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1622
;  :mk-clause               328
;  :num-allocs              4621578
;  :num-checks              258
;  :propagations            195
;  :quant-instantiations    97
;  :rlimit-count            182515)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@99@03 $k@111@03) $k@121@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2763
;  :arith-add-rows          22
;  :arith-assert-diseq      74
;  :arith-assert-lower      237
;  :arith-assert-upper      182
;  :arith-conflicts         49
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         58
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              268
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1623
;  :mk-clause               328
;  :num-allocs              4621578
;  :num-checks              259
;  :propagations            195
;  :quant-instantiations    97
;  :rlimit-count            182593)
(declare-const $k@131@03 $Perm)
(assert ($Perm.isReadVar $k@131@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@131@03 $Perm.No) (< $Perm.No $k@131@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2763
;  :arith-add-rows          22
;  :arith-assert-diseq      75
;  :arith-assert-lower      239
;  :arith-assert-upper      183
;  :arith-conflicts         49
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         58
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              268
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1627
;  :mk-clause               330
;  :num-allocs              4621578
;  :num-checks              260
;  :propagations            196
;  :quant-instantiations    97
;  :rlimit-count            182791)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@100@03 $k@112@03) $k@123@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2764
;  :arith-add-rows          22
;  :arith-assert-diseq      75
;  :arith-assert-lower      239
;  :arith-assert-upper      184
;  :arith-conflicts         50
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         58
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              270
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1629
;  :mk-clause               332
;  :num-allocs              4621578
;  :num-checks              261
;  :propagations            197
;  :quant-instantiations    97
;  :rlimit-count            182869)
(assert (< $k@131@03 (+ (- $k@100@03 $k@112@03) $k@123@03)))
(assert (<= $Perm.No (- (+ (- $k@100@03 $k@112@03) $k@123@03) $k@131@03)))
(assert (<= (- (+ (- $k@100@03 $k@112@03) $k@123@03) $k@131@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@100@03 $k@112@03) $k@123@03) $k@131@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@100@03 $k@112@03) $k@123@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2764
;  :arith-add-rows          23
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         51
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         59
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              270
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1633
;  :mk-clause               332
;  :num-allocs              4621578
;  :num-checks              262
;  :propagations            197
;  :quant-instantiations    97
;  :rlimit-count            183141)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2764
;  :arith-add-rows          23
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      186
;  :arith-conflicts         51
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         59
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              270
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1633
;  :mk-clause               332
;  :num-allocs              4621578
;  :num-checks              263
;  :propagations            197
;  :quant-instantiations    97
;  :rlimit-count            183154)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@100@03 $k@112@03) $k@123@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2764
;  :arith-add-rows          23
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      187
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         60
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              270
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1634
;  :mk-clause               332
;  :num-allocs              4621578
;  :num-checks              264
;  :propagations            197
;  :quant-instantiations    97
;  :rlimit-count            183232)
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@98@03 $k@110@03) $k@119@03))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2764
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              270
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1635
;  :mk-clause               332
;  :num-allocs              4621578
;  :num-checks              265
;  :propagations            197
;  :quant-instantiations    97
;  :rlimit-count            183346)
(set-option :timeout 0)
(push) ; 6
(assert (not (= $t@120@03 diz@49@03)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2764
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              270
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1635
;  :mk-clause               332
;  :num-allocs              4621578
;  :num-checks              266
;  :propagations            197
;  :quant-instantiations    97
;  :rlimit-count            183357)
(assert (= $t@120@03 diz@49@03))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2764
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 595
;  :datatype-occurs-check   308
;  :datatype-splits         471
;  :decisions               569
;  :del-clause              270
;  :final-checks            53
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1635
;  :mk-clause               332
;  :num-allocs              4621578
;  :num-checks              267
;  :propagations            197
;  :quant-instantiations    97
;  :rlimit-count            183373)
(pop) ; 5
(push) ; 5
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@94@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@94@03))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
          0)
        (- 0 2))))))
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2987
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 674
;  :datatype-occurs-check   320
;  :datatype-splits         548
;  :decisions               641
;  :del-clause              283
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1714
;  :mk-clause               333
;  :num-allocs              4621578
;  :num-checks              268
;  :propagations            203
;  :quant-instantiations    97
;  :rlimit-count            184987
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3210
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   332
;  :datatype-splits         625
;  :decisions               713
;  :del-clause              284
;  :final-checks            61
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1793
;  :mk-clause               334
;  :num-allocs              4621578
;  :num-checks              269
;  :propagations            209
;  :quant-instantiations    97
;  :rlimit-count            186520
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3433
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 832
;  :datatype-occurs-check   344
;  :datatype-splits         702
;  :decisions               785
;  :del-clause              285
;  :final-checks            65
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1872
;  :mk-clause               335
;  :num-allocs              4621578
;  :num-checks              270
;  :propagations            215
;  :quant-instantiations    97
;  :rlimit-count            188053
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3607
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    228
;  :datatype-constructor-ax 894
;  :datatype-occurs-check   353
;  :datatype-splits         745
;  :decisions               843
;  :del-clause              286
;  :final-checks            68
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1918
;  :mk-clause               336
;  :num-allocs              4621578
;  :num-checks              271
;  :propagations            218
;  :quant-instantiations    97
;  :rlimit-count            189558
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3830
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 973
;  :datatype-occurs-check   365
;  :datatype-splits         822
;  :decisions               915
;  :del-clause              287
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1997
;  :mk-clause               337
;  :num-allocs              4621578
;  :num-checks              272
;  :propagations            224
;  :quant-instantiations    97
;  :rlimit-count            191091
;  :time                    0.00)
; [eval] !(diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[0] != -2)
; [eval] diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[0] != -2
; [eval] diz.Prc_or_m.Main_process_state[0] != -1
; [eval] diz.Prc_or_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3830
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 973
;  :datatype-occurs-check   365
;  :datatype-splits         822
;  :decisions               915
;  :del-clause              287
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1997
;  :mk-clause               337
;  :num-allocs              4621578
;  :num-checks              273
;  :propagations            224
;  :quant-instantiations    97
;  :rlimit-count            191106)
; [eval] -1
(push) ; 5
; [then-branch: 28 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1 | live]
; [else-branch: 28 | First:(Second:(Second:(Second:($t@94@03))))[0] == -1 | live]
(push) ; 6
; [then-branch: 28 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      0)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | First:(Second:(Second:(Second:($t@94@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    0)
  (- 0 1)))
; [eval] diz.Prc_or_m.Main_event_state[0] != -2
; [eval] diz.Prc_or_m.Main_event_state[0]
(push) ; 7
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3831
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 973
;  :datatype-occurs-check   365
;  :datatype-splits         822
;  :decisions               915
;  :del-clause              287
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             1998
;  :mk-clause               337
;  :num-allocs              4621578
;  :num-checks              274
;  :propagations            224
;  :quant-instantiations    97
;  :rlimit-count            191264)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3957
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      241
;  :arith-assert-upper      188
;  :arith-conflicts         53
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            69
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    238
;  :datatype-constructor-ax 1017
;  :datatype-occurs-check   374
;  :datatype-splits         863
;  :decisions               956
;  :del-clause              287
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2040
;  :mk-clause               337
;  :num-allocs              4621578
;  :num-checks              275
;  :propagations            227
;  :quant-instantiations    97
;  :rlimit-count            192486
;  :time                    0.00)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4085
;  :arith-add-rows          24
;  :arith-assert-diseq      77
;  :arith-assert-lower      248
;  :arith-assert-upper      191
;  :arith-conflicts         53
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              298
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2096
;  :mk-clause               348
;  :num-allocs              4621578
;  :num-checks              276
;  :propagations            235
;  :quant-instantiations    99
;  :rlimit-count            193853
;  :time                    0.00)
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@94@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@94@03))))))[0] != -2) | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@94@03))))))[0] != -2 | live]
(push) ; 5
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@94@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@94@03))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
          0)
        (- 0 2))))))
(declare-const __flatten_64__77@132@03 $Ref)
(declare-const __flatten_63__76@133@03 $Ref)
(declare-const __flatten_67__80@134@03 $Ref)
(declare-const __flatten_66__79@135@03 $Ref)
(declare-const __flatten_69__82@136@03 $Ref)
(declare-const __flatten_68__81@137@03 $Ref)
(declare-const __flatten_65__78@138@03 Bool)
(declare-const __flatten_71__84@139@03 $Ref)
(declare-const __flatten_70__83@140@03 $Ref)
(declare-const __flatten_74__87@141@03 $Ref)
(declare-const __flatten_73__86@142@03 $Ref)
(declare-const __flatten_72__85@143@03 Bool)
(declare-const __flatten_75__88@144@03 $Ref)
(declare-const __flatten_77__90@145@03 $Ref)
(declare-const __flatten_76__89@146@03 Seq<Int>)
(declare-const __flatten_78__91@147@03 $Ref)
(declare-const __flatten_80__93@148@03 $Ref)
(declare-const __flatten_79__92@149@03 Seq<Int>)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@150@03 $Snap)
(assert (= $t@150@03 ($Snap.combine ($Snap.first $t@150@03) ($Snap.second $t@150@03))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4092
;  :arith-add-rows          24
;  :arith-assert-diseq      77
;  :arith-assert-lower      248
;  :arith-assert-upper      191
;  :arith-conflicts         53
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    242
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              298
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2099
;  :mk-clause               348
;  :num-allocs              4621578
;  :num-checks              277
;  :propagations            235
;  :quant-instantiations    99
;  :rlimit-count            194170)
(assert (=
  ($Snap.second $t@150@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@150@03))
    ($Snap.second ($Snap.second $t@150@03)))))
(assert (= ($Snap.first ($Snap.second $t@150@03)) $Snap.unit))
; [eval] diz.Prc_or_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@150@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@150@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@150@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
  $Snap.unit))
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
  $Snap.unit))
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
  $Snap.unit))
; [eval] (forall i__94: Int :: { diz.Prc_or_m.Main_process_state[i__94] } 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__94@151@03 Int)
(push) ; 7
; [eval] 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__94
(push) ; 8
; [then-branch: 30 | 0 <= i__94@151@03 | live]
; [else-branch: 30 | !(0 <= i__94@151@03) | live]
(push) ; 9
; [then-branch: 30 | 0 <= i__94@151@03]
(assert (<= 0 i__94@151@03))
; [eval] i__94 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 30 | !(0 <= i__94@151@03)]
(assert (not (<= 0 i__94@151@03)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 31 | i__94@151@03 < |First:(Second:(Second:(Second:($t@150@03))))| && 0 <= i__94@151@03 | live]
; [else-branch: 31 | !(i__94@151@03 < |First:(Second:(Second:(Second:($t@150@03))))| && 0 <= i__94@151@03) | live]
(push) ; 9
; [then-branch: 31 | i__94@151@03 < |First:(Second:(Second:(Second:($t@150@03))))| && 0 <= i__94@151@03]
(assert (and
  (<
    i__94@151@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
  (<= 0 i__94@151@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__94] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 10
(assert (not (>= i__94@151@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4136
;  :arith-add-rows          24
;  :arith-assert-diseq      77
;  :arith-assert-lower      253
;  :arith-assert-upper      194
;  :arith-conflicts         53
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              298
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2124
;  :mk-clause               348
;  :num-allocs              4621578
;  :num-checks              278
;  :propagations            235
;  :quant-instantiations    104
;  :rlimit-count            195447)
; [eval] -1
(push) ; 10
; [then-branch: 32 | First:(Second:(Second:(Second:($t@150@03))))[i__94@151@03] == -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@150@03))))[i__94@151@03] != -1 | live]
(push) ; 11
; [then-branch: 32 | First:(Second:(Second:(Second:($t@150@03))))[i__94@151@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
    i__94@151@03)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 32 | First:(Second:(Second:(Second:($t@150@03))))[i__94@151@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
      i__94@151@03)
    (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__94]
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 12
(assert (not (>= i__94@151@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4136
;  :arith-add-rows          24
;  :arith-assert-diseq      77
;  :arith-assert-lower      253
;  :arith-assert-upper      194
;  :arith-conflicts         53
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              298
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2125
;  :mk-clause               348
;  :num-allocs              4621578
;  :num-checks              279
;  :propagations            235
;  :quant-instantiations    104
;  :rlimit-count            195622)
(push) ; 12
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@150@03))))[i__94@151@03] | live]
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@150@03))))[i__94@151@03]) | live]
(push) ; 13
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@150@03))))[i__94@151@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
    i__94@151@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 14
(assert (not (>= i__94@151@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4136
;  :arith-add-rows          24
;  :arith-assert-diseq      78
;  :arith-assert-lower      256
;  :arith-assert-upper      194
;  :arith-conflicts         53
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              298
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2128
;  :mk-clause               349
;  :num-allocs              4621578
;  :num-checks              280
;  :propagations            235
;  :quant-instantiations    104
;  :rlimit-count            195746)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@150@03))))[i__94@151@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
      i__94@151@03))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 31 | !(i__94@151@03 < |First:(Second:(Second:(Second:($t@150@03))))| && 0 <= i__94@151@03)]
(assert (not
  (and
    (<
      i__94@151@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
    (<= 0 i__94@151@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__94@151@03 Int)) (!
  (implies
    (and
      (<
        i__94@151@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
      (<= 0 i__94@151@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
          i__94@151@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
            i__94@151@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
            i__94@151@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
    i__94@151@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
(declare-const $k@152@03 $Perm)
(assert ($Perm.isReadVar $k@152@03 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@152@03 $Perm.No) (< $Perm.No $k@152@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4141
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      195
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    250
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2134
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              281
;  :propagations            236
;  :quant-instantiations    104
;  :rlimit-count            196515)
(assert (<= $Perm.No $k@152@03))
(assert (<= $k@152@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@152@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4147
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    251
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2137
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              282
;  :propagations            236
;  :quant-instantiations    104
;  :rlimit-count            196838)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4153
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    252
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2140
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              283
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            197194)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4158
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2141
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              284
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            197451)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4163
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2142
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              285
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            197718)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4168
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    255
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2143
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              286
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            197995)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4173
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    256
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2144
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              287
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            198282)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4178
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2145
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              288
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            198579)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4183
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2146
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              289
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            198886)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4188
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2147
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              290
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            199203)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4193
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2148
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              291
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            199530)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4198
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      258
;  :arith-assert-upper      196
;  :arith-conflicts         53
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2149
;  :mk-clause               351
;  :num-allocs              4621578
;  :num-checks              292
;  :propagations            236
;  :quant-instantiations    105
;  :rlimit-count            199867)
(declare-const $k@153@03 $Perm)
(assert ($Perm.isReadVar $k@153@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@153@03 $Perm.No) (< $Perm.No $k@153@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4198
;  :arith-add-rows          24
;  :arith-assert-diseq      80
;  :arith-assert-lower      260
;  :arith-assert-upper      197
;  :arith-conflicts         53
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2153
;  :mk-clause               353
;  :num-allocs              4621578
;  :num-checks              293
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            200066)
(assert (<= $Perm.No $k@153@03))
(assert (<= $k@153@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@153@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4204
;  :arith-add-rows          24
;  :arith-assert-diseq      80
;  :arith-assert-lower      260
;  :arith-assert-upper      198
;  :arith-conflicts         53
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2156
;  :mk-clause               353
;  :num-allocs              4621578
;  :num-checks              294
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            200499)
(push) ; 7
(assert (not (< $Perm.No $k@153@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4204
;  :arith-add-rows          24
;  :arith-assert-diseq      80
;  :arith-assert-lower      260
;  :arith-assert-upper      198
;  :arith-conflicts         53
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2156
;  :mk-clause               353
;  :num-allocs              4621578
;  :num-checks              295
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            200547)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))
(declare-const $k@154@03 $Perm)
(assert ($Perm.isReadVar $k@154@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@154@03 $Perm.No) (< $Perm.No $k@154@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4212
;  :arith-add-rows          24
;  :arith-assert-diseq      81
;  :arith-assert-lower      262
;  :arith-assert-upper      199
;  :arith-conflicts         53
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2163
;  :mk-clause               355
;  :num-allocs              4621578
;  :num-checks              296
;  :propagations            238
;  :quant-instantiations    106
;  :rlimit-count            201178)
(assert (<= $Perm.No $k@154@03))
(assert (<= $k@154@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@154@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@154@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4218
;  :arith-add-rows          24
;  :arith-assert-diseq      81
;  :arith-assert-lower      262
;  :arith-assert-upper      200
;  :arith-conflicts         53
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2166
;  :mk-clause               355
;  :num-allocs              4621578
;  :num-checks              297
;  :propagations            238
;  :quant-instantiations    106
;  :rlimit-count            201631)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@154@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4224
;  :arith-add-rows          24
;  :arith-assert-diseq      81
;  :arith-assert-lower      262
;  :arith-assert-upper      200
;  :arith-conflicts         53
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2169
;  :mk-clause               355
;  :num-allocs              4621578
;  :num-checks              298
;  :propagations            238
;  :quant-instantiations    107
;  :rlimit-count            202115)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4224
;  :arith-add-rows          24
;  :arith-assert-diseq      81
;  :arith-assert-lower      262
;  :arith-assert-upper      200
;  :arith-conflicts         53
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2169
;  :mk-clause               355
;  :num-allocs              4621578
;  :num-checks              299
;  :propagations            238
;  :quant-instantiations    107
;  :rlimit-count            202128)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))
(declare-const $k@155@03 $Perm)
(assert ($Perm.isReadVar $k@155@03 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@155@03 $Perm.No) (< $Perm.No $k@155@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4229
;  :arith-add-rows          24
;  :arith-assert-diseq      82
;  :arith-assert-lower      264
;  :arith-assert-upper      201
;  :arith-conflicts         53
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2174
;  :mk-clause               357
;  :num-allocs              4621578
;  :num-checks              300
;  :propagations            239
;  :quant-instantiations    107
;  :rlimit-count            202658)
(assert (<= $Perm.No $k@155@03))
(assert (<= $k@155@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@155@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@155@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4235
;  :arith-add-rows          24
;  :arith-assert-diseq      82
;  :arith-assert-lower      264
;  :arith-assert-upper      202
;  :arith-conflicts         53
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    267
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2177
;  :mk-clause               357
;  :num-allocs              4621578
;  :num-checks              301
;  :propagations            239
;  :quant-instantiations    107
;  :rlimit-count            203141)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@155@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4241
;  :arith-add-rows          24
;  :arith-assert-diseq      82
;  :arith-assert-lower      264
;  :arith-assert-upper      202
;  :arith-conflicts         53
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2180
;  :mk-clause               357
;  :num-allocs              4621578
;  :num-checks              302
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            203657)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4241
;  :arith-add-rows          24
;  :arith-assert-diseq      82
;  :arith-assert-lower      264
;  :arith-assert-upper      202
;  :arith-conflicts         53
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2180
;  :mk-clause               357
;  :num-allocs              4621578
;  :num-checks              303
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            203670)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))
(declare-const $k@156@03 $Perm)
(assert ($Perm.isReadVar $k@156@03 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@156@03 $Perm.No) (< $Perm.No $k@156@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4246
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      266
;  :arith-assert-upper      203
;  :arith-conflicts         53
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2185
;  :mk-clause               359
;  :num-allocs              4621578
;  :num-checks              304
;  :propagations            240
;  :quant-instantiations    108
;  :rlimit-count            204230)
(assert (<= $Perm.No $k@156@03))
(assert (<= $k@156@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@156@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@156@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4252
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      266
;  :arith-assert-upper      204
;  :arith-conflicts         53
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2188
;  :mk-clause               359
;  :num-allocs              4621578
;  :num-checks              305
;  :propagations            240
;  :quant-instantiations    108
;  :rlimit-count            204743)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@156@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4258
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      266
;  :arith-assert-upper      204
;  :arith-conflicts         53
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2191
;  :mk-clause               359
;  :num-allocs              4621578
;  :num-checks              306
;  :propagations            240
;  :quant-instantiations    109
;  :rlimit-count            205289)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4258
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      266
;  :arith-assert-upper      204
;  :arith-conflicts         53
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2191
;  :mk-clause               359
;  :num-allocs              4621578
;  :num-checks              307
;  :propagations            240
;  :quant-instantiations    109
;  :rlimit-count            205302)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@154@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4264
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      266
;  :arith-assert-upper      204
;  :arith-conflicts         53
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2193
;  :mk-clause               359
;  :num-allocs              4621578
;  :num-checks              308
;  :propagations            240
;  :quant-instantiations    109
;  :rlimit-count            205781)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
  diz@49@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4272
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      266
;  :arith-assert-upper      204
;  :arith-conflicts         53
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              299
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2195
;  :mk-clause               359
;  :num-allocs              4621578
;  :num-checks              309
;  :propagations            240
;  :quant-instantiations    109
;  :rlimit-count            206255)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
(pop) ; 7
(push) ; 7
; [eval] !true
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      266
;  :arith-assert-upper      204
;  :arith-conflicts         53
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              309
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2200
;  :mk-clause               359
;  :num-allocs              4621578
;  :num-checks              310
;  :propagations            240
;  :quant-instantiations    111
;  :rlimit-count            206812)
; [eval] diz.Prc_or_m != null
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
; [eval] (forall i__94: Int :: { diz.Prc_or_m.Main_process_state[i__94] } 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__94@157@03 Int)
(push) ; 7
; [eval] 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__94
(push) ; 8
; [then-branch: 34 | 0 <= i__94@157@03 | live]
; [else-branch: 34 | !(0 <= i__94@157@03) | live]
(push) ; 9
; [then-branch: 34 | 0 <= i__94@157@03]
(assert (<= 0 i__94@157@03))
; [eval] i__94 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 34 | !(0 <= i__94@157@03)]
(assert (not (<= 0 i__94@157@03)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 35 | i__94@157@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i__94@157@03 | live]
; [else-branch: 35 | !(i__94@157@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i__94@157@03) | live]
(push) ; 9
; [then-branch: 35 | i__94@157@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i__94@157@03]
(assert (and
  (<
    i__94@157@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
  (<= 0 i__94@157@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__94] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 10
(assert (not (>= i__94@157@03 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      267
;  :arith-assert-upper      205
;  :arith-conflicts         53
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              309
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2202
;  :mk-clause               359
;  :num-allocs              4621578
;  :num-checks              311
;  :propagations            240
;  :quant-instantiations    111
;  :rlimit-count            206948)
; [eval] -1
(push) ; 10
; [then-branch: 36 | First:(Second:(Second:(Second:($t@94@03))))[i__94@157@03] == -1 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:($t@94@03))))[i__94@157@03] != -1 | live]
(push) ; 11
; [then-branch: 36 | First:(Second:(Second:(Second:($t@94@03))))[i__94@157@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i__94@157@03)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 36 | First:(Second:(Second:(Second:($t@94@03))))[i__94@157@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      i__94@157@03)
    (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__94]
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 12
(assert (not (>= i__94@157@03 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      84
;  :arith-assert-lower      270
;  :arith-assert-upper      206
;  :arith-conflicts         53
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              309
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2208
;  :mk-clause               363
;  :num-allocs              4621578
;  :num-checks              312
;  :propagations            242
;  :quant-instantiations    112
;  :rlimit-count            207180)
(push) ; 12
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@94@03))))[i__94@157@03] | live]
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@94@03))))[i__94@157@03]) | live]
(push) ; 13
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@94@03))))[i__94@157@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i__94@157@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 14
(assert (not (>= i__94@157@03 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      84
;  :arith-assert-lower      270
;  :arith-assert-upper      206
;  :arith-conflicts         53
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              309
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2208
;  :mk-clause               363
;  :num-allocs              4621578
;  :num-checks              313
;  :propagations            242
;  :quant-instantiations    112
;  :rlimit-count            207294)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@94@03))))[i__94@157@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
      i__94@157@03))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(i__94@157@03 < |First:(Second:(Second:(Second:($t@94@03))))| && 0 <= i__94@157@03)]
(assert (not
  (and
    (<
      i__94@157@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
    (<= 0 i__94@157@03))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i__94@157@03 Int)) (!
  (implies
    (and
      (<
        i__94@157@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
      (<= 0 i__94@157@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          i__94@157@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i__94@157@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i__94@157@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i__94@157@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      271
;  :arith-assert-upper      207
;  :arith-conflicts         53
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2216
;  :mk-clause               377
;  :num-allocs              4621578
;  :num-checks              314
;  :propagations            244
;  :quant-instantiations    113
;  :rlimit-count            207740)
(assert (forall ((i__94@157@03 Int)) (!
  (implies
    (and
      (<
        i__94@157@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
      (<= 0 i__94@157@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
          i__94@157@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i__94@157@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
            i__94@157@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
    i__94@157@03))
  :qid |prog.l<no position>|)))
(declare-const $k@158@03 $Perm)
(assert ($Perm.isReadVar $k@158@03 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@158@03 $Perm.No) (< $Perm.No $k@158@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      273
;  :arith-assert-upper      208
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2221
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              315
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208302)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@96@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      273
;  :arith-assert-upper      208
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2221
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              316
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208313)
(assert (< $k@158@03 $k@96@03))
(assert (<= $Perm.No (- $k@96@03 $k@158@03)))
(assert (<= (- $k@96@03 $k@158@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@96@03 $k@158@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder != null
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              317
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208521)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              318
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208569)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              319
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208617)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              320
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208665)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              321
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208713)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              322
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208761)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              323
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208809)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              324
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208857)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              325
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208905)
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      275
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2224
;  :mk-clause               379
;  :num-allocs              4621578
;  :num-checks              326
;  :propagations            245
;  :quant-instantiations    113
;  :rlimit-count            208953)
(declare-const $k@159@03 $Perm)
(assert ($Perm.isReadVar $k@159@03 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      277
;  :arith-assert-upper      210
;  :arith-conflicts         53
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2228
;  :mk-clause               381
;  :num-allocs              4621578
;  :num-checks              327
;  :propagations            246
;  :quant-instantiations    113
;  :rlimit-count            209149)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@159@03 $Perm.No) (< $Perm.No $k@159@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      277
;  :arith-assert-upper      210
;  :arith-conflicts         53
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2228
;  :mk-clause               381
;  :num-allocs              4621578
;  :num-checks              328
;  :propagations            246
;  :quant-instantiations    113
;  :rlimit-count            209199)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@97@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      277
;  :arith-assert-upper      210
;  :arith-conflicts         53
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2228
;  :mk-clause               381
;  :num-allocs              4621578
;  :num-checks              329
;  :propagations            246
;  :quant-instantiations    113
;  :rlimit-count            209210)
(assert (< $k@159@03 $k@97@03))
(assert (<= $Perm.No (- $k@97@03 $k@159@03)))
(assert (<= (- $k@97@03 $k@159@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@97@03 $k@159@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(push) ; 7
(assert (not (< $Perm.No $k@96@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      279
;  :arith-assert-upper      211
;  :arith-conflicts         53
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2231
;  :mk-clause               381
;  :num-allocs              4621578
;  :num-checks              330
;  :propagations            246
;  :quant-instantiations    113
;  :rlimit-count            209424)
(push) ; 7
(assert (not (< $Perm.No $k@97@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      279
;  :arith-assert-upper      211
;  :arith-conflicts         53
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2231
;  :mk-clause               381
;  :num-allocs              4621578
;  :num-checks              331
;  :propagations            246
;  :quant-instantiations    113
;  :rlimit-count            209472)
(declare-const $k@160@03 $Perm)
(assert ($Perm.isReadVar $k@160@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@160@03 $Perm.No) (< $Perm.No $k@160@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      281
;  :arith-assert-upper      212
;  :arith-conflicts         53
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2235
;  :mk-clause               383
;  :num-allocs              4621578
;  :num-checks              332
;  :propagations            247
;  :quant-instantiations    113
;  :rlimit-count            209671)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@98@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      281
;  :arith-assert-upper      212
;  :arith-conflicts         53
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2235
;  :mk-clause               383
;  :num-allocs              4621578
;  :num-checks              333
;  :propagations            247
;  :quant-instantiations    113
;  :rlimit-count            209682)
(assert (< $k@160@03 $k@98@03))
(assert (<= $Perm.No (- $k@98@03 $k@160@03)))
(assert (<= (- $k@98@03 $k@160@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@98@03 $k@160@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(push) ; 7
(assert (not (< $Perm.No $k@98@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      213
;  :arith-conflicts         53
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2238
;  :mk-clause               383
;  :num-allocs              4621578
;  :num-checks              334
;  :propagations            247
;  :quant-instantiations    113
;  :rlimit-count            209890)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      213
;  :arith-conflicts         53
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2238
;  :mk-clause               383
;  :num-allocs              4621578
;  :num-checks              335
;  :propagations            247
;  :quant-instantiations    113
;  :rlimit-count            209903)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@98@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4281
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      213
;  :arith-conflicts         53
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1061
;  :datatype-occurs-check   383
;  :datatype-splits         904
;  :decisions               998
;  :del-clause              327
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2238
;  :mk-clause               383
;  :num-allocs              4621578
;  :num-checks              336
;  :propagations            247
;  :quant-instantiations    113
;  :rlimit-count            209951)
(push) ; 7
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      213
;  :arith-conflicts         53
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2278
;  :mk-clause               383
;  :num-allocs              4621578
;  :num-checks              337
;  :propagations            250
;  :quant-instantiations    113
;  :rlimit-count            211002
;  :time                    0.00)
(declare-const $k@161@03 $Perm)
(assert ($Perm.isReadVar $k@161@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@161@03 $Perm.No) (< $Perm.No $k@161@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      214
;  :arith-conflicts         53
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2282
;  :mk-clause               385
;  :num-allocs              4621578
;  :num-checks              338
;  :propagations            251
;  :quant-instantiations    113
;  :rlimit-count            211201)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@99@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      214
;  :arith-conflicts         53
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2282
;  :mk-clause               385
;  :num-allocs              4621578
;  :num-checks              339
;  :propagations            251
;  :quant-instantiations    113
;  :rlimit-count            211212)
(assert (< $k@161@03 $k@99@03))
(assert (<= $Perm.No (- $k@99@03 $k@161@03)))
(assert (<= (- $k@99@03 $k@161@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@99@03 $k@161@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(push) ; 7
(assert (not (< $Perm.No $k@99@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      215
;  :arith-conflicts         53
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2285
;  :mk-clause               385
;  :num-allocs              4621578
;  :num-checks              340
;  :propagations            251
;  :quant-instantiations    113
;  :rlimit-count            211420)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      215
;  :arith-conflicts         53
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2285
;  :mk-clause               385
;  :num-allocs              4621578
;  :num-checks              341
;  :propagations            251
;  :quant-instantiations    113
;  :rlimit-count            211433)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@99@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      287
;  :arith-assert-upper      215
;  :arith-conflicts         53
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2285
;  :mk-clause               385
;  :num-allocs              4621578
;  :num-checks              342
;  :propagations            251
;  :quant-instantiations    113
;  :rlimit-count            211481)
(declare-const $k@162@03 $Perm)
(assert ($Perm.isReadVar $k@162@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@162@03 $Perm.No) (< $Perm.No $k@162@03))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      216
;  :arith-conflicts         53
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2289
;  :mk-clause               387
;  :num-allocs              4621578
;  :num-checks              343
;  :propagations            252
;  :quant-instantiations    113
;  :rlimit-count            211679)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@100@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      91
;  :arith-assert-lower      289
;  :arith-assert-upper      216
;  :arith-conflicts         53
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2289
;  :mk-clause               387
;  :num-allocs              4621578
;  :num-checks              344
;  :propagations            252
;  :quant-instantiations    113
;  :rlimit-count            211690)
(assert (< $k@162@03 $k@100@03))
(assert (<= $Perm.No (- $k@100@03 $k@162@03)))
(assert (<= (- $k@100@03 $k@162@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@100@03 $k@162@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(push) ; 7
(assert (not (< $Perm.No $k@100@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      91
;  :arith-assert-lower      291
;  :arith-assert-upper      217
;  :arith-conflicts         53
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2292
;  :mk-clause               387
;  :num-allocs              4621578
;  :num-checks              345
;  :propagations            252
;  :quant-instantiations    113
;  :rlimit-count            211904)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      91
;  :arith-assert-lower      291
;  :arith-assert-upper      217
;  :arith-conflicts         53
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2292
;  :mk-clause               387
;  :num-allocs              4621578
;  :num-checks              346
;  :propagations            252
;  :quant-instantiations    113
;  :rlimit-count            211917)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@100@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      91
;  :arith-assert-lower      291
;  :arith-assert-upper      217
;  :arith-conflicts         53
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2292
;  :mk-clause               387
;  :num-allocs              4621578
;  :num-checks              347
;  :propagations            252
;  :quant-instantiations    113
;  :rlimit-count            211965)
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(push) ; 7
(assert (not (< $Perm.No $k@98@03)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      91
;  :arith-assert-lower      291
;  :arith-assert-upper      217
;  :arith-conflicts         53
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2292
;  :mk-clause               387
;  :num-allocs              4621578
;  :num-checks              348
;  :propagations            252
;  :quant-instantiations    113
;  :rlimit-count            212013)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          24
;  :arith-assert-diseq      91
;  :arith-assert-lower      291
;  :arith-assert-upper      217
;  :arith-conflicts         53
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1105
;  :datatype-occurs-check   392
;  :datatype-splits         945
;  :decisions               1039
;  :del-clause              327
;  :final-checks            81
;  :max-generation          2
;  :max-memory              4.74
;  :memory                  4.74
;  :mk-bool-var             2292
;  :mk-clause               387
;  :num-allocs              4621578
;  :num-checks              349
;  :propagations            252
;  :quant-instantiations    113
;  :rlimit-count            212026)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@152@03 $Perm.Write))
(assert ($Perm.isReadVar $k@153@03 $Perm.Write))
(assert ($Perm.isReadVar $k@154@03 $Perm.Write))
(assert ($Perm.isReadVar $k@155@03 $Perm.Write))
(assert ($Perm.isReadVar $k@156@03 $Perm.Write))
(assert (= $t@150@03 ($Snap.combine ($Snap.first $t@150@03) ($Snap.second $t@150@03))))
(assert (=
  ($Snap.second $t@150@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@150@03))
    ($Snap.second ($Snap.second $t@150@03)))))
(assert (= ($Snap.first ($Snap.second $t@150@03)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@150@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@150@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@150@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
  $Snap.unit))
(assert (forall ((i__94@151@03 Int)) (!
  (implies
    (and
      (<
        i__94@151@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
      (<= 0 i__94@151@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
          i__94@151@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
            i__94@151@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
            i__94@151@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
    i__94@151@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
(assert (<= $Perm.No $k@152@03))
(assert (<= $k@152@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@152@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
(assert (<= $Perm.No $k@153@03))
(assert (<= $k@153@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@153@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))
(assert (<= $Perm.No $k@154@03))
(assert (<= $k@154@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@154@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@155@03))
(assert (<= $k@155@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@155@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@156@03))
(assert (<= $k@156@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@156@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
  diz@49@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5314
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2569
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              352
;  :propagations            268
;  :quant-instantiations    125
;  :rlimit-count            221917
;  :time                    0.00)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(push) ; 8
; [then-branch: 38 | True]
; [exec]
; __flatten_64__77 := diz.Prc_or_m
(declare-const __flatten_64__77@163@03 $Ref)
(assert (= __flatten_64__77@163@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_63__76 := __flatten_64__77.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_64__77@163@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5315
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2570
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              353
;  :propagations            268
;  :quant-instantiations    125
;  :rlimit-count            221990)
(push) ; 9
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5315
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2570
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              354
;  :propagations            268
;  :quant-instantiations    125
;  :rlimit-count            222038)
(declare-const __flatten_63__76@164@03 $Ref)
(assert (=
  __flatten_63__76@164@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
; [exec]
; __flatten_67__80 := diz.Prc_or_m
(declare-const __flatten_67__80@165@03 $Ref)
(assert (= __flatten_67__80@165@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_66__79 := __flatten_67__80.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_67__80@165@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5317
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2572
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              355
;  :propagations            268
;  :quant-instantiations    125
;  :rlimit-count            222216)
(push) ; 9
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5317
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2572
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              356
;  :propagations            268
;  :quant-instantiations    125
;  :rlimit-count            222264)
(declare-const __flatten_66__79@166@03 $Ref)
(assert (=
  __flatten_66__79@166@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
; [exec]
; __flatten_69__82 := diz.Prc_or_m
(declare-const __flatten_69__82@167@03 $Ref)
(assert (= __flatten_69__82@167@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_68__81 := __flatten_69__82.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_69__82@167@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5319
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2574
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              357
;  :propagations            268
;  :quant-instantiations    125
;  :rlimit-count            222342)
(push) ; 9
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5319
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2574
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              358
;  :propagations            268
;  :quant-instantiations    125
;  :rlimit-count            222390)
(declare-const __flatten_68__81@168@03 $Ref)
(assert (=
  __flatten_68__81@168@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
; [exec]
; __flatten_65__78 := __flatten_66__79.Full_adder_c1 || __flatten_68__81.Full_adder_c2
; [eval] __flatten_66__79.Full_adder_c1 || __flatten_68__81.Full_adder_c2
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  __flatten_66__79@166@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5320
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2575
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              359
;  :propagations            268
;  :quant-instantiations    125
;  :rlimit-count            222438)
(push) ; 9
; [then-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@150@03))))))))))))))))) | live]
; [else-branch: 39 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@150@03)))))))))))))))))) | live]
(push) ; 10
; [then-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@150@03)))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 39 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@150@03))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))))
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  __flatten_68__81@168@03)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5323
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2577
;  :mk-clause               400
;  :num-allocs              4814358
;  :num-checks              360
;  :propagations            268
;  :quant-instantiations    126
;  :rlimit-count            222757)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const __flatten_65__78@169@03 Bool)
(assert (=
  __flatten_65__78@169@03
  (or
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))))))))))))
; [exec]
; __flatten_63__76.Full_adder_carry_out := __flatten_65__78
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  __flatten_63__76@164@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5323
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2581
;  :mk-clause               405
;  :num-allocs              4814358
;  :num-checks              361
;  :propagations            268
;  :quant-instantiations    126
;  :rlimit-count            223057)
(assert (not (= __flatten_63__76@164@03 $Ref.null)))
; [exec]
; __flatten_71__84 := diz.Prc_or_m
(declare-const __flatten_71__84@170@03 $Ref)
(assert (= __flatten_71__84@170@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_70__83 := __flatten_71__84.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_71__84@170@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5325
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2583
;  :mk-clause               405
;  :num-allocs              4814358
;  :num-checks              362
;  :propagations            268
;  :quant-instantiations    126
;  :rlimit-count            223154)
(push) ; 9
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5325
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2583
;  :mk-clause               405
;  :num-allocs              4814358
;  :num-checks              363
;  :propagations            268
;  :quant-instantiations    126
;  :rlimit-count            223202)
(declare-const __flatten_70__83@171@03 $Ref)
(assert (=
  __flatten_70__83@171@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
; [exec]
; __flatten_74__87 := diz.Prc_or_m
(declare-const __flatten_74__87@172@03 $Ref)
(assert (= __flatten_74__87@172@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_73__86 := __flatten_74__87.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_74__87@172@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5327
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2585
;  :mk-clause               405
;  :num-allocs              4814358
;  :num-checks              364
;  :propagations            268
;  :quant-instantiations    126
;  :rlimit-count            223280)
(push) ; 9
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5327
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2585
;  :mk-clause               405
;  :num-allocs              4814358
;  :num-checks              365
;  :propagations            268
;  :quant-instantiations    126
;  :rlimit-count            223328)
(declare-const __flatten_73__86@173@03 $Ref)
(assert (=
  __flatten_73__86@173@03
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))
; [exec]
; __flatten_72__85 := __flatten_73__86.Full_adder_sum_next
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  __flatten_73__86@173@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5328
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2586
;  :mk-clause               405
;  :num-allocs              4814358
;  :num-checks              366
;  :propagations            268
;  :quant-instantiations    126
;  :rlimit-count            223376)
(declare-const __flatten_72__85@174@03 Bool)
(assert (=
  __flatten_72__85@174@03
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))))))))))
; [exec]
; __flatten_70__83.Full_adder_sum := __flatten_72__85
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  __flatten_70__83@171@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5330
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2591
;  :mk-clause               411
;  :num-allocs              4814358
;  :num-checks              367
;  :propagations            268
;  :quant-instantiations    128
;  :rlimit-count            223640)
(assert (not (= __flatten_70__83@171@03 $Ref.null)))
; [exec]
; __flatten_75__88 := diz.Prc_or_m
(declare-const __flatten_75__88@175@03 $Ref)
(assert (= __flatten_75__88@175@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_77__90 := diz.Prc_or_m
(declare-const __flatten_77__90@176@03 $Ref)
(assert (= __flatten_77__90@176@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_76__89 := __flatten_77__90.Main_process_state[0 := 1]
; [eval] __flatten_77__90.Main_process_state[0 := 1]
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_77__90@176@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5332
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2593
;  :mk-clause               411
;  :num-allocs              4814358
;  :num-checks              368
;  :propagations            268
;  :quant-instantiations    128
;  :rlimit-count            223737)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5332
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      305
;  :arith-assert-upper      229
;  :arith-conflicts         53
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            73
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2593
;  :mk-clause               411
;  :num-allocs              4814358
;  :num-checks              369
;  :propagations            268
;  :quant-instantiations    128
;  :rlimit-count            223752)
(declare-const __flatten_76__89@177@03 Seq<Int>)
(assert (Seq_equal
  __flatten_76__89@177@03
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))
    0
    1)))
; [exec]
; __flatten_75__88.Main_process_state := __flatten_76__89
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_75__88@175@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5340
;  :arith-add-rows          26
;  :arith-assert-diseq      97
;  :arith-assert-lower      309
;  :arith-assert-upper      231
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         64
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2615
;  :mk-clause               431
;  :num-allocs              4814358
;  :num-checks              370
;  :propagations            276
;  :quant-instantiations    133
;  :rlimit-count            224208)
(assert (not (= __flatten_75__88@175@03 $Ref.null)))
; [exec]
; __flatten_78__91 := diz.Prc_or_m
(declare-const __flatten_78__91@178@03 $Ref)
(assert (= __flatten_78__91@178@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_80__93 := diz.Prc_or_m
(declare-const __flatten_80__93@179@03 $Ref)
(assert (= __flatten_80__93@179@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))))
; [exec]
; __flatten_79__92 := __flatten_80__93.Main_event_state[1 := 5]
; [eval] __flatten_80__93.Main_event_state[1 := 5]
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_80__93@179@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5343
;  :arith-add-rows          26
;  :arith-assert-diseq      97
;  :arith-assert-lower      309
;  :arith-assert-upper      231
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         64
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2618
;  :mk-clause               431
;  :num-allocs              4814358
;  :num-checks              371
;  :propagations            276
;  :quant-instantiations    133
;  :rlimit-count            224335)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5343
;  :arith-add-rows          26
;  :arith-assert-diseq      97
;  :arith-assert-lower      309
;  :arith-assert-upper      231
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         64
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2618
;  :mk-clause               431
;  :num-allocs              4814358
;  :num-checks              372
;  :propagations            276
;  :quant-instantiations    133
;  :rlimit-count            224350)
(declare-const __flatten_79__92@180@03 Seq<Int>)
(assert (Seq_equal
  __flatten_79__92@180@03
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))
    1
    5)))
; [exec]
; __flatten_78__91.Main_event_state := __flatten_79__92
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) __flatten_78__91@178@03)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5353
;  :arith-add-rows          29
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      233
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2641
;  :mk-clause               451
;  :num-allocs              4814358
;  :num-checks              373
;  :propagations            285
;  :quant-instantiations    138
;  :rlimit-count            224852)
(assert (not (= __flatten_78__91@178@03 $Ref.null)))
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@181@03 $Snap)
(assert (= $t@181@03 ($Snap.combine ($Snap.first $t@181@03) ($Snap.second $t@181@03))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5358
;  :arith-add-rows          29
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      233
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2642
;  :mk-clause               451
;  :num-allocs              4814358
;  :num-checks              374
;  :propagations            285
;  :quant-instantiations    138
;  :rlimit-count            224985)
(assert (=
  ($Snap.second $t@181@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@181@03))
    ($Snap.second ($Snap.second $t@181@03)))))
(assert (= ($Snap.first ($Snap.second $t@181@03)) $Snap.unit))
; [eval] diz.Prc_or_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@181@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@181@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@181@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
  $Snap.unit))
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
  $Snap.unit))
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
  $Snap.unit))
; [eval] (forall i__95: Int :: { diz.Prc_or_m.Main_process_state[i__95] } 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__95@182@03 Int)
(push) ; 10
; [eval] 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__95
(push) ; 11
; [then-branch: 40 | 0 <= i__95@182@03 | live]
; [else-branch: 40 | !(0 <= i__95@182@03) | live]
(push) ; 12
; [then-branch: 40 | 0 <= i__95@182@03]
(assert (<= 0 i__95@182@03))
; [eval] i__95 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 40 | !(0 <= i__95@182@03)]
(assert (not (<= 0 i__95@182@03)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 41 | i__95@182@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i__95@182@03 | live]
; [else-branch: 41 | !(i__95@182@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i__95@182@03) | live]
(push) ; 12
; [then-branch: 41 | i__95@182@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i__95@182@03]
(assert (and
  (<
    i__95@182@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
  (<= 0 i__95@182@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__95] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 13
(assert (not (>= i__95@182@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5402
;  :arith-add-rows          29
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      236
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2667
;  :mk-clause               451
;  :num-allocs              4814358
;  :num-checks              375
;  :propagations            285
;  :quant-instantiations    143
;  :rlimit-count            226263)
; [eval] -1
(push) ; 13
; [then-branch: 42 | First:(Second:(Second:(Second:($t@181@03))))[i__95@182@03] == -1 | live]
; [else-branch: 42 | First:(Second:(Second:(Second:($t@181@03))))[i__95@182@03] != -1 | live]
(push) ; 14
; [then-branch: 42 | First:(Second:(Second:(Second:($t@181@03))))[i__95@182@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i__95@182@03)
  (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 42 | First:(Second:(Second:(Second:($t@181@03))))[i__95@182@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      i__95@182@03)
    (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__95]
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 15
(assert (not (>= i__95@182@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5402
;  :arith-add-rows          29
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      236
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2668
;  :mk-clause               451
;  :num-allocs              4814358
;  :num-checks              376
;  :propagations            285
;  :quant-instantiations    143
;  :rlimit-count            226438)
(push) ; 15
; [then-branch: 43 | 0 <= First:(Second:(Second:(Second:($t@181@03))))[i__95@182@03] | live]
; [else-branch: 43 | !(0 <= First:(Second:(Second:(Second:($t@181@03))))[i__95@182@03]) | live]
(push) ; 16
; [then-branch: 43 | 0 <= First:(Second:(Second:(Second:($t@181@03))))[i__95@182@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i__95@182@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 17
(assert (not (>= i__95@182@03 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5402
;  :arith-add-rows          29
;  :arith-assert-diseq      99
;  :arith-assert-lower      321
;  :arith-assert-upper      236
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              339
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2671
;  :mk-clause               452
;  :num-allocs              4814358
;  :num-checks              377
;  :propagations            285
;  :quant-instantiations    143
;  :rlimit-count            226561)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 43 | !(0 <= First:(Second:(Second:(Second:($t@181@03))))[i__95@182@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      i__95@182@03))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 41 | !(i__95@182@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i__95@182@03)]
(assert (not
  (and
    (<
      i__95@182@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
    (<= 0 i__95@182@03))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__95@182@03 Int)) (!
  (implies
    (and
      (<
        i__95@182@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
      (<= 0 i__95@182@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          i__95@182@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i__95@182@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i__95@182@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i__95@182@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))
(declare-const $k@183@03 $Perm)
(assert ($Perm.isReadVar $k@183@03 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@183@03 $Perm.No) (< $Perm.No $k@183@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5407
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      237
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2677
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              378
;  :propagations            286
;  :quant-instantiations    143
;  :rlimit-count            227330)
(assert (<= $Perm.No $k@183@03))
(assert (<= $k@183@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@183@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5413
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2680
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              379
;  :propagations            286
;  :quant-instantiations    143
;  :rlimit-count            227653)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5419
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2683
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              380
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            228009)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5424
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    332
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2684
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              381
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            228266)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5429
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2685
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              382
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            228533)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5434
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    334
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2686
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              383
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            228810)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5439
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    335
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2687
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              384
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            229097)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5444
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2688
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              385
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            229394)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5449
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    337
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2689
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              386
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            229701)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5454
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2690
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              387
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            230018)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5459
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2691
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              388
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            230345)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5464
;  :arith-add-rows          29
;  :arith-assert-diseq      100
;  :arith-assert-lower      323
;  :arith-assert-upper      238
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2692
;  :mk-clause               454
;  :num-allocs              4814358
;  :num-checks              389
;  :propagations            286
;  :quant-instantiations    144
;  :rlimit-count            230682)
(declare-const $k@184@03 $Perm)
(assert ($Perm.isReadVar $k@184@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@184@03 $Perm.No) (< $Perm.No $k@184@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5464
;  :arith-add-rows          29
;  :arith-assert-diseq      101
;  :arith-assert-lower      325
;  :arith-assert-upper      239
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2696
;  :mk-clause               456
;  :num-allocs              4814358
;  :num-checks              390
;  :propagations            287
;  :quant-instantiations    144
;  :rlimit-count            230880)
(assert (<= $Perm.No $k@184@03))
(assert (<= $k@184@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@184@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5470
;  :arith-add-rows          29
;  :arith-assert-diseq      101
;  :arith-assert-lower      325
;  :arith-assert-upper      240
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2699
;  :mk-clause               456
;  :num-allocs              4814358
;  :num-checks              391
;  :propagations            287
;  :quant-instantiations    144
;  :rlimit-count            231313)
(push) ; 10
(assert (not (< $Perm.No $k@184@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5470
;  :arith-add-rows          29
;  :arith-assert-diseq      101
;  :arith-assert-lower      325
;  :arith-assert-upper      240
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2699
;  :mk-clause               456
;  :num-allocs              4814358
;  :num-checks              392
;  :propagations            287
;  :quant-instantiations    144
;  :rlimit-count            231361)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
(declare-const $k@185@03 $Perm)
(assert ($Perm.isReadVar $k@185@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@185@03 $Perm.No) (< $Perm.No $k@185@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5478
;  :arith-add-rows          29
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      241
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2706
;  :mk-clause               458
;  :num-allocs              4814358
;  :num-checks              393
;  :propagations            288
;  :quant-instantiations    145
;  :rlimit-count            231991)
(assert (<= $Perm.No $k@185@03))
(assert (<= $k@185@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@185@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@185@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5484
;  :arith-add-rows          29
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      242
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    343
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2709
;  :mk-clause               458
;  :num-allocs              4814358
;  :num-checks              394
;  :propagations            288
;  :quant-instantiations    145
;  :rlimit-count            232444)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@185@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5490
;  :arith-add-rows          29
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      242
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2712
;  :mk-clause               458
;  :num-allocs              4814358
;  :num-checks              395
;  :propagations            288
;  :quant-instantiations    146
;  :rlimit-count            232928)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5490
;  :arith-add-rows          29
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      242
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2712
;  :mk-clause               458
;  :num-allocs              4814358
;  :num-checks              396
;  :propagations            288
;  :quant-instantiations    146
;  :rlimit-count            232941)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))
(declare-const $k@186@03 $Perm)
(assert ($Perm.isReadVar $k@186@03 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@186@03 $Perm.No) (< $Perm.No $k@186@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5495
;  :arith-add-rows          29
;  :arith-assert-diseq      103
;  :arith-assert-lower      329
;  :arith-assert-upper      243
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2717
;  :mk-clause               460
;  :num-allocs              4814358
;  :num-checks              397
;  :propagations            289
;  :quant-instantiations    146
;  :rlimit-count            233472)
(assert (<= $Perm.No $k@186@03))
(assert (<= $k@186@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@186@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@186@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5501
;  :arith-add-rows          29
;  :arith-assert-diseq      103
;  :arith-assert-lower      329
;  :arith-assert-upper      244
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2720
;  :mk-clause               460
;  :num-allocs              4814358
;  :num-checks              398
;  :propagations            289
;  :quant-instantiations    146
;  :rlimit-count            233955)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@186@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5507
;  :arith-add-rows          29
;  :arith-assert-diseq      103
;  :arith-assert-lower      329
;  :arith-assert-upper      244
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    347
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2723
;  :mk-clause               460
;  :num-allocs              4814358
;  :num-checks              399
;  :propagations            289
;  :quant-instantiations    147
;  :rlimit-count            234471)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5507
;  :arith-add-rows          29
;  :arith-assert-diseq      103
;  :arith-assert-lower      329
;  :arith-assert-upper      244
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    347
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2723
;  :mk-clause               460
;  :num-allocs              4814358
;  :num-checks              400
;  :propagations            289
;  :quant-instantiations    147
;  :rlimit-count            234484)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
(declare-const $k@187@03 $Perm)
(assert ($Perm.isReadVar $k@187@03 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@187@03 $Perm.No) (< $Perm.No $k@187@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5512
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      245
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2728
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              401
;  :propagations            290
;  :quant-instantiations    147
;  :rlimit-count            235044)
(assert (<= $Perm.No $k@187@03))
(assert (<= $k@187@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@187@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@187@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5518
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2731
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              402
;  :propagations            290
;  :quant-instantiations    147
;  :rlimit-count            235557)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@187@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5524
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2734
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              403
;  :propagations            290
;  :quant-instantiations    148
;  :rlimit-count            236103)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5524
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2734
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              404
;  :propagations            290
;  :quant-instantiations    148
;  :rlimit-count            236116)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@185@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5530
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2736
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              405
;  :propagations            290
;  :quant-instantiations    148
;  :rlimit-count            236595)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  diz@49@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5538
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2738
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              406
;  :propagations            290
;  :quant-instantiations    148
;  :rlimit-count            237069)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 10
; [eval] diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[1] != -2
; [eval] diz.Prc_or_m.Main_process_state[0] != -1
; [eval] diz.Prc_or_m.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5547
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2743
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              407
;  :propagations            290
;  :quant-instantiations    150
;  :rlimit-count            237618)
; [eval] -1
(push) ; 11
; [then-branch: 44 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1 | live]
; [else-branch: 44 | First:(Second:(Second:(Second:($t@181@03))))[0] == -1 | live]
(push) ; 12
; [then-branch: 44 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      0)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 44 | First:(Second:(Second:(Second:($t@181@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    0)
  (- 0 1)))
; [eval] diz.Prc_or_m.Main_event_state[1] != -2
; [eval] diz.Prc_or_m.Main_event_state[1]
(push) ; 13
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5548
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2744
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              408
;  :propagations            290
;  :quant-instantiations    150
;  :rlimit-count            237780)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [eval] !(diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[1] != -2)
; [eval] diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[1] != -2
; [eval] diz.Prc_or_m.Main_process_state[0] != -1
; [eval] diz.Prc_or_m.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5548
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2744
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              409
;  :propagations            290
;  :quant-instantiations    150
;  :rlimit-count            237800)
; [eval] -1
(push) ; 11
; [then-branch: 45 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1 | live]
; [else-branch: 45 | First:(Second:(Second:(Second:($t@181@03))))[0] == -1 | live]
(push) ; 12
; [then-branch: 45 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      0)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 45 | First:(Second:(Second:(Second:($t@181@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    0)
  (- 0 1)))
; [eval] diz.Prc_or_m.Main_event_state[1] != -2
; [eval] diz.Prc_or_m.Main_event_state[1]
(push) ; 13
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5549
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              340
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2745
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              410
;  :propagations            290
;  :quant-instantiations    150
;  :rlimit-count            237958)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5549
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2745
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              411
;  :propagations            290
;  :quant-instantiations    150
;  :rlimit-count            237976)
; [eval] diz.Prc_or_m != null
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_76__89@177@03) 3)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5549
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      331
;  :arith-assert-upper      246
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2748
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              412
;  :propagations            290
;  :quant-instantiations    150
;  :rlimit-count            238050)
(assert (= (Seq_length __flatten_76__89@177@03) 3))
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_79__92@180@03) 6)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5550
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      332
;  :arith-assert-upper      247
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2754
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              413
;  :propagations            290
;  :quant-instantiations    150
;  :rlimit-count            238175)
(assert (= (Seq_length __flatten_79__92@180@03) 6))
; [eval] (forall i__95: Int :: { diz.Prc_or_m.Main_process_state[i__95] } 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__95@188@03 Int)
(push) ; 10
; [eval] 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__95
(push) ; 11
; [then-branch: 46 | 0 <= i__95@188@03 | live]
; [else-branch: 46 | !(0 <= i__95@188@03) | live]
(push) ; 12
; [then-branch: 46 | 0 <= i__95@188@03]
(assert (<= 0 i__95@188@03))
; [eval] i__95 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 46 | !(0 <= i__95@188@03)]
(assert (not (<= 0 i__95@188@03)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 47 | i__95@188@03 < |__flatten_76__89@177@03| && 0 <= i__95@188@03 | live]
; [else-branch: 47 | !(i__95@188@03 < |__flatten_76__89@177@03| && 0 <= i__95@188@03) | live]
(push) ; 12
; [then-branch: 47 | i__95@188@03 < |__flatten_76__89@177@03| && 0 <= i__95@188@03]
(assert (and (< i__95@188@03 (Seq_length __flatten_76__89@177@03)) (<= 0 i__95@188@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__95] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 13
(assert (not (>= i__95@188@03 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5551
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      334
;  :arith-assert-upper      249
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2759
;  :mk-clause               462
;  :num-allocs              4814358
;  :num-checks              414
;  :propagations            290
;  :quant-instantiations    150
;  :rlimit-count            238362)
; [eval] -1
(push) ; 13
; [then-branch: 48 | __flatten_76__89@177@03[i__95@188@03] == -1 | live]
; [else-branch: 48 | __flatten_76__89@177@03[i__95@188@03] != -1 | live]
(push) ; 14
; [then-branch: 48 | __flatten_76__89@177@03[i__95@188@03] == -1]
(assert (= (Seq_index __flatten_76__89@177@03 i__95@188@03) (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 48 | __flatten_76__89@177@03[i__95@188@03] != -1]
(assert (not (= (Seq_index __flatten_76__89@177@03 i__95@188@03) (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__95]
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 15
(assert (not (>= i__95@188@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5552
;  :arith-add-rows          29
;  :arith-assert-diseq      104
;  :arith-assert-lower      334
;  :arith-assert-upper      249
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2766
;  :mk-clause               470
;  :num-allocs              4814358
;  :num-checks              415
;  :propagations            290
;  :quant-instantiations    151
;  :rlimit-count            238525)
(push) ; 15
; [then-branch: 49 | 0 <= __flatten_76__89@177@03[i__95@188@03] | live]
; [else-branch: 49 | !(0 <= __flatten_76__89@177@03[i__95@188@03]) | live]
(push) ; 16
; [then-branch: 49 | 0 <= __flatten_76__89@177@03[i__95@188@03]]
(assert (<= 0 (Seq_index __flatten_76__89@177@03 i__95@188@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 17
(assert (not (>= i__95@188@03 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5552
;  :arith-add-rows          29
;  :arith-assert-diseq      105
;  :arith-assert-lower      337
;  :arith-assert-upper      249
;  :arith-bound-prop        1
;  :arith-conflicts         53
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         66
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1331
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1253
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2769
;  :mk-clause               471
;  :num-allocs              4814358
;  :num-checks              416
;  :propagations            290
;  :quant-instantiations    151
;  :rlimit-count            238599)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 49 | !(0 <= __flatten_76__89@177@03[i__95@188@03])]
(assert (not (<= 0 (Seq_index __flatten_76__89@177@03 i__95@188@03))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 47 | !(i__95@188@03 < |__flatten_76__89@177@03| && 0 <= i__95@188@03)]
(assert (not
  (and (< i__95@188@03 (Seq_length __flatten_76__89@177@03)) (<= 0 i__95@188@03))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((i__95@188@03 Int)) (!
  (implies
    (and
      (< i__95@188@03 (Seq_length __flatten_76__89@177@03))
      (<= 0 i__95@188@03))
    (or
      (= (Seq_index __flatten_76__89@177@03 i__95@188@03) (- 0 1))
      (and
        (<
          (Seq_index __flatten_76__89@177@03 i__95@188@03)
          (Seq_length __flatten_79__92@180@03))
        (<= 0 (Seq_index __flatten_76__89@177@03 i__95@188@03)))))
  :pattern ((Seq_index __flatten_76__89@177@03 i__95@188@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      111
;  :arith-assert-lower      353
;  :arith-assert-upper      258
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         68
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2808
;  :mk-clause               518
;  :num-allocs              4814358
;  :num-checks              417
;  :propagations            326
;  :quant-instantiations    156
;  :rlimit-count            239305)
(assert (forall ((i__95@188@03 Int)) (!
  (implies
    (and
      (< i__95@188@03 (Seq_length __flatten_76__89@177@03))
      (<= 0 i__95@188@03))
    (or
      (= (Seq_index __flatten_76__89@177@03 i__95@188@03) (- 0 1))
      (and
        (<
          (Seq_index __flatten_76__89@177@03 i__95@188@03)
          (Seq_length __flatten_79__92@180@03))
        (<= 0 (Seq_index __flatten_76__89@177@03 i__95@188@03)))))
  :pattern ((Seq_index __flatten_76__89@177@03 i__95@188@03))
  :qid |prog.l<no position>|)))
(declare-const $k@189@03 $Perm)
(assert ($Perm.isReadVar $k@189@03 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@189@03 $Perm.No) (< $Perm.No $k@189@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      355
;  :arith-assert-upper      259
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2813
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              418
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            239775)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@152@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      355
;  :arith-assert-upper      259
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2813
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              419
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            239786)
(assert (< $k@189@03 $k@152@03))
(assert (<= $Perm.No (- $k@152@03 $k@189@03)))
(assert (<= (- $k@152@03 $k@189@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@152@03 $k@189@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder != null
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              420
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240006)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              421
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240054)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              422
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240102)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              423
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240150)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              424
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240198)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              425
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240246)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              426
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240294)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              427
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240342)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              428
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240390)
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      112
;  :arith-assert-lower      357
;  :arith-assert-upper      260
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2816
;  :mk-clause               520
;  :num-allocs              4814358
;  :num-checks              429
;  :propagations            327
;  :quant-instantiations    156
;  :rlimit-count            240438)
(declare-const $k@190@03 $Perm)
(assert ($Perm.isReadVar $k@190@03 $Perm.Write))
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      113
;  :arith-assert-lower      359
;  :arith-assert-upper      261
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2820
;  :mk-clause               522
;  :num-allocs              4814358
;  :num-checks              430
;  :propagations            328
;  :quant-instantiations    156
;  :rlimit-count            240635)
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@190@03 $Perm.No) (< $Perm.No $k@190@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      113
;  :arith-assert-lower      359
;  :arith-assert-upper      261
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2820
;  :mk-clause               522
;  :num-allocs              4814358
;  :num-checks              431
;  :propagations            328
;  :quant-instantiations    156
;  :rlimit-count            240685)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@153@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      113
;  :arith-assert-lower      359
;  :arith-assert-upper      261
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         68
;  :arith-pivots            79
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2820
;  :mk-clause               522
;  :num-allocs              4814358
;  :num-checks              432
;  :propagations            328
;  :quant-instantiations    156
;  :rlimit-count            240696)
(assert (< $k@190@03 $k@153@03))
(assert (<= $Perm.No (- $k@153@03 $k@190@03)))
(assert (<= (- $k@153@03 $k@190@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@153@03 $k@190@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(push) ; 10
(assert (not (< $Perm.No $k@152@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      113
;  :arith-assert-lower      361
;  :arith-assert-upper      262
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         68
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2823
;  :mk-clause               522
;  :num-allocs              4814358
;  :num-checks              433
;  :propagations            328
;  :quant-instantiations    156
;  :rlimit-count            240910)
(push) ; 10
(assert (not (< $Perm.No $k@153@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      113
;  :arith-assert-lower      361
;  :arith-assert-upper      262
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         68
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2823
;  :mk-clause               522
;  :num-allocs              4814358
;  :num-checks              434
;  :propagations            328
;  :quant-instantiations    156
;  :rlimit-count            240958)
(declare-const $k@191@03 $Perm)
(assert ($Perm.isReadVar $k@191@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@191@03 $Perm.No) (< $Perm.No $k@191@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      114
;  :arith-assert-lower      363
;  :arith-assert-upper      263
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         68
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2827
;  :mk-clause               524
;  :num-allocs              4814358
;  :num-checks              435
;  :propagations            329
;  :quant-instantiations    156
;  :rlimit-count            241156)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@154@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      114
;  :arith-assert-lower      363
;  :arith-assert-upper      263
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         68
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2827
;  :mk-clause               524
;  :num-allocs              4814358
;  :num-checks              436
;  :propagations            329
;  :quant-instantiations    156
;  :rlimit-count            241167)
(assert (< $k@191@03 $k@154@03))
(assert (<= $Perm.No (- $k@154@03 $k@191@03)))
(assert (<= (- $k@154@03 $k@191@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@154@03 $k@191@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(push) ; 10
(assert (not (< $Perm.No $k@154@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      114
;  :arith-assert-lower      364
;  :arith-assert-upper      265
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         68
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2830
;  :mk-clause               524
;  :num-allocs              4814358
;  :num-checks              437
;  :propagations            329
;  :quant-instantiations    156
;  :rlimit-count            241381)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      114
;  :arith-assert-lower      364
;  :arith-assert-upper      265
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         68
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2830
;  :mk-clause               524
;  :num-allocs              4814358
;  :num-checks              438
;  :propagations            329
;  :quant-instantiations    156
;  :rlimit-count            241394)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@154@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5579
;  :arith-add-rows          29
;  :arith-assert-diseq      114
;  :arith-assert-lower      364
;  :arith-assert-upper      265
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         68
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1334
;  :datatype-occurs-check   425
;  :datatype-splits         1128
;  :decisions               1261
;  :del-clause              406
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             2830
;  :mk-clause               524
;  :num-allocs              4814358
;  :num-checks              439
;  :propagations            329
;  :quant-instantiations    156
;  :rlimit-count            241442)
(push) ; 10
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      114
;  :arith-assert-lower      364
;  :arith-assert-upper      265
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         68
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2889
;  :mk-clause               524
;  :num-allocs              5023594
;  :num-checks              440
;  :propagations            338
;  :quant-instantiations    158
;  :rlimit-count            242936
;  :time                    0.00)
(declare-const $k@192@03 $Perm)
(assert ($Perm.isReadVar $k@192@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@192@03 $Perm.No) (< $Perm.No $k@192@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      115
;  :arith-assert-lower      366
;  :arith-assert-upper      266
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         68
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2893
;  :mk-clause               526
;  :num-allocs              5023594
;  :num-checks              441
;  :propagations            339
;  :quant-instantiations    158
;  :rlimit-count            243135)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@155@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      115
;  :arith-assert-lower      366
;  :arith-assert-upper      266
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         68
;  :arith-pivots            81
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2893
;  :mk-clause               526
;  :num-allocs              5023594
;  :num-checks              442
;  :propagations            339
;  :quant-instantiations    158
;  :rlimit-count            243146)
(assert (< $k@192@03 $k@155@03))
(assert (<= $Perm.No (- $k@155@03 $k@192@03)))
(assert (<= (- $k@155@03 $k@192@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@155@03 $k@192@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(push) ; 10
(assert (not (< $Perm.No $k@155@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      115
;  :arith-assert-lower      368
;  :arith-assert-upper      267
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         68
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2896
;  :mk-clause               526
;  :num-allocs              5023594
;  :num-checks              443
;  :propagations            339
;  :quant-instantiations    158
;  :rlimit-count            243360)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      115
;  :arith-assert-lower      368
;  :arith-assert-upper      267
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         68
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2896
;  :mk-clause               526
;  :num-allocs              5023594
;  :num-checks              444
;  :propagations            339
;  :quant-instantiations    158
;  :rlimit-count            243373)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@155@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      115
;  :arith-assert-lower      368
;  :arith-assert-upper      267
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         68
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2896
;  :mk-clause               526
;  :num-allocs              5023594
;  :num-checks              445
;  :propagations            339
;  :quant-instantiations    158
;  :rlimit-count            243421)
(declare-const $k@193@03 $Perm)
(assert ($Perm.isReadVar $k@193@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@193@03 $Perm.No) (< $Perm.No $k@193@03))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      116
;  :arith-assert-lower      370
;  :arith-assert-upper      268
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         68
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2900
;  :mk-clause               528
;  :num-allocs              5023594
;  :num-checks              446
;  :propagations            340
;  :quant-instantiations    158
;  :rlimit-count            243619)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@156@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      116
;  :arith-assert-lower      370
;  :arith-assert-upper      268
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         68
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2900
;  :mk-clause               528
;  :num-allocs              5023594
;  :num-checks              447
;  :propagations            340
;  :quant-instantiations    158
;  :rlimit-count            243630)
(assert (< $k@193@03 $k@156@03))
(assert (<= $Perm.No (- $k@156@03 $k@193@03)))
(assert (<= (- $k@156@03 $k@193@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@156@03 $k@193@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(push) ; 10
(assert (not (< $Perm.No $k@156@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      116
;  :arith-assert-lower      372
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2903
;  :mk-clause               528
;  :num-allocs              5023594
;  :num-checks              448
;  :propagations            340
;  :quant-instantiations    158
;  :rlimit-count            243850)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      116
;  :arith-assert-lower      372
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2903
;  :mk-clause               528
;  :num-allocs              5023594
;  :num-checks              449
;  :propagations            340
;  :quant-instantiations    158
;  :rlimit-count            243863)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@156@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      116
;  :arith-assert-lower      372
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2903
;  :mk-clause               528
;  :num-allocs              5023594
;  :num-checks              450
;  :propagations            340
;  :quant-instantiations    158
;  :rlimit-count            243911)
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(push) ; 10
(assert (not (< $Perm.No $k@154@03)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      116
;  :arith-assert-lower      372
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2903
;  :mk-clause               528
;  :num-allocs              5023594
;  :num-checks              451
;  :propagations            340
;  :quant-instantiations    158
;  :rlimit-count            243959)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5789
;  :arith-add-rows          29
;  :arith-assert-diseq      116
;  :arith-assert-lower      372
;  :arith-assert-upper      269
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1395
;  :datatype-occurs-check   436
;  :datatype-splits         1186
;  :decisions               1320
;  :del-clause              406
;  :final-checks            93
;  :max-generation          2
;  :max-memory              4.96
;  :memory                  4.96
;  :mk-bool-var             2903
;  :mk-clause               528
;  :num-allocs              5023594
;  :num-checks              452
;  :propagations            340
;  :quant-instantiations    158
;  :rlimit-count            243972)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 10
(assert ($Perm.isReadVar $k@183@03 $Perm.Write))
(assert ($Perm.isReadVar $k@184@03 $Perm.Write))
(assert ($Perm.isReadVar $k@185@03 $Perm.Write))
(assert ($Perm.isReadVar $k@186@03 $Perm.Write))
(assert ($Perm.isReadVar $k@187@03 $Perm.Write))
(assert (= $t@181@03 ($Snap.combine ($Snap.first $t@181@03) ($Snap.second $t@181@03))))
(assert (=
  ($Snap.second $t@181@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@181@03))
    ($Snap.second ($Snap.second $t@181@03)))))
(assert (= ($Snap.first ($Snap.second $t@181@03)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@181@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@181@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@181@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
  $Snap.unit))
(assert (forall ((i__95@182@03 Int)) (!
  (implies
    (and
      (<
        i__95@182@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
      (<= 0 i__95@182@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          i__95@182@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i__95@182@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i__95@182@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i__95@182@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))
(assert (<= $Perm.No $k@183@03))
(assert (<= $k@183@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@183@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
(assert (<= $Perm.No $k@184@03))
(assert (<= $k@184@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@184@03)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
(assert (<= $Perm.No $k@185@03))
(assert (<= $k@185@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@185@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@186@03))
(assert (<= $k@186@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@186@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@187@03))
(assert (<= $k@187@03 $Perm.Write))
(assert (implies
  (< $Perm.No $k@187@03)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  diz@49@03))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[1] != -2
; [eval] diz.Prc_or_m.Main_process_state[0] != -1
; [eval] diz.Prc_or_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6723
;  :arith-add-rows          29
;  :arith-assert-diseq      121
;  :arith-assert-lower      386
;  :arith-assert-upper      281
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    398
;  :datatype-constructor-ax 1605
;  :datatype-occurs-check   462
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              418
;  :final-checks            99
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3158
;  :mk-clause               541
;  :num-allocs              5236788
;  :num-checks              455
;  :propagations            364
;  :quant-instantiations    174
;  :rlimit-count            253566)
; [eval] -1
(push) ; 11
; [then-branch: 50 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@181@03))))[0] == -1 | live]
(push) ; 12
; [then-branch: 50 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      0)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 50 | First:(Second:(Second:(Second:($t@181@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    0)
  (- 0 1)))
; [eval] diz.Prc_or_m.Main_event_state[1] != -2
; [eval] diz.Prc_or_m.Main_event_state[1]
(push) ; 13
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6724
;  :arith-add-rows          29
;  :arith-assert-diseq      121
;  :arith-assert-lower      386
;  :arith-assert-upper      281
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    398
;  :datatype-constructor-ax 1605
;  :datatype-occurs-check   462
;  :datatype-splits         1342
;  :decisions               1524
;  :del-clause              418
;  :final-checks            99
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3159
;  :mk-clause               541
;  :num-allocs              5236788
;  :num-checks              456
;  :propagations            364
;  :quant-instantiations    174
;  :rlimit-count            253724)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
          1)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7139
;  :arith-add-rows          29
;  :arith-assert-diseq      122
;  :arith-assert-lower      389
;  :arith-assert-upper      282
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    405
;  :datatype-constructor-ax 1722
;  :datatype-occurs-check   480
;  :datatype-splits         1424
;  :decisions               1637
;  :del-clause              425
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3259
;  :mk-clause               548
;  :num-allocs              5236788
;  :num-checks              457
;  :propagations            376
;  :quant-instantiations    177
;  :rlimit-count            256387
;  :time                    0.00)
(push) ; 11
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
        1)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      122
;  :arith-assert-lower      389
;  :arith-assert-upper      282
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              425
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3340
;  :mk-clause               548
;  :num-allocs              5236788
;  :num-checks              458
;  :propagations            386
;  :quant-instantiations    179
;  :rlimit-count            258449
;  :time                    0.00)
; [then-branch: 51 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@181@03))))))[1] != -2 | live]
; [else-branch: 51 | !(First:(Second:(Second:(Second:($t@181@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@181@03))))))[1] != -2) | live]
(push) ; 11
; [then-branch: 51 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@181@03))))))[1] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
        1)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@194@03 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 52 | 0 <= i@194@03 | live]
; [else-branch: 52 | !(0 <= i@194@03) | live]
(push) ; 14
; [then-branch: 52 | 0 <= i@194@03]
(assert (<= 0 i@194@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 52 | !(0 <= i@194@03)]
(assert (not (<= 0 i@194@03)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 53 | i@194@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i@194@03 | live]
; [else-branch: 53 | !(i@194@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i@194@03) | live]
(push) ; 14
; [then-branch: 53 | i@194@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i@194@03]
(assert (and
  (<
    i@194@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
  (<= 0 i@194@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@194@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      122
;  :arith-assert-lower      390
;  :arith-assert-upper      283
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              425
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3344
;  :mk-clause               549
;  :num-allocs              5236788
;  :num-checks              459
;  :propagations            386
;  :quant-instantiations    179
;  :rlimit-count            258815)
; [eval] -1
(push) ; 15
; [then-branch: 54 | First:(Second:(Second:(Second:($t@181@03))))[i@194@03] == -1 | live]
; [else-branch: 54 | First:(Second:(Second:(Second:($t@181@03))))[i@194@03] != -1 | live]
(push) ; 16
; [then-branch: 54 | First:(Second:(Second:(Second:($t@181@03))))[i@194@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i@194@03)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 54 | First:(Second:(Second:(Second:($t@181@03))))[i@194@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      i@194@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 17
(assert (not (>= i@194@03 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      123
;  :arith-assert-lower      393
;  :arith-assert-upper      284
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              425
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3350
;  :mk-clause               553
;  :num-allocs              5236788
;  :num-checks              460
;  :propagations            388
;  :quant-instantiations    180
;  :rlimit-count            259047)
(push) ; 17
; [then-branch: 55 | 0 <= First:(Second:(Second:(Second:($t@181@03))))[i@194@03] | live]
; [else-branch: 55 | !(0 <= First:(Second:(Second:(Second:($t@181@03))))[i@194@03]) | live]
(push) ; 18
; [then-branch: 55 | 0 <= First:(Second:(Second:(Second:($t@181@03))))[i@194@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i@194@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 19
(assert (not (>= i@194@03 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      123
;  :arith-assert-lower      393
;  :arith-assert-upper      284
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              425
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3350
;  :mk-clause               553
;  :num-allocs              5236788
;  :num-checks              461
;  :propagations            388
;  :quant-instantiations    180
;  :rlimit-count            259161)
; [eval] |diz.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 55 | !(0 <= First:(Second:(Second:(Second:($t@181@03))))[i@194@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      i@194@03))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 53 | !(i@194@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i@194@03)]
(assert (not
  (and
    (<
      i@194@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
    (<= 0 i@194@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i@194@03 Int)) (!
  (implies
    (and
      (<
        i@194@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
      (<= 0 i@194@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          i@194@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i@194@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i@194@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i@194@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      125
;  :arith-assert-lower      394
;  :arith-assert-upper      285
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        178
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3358
;  :mk-clause               567
;  :num-allocs              5236788
;  :num-checks              462
;  :propagations            390
;  :quant-instantiations    181
;  :rlimit-count            259607)
(assert (forall ((i@194@03 Int)) (!
  (implies
    (and
      (<
        i@194@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
      (<= 0 i@194@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          i@194@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i@194@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i@194@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i@194@03))
  :qid |prog.l<no position>|)))
(declare-const $k@195@03 $Perm)
(assert ($Perm.isReadVar $k@195@03 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@195@03 $Perm.No) (< $Perm.No $k@195@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      396
;  :arith-assert-upper      286
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3363
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              463
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260167)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@183@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      396
;  :arith-assert-upper      286
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            84
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3363
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              464
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260178)
(assert (< $k@195@03 $k@183@03))
(assert (<= $Perm.No (- $k@183@03 $k@195@03)))
(assert (<= (- $k@183@03 $k@195@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@183@03 $k@195@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              465
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260398)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              466
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260446)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              467
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260494)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              468
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260542)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              469
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260590)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              470
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260638)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              471
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260686)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              472
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260734)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              473
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260782)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      287
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3366
;  :mk-clause               569
;  :num-allocs              5236788
;  :num-checks              474
;  :propagations            391
;  :quant-instantiations    181
;  :rlimit-count            260830)
(declare-const $k@196@03 $Perm)
(assert ($Perm.isReadVar $k@196@03 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      127
;  :arith-assert-lower      400
;  :arith-assert-upper      288
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3370
;  :mk-clause               571
;  :num-allocs              5236788
;  :num-checks              475
;  :propagations            392
;  :quant-instantiations    181
;  :rlimit-count            261027)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@196@03 $Perm.No) (< $Perm.No $k@196@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      127
;  :arith-assert-lower      400
;  :arith-assert-upper      288
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3370
;  :mk-clause               571
;  :num-allocs              5236788
;  :num-checks              476
;  :propagations            392
;  :quant-instantiations    181
;  :rlimit-count            261077)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@184@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      127
;  :arith-assert-lower      400
;  :arith-assert-upper      288
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         68
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3370
;  :mk-clause               571
;  :num-allocs              5236788
;  :num-checks              477
;  :propagations            392
;  :quant-instantiations    181
;  :rlimit-count            261088)
(assert (< $k@196@03 $k@184@03))
(assert (<= $Perm.No (- $k@184@03 $k@196@03)))
(assert (<= (- $k@184@03 $k@196@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@184@03 $k@196@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      127
;  :arith-assert-lower      402
;  :arith-assert-upper      289
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         68
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3373
;  :mk-clause               571
;  :num-allocs              5236788
;  :num-checks              478
;  :propagations            392
;  :quant-instantiations    181
;  :rlimit-count            261302)
(push) ; 12
(assert (not (< $Perm.No $k@184@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      127
;  :arith-assert-lower      402
;  :arith-assert-upper      289
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         68
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3373
;  :mk-clause               571
;  :num-allocs              5236788
;  :num-checks              479
;  :propagations            392
;  :quant-instantiations    181
;  :rlimit-count            261350)
(declare-const $k@197@03 $Perm)
(assert ($Perm.isReadVar $k@197@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@197@03 $Perm.No) (< $Perm.No $k@197@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      128
;  :arith-assert-lower      404
;  :arith-assert-upper      290
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         68
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3377
;  :mk-clause               573
;  :num-allocs              5236788
;  :num-checks              480
;  :propagations            393
;  :quant-instantiations    181
;  :rlimit-count            261549)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@185@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      128
;  :arith-assert-lower      404
;  :arith-assert-upper      290
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         68
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3377
;  :mk-clause               573
;  :num-allocs              5236788
;  :num-checks              481
;  :propagations            393
;  :quant-instantiations    181
;  :rlimit-count            261560)
(assert (< $k@197@03 $k@185@03))
(assert (<= $Perm.No (- $k@185@03 $k@197@03)))
(assert (<= (- $k@185@03 $k@197@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@185@03 $k@197@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No $k@185@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      128
;  :arith-assert-lower      406
;  :arith-assert-upper      291
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         68
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3380
;  :mk-clause               573
;  :num-allocs              5236788
;  :num-checks              482
;  :propagations            393
;  :quant-instantiations    181
;  :rlimit-count            261774)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      128
;  :arith-assert-lower      406
;  :arith-assert-upper      291
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         68
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3380
;  :mk-clause               573
;  :num-allocs              5236788
;  :num-checks              483
;  :propagations            393
;  :quant-instantiations    181
;  :rlimit-count            261787)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@185@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7435
;  :arith-add-rows          29
;  :arith-assert-diseq      128
;  :arith-assert-lower      406
;  :arith-assert-upper      291
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         68
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 1803
;  :datatype-occurs-check   493
;  :datatype-splits         1502
;  :decisions               1715
;  :del-clause              443
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             3380
;  :mk-clause               573
;  :num-allocs              5236788
;  :num-checks              484
;  :propagations            393
;  :quant-instantiations    181
;  :rlimit-count            261835)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      129
;  :arith-assert-lower      409
;  :arith-assert-upper      292
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         68
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3478
;  :mk-clause               579
;  :num-allocs              5460213
;  :num-checks              485
;  :propagations            405
;  :quant-instantiations    185
;  :rlimit-count            264302
;  :time                    0.00)
(declare-const $k@198@03 $Perm)
(assert ($Perm.isReadVar $k@198@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@198@03 $Perm.No) (< $Perm.No $k@198@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      130
;  :arith-assert-lower      411
;  :arith-assert-upper      293
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         68
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3482
;  :mk-clause               581
;  :num-allocs              5460213
;  :num-checks              486
;  :propagations            406
;  :quant-instantiations    185
;  :rlimit-count            264501)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@186@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      130
;  :arith-assert-lower      411
;  :arith-assert-upper      293
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         68
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3482
;  :mk-clause               581
;  :num-allocs              5460213
;  :num-checks              487
;  :propagations            406
;  :quant-instantiations    185
;  :rlimit-count            264512)
(assert (< $k@198@03 $k@186@03))
(assert (<= $Perm.No (- $k@186@03 $k@198@03)))
(assert (<= (- $k@186@03 $k@198@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@186@03 $k@198@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No $k@186@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      130
;  :arith-assert-lower      413
;  :arith-assert-upper      294
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3485
;  :mk-clause               581
;  :num-allocs              5460213
;  :num-checks              488
;  :propagations            406
;  :quant-instantiations    185
;  :rlimit-count            264726)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      130
;  :arith-assert-lower      413
;  :arith-assert-upper      294
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3485
;  :mk-clause               581
;  :num-allocs              5460213
;  :num-checks              489
;  :propagations            406
;  :quant-instantiations    185
;  :rlimit-count            264739)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@186@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      130
;  :arith-assert-lower      413
;  :arith-assert-upper      294
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3485
;  :mk-clause               581
;  :num-allocs              5460213
;  :num-checks              490
;  :propagations            406
;  :quant-instantiations    185
;  :rlimit-count            264787)
(declare-const $k@199@03 $Perm)
(assert ($Perm.isReadVar $k@199@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@199@03 $Perm.No) (< $Perm.No $k@199@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      131
;  :arith-assert-lower      415
;  :arith-assert-upper      295
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3489
;  :mk-clause               583
;  :num-allocs              5460213
;  :num-checks              491
;  :propagations            407
;  :quant-instantiations    185
;  :rlimit-count            264986)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@187@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      131
;  :arith-assert-lower      415
;  :arith-assert-upper      295
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3489
;  :mk-clause               583
;  :num-allocs              5460213
;  :num-checks              492
;  :propagations            407
;  :quant-instantiations    185
;  :rlimit-count            264997)
(assert (< $k@199@03 $k@187@03))
(assert (<= $Perm.No (- $k@187@03 $k@199@03)))
(assert (<= (- $k@187@03 $k@199@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@187@03 $k@199@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No $k@187@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      131
;  :arith-assert-lower      417
;  :arith-assert-upper      296
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3492
;  :mk-clause               583
;  :num-allocs              5460213
;  :num-checks              493
;  :propagations            407
;  :quant-instantiations    185
;  :rlimit-count            265205)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      131
;  :arith-assert-lower      417
;  :arith-assert-upper      296
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3492
;  :mk-clause               583
;  :num-allocs              5460213
;  :num-checks              494
;  :propagations            407
;  :quant-instantiations    185
;  :rlimit-count            265218)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@187@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7850
;  :arith-add-rows          29
;  :arith-assert-diseq      131
;  :arith-assert-lower      417
;  :arith-assert-upper      296
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 1920
;  :datatype-occurs-check   511
;  :datatype-splits         1584
;  :decisions               1828
;  :del-clause              449
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.16
;  :memory                  5.16
;  :mk-bool-var             3492
;  :mk-clause               583
;  :num-allocs              5460213
;  :num-checks              495
;  :propagations            407
;  :quant-instantiations    185
;  :rlimit-count            265266)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) globals@50@03))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(declare-const $t@200@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(assert (= $t@200@03 ($Snap.combine ($Snap.first $t@200@03) ($Snap.second $t@200@03))))
(assert (= ($Snap.first $t@200@03) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@200@03)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@200@03))
    ($Snap.second ($Snap.second $t@200@03)))))
(assert (= ($Snap.first ($Snap.second $t@200@03)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@200@03))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@200@03)))
    ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@200@03))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@200@03)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@201@03 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 56 | 0 <= i@201@03 | live]
; [else-branch: 56 | !(0 <= i@201@03) | live]
(push) ; 14
; [then-branch: 56 | 0 <= i@201@03]
(assert (<= 0 i@201@03))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 56 | !(0 <= i@201@03)]
(assert (not (<= 0 i@201@03)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 57 | i@201@03 < |First:(Second:(Second:(Second:($t@200@03))))| && 0 <= i@201@03 | live]
; [else-branch: 57 | !(i@201@03 < |First:(Second:(Second:(Second:($t@200@03))))| && 0 <= i@201@03) | live]
(push) ; 14
; [then-branch: 57 | i@201@03 < |First:(Second:(Second:(Second:($t@200@03))))| && 0 <= i@201@03]
(assert (and
  (<
    i@201@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
  (<= 0 i@201@03)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@201@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8378
;  :arith-add-rows          29
;  :arith-assert-diseq      132
;  :arith-assert-lower      425
;  :arith-assert-upper      300
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              463
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3617
;  :mk-clause               589
;  :num-allocs              6137467
;  :num-checks              497
;  :propagations            419
;  :quant-instantiations    193
;  :rlimit-count            270200)
; [eval] -1
(push) ; 15
; [then-branch: 58 | First:(Second:(Second:(Second:($t@200@03))))[i@201@03] == -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@200@03))))[i@201@03] != -1 | live]
(push) ; 16
; [then-branch: 58 | First:(Second:(Second:(Second:($t@200@03))))[i@201@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
    i@201@03)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 58 | First:(Second:(Second:(Second:($t@200@03))))[i@201@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
      i@201@03)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 17
(assert (not (>= i@201@03 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8378
;  :arith-add-rows          29
;  :arith-assert-diseq      132
;  :arith-assert-lower      425
;  :arith-assert-upper      300
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              463
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3618
;  :mk-clause               589
;  :num-allocs              6137467
;  :num-checks              498
;  :propagations            419
;  :quant-instantiations    193
;  :rlimit-count            270375)
(push) ; 17
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@200@03))))[i@201@03] | live]
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@200@03))))[i@201@03]) | live]
(push) ; 18
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@200@03))))[i@201@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
    i@201@03)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 19
(assert (not (>= i@201@03 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8378
;  :arith-add-rows          29
;  :arith-assert-diseq      133
;  :arith-assert-lower      428
;  :arith-assert-upper      300
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              463
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3621
;  :mk-clause               590
;  :num-allocs              6137467
;  :num-checks              499
;  :propagations            419
;  :quant-instantiations    193
;  :rlimit-count            270498)
; [eval] |diz.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@200@03))))[i@201@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
      i@201@03))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 57 | !(i@201@03 < |First:(Second:(Second:(Second:($t@200@03))))| && 0 <= i@201@03)]
(assert (not
  (and
    (<
      i@201@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
    (<= 0 i@201@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@201@03 Int)) (!
  (implies
    (and
      (<
        i@201@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
      (<= 0 i@201@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
          i@201@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
            i@201@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
            i@201@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
    i@201@03))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))
(declare-const $k@202@03 $Perm)
(assert ($Perm.isReadVar $k@202@03 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@202@03 $Perm.No) (< $Perm.No $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8383
;  :arith-add-rows          29
;  :arith-assert-diseq      134
;  :arith-assert-lower      430
;  :arith-assert-upper      301
;  :arith-bound-prop        1
;  :arith-conflicts         55
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         68
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    462
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3627
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              500
;  :propagations            420
;  :quant-instantiations    193
;  :rlimit-count            271267)
(declare-const $t@203@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@183@03 $k@195@03))
    (=
      $t@203@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))
  (implies
    (< $Perm.No $k@202@03)
    (=
      $t@203@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))
(assert (<= $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03)))
(assert (<= (+ (- $k@183@03 $k@195@03) $k@202@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8393
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      303
;  :arith-bound-prop        1
;  :arith-conflicts         56
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         69
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    463
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3635
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              501
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            271947)
(assert (not (= $t@203@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8399
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      304
;  :arith-bound-prop        1
;  :arith-conflicts         57
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         70
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    464
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3638
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              502
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            272269)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8404
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      305
;  :arith-bound-prop        1
;  :arith-conflicts         58
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         71
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3640
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              503
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            272556)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8409
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      306
;  :arith-bound-prop        1
;  :arith-conflicts         59
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         72
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    466
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3642
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              504
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            272853)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8414
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      307
;  :arith-bound-prop        1
;  :arith-conflicts         60
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         73
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    467
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3644
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              505
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            273160)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8419
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      308
;  :arith-bound-prop        1
;  :arith-conflicts         61
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         74
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    468
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3646
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              506
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            273477)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8424
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      309
;  :arith-bound-prop        1
;  :arith-conflicts         62
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         75
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    469
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3648
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              507
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            273804)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8429
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      310
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         76
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    470
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3650
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              508
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            274141)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8434
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      311
;  :arith-bound-prop        1
;  :arith-conflicts         64
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         77
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3652
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              509
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            274488)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8439
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      312
;  :arith-bound-prop        1
;  :arith-conflicts         65
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         78
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    472
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3654
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              510
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            274845)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          30
;  :arith-assert-diseq      134
;  :arith-assert-lower      431
;  :arith-assert-upper      313
;  :arith-bound-prop        1
;  :arith-conflicts         66
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         79
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    473
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3656
;  :mk-clause               592
;  :num-allocs              6137467
;  :num-checks              511
;  :propagations            420
;  :quant-instantiations    194
;  :rlimit-count            275212)
(declare-const $k@204@03 $Perm)
(assert ($Perm.isReadVar $k@204@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@204@03 $Perm.No) (< $Perm.No $k@204@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          30
;  :arith-assert-diseq      135
;  :arith-assert-lower      433
;  :arith-assert-upper      314
;  :arith-bound-prop        1
;  :arith-conflicts         66
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         79
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    473
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3660
;  :mk-clause               594
;  :num-allocs              6137467
;  :num-checks              512
;  :propagations            421
;  :quant-instantiations    194
;  :rlimit-count            275410)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  $t@203@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          30
;  :arith-assert-diseq      135
;  :arith-assert-lower      433
;  :arith-assert-upper      314
;  :arith-bound-prop        1
;  :arith-conflicts         66
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         79
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    473
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3660
;  :mk-clause               594
;  :num-allocs              6137467
;  :num-checks              513
;  :propagations            421
;  :quant-instantiations    194
;  :rlimit-count            275421)
(declare-const $t@205@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@184@03 $k@196@03))
    (=
      $t@205@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@204@03)
    (=
      $t@205@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@184@03 $k@196@03) $k@204@03)))
(assert (<= (+ (- $k@184@03 $k@196@03) $k@204@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@184@03 $k@196@03) $k@204@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8454
;  :arith-add-rows          31
;  :arith-assert-diseq      135
;  :arith-assert-lower      434
;  :arith-assert-upper      316
;  :arith-bound-prop        1
;  :arith-conflicts         67
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         80
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    474
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3668
;  :mk-clause               594
;  :num-allocs              6137467
;  :num-checks              514
;  :propagations            421
;  :quant-instantiations    195
;  :rlimit-count            276143)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  $t@203@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8454
;  :arith-add-rows          31
;  :arith-assert-diseq      135
;  :arith-assert-lower      434
;  :arith-assert-upper      316
;  :arith-bound-prop        1
;  :arith-conflicts         67
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         80
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    474
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3668
;  :mk-clause               594
;  :num-allocs              6137467
;  :num-checks              515
;  :propagations            421
;  :quant-instantiations    195
;  :rlimit-count            276154)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@184@03 $k@196@03) $k@204@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8454
;  :arith-add-rows          31
;  :arith-assert-diseq      135
;  :arith-assert-lower      434
;  :arith-assert-upper      317
;  :arith-bound-prop        1
;  :arith-conflicts         68
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         81
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    474
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3669
;  :mk-clause               594
;  :num-allocs              6137467
;  :num-checks              516
;  :propagations            421
;  :quant-instantiations    195
;  :rlimit-count            276238)
(assert (= $t@205@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))
(declare-const $k@206@03 $Perm)
(assert ($Perm.isReadVar $k@206@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@206@03 $Perm.No) (< $Perm.No $k@206@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8459
;  :arith-add-rows          31
;  :arith-assert-diseq      136
;  :arith-assert-lower      436
;  :arith-assert-upper      318
;  :arith-bound-prop        1
;  :arith-conflicts         68
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         81
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    475
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3674
;  :mk-clause               596
;  :num-allocs              6137467
;  :num-checks              517
;  :propagations            422
;  :quant-instantiations    195
;  :rlimit-count            276737)
(declare-const $t@207@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@185@03 $k@197@03))
    (=
      $t@207@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@206@03)
    (=
      $t@207@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@185@03 $k@197@03) $k@206@03)))
(assert (<= (+ (- $k@185@03 $k@197@03) $k@206@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@185@03 $k@197@03) $k@206@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@03 $k@197@03) $k@206@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8469
;  :arith-add-rows          32
;  :arith-assert-diseq      136
;  :arith-assert-lower      437
;  :arith-assert-upper      320
;  :arith-bound-prop        1
;  :arith-conflicts         69
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         82
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3682
;  :mk-clause               596
;  :num-allocs              6137467
;  :num-checks              518
;  :propagations            422
;  :quant-instantiations    196
;  :rlimit-count            277457)
(assert (not (= $t@207@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@03 $k@197@03) $k@206@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8474
;  :arith-add-rows          32
;  :arith-assert-diseq      136
;  :arith-assert-lower      437
;  :arith-assert-upper      321
;  :arith-bound-prop        1
;  :arith-conflicts         70
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         83
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3684
;  :mk-clause               596
;  :num-allocs              6137467
;  :num-checks              519
;  :propagations            422
;  :quant-instantiations    196
;  :rlimit-count            277884)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8474
;  :arith-add-rows          32
;  :arith-assert-diseq      136
;  :arith-assert-lower      437
;  :arith-assert-upper      321
;  :arith-bound-prop        1
;  :arith-conflicts         70
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         83
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3684
;  :mk-clause               596
;  :num-allocs              6137467
;  :num-checks              520
;  :propagations            422
;  :quant-instantiations    196
;  :rlimit-count            277897)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  $t@207@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8474
;  :arith-add-rows          32
;  :arith-assert-diseq      136
;  :arith-assert-lower      437
;  :arith-assert-upper      321
;  :arith-bound-prop        1
;  :arith-conflicts         70
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         83
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    477
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3684
;  :mk-clause               596
;  :num-allocs              6137467
;  :num-checks              521
;  :propagations            422
;  :quant-instantiations    196
;  :rlimit-count            277908)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))))
(declare-const $k@208@03 $Perm)
(assert ($Perm.isReadVar $k@208@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@208@03 $Perm.No) (< $Perm.No $k@208@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8482
;  :arith-add-rows          32
;  :arith-assert-diseq      137
;  :arith-assert-lower      439
;  :arith-assert-upper      322
;  :arith-bound-prop        1
;  :arith-conflicts         70
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         83
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    478
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3691
;  :mk-clause               598
;  :num-allocs              6137467
;  :num-checks              522
;  :propagations            423
;  :quant-instantiations    197
;  :rlimit-count            278516)
(declare-const $t@209@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@186@03 $k@198@03))
    (=
      $t@209@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@208@03)
    (=
      $t@209@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@186@03 $k@198@03) $k@208@03)))
(assert (<= (+ (- $k@186@03 $k@198@03) $k@208@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@186@03 $k@198@03) $k@208@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@186@03 $k@198@03) $k@208@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8492
;  :arith-add-rows          33
;  :arith-assert-diseq      137
;  :arith-assert-lower      440
;  :arith-assert-upper      324
;  :arith-bound-prop        1
;  :arith-conflicts         71
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         84
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    479
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3699
;  :mk-clause               598
;  :num-allocs              6137467
;  :num-checks              523
;  :propagations            423
;  :quant-instantiations    198
;  :rlimit-count            279512)
(assert (not (= $t@209@03 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@186@03 $k@198@03) $k@208@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8498
;  :arith-add-rows          33
;  :arith-assert-diseq      137
;  :arith-assert-lower      440
;  :arith-assert-upper      325
;  :arith-bound-prop        1
;  :arith-conflicts         72
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         85
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    480
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3702
;  :mk-clause               598
;  :num-allocs              6137467
;  :num-checks              524
;  :propagations            423
;  :quant-instantiations    198
;  :rlimit-count            279994)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8498
;  :arith-add-rows          33
;  :arith-assert-diseq      137
;  :arith-assert-lower      440
;  :arith-assert-upper      325
;  :arith-bound-prop        1
;  :arith-conflicts         72
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         85
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    480
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3702
;  :mk-clause               598
;  :num-allocs              6137467
;  :num-checks              525
;  :propagations            423
;  :quant-instantiations    198
;  :rlimit-count            280007)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))))))
(declare-const $k@210@03 $Perm)
(assert ($Perm.isReadVar $k@210@03 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@210@03 $Perm.No) (< $Perm.No $k@210@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8503
;  :arith-add-rows          33
;  :arith-assert-diseq      138
;  :arith-assert-lower      442
;  :arith-assert-upper      326
;  :arith-bound-prop        1
;  :arith-conflicts         72
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         85
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    481
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3707
;  :mk-clause               600
;  :num-allocs              6137467
;  :num-checks              526
;  :propagations            424
;  :quant-instantiations    198
;  :rlimit-count            280568)
(declare-const $t@211@03 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@187@03 $k@199@03))
    (=
      $t@211@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@210@03)
    (=
      $t@211@03
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@187@03 $k@199@03) $k@210@03)))
(assert (<= (+ (- $k@187@03 $k@199@03) $k@210@03) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@187@03 $k@199@03) $k@210@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@187@03 $k@199@03) $k@210@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8513
;  :arith-add-rows          34
;  :arith-assert-diseq      138
;  :arith-assert-lower      443
;  :arith-assert-upper      328
;  :arith-bound-prop        1
;  :arith-conflicts         73
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         86
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3715
;  :mk-clause               600
;  :num-allocs              6137467
;  :num-checks              527
;  :propagations            424
;  :quant-instantiations    199
;  :rlimit-count            281656)
(assert (not (= $t@211@03 $Ref.null)))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@187@03 $k@199@03) $k@210@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8514
;  :arith-add-rows          34
;  :arith-assert-diseq      138
;  :arith-assert-lower      443
;  :arith-assert-upper      329
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3717
;  :mk-clause               600
;  :num-allocs              6137467
;  :num-checks              528
;  :propagations            424
;  :quant-instantiations    199
;  :rlimit-count            281800)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8514
;  :arith-add-rows          34
;  :arith-assert-diseq      138
;  :arith-assert-lower      443
;  :arith-assert-upper      329
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   630
;  :datatype-splits         1666
;  :decisions               1941
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.41
;  :memory                  5.37
;  :mk-bool-var             3717
;  :mk-clause               600
;  :num-allocs              6137467
;  :num-checks              529
;  :propagations            424
;  :quant-instantiations    199
;  :rlimit-count            281813)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@200@03 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) globals@50@03))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_or_m, globals), write)
(declare-const $t@212@03 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9576
;  :arith-add-rows          34
;  :arith-assert-diseq      140
;  :arith-assert-lower      449
;  :arith-assert-upper      331
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              482
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3939
;  :mk-clause               613
;  :num-allocs              6606684
;  :num-checks              532
;  :propagations            459
;  :quant-instantiations    207
;  :rlimit-count            287680)
; [eval] diz.Prc_or_m != null
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
; [eval] (forall i__95: Int :: { diz.Prc_or_m.Main_process_state[i__95] } 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__95@213@03 Int)
(push) ; 12
; [eval] 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__95 && i__95 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__95
(push) ; 13
; [then-branch: 60 | 0 <= i__95@213@03 | live]
; [else-branch: 60 | !(0 <= i__95@213@03) | live]
(push) ; 14
; [then-branch: 60 | 0 <= i__95@213@03]
(assert (<= 0 i__95@213@03))
; [eval] i__95 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 60 | !(0 <= i__95@213@03)]
(assert (not (<= 0 i__95@213@03)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 61 | i__95@213@03 < |First:(Second:(Second:(Second:($t@200@03))))| && 0 <= i__95@213@03 | live]
; [else-branch: 61 | !(i__95@213@03 < |First:(Second:(Second:(Second:($t@200@03))))| && 0 <= i__95@213@03) | live]
(push) ; 14
; [then-branch: 61 | i__95@213@03 < |First:(Second:(Second:(Second:($t@200@03))))| && 0 <= i__95@213@03]
(assert (and
  (<
    i__95@213@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
  (<= 0 i__95@213@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__95] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__95] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 15
(assert (not (>= i__95@213@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9576
;  :arith-add-rows          34
;  :arith-assert-diseq      140
;  :arith-assert-lower      450
;  :arith-assert-upper      332
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              482
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3941
;  :mk-clause               613
;  :num-allocs              6606684
;  :num-checks              533
;  :propagations            459
;  :quant-instantiations    207
;  :rlimit-count            287816)
; [eval] -1
(push) ; 15
; [then-branch: 62 | First:(Second:(Second:(Second:($t@200@03))))[i__95@213@03] == -1 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@200@03))))[i__95@213@03] != -1 | live]
(push) ; 16
; [then-branch: 62 | First:(Second:(Second:(Second:($t@200@03))))[i__95@213@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
    i__95@213@03)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 62 | First:(Second:(Second:(Second:($t@200@03))))[i__95@213@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
      i__95@213@03)
    (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__95] && diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__95]
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 17
(assert (not (>= i__95@213@03 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9576
;  :arith-add-rows          34
;  :arith-assert-diseq      141
;  :arith-assert-lower      453
;  :arith-assert-upper      333
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              482
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3947
;  :mk-clause               617
;  :num-allocs              6606684
;  :num-checks              534
;  :propagations            461
;  :quant-instantiations    208
;  :rlimit-count            288048)
(push) ; 17
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@200@03))))[i__95@213@03] | live]
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@200@03))))[i__95@213@03]) | live]
(push) ; 18
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@200@03))))[i__95@213@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
    i__95@213@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__95] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__95]
(push) ; 19
(assert (not (>= i__95@213@03 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9576
;  :arith-add-rows          34
;  :arith-assert-diseq      141
;  :arith-assert-lower      453
;  :arith-assert-upper      333
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              482
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3947
;  :mk-clause               617
;  :num-allocs              6606684
;  :num-checks              535
;  :propagations            461
;  :quant-instantiations    208
;  :rlimit-count            288162)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@200@03))))[i__95@213@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
      i__95@213@03))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 61 | !(i__95@213@03 < |First:(Second:(Second:(Second:($t@200@03))))| && 0 <= i__95@213@03)]
(assert (not
  (and
    (<
      i__95@213@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
    (<= 0 i__95@213@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i__95@213@03 Int)) (!
  (implies
    (and
      (<
        i__95@213@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
      (<= 0 i__95@213@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
          i__95@213@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
            i__95@213@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
            i__95@213@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
    i__95@213@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9576
;  :arith-add-rows          34
;  :arith-assert-diseq      143
;  :arith-assert-lower      454
;  :arith-assert-upper      334
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              500
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3955
;  :mk-clause               631
;  :num-allocs              6606684
;  :num-checks              536
;  :propagations            463
;  :quant-instantiations    209
;  :rlimit-count            288608)
(assert (forall ((i__95@213@03 Int)) (!
  (implies
    (and
      (<
        i__95@213@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))
      (<= 0 i__95@213@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
          i__95@213@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
            i__95@213@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
            i__95@213@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@200@03)))))
    i__95@213@03))
  :qid |prog.l<no position>|)))
(declare-const $k@214@03 $Perm)
(assert ($Perm.isReadVar $k@214@03 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@214@03 $Perm.No) (< $Perm.No $k@214@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9576
;  :arith-add-rows          34
;  :arith-assert-diseq      144
;  :arith-assert-lower      456
;  :arith-assert-upper      335
;  :arith-bound-prop        1
;  :arith-conflicts         74
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              500
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3960
;  :mk-clause               633
;  :num-allocs              6606684
;  :num-checks              537
;  :propagations            464
;  :quant-instantiations    209
;  :rlimit-count            289169)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@183@03 $k@195@03) $k@202@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          34
;  :arith-assert-diseq      144
;  :arith-assert-lower      456
;  :arith-assert-upper      336
;  :arith-bound-prop        1
;  :arith-conflicts         75
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         87
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3962
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              538
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            289247)
(assert (< $k@214@03 (+ (- $k@183@03 $k@195@03) $k@202@03)))
(assert (<= $Perm.No (- (+ (- $k@183@03 $k@195@03) $k@202@03) $k@214@03)))
(assert (<= (- (+ (- $k@183@03 $k@195@03) $k@202@03) $k@214@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@183@03 $k@195@03) $k@202@03) $k@214@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      338
;  :arith-bound-prop        1
;  :arith-conflicts         76
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         88
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3966
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              539
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            289512)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      339
;  :arith-bound-prop        1
;  :arith-conflicts         77
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         89
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3967
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              540
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            289590)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      340
;  :arith-bound-prop        1
;  :arith-conflicts         78
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         90
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3968
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              541
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            289668)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      341
;  :arith-bound-prop        1
;  :arith-conflicts         79
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3969
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              542
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            289746)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      342
;  :arith-bound-prop        1
;  :arith-conflicts         80
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         92
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3970
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              543
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            289824)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      343
;  :arith-bound-prop        1
;  :arith-conflicts         81
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         93
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3971
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              544
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            289902)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      344
;  :arith-bound-prop        1
;  :arith-conflicts         82
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         94
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3972
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              545
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            289980)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      345
;  :arith-bound-prop        1
;  :arith-conflicts         83
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         95
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3973
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              546
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            290058)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      346
;  :arith-bound-prop        1
;  :arith-conflicts         84
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         96
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3974
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              547
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            290136)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      144
;  :arith-assert-lower      458
;  :arith-assert-upper      347
;  :arith-bound-prop        1
;  :arith-conflicts         85
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         97
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3975
;  :mk-clause               635
;  :num-allocs              6606684
;  :num-checks              548
;  :propagations            465
;  :quant-instantiations    209
;  :rlimit-count            290214)
(declare-const $k@215@03 $Perm)
(assert ($Perm.isReadVar $k@215@03 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      145
;  :arith-assert-lower      460
;  :arith-assert-upper      349
;  :arith-bound-prop        1
;  :arith-conflicts         86
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         98
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3980
;  :mk-clause               637
;  :num-allocs              6606684
;  :num-checks              549
;  :propagations            466
;  :quant-instantiations    209
;  :rlimit-count            290441)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@215@03 $Perm.No) (< $Perm.No $k@215@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      145
;  :arith-assert-lower      460
;  :arith-assert-upper      349
;  :arith-bound-prop        1
;  :arith-conflicts         86
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         98
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3980
;  :mk-clause               637
;  :num-allocs              6606684
;  :num-checks              550
;  :propagations            466
;  :quant-instantiations    209
;  :rlimit-count            290491)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  $t@203@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9577
;  :arith-add-rows          35
;  :arith-assert-diseq      145
;  :arith-assert-lower      460
;  :arith-assert-upper      349
;  :arith-bound-prop        1
;  :arith-conflicts         86
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         98
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              502
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3980
;  :mk-clause               637
;  :num-allocs              6606684
;  :num-checks              551
;  :propagations            466
;  :quant-instantiations    209
;  :rlimit-count            290502)
(push) ; 12
(assert (not (not (= (+ (- $k@184@03 $k@196@03) $k@204@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9578
;  :arith-add-rows          35
;  :arith-assert-diseq      145
;  :arith-assert-lower      460
;  :arith-assert-upper      350
;  :arith-bound-prop        1
;  :arith-conflicts         87
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         98
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              504
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3982
;  :mk-clause               639
;  :num-allocs              6606684
;  :num-checks              552
;  :propagations            467
;  :quant-instantiations    209
;  :rlimit-count            290582)
(assert (< $k@215@03 (+ (- $k@184@03 $k@196@03) $k@204@03)))
(assert (<= $Perm.No (- (+ (- $k@184@03 $k@196@03) $k@204@03) $k@215@03)))
(assert (<= (- (+ (- $k@184@03 $k@196@03) $k@204@03) $k@215@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@184@03 $k@196@03) $k@204@03) $k@215@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@03 $k@195@03) $k@202@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9578
;  :arith-add-rows          37
;  :arith-assert-diseq      145
;  :arith-assert-lower      462
;  :arith-assert-upper      352
;  :arith-bound-prop        1
;  :arith-conflicts         88
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         99
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              504
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3986
;  :mk-clause               639
;  :num-allocs              6606684
;  :num-checks              553
;  :propagations            467
;  :quant-instantiations    209
;  :rlimit-count            290848)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  $t@203@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9578
;  :arith-add-rows          37
;  :arith-assert-diseq      145
;  :arith-assert-lower      462
;  :arith-assert-upper      352
;  :arith-bound-prop        1
;  :arith-conflicts         88
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         99
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              504
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3986
;  :mk-clause               639
;  :num-allocs              6606684
;  :num-checks              554
;  :propagations            467
;  :quant-instantiations    209
;  :rlimit-count            290859)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@184@03 $k@196@03) $k@204@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9578
;  :arith-add-rows          37
;  :arith-assert-diseq      145
;  :arith-assert-lower      462
;  :arith-assert-upper      353
;  :arith-bound-prop        1
;  :arith-conflicts         89
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         100
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              504
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3987
;  :mk-clause               639
;  :num-allocs              6606684
;  :num-checks              555
;  :propagations            467
;  :quant-instantiations    209
;  :rlimit-count            290940)
(declare-const $k@216@03 $Perm)
(assert ($Perm.isReadVar $k@216@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@216@03 $Perm.No) (< $Perm.No $k@216@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9578
;  :arith-add-rows          37
;  :arith-assert-diseq      146
;  :arith-assert-lower      464
;  :arith-assert-upper      354
;  :arith-bound-prop        1
;  :arith-conflicts         89
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         100
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              504
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3991
;  :mk-clause               641
;  :num-allocs              6606684
;  :num-checks              556
;  :propagations            468
;  :quant-instantiations    209
;  :rlimit-count            291139)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@185@03 $k@197@03) $k@206@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9579
;  :arith-add-rows          37
;  :arith-assert-diseq      146
;  :arith-assert-lower      464
;  :arith-assert-upper      355
;  :arith-bound-prop        1
;  :arith-conflicts         90
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         100
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              506
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3993
;  :mk-clause               643
;  :num-allocs              6606684
;  :num-checks              557
;  :propagations            469
;  :quant-instantiations    209
;  :rlimit-count            291219)
(assert (< $k@216@03 (+ (- $k@185@03 $k@197@03) $k@206@03)))
(assert (<= $Perm.No (- (+ (- $k@185@03 $k@197@03) $k@206@03) $k@216@03)))
(assert (<= (- (+ (- $k@185@03 $k@197@03) $k@206@03) $k@216@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@185@03 $k@197@03) $k@206@03) $k@216@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@03 $k@197@03) $k@206@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9579
;  :arith-add-rows          39
;  :arith-assert-diseq      146
;  :arith-assert-lower      466
;  :arith-assert-upper      357
;  :arith-bound-prop        1
;  :arith-conflicts         91
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         101
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              506
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3997
;  :mk-clause               643
;  :num-allocs              6606684
;  :num-checks              558
;  :propagations            469
;  :quant-instantiations    209
;  :rlimit-count            291488)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9579
;  :arith-add-rows          39
;  :arith-assert-diseq      146
;  :arith-assert-lower      466
;  :arith-assert-upper      357
;  :arith-bound-prop        1
;  :arith-conflicts         91
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         101
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              506
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3997
;  :mk-clause               643
;  :num-allocs              6606684
;  :num-checks              559
;  :propagations            469
;  :quant-instantiations    209
;  :rlimit-count            291501)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@03 $k@197@03) $k@206@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9579
;  :arith-add-rows          39
;  :arith-assert-diseq      146
;  :arith-assert-lower      466
;  :arith-assert-upper      358
;  :arith-bound-prop        1
;  :arith-conflicts         92
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         102
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              506
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3998
;  :mk-clause               643
;  :num-allocs              6606684
;  :num-checks              560
;  :propagations            469
;  :quant-instantiations    209
;  :rlimit-count            291582)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))))))))))))))
  $t@207@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9579
;  :arith-add-rows          39
;  :arith-assert-diseq      146
;  :arith-assert-lower      466
;  :arith-assert-upper      358
;  :arith-bound-prop        1
;  :arith-conflicts         92
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         102
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2325
;  :datatype-occurs-check   770
;  :datatype-splits         1876
;  :decisions               2209
;  :del-clause              506
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             3998
;  :mk-clause               643
;  :num-allocs              6606684
;  :num-checks              561
;  :propagations            469
;  :quant-instantiations    209
;  :rlimit-count            291593)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9982
;  :arith-add-rows          39
;  :arith-assert-diseq      147
;  :arith-assert-lower      469
;  :arith-assert-upper      359
;  :arith-bound-prop        1
;  :arith-conflicts         92
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         102
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              510
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4095
;  :mk-clause               647
;  :num-allocs              6606684
;  :num-checks              562
;  :propagations            488
;  :quant-instantiations    213
;  :rlimit-count            294022
;  :time                    0.00)
(declare-const $k@217@03 $Perm)
(assert ($Perm.isReadVar $k@217@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@217@03 $Perm.No) (< $Perm.No $k@217@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9982
;  :arith-add-rows          39
;  :arith-assert-diseq      148
;  :arith-assert-lower      471
;  :arith-assert-upper      360
;  :arith-bound-prop        1
;  :arith-conflicts         92
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         102
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              510
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4099
;  :mk-clause               649
;  :num-allocs              6606684
;  :num-checks              563
;  :propagations            489
;  :quant-instantiations    213
;  :rlimit-count            294220)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@186@03 $k@198@03) $k@208@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9983
;  :arith-add-rows          39
;  :arith-assert-diseq      148
;  :arith-assert-lower      471
;  :arith-assert-upper      361
;  :arith-bound-prop        1
;  :arith-conflicts         93
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         102
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              512
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4101
;  :mk-clause               651
;  :num-allocs              6606684
;  :num-checks              564
;  :propagations            490
;  :quant-instantiations    213
;  :rlimit-count            294298)
(assert (< $k@217@03 (+ (- $k@186@03 $k@198@03) $k@208@03)))
(assert (<= $Perm.No (- (+ (- $k@186@03 $k@198@03) $k@208@03) $k@217@03)))
(assert (<= (- (+ (- $k@186@03 $k@198@03) $k@208@03) $k@217@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@186@03 $k@198@03) $k@208@03) $k@217@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@186@03 $k@198@03) $k@208@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9983
;  :arith-add-rows          40
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      363
;  :arith-bound-prop        1
;  :arith-conflicts         94
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         103
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              512
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4105
;  :mk-clause               651
;  :num-allocs              6606684
;  :num-checks              565
;  :propagations            490
;  :quant-instantiations    213
;  :rlimit-count            294570)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9983
;  :arith-add-rows          40
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      363
;  :arith-bound-prop        1
;  :arith-conflicts         94
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         103
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              512
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4105
;  :mk-clause               651
;  :num-allocs              6606684
;  :num-checks              566
;  :propagations            490
;  :quant-instantiations    213
;  :rlimit-count            294583)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@186@03 $k@198@03) $k@208@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9983
;  :arith-add-rows          40
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      364
;  :arith-bound-prop        1
;  :arith-conflicts         95
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         104
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              512
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4106
;  :mk-clause               651
;  :num-allocs              6606684
;  :num-checks              567
;  :propagations            490
;  :quant-instantiations    213
;  :rlimit-count            294661)
(declare-const $k@218@03 $Perm)
(assert ($Perm.isReadVar $k@218@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@218@03 $Perm.No) (< $Perm.No $k@218@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9983
;  :arith-add-rows          40
;  :arith-assert-diseq      149
;  :arith-assert-lower      475
;  :arith-assert-upper      365
;  :arith-bound-prop        1
;  :arith-conflicts         95
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         104
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              512
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4110
;  :mk-clause               653
;  :num-allocs              6606684
;  :num-checks              568
;  :propagations            491
;  :quant-instantiations    213
;  :rlimit-count            294860)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@187@03 $k@199@03) $k@210@03) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9984
;  :arith-add-rows          40
;  :arith-assert-diseq      149
;  :arith-assert-lower      475
;  :arith-assert-upper      366
;  :arith-bound-prop        1
;  :arith-conflicts         96
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         104
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              514
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4112
;  :mk-clause               655
;  :num-allocs              6606684
;  :num-checks              569
;  :propagations            492
;  :quant-instantiations    213
;  :rlimit-count            294948)
(assert (< $k@218@03 (+ (- $k@187@03 $k@199@03) $k@210@03)))
(assert (<= $Perm.No (- (+ (- $k@187@03 $k@199@03) $k@210@03) $k@218@03)))
(assert (<= (- (+ (- $k@187@03 $k@199@03) $k@210@03) $k@218@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@187@03 $k@199@03) $k@210@03) $k@218@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@187@03 $k@199@03) $k@210@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9984
;  :arith-add-rows          41
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      368
;  :arith-bound-prop        1
;  :arith-conflicts         97
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         105
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              514
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4116
;  :mk-clause               655
;  :num-allocs              6606684
;  :num-checks              570
;  :propagations            492
;  :quant-instantiations    213
;  :rlimit-count            295224)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9984
;  :arith-add-rows          41
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      368
;  :arith-bound-prop        1
;  :arith-conflicts         97
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         105
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              514
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4116
;  :mk-clause               655
;  :num-allocs              6606684
;  :num-checks              571
;  :propagations            492
;  :quant-instantiations    213
;  :rlimit-count            295237)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@187@03 $k@199@03) $k@210@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9984
;  :arith-add-rows          41
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      369
;  :arith-bound-prop        1
;  :arith-conflicts         98
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         106
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              514
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4117
;  :mk-clause               655
;  :num-allocs              6606684
;  :num-checks              572
;  :propagations            492
;  :quant-instantiations    213
;  :rlimit-count            295326)
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@03 $k@197@03) $k@206@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9984
;  :arith-add-rows          41
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              514
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4118
;  :mk-clause               655
;  :num-allocs              6606684
;  :num-checks              573
;  :propagations            492
;  :quant-instantiations    213
;  :rlimit-count            295407)
(set-option :timeout 0)
(push) ; 12
(assert (not (= $t@207@03 diz@49@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9984
;  :arith-add-rows          41
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              514
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4118
;  :mk-clause               655
;  :num-allocs              6606684
;  :num-checks              574
;  :propagations            492
;  :quant-instantiations    213
;  :rlimit-count            295418)
(assert (= $t@207@03 diz@49@03))
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9984
;  :arith-add-rows          41
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2433
;  :datatype-occurs-check   838
;  :datatype-splits         1981
;  :decisions               2308
;  :del-clause              514
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4118
;  :mk-clause               655
;  :num-allocs              6606684
;  :num-checks              575
;  :propagations            492
;  :quant-instantiations    213
;  :rlimit-count            295434)
(pop) ; 11
(push) ; 11
; [else-branch: 51 | !(First:(Second:(Second:(Second:($t@181@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@181@03))))))[1] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
          1)
        (- 0 2))))))
(pop) ; 11
(set-option :timeout 10)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10330
;  :arith-add-rows          42
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    526
;  :datatype-constructor-ax 2533
;  :datatype-occurs-check   852
;  :datatype-splits         2061
;  :decisions               2404
;  :del-clause              533
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4203
;  :mk-clause               656
;  :num-allocs              6606684
;  :num-checks              576
;  :propagations            502
;  :quant-instantiations    215
;  :rlimit-count            297709
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10676
;  :arith-add-rows          42
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    532
;  :datatype-constructor-ax 2633
;  :datatype-occurs-check   866
;  :datatype-splits         2141
;  :decisions               2500
;  :del-clause              534
;  :final-checks            130
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4288
;  :mk-clause               657
;  :num-allocs              6606684
;  :num-checks              577
;  :propagations            512
;  :quant-instantiations    217
;  :rlimit-count            299892
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11022
;  :arith-add-rows          42
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    538
;  :datatype-constructor-ax 2733
;  :datatype-occurs-check   880
;  :datatype-splits         2221
;  :decisions               2596
;  :del-clause              535
;  :final-checks            133
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4373
;  :mk-clause               658
;  :num-allocs              6606684
;  :num-checks              578
;  :propagations            522
;  :quant-instantiations    219
;  :rlimit-count            302075
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03)))))))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11373
;  :arith-add-rows          42
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    544
;  :datatype-constructor-ax 2830
;  :datatype-occurs-check   894
;  :datatype-splits         2301
;  :decisions               2689
;  :del-clause              536
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4458
;  :mk-clause               659
;  :num-allocs              6606684
;  :num-checks              579
;  :propagations            532
;  :quant-instantiations    221
;  :rlimit-count            304313
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11719
;  :arith-add-rows          42
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    550
;  :datatype-constructor-ax 2930
;  :datatype-occurs-check   908
;  :datatype-splits         2381
;  :decisions               2785
;  :del-clause              537
;  :final-checks            139
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4543
;  :mk-clause               660
;  :num-allocs              6606684
;  :num-checks              580
;  :propagations            542
;  :quant-instantiations    223
;  :rlimit-count            306496
;  :time                    0.00)
; [eval] !(diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[1] != -2)
; [eval] diz.Prc_or_m.Main_process_state[0] != -1 || diz.Prc_or_m.Main_event_state[1] != -2
; [eval] diz.Prc_or_m.Main_process_state[0] != -1
; [eval] diz.Prc_or_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11719
;  :arith-add-rows          42
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    550
;  :datatype-constructor-ax 2930
;  :datatype-occurs-check   908
;  :datatype-splits         2381
;  :decisions               2785
;  :del-clause              537
;  :final-checks            139
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4543
;  :mk-clause               660
;  :num-allocs              6606684
;  :num-checks              581
;  :propagations            542
;  :quant-instantiations    223
;  :rlimit-count            306511)
; [eval] -1
(push) ; 11
; [then-branch: 64 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1 | live]
; [else-branch: 64 | First:(Second:(Second:(Second:($t@181@03))))[0] == -1 | live]
(push) ; 12
; [then-branch: 64 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      0)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 64 | First:(Second:(Second:(Second:($t@181@03))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    0)
  (- 0 1)))
; [eval] diz.Prc_or_m.Main_event_state[1] != -2
; [eval] diz.Prc_or_m.Main_event_state[1]
(push) ; 13
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11720
;  :arith-add-rows          42
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    550
;  :datatype-constructor-ax 2930
;  :datatype-occurs-check   908
;  :datatype-splits         2381
;  :decisions               2785
;  :del-clause              537
;  :final-checks            139
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4544
;  :mk-clause               660
;  :num-allocs              6606684
;  :num-checks              582
;  :propagations            542
;  :quant-instantiations    223
;  :rlimit-count            306669)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
        1)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12016
;  :arith-add-rows          42
;  :arith-assert-diseq      149
;  :arith-assert-lower      477
;  :arith-assert-upper      370
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    555
;  :datatype-constructor-ax 3011
;  :datatype-occurs-check   921
;  :datatype-splits         2459
;  :decisions               2863
;  :del-clause              537
;  :final-checks            142
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4625
;  :mk-clause               660
;  :num-allocs              6606684
;  :num-checks              583
;  :propagations            552
;  :quant-instantiations    225
;  :rlimit-count            308731
;  :time                    0.00)
(push) ; 11
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
          1)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12431
;  :arith-add-rows          42
;  :arith-assert-diseq      150
;  :arith-assert-lower      480
;  :arith-assert-upper      371
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              544
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4725
;  :mk-clause               667
;  :num-allocs              6606684
;  :num-checks              584
;  :propagations            564
;  :quant-instantiations    228
;  :rlimit-count            311368
;  :time                    0.00)
; [then-branch: 65 | !(First:(Second:(Second:(Second:($t@181@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@181@03))))))[1] != -2) | live]
; [else-branch: 65 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@181@03))))))[1] != -2 | live]
(push) ; 11
; [then-branch: 65 | !(First:(Second:(Second:(Second:($t@181@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@181@03))))))[1] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
          1)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      150
;  :arith-assert-lower      480
;  :arith-assert-upper      371
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              544
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4727
;  :mk-clause               667
;  :num-allocs              6606684
;  :num-checks              585
;  :propagations            564
;  :quant-instantiations    228
;  :rlimit-count            311585)
; [eval] diz.Prc_or_m != null
; [eval] |diz.Prc_or_m.Main_process_state| == 3
; [eval] |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_event_state| == 6
; [eval] |diz.Prc_or_m.Main_event_state|
; [eval] (forall i__94: Int :: { diz.Prc_or_m.Main_process_state[i__94] } 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|)
(declare-const i__94@219@03 Int)
(push) ; 12
; [eval] 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state| ==> diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= i__94 && i__94 < |diz.Prc_or_m.Main_process_state|
; [eval] 0 <= i__94
(push) ; 13
; [then-branch: 66 | 0 <= i__94@219@03 | live]
; [else-branch: 66 | !(0 <= i__94@219@03) | live]
(push) ; 14
; [then-branch: 66 | 0 <= i__94@219@03]
(assert (<= 0 i__94@219@03))
; [eval] i__94 < |diz.Prc_or_m.Main_process_state|
; [eval] |diz.Prc_or_m.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 66 | !(0 <= i__94@219@03)]
(assert (not (<= 0 i__94@219@03)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 67 | i__94@219@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i__94@219@03 | live]
; [else-branch: 67 | !(i__94@219@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i__94@219@03) | live]
(push) ; 14
; [then-branch: 67 | i__94@219@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i__94@219@03]
(assert (and
  (<
    i__94@219@03
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
  (<= 0 i__94@219@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__94] == -1 || 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__94] == -1
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 15
(assert (not (>= i__94@219@03 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      150
;  :arith-assert-lower      481
;  :arith-assert-upper      372
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              544
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4729
;  :mk-clause               667
;  :num-allocs              6606684
;  :num-checks              586
;  :propagations            564
;  :quant-instantiations    228
;  :rlimit-count            311721)
; [eval] -1
(push) ; 15
; [then-branch: 68 | First:(Second:(Second:(Second:($t@181@03))))[i__94@219@03] == -1 | live]
; [else-branch: 68 | First:(Second:(Second:(Second:($t@181@03))))[i__94@219@03] != -1 | live]
(push) ; 16
; [then-branch: 68 | First:(Second:(Second:(Second:($t@181@03))))[i__94@219@03] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i__94@219@03)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 68 | First:(Second:(Second:(Second:($t@181@03))))[i__94@219@03] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      i__94@219@03)
    (- 0 1))))
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__94] && diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] 0 <= diz.Prc_or_m.Main_process_state[i__94]
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 17
(assert (not (>= i__94@219@03 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      151
;  :arith-assert-lower      484
;  :arith-assert-upper      373
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              544
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4735
;  :mk-clause               671
;  :num-allocs              6606684
;  :num-checks              587
;  :propagations            566
;  :quant-instantiations    229
;  :rlimit-count            311953)
(push) ; 17
; [then-branch: 69 | 0 <= First:(Second:(Second:(Second:($t@181@03))))[i__94@219@03] | live]
; [else-branch: 69 | !(0 <= First:(Second:(Second:(Second:($t@181@03))))[i__94@219@03]) | live]
(push) ; 18
; [then-branch: 69 | 0 <= First:(Second:(Second:(Second:($t@181@03))))[i__94@219@03]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i__94@219@03)))
; [eval] diz.Prc_or_m.Main_process_state[i__94] < |diz.Prc_or_m.Main_event_state|
; [eval] diz.Prc_or_m.Main_process_state[i__94]
(push) ; 19
(assert (not (>= i__94@219@03 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      151
;  :arith-assert-lower      484
;  :arith-assert-upper      373
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              544
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4735
;  :mk-clause               671
;  :num-allocs              6606684
;  :num-checks              588
;  :propagations            566
;  :quant-instantiations    229
;  :rlimit-count            312067)
; [eval] |diz.Prc_or_m.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 69 | !(0 <= First:(Second:(Second:(Second:($t@181@03))))[i__94@219@03])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
      i__94@219@03))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 67 | !(i__94@219@03 < |First:(Second:(Second:(Second:($t@181@03))))| && 0 <= i__94@219@03)]
(assert (not
  (and
    (<
      i__94@219@03
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
    (<= 0 i__94@219@03))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i__94@219@03 Int)) (!
  (implies
    (and
      (<
        i__94@219@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
      (<= 0 i__94@219@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          i__94@219@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i__94@219@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i__94@219@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i__94@219@03))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      153
;  :arith-assert-lower      485
;  :arith-assert-upper      374
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4743
;  :mk-clause               685
;  :num-allocs              6606684
;  :num-checks              589
;  :propagations            568
;  :quant-instantiations    230
;  :rlimit-count            312513)
(assert (forall ((i__94@219@03 Int)) (!
  (implies
    (and
      (<
        i__94@219@03
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
      (<= 0 i__94@219@03))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
          i__94@219@03)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i__94@219@03)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
            i__94@219@03)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
    i__94@219@03))
  :qid |prog.l<no position>|)))
(declare-const $k@220@03 $Perm)
(assert ($Perm.isReadVar $k@220@03 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@220@03 $Perm.No) (< $Perm.No $k@220@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      487
;  :arith-assert-upper      375
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4748
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              590
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313075)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@183@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      487
;  :arith-assert-upper      375
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4748
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              591
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313086)
(assert (< $k@220@03 $k@183@03))
(assert (<= $Perm.No (- $k@183@03 $k@220@03)))
(assert (<= (- $k@183@03 $k@220@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@183@03 $k@220@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              592
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313294)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              593
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313342)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              594
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313390)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              595
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313438)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              596
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313486)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              597
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313534)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              598
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313582)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              599
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313630)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              600
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313678)
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      154
;  :arith-assert-lower      489
;  :arith-assert-upper      376
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4751
;  :mk-clause               687
;  :num-allocs              6606684
;  :num-checks              601
;  :propagations            569
;  :quant-instantiations    230
;  :rlimit-count            313726)
(declare-const $k@221@03 $Perm)
(assert ($Perm.isReadVar $k@221@03 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      155
;  :arith-assert-lower      491
;  :arith-assert-upper      377
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4755
;  :mk-clause               689
;  :num-allocs              6606684
;  :num-checks              602
;  :propagations            570
;  :quant-instantiations    230
;  :rlimit-count            313923)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@221@03 $Perm.No) (< $Perm.No $k@221@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      155
;  :arith-assert-lower      491
;  :arith-assert-upper      377
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4755
;  :mk-clause               689
;  :num-allocs              6606684
;  :num-checks              603
;  :propagations            570
;  :quant-instantiations    230
;  :rlimit-count            313973)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@184@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      155
;  :arith-assert-lower      491
;  :arith-assert-upper      377
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4755
;  :mk-clause               689
;  :num-allocs              6606684
;  :num-checks              604
;  :propagations            570
;  :quant-instantiations    230
;  :rlimit-count            313984)
(assert (< $k@221@03 $k@184@03))
(assert (<= $Perm.No (- $k@184@03 $k@221@03)))
(assert (<= (- $k@184@03 $k@221@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@184@03 $k@221@03))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03))))))))))
      $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder.Full_adder_m == diz.Prc_or_m
(push) ; 12
(assert (not (< $Perm.No $k@183@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      155
;  :arith-assert-lower      492
;  :arith-assert-upper      379
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4758
;  :mk-clause               689
;  :num-allocs              6606684
;  :num-checks              605
;  :propagations            570
;  :quant-instantiations    230
;  :rlimit-count            314192)
(push) ; 12
(assert (not (< $Perm.No $k@184@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      155
;  :arith-assert-lower      492
;  :arith-assert-upper      379
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4758
;  :mk-clause               689
;  :num-allocs              6606684
;  :num-checks              606
;  :propagations            570
;  :quant-instantiations    230
;  :rlimit-count            314240)
(declare-const $k@222@03 $Perm)
(assert ($Perm.isReadVar $k@222@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@222@03 $Perm.No) (< $Perm.No $k@222@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      156
;  :arith-assert-lower      494
;  :arith-assert-upper      380
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4762
;  :mk-clause               691
;  :num-allocs              6606684
;  :num-checks              607
;  :propagations            571
;  :quant-instantiations    230
;  :rlimit-count            314438)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@185@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      156
;  :arith-assert-lower      494
;  :arith-assert-upper      380
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         107
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4762
;  :mk-clause               691
;  :num-allocs              6606684
;  :num-checks              608
;  :propagations            571
;  :quant-instantiations    230
;  :rlimit-count            314449)
(assert (< $k@222@03 $k@185@03))
(assert (<= $Perm.No (- $k@185@03 $k@222@03)))
(assert (<= (- $k@185@03 $k@222@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@185@03 $k@222@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No $k@185@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      156
;  :arith-assert-lower      496
;  :arith-assert-upper      381
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4765
;  :mk-clause               691
;  :num-allocs              6606684
;  :num-checks              609
;  :propagations            571
;  :quant-instantiations    230
;  :rlimit-count            314663)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      156
;  :arith-assert-lower      496
;  :arith-assert-upper      381
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4765
;  :mk-clause               691
;  :num-allocs              6606684
;  :num-checks              610
;  :propagations            571
;  :quant-instantiations    230
;  :rlimit-count            314676)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@185@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12433
;  :arith-add-rows          42
;  :arith-assert-diseq      156
;  :arith-assert-lower      496
;  :arith-assert-upper      381
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 3128
;  :datatype-occurs-check   939
;  :datatype-splits         2541
;  :decisions               2976
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4765
;  :mk-clause               691
;  :num-allocs              6606684
;  :num-checks              611
;  :propagations            571
;  :quant-instantiations    230
;  :rlimit-count            314724)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      156
;  :arith-assert-lower      496
;  :arith-assert-upper      381
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4844
;  :mk-clause               691
;  :num-allocs              6606684
;  :num-checks              612
;  :propagations            581
;  :quant-instantiations    232
;  :rlimit-count            316616
;  :time                    0.00)
(declare-const $k@223@03 $Perm)
(assert ($Perm.isReadVar $k@223@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@223@03 $Perm.No) (< $Perm.No $k@223@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      157
;  :arith-assert-lower      498
;  :arith-assert-upper      382
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4848
;  :mk-clause               693
;  :num-allocs              6606684
;  :num-checks              613
;  :propagations            582
;  :quant-instantiations    232
;  :rlimit-count            316815)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@186@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      157
;  :arith-assert-lower      498
;  :arith-assert-upper      382
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4848
;  :mk-clause               693
;  :num-allocs              6606684
;  :num-checks              614
;  :propagations            582
;  :quant-instantiations    232
;  :rlimit-count            316826)
(assert (< $k@223@03 $k@186@03))
(assert (<= $Perm.No (- $k@186@03 $k@223@03)))
(assert (<= (- $k@186@03 $k@223@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@186@03 $k@223@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No $k@186@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      157
;  :arith-assert-lower      500
;  :arith-assert-upper      383
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4851
;  :mk-clause               693
;  :num-allocs              6606684
;  :num-checks              615
;  :propagations            582
;  :quant-instantiations    232
;  :rlimit-count            317034)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      157
;  :arith-assert-lower      500
;  :arith-assert-upper      383
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4851
;  :mk-clause               693
;  :num-allocs              6606684
;  :num-checks              616
;  :propagations            582
;  :quant-instantiations    232
;  :rlimit-count            317047)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@186@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      157
;  :arith-assert-lower      500
;  :arith-assert-upper      383
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4851
;  :mk-clause               693
;  :num-allocs              6606684
;  :num-checks              617
;  :propagations            582
;  :quant-instantiations    232
;  :rlimit-count            317095)
(declare-const $k@224@03 $Perm)
(assert ($Perm.isReadVar $k@224@03 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@224@03 $Perm.No) (< $Perm.No $k@224@03))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      384
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4855
;  :mk-clause               695
;  :num-allocs              6606684
;  :num-checks              618
;  :propagations            583
;  :quant-instantiations    232
;  :rlimit-count            317293)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@187@03 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      384
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4855
;  :mk-clause               695
;  :num-allocs              6606684
;  :num-checks              619
;  :propagations            583
;  :quant-instantiations    232
;  :rlimit-count            317304)
(assert (< $k@224@03 $k@187@03))
(assert (<= $Perm.No (- $k@187@03 $k@224@03)))
(assert (<= (- $k@187@03 $k@224@03) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@187@03 $k@224@03))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@181@03)) $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No $k@187@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4858
;  :mk-clause               695
;  :num-allocs              6606684
;  :num-checks              620
;  :propagations            583
;  :quant-instantiations    232
;  :rlimit-count            317518)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4858
;  :mk-clause               695
;  :num-allocs              6606684
;  :num-checks              621
;  :propagations            583
;  :quant-instantiations    232
;  :rlimit-count            317531)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@187@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4858
;  :mk-clause               695
;  :num-allocs              6606684
;  :num-checks              622
;  :propagations            583
;  :quant-instantiations    232
;  :rlimit-count            317579)
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(push) ; 12
(assert (not (< $Perm.No $k@185@03)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4858
;  :mk-clause               695
;  :num-allocs              6606684
;  :num-checks              623
;  :propagations            583
;  :quant-instantiations    232
;  :rlimit-count            317627)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12727
;  :arith-add-rows          42
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 3209
;  :datatype-occurs-check   952
;  :datatype-splits         2619
;  :decisions               3054
;  :del-clause              562
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4858
;  :mk-clause               695
;  :num-allocs              6606684
;  :num-checks              624
;  :propagations            583
;  :quant-instantiations    232
;  :rlimit-count            317640)
(pop) ; 11
(push) ; 11
; [else-branch: 65 | First:(Second:(Second:(Second:($t@181@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@181@03))))))[1] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@03)))))))
        1)
      (- 0 2)))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12963
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    572
;  :datatype-constructor-ax 3292
;  :datatype-occurs-check   964
;  :datatype-splits         2682
;  :decisions               3132
;  :del-clause              635
;  :final-checks            152
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4924
;  :mk-clause               696
;  :num-allocs              6606684
;  :num-checks              625
;  :propagations            587
;  :quant-instantiations    232
;  :rlimit-count            319483
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13199
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    577
;  :datatype-constructor-ax 3375
;  :datatype-occurs-check   976
;  :datatype-splits         2745
;  :decisions               3210
;  :del-clause              636
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             4990
;  :mk-clause               697
;  :num-allocs              6606684
;  :num-checks              626
;  :propagations            591
;  :quant-instantiations    232
;  :rlimit-count            321213
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13435
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    582
;  :datatype-constructor-ax 3458
;  :datatype-occurs-check   988
;  :datatype-splits         2808
;  :decisions               3288
;  :del-clause              637
;  :final-checks            158
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5056
;  :mk-clause               698
;  :num-allocs              6606684
;  :num-checks              627
;  :propagations            595
;  :quant-instantiations    232
;  :rlimit-count            322943
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13682
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    587
;  :datatype-constructor-ax 3541
;  :datatype-occurs-check   1000
;  :datatype-splits         2871
;  :decisions               3366
;  :del-clause              638
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5122
;  :mk-clause               699
;  :num-allocs              6606684
;  :num-checks              628
;  :propagations            599
;  :quant-instantiations    232
;  :rlimit-count            324844
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13918
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    592
;  :datatype-constructor-ax 3624
;  :datatype-occurs-check   1012
;  :datatype-splits         2934
;  :decisions               3444
;  :del-clause              639
;  :final-checks            164
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5188
;  :mk-clause               700
;  :num-allocs              6606684
;  :num-checks              629
;  :propagations            603
;  :quant-instantiations    232
;  :rlimit-count            326574
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14210
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    601
;  :datatype-constructor-ax 3724
;  :datatype-occurs-check   1028
;  :datatype-splits         3049
;  :decisions               3535
;  :del-clause              640
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5305
;  :mk-clause               701
;  :num-allocs              6606684
;  :num-checks              630
;  :propagations            611
;  :quant-instantiations    232
;  :rlimit-count            328496
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14545
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    610
;  :datatype-constructor-ax 3841
;  :datatype-occurs-check   1044
;  :datatype-splits         3164
;  :decisions               3643
;  :del-clause              641
;  :final-checks            172
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5422
;  :mk-clause               702
;  :num-allocs              6606684
;  :num-checks              631
;  :propagations            619
;  :quant-instantiations    232
;  :rlimit-count            330638
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14837
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 3941
;  :datatype-occurs-check   1060
;  :datatype-splits         3279
;  :decisions               3734
;  :del-clause              642
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5539
;  :mk-clause               703
;  :num-allocs              6606684
;  :num-checks              632
;  :propagations            627
;  :quant-instantiations    232
;  :rlimit-count            332560
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15172
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 4058
;  :datatype-occurs-check   1076
;  :datatype-splits         3394
;  :decisions               3842
;  :del-clause              643
;  :final-checks            180
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5656
;  :mk-clause               704
;  :num-allocs              6606684
;  :num-checks              633
;  :propagations            635
;  :quant-instantiations    232
;  :rlimit-count            334702
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15464
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    637
;  :datatype-constructor-ax 4158
;  :datatype-occurs-check   1092
;  :datatype-splits         3509
;  :decisions               3933
;  :del-clause              644
;  :final-checks            184
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5773
;  :mk-clause               705
;  :num-allocs              6606684
;  :num-checks              634
;  :propagations            643
;  :quant-instantiations    232
;  :rlimit-count            336624
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15799
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    646
;  :datatype-constructor-ax 4275
;  :datatype-occurs-check   1108
;  :datatype-splits         3624
;  :decisions               4041
;  :del-clause              645
;  :final-checks            188
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5890
;  :mk-clause               706
;  :num-allocs              6606684
;  :num-checks              635
;  :propagations            651
;  :quant-instantiations    232
;  :rlimit-count            338766
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16048
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    651
;  :datatype-constructor-ax 4357
;  :datatype-occurs-check   1120
;  :datatype-splits         3687
;  :decisions               4118
;  :del-clause              646
;  :final-checks            191
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             5956
;  :mk-clause               707
;  :num-allocs              6606684
;  :num-checks              636
;  :propagations            655
;  :quant-instantiations    232
;  :rlimit-count            340660
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@150@03))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@03)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16340
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    656
;  :datatype-constructor-ax 4456
;  :datatype-occurs-check   1132
;  :datatype-splits         3750
;  :decisions               4212
;  :del-clause              647
;  :final-checks            194
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             6022
;  :mk-clause               708
;  :num-allocs              6606684
;  :num-checks              637
;  :propagations            659
;  :quant-instantiations    232
;  :rlimit-count            342774
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16632
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 4556
;  :datatype-occurs-check   1148
;  :datatype-splits         3865
;  :decisions               4303
;  :del-clause              648
;  :final-checks            198
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             6139
;  :mk-clause               709
;  :num-allocs              6606684
;  :num-checks              638
;  :propagations            667
;  :quant-instantiations    232
;  :rlimit-count            344696
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@150@03))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@51@03))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16967
;  :arith-add-rows          44
;  :arith-assert-diseq      158
;  :arith-assert-lower      504
;  :arith-assert-upper      385
;  :arith-bound-prop        1
;  :arith-conflicts         99
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         107
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    674
;  :datatype-constructor-ax 4673
;  :datatype-occurs-check   1164
;  :datatype-splits         3980
;  :decisions               4411
;  :del-clause              649
;  :final-checks            202
;  :max-generation          2
;  :max-memory              5.56
;  :memory                  5.56
;  :mk-bool-var             6256
;  :mk-clause               710
;  :num-allocs              6606684
;  :num-checks              639
;  :propagations            675
;  :quant-instantiations    232
;  :rlimit-count            346838
;  :time                    0.00)
; [eval] !true
; [then-branch: 70 | False | dead]
; [else-branch: 70 | True | live]
(push) ; 8
; [else-branch: 70 | True]
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 29 | First:(Second:(Second:(Second:($t@94@03))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@94@03))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@03)))))))
        0)
      (- 0 2)))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
