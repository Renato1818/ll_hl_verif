(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-17 23:27:22
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_Full_adder<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Prc_half_adder_1<TYPE> TYPE)
(declare-const class_Prc_half_adder_2<TYPE> TYPE)
(declare-const class_Prc_or<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Full_adder_m: Ref]
(declare-fun $FVF.domain_Full_adder_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Full_adder_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Full_adder_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Full_adder_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Full_adder_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Full_adder_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_half_adder_1_m: Ref]
(declare-fun $FVF.domain_Prc_half_adder_1_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_half_adder_1_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_half_adder_1_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_half_adder_1_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_half_adder_1_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_half_adder_1_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_half_adder_2_m: Ref]
(declare-fun $FVF.domain_Prc_half_adder_2_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_half_adder_2_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_half_adder_2_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_half_adder_2_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_half_adder_2_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_half_adder_2_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_or_m: Ref]
(declare-fun $FVF.domain_Prc_or_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_or_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_or_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_or_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_or_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_or_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Prc_half_adder_1_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_1_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_2_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_2_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_or_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_or_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Full_adder<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Prc_half_adder_1<TYPE> class_Prc_half_adder_2<TYPE> class_Prc_or<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Full_adder<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_half_adder_1<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_half_adder_2<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_or<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Full_adder_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Full_adder_m vs) ($FVF.domain_Full_adder_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Full_adder_m vs))
            (= ($FVF.lookup_Full_adder_m vs x) ($FVF.lookup_Full_adder_m ws x)))
          :pattern (($FVF.lookup_Full_adder_m vs x) ($FVF.lookup_Full_adder_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Full_adder_m pm r))
    :pattern ($FVF.perm_Full_adder_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Full_adder_m f r) true)
    :pattern ($FVF.loc_Full_adder_m f r))))
; /field_value_functions_axioms.smt2 [Prc_half_adder_1_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_half_adder_1_m vs) ($FVF.domain_Prc_half_adder_1_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_half_adder_1_m vs))
            (= ($FVF.lookup_Prc_half_adder_1_m vs x) ($FVF.lookup_Prc_half_adder_1_m ws x)))
          :pattern (($FVF.lookup_Prc_half_adder_1_m vs x) ($FVF.lookup_Prc_half_adder_1_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_half_adder_1_m pm r))
    :pattern ($FVF.perm_Prc_half_adder_1_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_half_adder_1_m f r) true)
    :pattern ($FVF.loc_Prc_half_adder_1_m f r))))
; /field_value_functions_axioms.smt2 [Prc_half_adder_2_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_half_adder_2_m vs) ($FVF.domain_Prc_half_adder_2_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_half_adder_2_m vs))
            (= ($FVF.lookup_Prc_half_adder_2_m vs x) ($FVF.lookup_Prc_half_adder_2_m ws x)))
          :pattern (($FVF.lookup_Prc_half_adder_2_m vs x) ($FVF.lookup_Prc_half_adder_2_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_half_adder_2_m pm r))
    :pattern ($FVF.perm_Prc_half_adder_2_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_half_adder_2_m f r) true)
    :pattern ($FVF.loc_Prc_half_adder_2_m f r))))
; /field_value_functions_axioms.smt2 [Prc_or_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_or_m vs) ($FVF.domain_Prc_or_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_or_m vs))
            (= ($FVF.lookup_Prc_or_m vs x) ($FVF.lookup_Prc_or_m ws x)))
          :pattern (($FVF.lookup_Prc_or_m vs x) ($FVF.lookup_Prc_or_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_or_m pm r))
    :pattern ($FVF.perm_Prc_or_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_or_m f r) true)
    :pattern ($FVF.loc_Prc_or_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Prc_half_adder_1___contract_unsatisfiable__Prc_half_adder_1_EncodedGlobalVariables_Main ----------
(declare-const diz@0@04 $Ref)
(declare-const globals@1@04 $Ref)
(declare-const m_param@2@04 $Ref)
(declare-const diz@3@04 $Ref)
(declare-const globals@4@04 $Ref)
(declare-const m_param@5@04 $Ref)
(push) ; 1
(declare-const $t@6@04 $Snap)
(assert (= $t@6@04 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@3@04 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@7@04 $Snap)
(assert (= $t@7@04 ($Snap.combine ($Snap.first $t@7@04) ($Snap.second $t@7@04))))
(assert (= ($Snap.first $t@7@04) $Snap.unit))
(assert (= ($Snap.second $t@7@04) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Prc_half_adder_1___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@8@04 $Ref)
(declare-const globals@9@04 $Ref)
(declare-const diz@10@04 $Ref)
(declare-const globals@11@04 $Ref)
(push) ; 1
(declare-const $t@12@04 $Snap)
(assert (= $t@12@04 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@10@04 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.Prc_half_adder_1_m, 1 / 2) && diz.Prc_half_adder_1_m != null && acc(diz.Prc_half_adder_1_m.Main_adder_half_adder1, wildcard) && diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz && acc(diz.Prc_half_adder_1_init, 1 / 2) && !diz.Prc_half_adder_1_init)
(declare-const $t@13@04 $Snap)
(assert (= $t@13@04 ($Snap.combine ($Snap.first $t@13@04) ($Snap.second $t@13@04))))
(assert (= ($Snap.first $t@13@04) $Snap.unit))
(assert (=
  ($Snap.second $t@13@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@13@04))
    ($Snap.second ($Snap.second $t@13@04)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             27
;  :arith-assert-lower    1
;  :arith-assert-upper    1
;  :arith-eq-adapter      1
;  :binary-propagations   22
;  :datatype-accessor-ax  5
;  :datatype-occurs-check 10
;  :final-checks          6
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           247
;  :mk-clause             1
;  :num-allocs            3250513
;  :num-checks            7
;  :propagations          22
;  :quant-instantiations  1
;  :rlimit-count          102287)
(assert (=
  ($Snap.second ($Snap.second $t@13@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@13@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@13@04))) $Snap.unit))
; [eval] diz.Prc_half_adder_1_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@13@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@13@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))
(declare-const $k@14@04 $Perm)
(assert ($Perm.isReadVar $k@14@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@14@04 $Perm.No) (< $Perm.No $k@14@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             39
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    2
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             1
;  :datatype-accessor-ax  7
;  :datatype-occurs-check 10
;  :final-checks          6
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           256
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            8
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          102859)
(assert (<= $Perm.No $k@14@04))
(assert (<= $k@14@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@14@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             45
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             2
;  :datatype-accessor-ax  8
;  :datatype-occurs-check 10
;  :final-checks          6
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           259
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            9
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          103132)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
  diz@10@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             52
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             2
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 10
;  :final-checks          6
;  :max-generation        1
;  :max-memory            3.96
;  :memory                3.67
;  :mk-bool-var           262
;  :mk-clause             3
;  :num-allocs            3250513
;  :num-checks            10
;  :propagations          23
;  :quant-instantiations  3
;  :rlimit-count          103383)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))
  $Snap.unit))
; [eval] !diz.Prc_half_adder_1_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Prc_half_adder_2_run_EncodedGlobalVariables ----------
(declare-const diz@15@04 $Ref)
(declare-const globals@16@04 $Ref)
(declare-const diz@17@04 $Ref)
(declare-const globals@18@04 $Ref)
(push) ; 1
(declare-const $t@19@04 $Snap)
(assert (= $t@19@04 ($Snap.combine ($Snap.first $t@19@04) ($Snap.second $t@19@04))))
(assert (= ($Snap.first $t@19@04) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@17@04 $Ref.null)))
(assert (=
  ($Snap.second $t@19@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@19@04))
    ($Snap.second ($Snap.second $t@19@04)))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               100
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    12
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   20
;  :datatype-splits         3
;  :decisions               12
;  :del-clause              2
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             273
;  :mk-clause               3
;  :num-allocs              3362346
;  :num-checks              15
;  :propagations            23
;  :quant-instantiations    5
;  :rlimit-count            105051)
(assert (=
  ($Snap.second ($Snap.second $t@19@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@19@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@19@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@19@04))) $Snap.unit))
; [eval] diz.Prc_half_adder_2_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@19@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))))
(declare-const $k@20@04 $Perm)
(assert ($Perm.isReadVar $k@20@04 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@20@04 $Perm.No) (< $Perm.No $k@20@04))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               112
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               3
;  :datatype-accessor-ax    14
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   20
;  :datatype-splits         3
;  :decisions               12
;  :del-clause              2
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             282
;  :mk-clause               5
;  :num-allocs              3362346
;  :num-checks              16
;  :propagations            24
;  :quant-instantiations    6
;  :rlimit-count            105624)
(assert (<= $Perm.No $k@20@04))
(assert (<= $k@20@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@20@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@20@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               118
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   20
;  :datatype-splits         3
;  :decisions               12
;  :del-clause              2
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             285
;  :mk-clause               5
;  :num-allocs              3362346
;  :num-checks              17
;  :propagations            24
;  :quant-instantiations    6
;  :rlimit-count            105897)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))
  diz@17@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               125
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 12
;  :datatype-occurs-check   20
;  :datatype-splits         3
;  :decisions               12
;  :del-clause              2
;  :final-checks            11
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             288
;  :mk-clause               5
;  :num-allocs              3362346
;  :num-checks              18
;  :propagations            24
;  :quant-instantiations    7
;  :rlimit-count            106148)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04))))))
  $Snap.unit))
; [eval] !diz.Prc_half_adder_2_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@21@04 $Snap)
(assert (= $t@21@04 ($Snap.combine ($Snap.first $t@21@04) ($Snap.second $t@21@04))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               143
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   22
;  :datatype-splits         6
;  :decisions               15
;  :del-clause              4
;  :final-checks            13
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             296
;  :mk-clause               5
;  :num-allocs              3362346
;  :num-checks              20
;  :propagations            24
;  :quant-instantiations    9
;  :rlimit-count            106774)
(assert (=
  ($Snap.second $t@21@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@21@04))
    ($Snap.second ($Snap.second $t@21@04)))))
(assert (= ($Snap.first ($Snap.second $t@21@04)) $Snap.unit))
; [eval] diz.Prc_half_adder_2_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@21@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@21@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))
(declare-const $k@22@04 $Perm)
(assert ($Perm.isReadVar $k@22@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@22@04 $Perm.No) (< $Perm.No $k@22@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               155
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      6
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               5
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   22
;  :datatype-splits         6
;  :decisions               15
;  :del-clause              4
;  :final-checks            13
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             305
;  :mk-clause               7
;  :num-allocs              3477767
;  :num-checks              21
;  :propagations            25
;  :quant-instantiations    10
;  :rlimit-count            107335)
(assert (<= $Perm.No $k@22@04))
(assert (<= $k@22@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@22@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@21@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@04))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@22@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   22
;  :datatype-splits         6
;  :decisions               15
;  :del-clause              4
;  :final-checks            13
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             308
;  :mk-clause               7
;  :num-allocs              3477767
;  :num-checks              22
;  :propagations            25
;  :quant-instantiations    10
;  :rlimit-count            107598)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@04))))
  diz@17@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               169
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   22
;  :datatype-splits         6
;  :decisions               15
;  :del-clause              4
;  :final-checks            13
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             311
;  :mk-clause               7
;  :num-allocs              3477767
;  :num-checks              23
;  :propagations            25
;  :quant-instantiations    11
;  :rlimit-count            107838)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04)))))
  $Snap.unit))
; [eval] !diz.Prc_half_adder_2_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@04))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_29__38: Ref
(declare-const __flatten_29__38@23@04 $Ref)
; [exec]
; var __flatten_30__39: Seq[Int]
(declare-const __flatten_30__39@24@04 Seq<Int>)
; [exec]
; var __flatten_31__40: Ref
(declare-const __flatten_31__40@25@04 $Ref)
; [exec]
; var __flatten_32__41: Ref
(declare-const __flatten_32__41@26@04 $Ref)
; [exec]
; var __flatten_33__42: Seq[Int]
(declare-const __flatten_33__42@27@04 Seq<Int>)
; [exec]
; var __flatten_34__43: Ref
(declare-const __flatten_34__43@28@04 $Ref)
; [exec]
; var __flatten_35__45: Ref
(declare-const __flatten_35__45@29@04 $Ref)
; [exec]
; var __flatten_36__46: Ref
(declare-const __flatten_36__46@30@04 $Ref)
; [exec]
; var __flatten_37__47: Bool
(declare-const __flatten_37__47@31@04 Bool)
; [exec]
; var __flatten_38__48: Ref
(declare-const __flatten_38__48@32@04 $Ref)
; [exec]
; var __flatten_39__49: Ref
(declare-const __flatten_39__49@33@04 $Ref)
; [exec]
; var __flatten_40__50: Ref
(declare-const __flatten_40__50@34@04 $Ref)
; [exec]
; var __flatten_41__51: Ref
(declare-const __flatten_41__51@35@04 $Ref)
; [exec]
; var __flatten_42__52: Ref
(declare-const __flatten_42__52@36@04 $Ref)
; [exec]
; var __flatten_44__53: Ref
(declare-const __flatten_44__53@37@04 $Ref)
; [exec]
; var __flatten_45__54: Ref
(declare-const __flatten_45__54@38@04 $Ref)
; [exec]
; var __flatten_46__55: Bool
(declare-const __flatten_46__55@39@04 Bool)
; [exec]
; var __flatten_47__56: Ref
(declare-const __flatten_47__56@40@04 $Ref)
; [exec]
; var __flatten_48__57: Ref
(declare-const __flatten_48__57@41@04 $Ref)
; [exec]
; var __flatten_49__58: Ref
(declare-const __flatten_49__58@42@04 $Ref)
; [exec]
; var __flatten_50__59: Ref
(declare-const __flatten_50__59@43@04 $Ref)
; [exec]
; var __flatten_51__60: Ref
(declare-const __flatten_51__60@44@04 $Ref)
; [exec]
; var __flatten_52__61: Seq[Int]
(declare-const __flatten_52__61@45@04 Seq<Int>)
; [exec]
; var __flatten_53__62: Ref
(declare-const __flatten_53__62@46@04 $Ref)
; [exec]
; var __flatten_54__63: Ref
(declare-const __flatten_54__63@47@04 $Ref)
; [exec]
; var __flatten_55__64: Seq[Int]
(declare-const __flatten_55__64@48@04 Seq<Int>)
; [exec]
; var __flatten_56__65: Ref
(declare-const __flatten_56__65@49@04 $Ref)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(declare-const $t@50@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(assert (= $t@50@04 ($Snap.combine ($Snap.first $t@50@04) ($Snap.second $t@50@04))))
(assert (= ($Snap.first $t@50@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@50@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@50@04))
    ($Snap.second ($Snap.second $t@50@04)))))
(assert (= ($Snap.first ($Snap.second $t@50@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@50@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@50@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@50@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@50@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@51@04 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@51@04 | live]
; [else-branch: 0 | !(0 <= i@51@04) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@51@04]
(assert (<= 0 i@51@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@51@04)]
(assert (not (<= 0 i@51@04)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@51@04 < |First:(Second:(Second:(Second:($t@50@04))))| && 0 <= i@51@04 | live]
; [else-branch: 1 | !(i@51@04 < |First:(Second:(Second:(Second:($t@50@04))))| && 0 <= i@51@04) | live]
(push) ; 5
; [then-branch: 1 | i@51@04 < |First:(Second:(Second:(Second:($t@50@04))))| && 0 <= i@51@04]
(assert (and
  (<
    i@51@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))
  (<= 0 i@51@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@51@04 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               227
;  :arith-assert-diseq      5
;  :arith-assert-lower      14
;  :arith-assert-upper      10
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              6
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             343
;  :mk-clause               13
;  :num-allocs              3593719
;  :num-checks              25
;  :propagations            27
;  :quant-instantiations    17
;  :rlimit-count            109495)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@50@04))))[i@51@04] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@50@04))))[i@51@04] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@50@04))))[i@51@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
    i@51@04)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@50@04))))[i@51@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
      i@51@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@51@04 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               227
;  :arith-assert-diseq      5
;  :arith-assert-lower      14
;  :arith-assert-upper      10
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              6
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             344
;  :mk-clause               13
;  :num-allocs              3593719
;  :num-checks              26
;  :propagations            27
;  :quant-instantiations    17
;  :rlimit-count            109670)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@50@04))))[i@51@04] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@50@04))))[i@51@04]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@50@04))))[i@51@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
    i@51@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@51@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               227
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              6
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             347
;  :mk-clause               14
;  :num-allocs              3593719
;  :num-checks              27
;  :propagations            27
;  :quant-instantiations    17
;  :rlimit-count            109794)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@50@04))))[i@51@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
      i@51@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@51@04 < |First:(Second:(Second:(Second:($t@50@04))))| && 0 <= i@51@04)]
(assert (not
  (and
    (<
      i@51@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))
    (<= 0 i@51@04))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@51@04 Int)) (!
  (implies
    (and
      (<
        i@51@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))
      (<= 0 i@51@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
          i@51@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
            i@51@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
            i@51@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
    i@51@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))
(declare-const $k@52@04 $Perm)
(assert ($Perm.isReadVar $k@52@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@52@04 $Perm.No) (< $Perm.No $k@52@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               232
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      11
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             353
;  :mk-clause               16
;  :num-allocs              3593719
;  :num-checks              28
;  :propagations            28
;  :quant-instantiations    17
;  :rlimit-count            110563)
(assert (<= $Perm.No $k@52@04))
(assert (<= $k@52@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@52@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               238
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             356
;  :mk-clause               16
;  :num-allocs              3593719
;  :num-checks              29
;  :propagations            28
;  :quant-instantiations    17
;  :rlimit-count            110886)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               244
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             359
;  :mk-clause               16
;  :num-allocs              3593719
;  :num-checks              30
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            111242)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               249
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               10
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             360
;  :mk-clause               16
;  :num-allocs              3593719
;  :num-checks              31
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            111499)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               254
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               11
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             361
;  :mk-clause               16
;  :num-allocs              3593719
;  :num-checks              32
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            111766)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               259
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               12
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             362
;  :mk-clause               16
;  :num-allocs              3593719
;  :num-checks              33
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            112043
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               264
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.85
;  :mk-bool-var             363
;  :mk-clause               16
;  :num-allocs              3593719
;  :num-checks              34
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            112330)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               269
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               14
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             364
;  :mk-clause               16
;  :num-allocs              3712800
;  :num-checks              35
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            112627)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               274
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               15
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             365
;  :mk-clause               16
;  :num-allocs              3712800
;  :num-checks              36
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            112934)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               279
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               16
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             366
;  :mk-clause               16
;  :num-allocs              3712800
;  :num-checks              37
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            113251)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               284
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               17
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             367
;  :mk-clause               16
;  :num-allocs              3712800
;  :num-checks              38
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            113578)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               289
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               18
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             368
;  :mk-clause               16
;  :num-allocs              3712800
;  :num-checks              39
;  :propagations            28
;  :quant-instantiations    18
;  :rlimit-count            113915)
(declare-const $k@53@04 $Perm)
(assert ($Perm.isReadVar $k@53@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@53@04 $Perm.No) (< $Perm.No $k@53@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               289
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      13
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             372
;  :mk-clause               18
;  :num-allocs              3712800
;  :num-checks              40
;  :propagations            29
;  :quant-instantiations    18
;  :rlimit-count            114113)
(assert (<= $Perm.No $k@53@04))
(assert (<= $k@53@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@53@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               295
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             375
;  :mk-clause               18
;  :num-allocs              3712800
;  :num-checks              41
;  :propagations            29
;  :quant-instantiations    18
;  :rlimit-count            114546)
(push) ; 3
(assert (not (< $Perm.No $k@53@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               295
;  :arith-assert-diseq      8
;  :arith-assert-lower      21
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             375
;  :mk-clause               18
;  :num-allocs              3712800
;  :num-checks              42
;  :propagations            29
;  :quant-instantiations    18
;  :rlimit-count            114594)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))
(declare-const $k@54@04 $Perm)
(assert ($Perm.isReadVar $k@54@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@54@04 $Perm.No) (< $Perm.No $k@54@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               303
;  :arith-assert-diseq      9
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             382
;  :mk-clause               20
;  :num-allocs              3712800
;  :num-checks              43
;  :propagations            30
;  :quant-instantiations    19
;  :rlimit-count            115235)
(assert (<= $Perm.No $k@54@04))
(assert (<= $k@54@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@54@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@54@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               309
;  :arith-assert-diseq      9
;  :arith-assert-lower      23
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             385
;  :mk-clause               20
;  :num-allocs              3712800
;  :num-checks              44
;  :propagations            30
;  :quant-instantiations    19
;  :rlimit-count            115688)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@54@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               315
;  :arith-assert-diseq      9
;  :arith-assert-lower      23
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             388
;  :mk-clause               20
;  :num-allocs              3712800
;  :num-checks              45
;  :propagations            30
;  :quant-instantiations    20
;  :rlimit-count            116172)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               315
;  :arith-assert-diseq      9
;  :arith-assert-lower      23
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             388
;  :mk-clause               20
;  :num-allocs              3712800
;  :num-checks              46
;  :propagations            30
;  :quant-instantiations    20
;  :rlimit-count            116185)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))))
(declare-const $k@55@04 $Perm)
(assert ($Perm.isReadVar $k@55@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@55@04 $Perm.No) (< $Perm.No $k@55@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               320
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      17
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             393
;  :mk-clause               22
;  :num-allocs              3712800
;  :num-checks              47
;  :propagations            31
;  :quant-instantiations    20
;  :rlimit-count            116716)
(assert (<= $Perm.No $k@55@04))
(assert (<= $k@55@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@55@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@55@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               326
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             396
;  :mk-clause               22
;  :num-allocs              3712800
;  :num-checks              48
;  :propagations            31
;  :quant-instantiations    20
;  :rlimit-count            117199)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@55@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               332
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             399
;  :mk-clause               22
;  :num-allocs              3712800
;  :num-checks              49
;  :propagations            31
;  :quant-instantiations    21
;  :rlimit-count            117715)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               332
;  :arith-assert-diseq      10
;  :arith-assert-lower      25
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             399
;  :mk-clause               22
;  :num-allocs              3712800
;  :num-checks              50
;  :propagations            31
;  :quant-instantiations    21
;  :rlimit-count            117728)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))))))))
(declare-const $k@56@04 $Perm)
(assert ($Perm.isReadVar $k@56@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@56@04 $Perm.No) (< $Perm.No $k@56@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               337
;  :arith-assert-diseq      11
;  :arith-assert-lower      27
;  :arith-assert-upper      19
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             404
;  :mk-clause               24
;  :num-allocs              3712800
;  :num-checks              51
;  :propagations            32
;  :quant-instantiations    21
;  :rlimit-count            118289)
(declare-const $t@57@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@20@04)
    (=
      $t@57@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))))
  (implies
    (< $Perm.No $k@56@04)
    (=
      $t@57@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@20@04 $k@56@04)))
(assert (<= (+ $k@20@04 $k@56@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@20@04 $k@56@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@20@04 $k@56@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               347
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         1
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             412
;  :mk-clause               24
;  :num-allocs              3712800
;  :num-checks              52
;  :propagations            32
;  :quant-instantiations    22
;  :rlimit-count            119050)
(assert (not (= $t@57@04 $Ref.null)))
(push) ; 3
(assert (not (< $Perm.No (+ $k@20@04 $k@56@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               348
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             414
;  :mk-clause               24
;  :num-allocs              3712800
;  :num-checks              53
;  :propagations            32
;  :quant-instantiations    22
;  :rlimit-count            119166)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               348
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             414
;  :mk-clause               24
;  :num-allocs              3712800
;  :num-checks              54
;  :propagations            32
;  :quant-instantiations    22
;  :rlimit-count            119179)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@17@04 $t@57@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               348
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 18
;  :datatype-occurs-check   23
;  :datatype-splits         6
;  :decisions               18
;  :del-clause              7
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.94
;  :mk-bool-var             415
;  :mk-clause               24
;  :num-allocs              3712800
;  :num-checks              55
;  :propagations            32
;  :quant-instantiations    22
;  :rlimit-count            119239)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@04)))))))
  ($SortWrappers.$SnapToBool ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))))))))))))))))))))))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@50@04 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))) globals@18@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(declare-const $t@58@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz.Prc_half_adder_2_init := true
; [exec]
; __flatten_29__38 := diz.Prc_half_adder_2_m
(declare-const __flatten_29__38@59@04 $Ref)
(assert (=
  __flatten_29__38@59@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))))
; [exec]
; __flatten_31__40 := diz.Prc_half_adder_2_m
(declare-const __flatten_31__40@60@04 $Ref)
(assert (=
  __flatten_31__40@60@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))))
; [exec]
; __flatten_30__39 := __flatten_31__40.Main_process_state[2 := 4]
; [eval] __flatten_31__40.Main_process_state[2 := 4]
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
  __flatten_31__40@60@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             458
;  :mk-clause               25
;  :num-allocs              3836332
;  :num-checks              58
;  :propagations            33
;  :quant-instantiations    23
;  :rlimit-count            121030)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               477
;  :arith-assert-diseq      11
;  :arith-assert-lower      28
;  :arith-assert-upper      22
;  :arith-conflicts         2
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             458
;  :mk-clause               25
;  :num-allocs              3836332
;  :num-checks              59
;  :propagations            33
;  :quant-instantiations    23
;  :rlimit-count            121045)
(declare-const __flatten_30__39@61@04 Seq<Int>)
(assert (Seq_equal
  __flatten_30__39@61@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))
    2
    4)))
; [exec]
; __flatten_29__38.Main_process_state := __flatten_30__39
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
  __flatten_29__38@59@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               487
;  :arith-add-rows          3
;  :arith-assert-diseq      12
;  :arith-assert-lower      32
;  :arith-assert-upper      24
;  :arith-conflicts         2
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         4
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             481
;  :mk-clause               44
;  :num-allocs              3836332
;  :num-checks              60
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            121530)
(assert (not (= __flatten_29__38@59@04 $Ref.null)))
; [exec]
; __flatten_32__41 := diz.Prc_half_adder_2_m
(declare-const __flatten_32__41@62@04 $Ref)
(assert (=
  __flatten_32__41@62@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))))
; [exec]
; __flatten_34__43 := diz.Prc_half_adder_2_m
(declare-const __flatten_34__43@63@04 $Ref)
(assert (=
  __flatten_34__43@63@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))))
; [exec]
; __flatten_33__42 := __flatten_34__43.Main_event_state[4 := 2]
; [eval] __flatten_34__43.Main_event_state[4 := 2]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
  __flatten_34__43@63@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-add-rows          3
;  :arith-assert-diseq      12
;  :arith-assert-lower      32
;  :arith-assert-upper      24
;  :arith-conflicts         2
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         4
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             484
;  :mk-clause               44
;  :num-allocs              3836332
;  :num-checks              61
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            121657)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               490
;  :arith-add-rows          3
;  :arith-assert-diseq      12
;  :arith-assert-lower      32
;  :arith-assert-upper      24
;  :arith-conflicts         2
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         4
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             484
;  :mk-clause               44
;  :num-allocs              3836332
;  :num-checks              62
;  :propagations            42
;  :quant-instantiations    28
;  :rlimit-count            121672)
(declare-const __flatten_33__42@64@04 Seq<Int>)
(assert (Seq_equal
  __flatten_33__42@64@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))
    4
    2)))
; [exec]
; __flatten_32__41.Main_event_state := __flatten_33__42
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
  __flatten_32__41@62@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               500
;  :arith-add-rows          6
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      26
;  :arith-conflicts         2
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             507
;  :mk-clause               63
;  :num-allocs              3836332
;  :num-checks              63
;  :propagations            51
;  :quant-instantiations    33
;  :rlimit-count            122185)
(assert (not (= __flatten_32__41@62@04 $Ref.null)))
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@65@04 $Snap)
(assert (= $t@65@04 ($Snap.combine ($Snap.first $t@65@04) ($Snap.second $t@65@04))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               505
;  :arith-add-rows          6
;  :arith-assert-diseq      13
;  :arith-assert-lower      36
;  :arith-assert-upper      26
;  :arith-conflicts         2
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             508
;  :mk-clause               63
;  :num-allocs              3836332
;  :num-checks              64
;  :propagations            51
;  :quant-instantiations    33
;  :rlimit-count            122318)
(assert (=
  ($Snap.second $t@65@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@65@04))
    ($Snap.second ($Snap.second $t@65@04)))))
(assert (= ($Snap.first ($Snap.second $t@65@04)) $Snap.unit))
; [eval] diz.Prc_half_adder_2_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@65@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@65@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@65@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
  $Snap.unit))
; [eval] (forall i__44: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__44] } 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__44@66@04 Int)
(push) ; 4
; [eval] 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__44
(push) ; 5
; [then-branch: 4 | 0 <= i__44@66@04 | live]
; [else-branch: 4 | !(0 <= i__44@66@04) | live]
(push) ; 6
; [then-branch: 4 | 0 <= i__44@66@04]
(assert (<= 0 i__44@66@04))
; [eval] i__44 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 4 | !(0 <= i__44@66@04)]
(assert (not (<= 0 i__44@66@04)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 5 | i__44@66@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i__44@66@04 | live]
; [else-branch: 5 | !(i__44@66@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i__44@66@04) | live]
(push) ; 6
; [then-branch: 5 | i__44@66@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i__44@66@04]
(assert (and
  (<
    i__44@66@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
  (<= 0 i__44@66@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 7
(assert (not (>= i__44@66@04 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          6
;  :arith-assert-diseq      13
;  :arith-assert-lower      41
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             533
;  :mk-clause               63
;  :num-allocs              3962443
;  :num-checks              65
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            123595)
; [eval] -1
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@65@04))))[i__44@66@04] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@65@04))))[i__44@66@04] != -1 | live]
(push) ; 8
; [then-branch: 6 | First:(Second:(Second:(Second:($t@65@04))))[i__44@66@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i__44@66@04)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 6 | First:(Second:(Second:(Second:($t@65@04))))[i__44@66@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      i__44@66@04)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 9
(assert (not (>= i__44@66@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          6
;  :arith-assert-diseq      13
;  :arith-assert-lower      41
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             534
;  :mk-clause               63
;  :num-allocs              3962443
;  :num-checks              66
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            123770)
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@65@04))))[i__44@66@04] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@65@04))))[i__44@66@04]) | live]
(push) ; 10
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@65@04))))[i__44@66@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i__44@66@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 11
(assert (not (>= i__44@66@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-add-rows          6
;  :arith-assert-diseq      14
;  :arith-assert-lower      44
;  :arith-assert-upper      29
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              23
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             537
;  :mk-clause               64
;  :num-allocs              3962443
;  :num-checks              67
;  :propagations            51
;  :quant-instantiations    38
;  :rlimit-count            123894)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@65@04))))[i__44@66@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      i__44@66@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 5 | !(i__44@66@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i__44@66@04)]
(assert (not
  (and
    (<
      i__44@66@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
    (<= 0 i__44@66@04))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__44@66@04 Int)) (!
  (implies
    (and
      (<
        i__44@66@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
      (<= 0 i__44@66@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          i__44@66@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i__44@66@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i__44@66@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i__44@66@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))
(declare-const $k@67@04 $Perm)
(assert ($Perm.isReadVar $k@67@04 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@67@04 $Perm.No) (< $Perm.No $k@67@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               554
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      30
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             543
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              68
;  :propagations            52
;  :quant-instantiations    38
;  :rlimit-count            124663)
(assert (<= $Perm.No $k@67@04))
(assert (<= $k@67@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@67@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               560
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             546
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              69
;  :propagations            52
;  :quant-instantiations    38
;  :rlimit-count            124986)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               566
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             549
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              70
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            125342)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               571
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             550
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              71
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            125599)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               576
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               37
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             551
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              72
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            125866)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               581
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             552
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              73
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            126143)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             553
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              74
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            126430)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               591
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             554
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              75
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            126727)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               596
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               41
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             555
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              76
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            127034)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               601
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             556
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              77
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            127351)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               606
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             557
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              78
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            127678)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               611
;  :arith-add-rows          6
;  :arith-assert-diseq      15
;  :arith-assert-lower      46
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             558
;  :mk-clause               66
;  :num-allocs              3962443
;  :num-checks              79
;  :propagations            52
;  :quant-instantiations    39
;  :rlimit-count            128015)
(declare-const $k@68@04 $Perm)
(assert ($Perm.isReadVar $k@68@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@68@04 $Perm.No) (< $Perm.No $k@68@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               611
;  :arith-add-rows          6
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      32
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             562
;  :mk-clause               68
;  :num-allocs              3962443
;  :num-checks              80
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            128213)
(assert (<= $Perm.No $k@68@04))
(assert (<= $k@68@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@68@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               617
;  :arith-add-rows          6
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               46
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             565
;  :mk-clause               68
;  :num-allocs              3962443
;  :num-checks              81
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            128646)
(push) ; 4
(assert (not (< $Perm.No $k@68@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               617
;  :arith-add-rows          6
;  :arith-assert-diseq      16
;  :arith-assert-lower      48
;  :arith-assert-upper      33
;  :arith-conflicts         2
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               47
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             565
;  :mk-clause               68
;  :num-allocs              3962443
;  :num-checks              82
;  :propagations            53
;  :quant-instantiations    39
;  :rlimit-count            128694)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))
(declare-const $k@69@04 $Perm)
(assert ($Perm.isReadVar $k@69@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@69@04 $Perm.No) (< $Perm.No $k@69@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               625
;  :arith-add-rows          6
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      34
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             572
;  :mk-clause               70
;  :num-allocs              3962443
;  :num-checks              83
;  :propagations            54
;  :quant-instantiations    40
;  :rlimit-count            129325)
(assert (<= $Perm.No $k@69@04))
(assert (<= $k@69@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@69@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@69@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               631
;  :arith-add-rows          6
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             575
;  :mk-clause               70
;  :num-allocs              3962443
;  :num-checks              84
;  :propagations            54
;  :quant-instantiations    40
;  :rlimit-count            129778)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@69@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               637
;  :arith-add-rows          6
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             578
;  :mk-clause               70
;  :num-allocs              3962443
;  :num-checks              85
;  :propagations            54
;  :quant-instantiations    41
;  :rlimit-count            130262)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               637
;  :arith-add-rows          6
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      35
;  :arith-conflicts         2
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             578
;  :mk-clause               70
;  :num-allocs              3962443
;  :num-checks              86
;  :propagations            54
;  :quant-instantiations    41
;  :rlimit-count            130275)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))
(declare-const $k@70@04 $Perm)
(assert ($Perm.isReadVar $k@70@04 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@70@04 $Perm.No) (< $Perm.No $k@70@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               642
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      36
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             583
;  :mk-clause               72
;  :num-allocs              3962443
;  :num-checks              87
;  :propagations            55
;  :quant-instantiations    41
;  :rlimit-count            130806)
(assert (<= $Perm.No $k@70@04))
(assert (<= $k@70@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@70@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@70@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               648
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               52
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             586
;  :mk-clause               72
;  :num-allocs              4093286
;  :num-checks              88
;  :propagations            55
;  :quant-instantiations    41
;  :rlimit-count            131289)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@70@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               654
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               53
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             589
;  :mk-clause               72
;  :num-allocs              4093286
;  :num-checks              89
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            131805)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               654
;  :arith-add-rows          6
;  :arith-assert-diseq      18
;  :arith-assert-lower      52
;  :arith-assert-upper      37
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               53
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             589
;  :mk-clause               72
;  :num-allocs              4093286
;  :num-checks              90
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            131818)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
(declare-const $k@71@04 $Perm)
(assert ($Perm.isReadVar $k@71@04 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@71@04 $Perm.No) (< $Perm.No $k@71@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               659
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      38
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             594
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              91
;  :propagations            56
;  :quant-instantiations    42
;  :rlimit-count            132378)
(assert (<= $Perm.No $k@71@04))
(assert (<= $k@71@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@71@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@71@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               665
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             597
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              92
;  :propagations            56
;  :quant-instantiations    42
;  :rlimit-count            132891)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@71@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               671
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             600
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              93
;  :propagations            56
;  :quant-instantiations    43
;  :rlimit-count            133437)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               671
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             600
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              94
;  :propagations            56
;  :quant-instantiations    43
;  :rlimit-count            133450)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@71@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               677
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             602
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              95
;  :propagations            56
;  :quant-instantiations    43
;  :rlimit-count            133929)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
  diz@17@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               685
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             604
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              96
;  :propagations            56
;  :quant-instantiations    43
;  :rlimit-count            134403)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[4] != -2
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               693
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             610
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              97
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            134970)
; [eval] -1
(push) ; 5
; [then-branch: 8 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1 | live]
; [else-branch: 8 | First:(Second:(Second:(Second:($t@65@04))))[2] == -1 | live]
(push) ; 6
; [then-branch: 8 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      2)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 8 | First:(Second:(Second:(Second:($t@65@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    2)
  (- 0 1)))
; [eval] diz.Prc_half_adder_2_m.Main_event_state[4] != -2
; [eval] diz.Prc_half_adder_2_m.Main_event_state[4]
(push) ; 7
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               694
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             611
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              98
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            135132)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [eval] !(diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[4] != -2)
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[4] != -2
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2]
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               694
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             611
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              99
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            135152)
; [eval] -1
(push) ; 5
; [then-branch: 9 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1 | live]
; [else-branch: 9 | First:(Second:(Second:(Second:($t@65@04))))[2] == -1 | live]
(push) ; 6
; [then-branch: 9 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      2)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 9 | First:(Second:(Second:(Second:($t@65@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    2)
  (- 0 1)))
; [eval] diz.Prc_half_adder_2_m.Main_event_state[4] != -2
; [eval] diz.Prc_half_adder_2_m.Main_event_state[4]
(push) ; 7
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              24
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             612
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              100
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            135310)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              34
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             612
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              101
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            135328)
; [eval] diz.Prc_half_adder_2_m != null
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_30__39@61@04) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      39
;  :arith-conflicts         2
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              34
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             615
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              102
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            135402)
(assert (= (Seq_length __flatten_30__39@61@04) 3))
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(push) ; 4
(assert (not (= (Seq_length __flatten_33__42@64@04) 6)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              34
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             621
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              103
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            135527)
(assert (= (Seq_length __flatten_33__42@64@04) 6))
; [eval] (forall i__44: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__44] } 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__44@72@04 Int)
(push) ; 4
; [eval] 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__44
(push) ; 5
; [then-branch: 10 | 0 <= i__44@72@04 | live]
; [else-branch: 10 | !(0 <= i__44@72@04) | live]
(push) ; 6
; [then-branch: 10 | 0 <= i__44@72@04]
(assert (<= 0 i__44@72@04))
; [eval] i__44 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 10 | !(0 <= i__44@72@04)]
(assert (not (<= 0 i__44@72@04)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 11 | i__44@72@04 < |__flatten_30__39@61@04| && 0 <= i__44@72@04 | live]
; [else-branch: 11 | !(i__44@72@04 < |__flatten_30__39@61@04| && 0 <= i__44@72@04) | live]
(push) ; 6
; [then-branch: 11 | i__44@72@04 < |__flatten_30__39@61@04| && 0 <= i__44@72@04]
(assert (and (< i__44@72@04 (Seq_length __flatten_30__39@61@04)) (<= 0 i__44@72@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 7
(assert (not (>= i__44@72@04 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               697
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      42
;  :arith-conflicts         2
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              34
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             626
;  :mk-clause               74
;  :num-allocs              4093286
;  :num-checks              104
;  :propagations            56
;  :quant-instantiations    46
;  :rlimit-count            135714)
; [eval] -1
(push) ; 7
; [then-branch: 12 | __flatten_30__39@61@04[i__44@72@04] == -1 | live]
; [else-branch: 12 | __flatten_30__39@61@04[i__44@72@04] != -1 | live]
(push) ; 8
; [then-branch: 12 | __flatten_30__39@61@04[i__44@72@04] == -1]
(assert (= (Seq_index __flatten_30__39@61@04 i__44@72@04) (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 12 | __flatten_30__39@61@04[i__44@72@04] != -1]
(assert (not (= (Seq_index __flatten_30__39@61@04 i__44@72@04) (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 9
(assert (not (>= i__44@72@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               698
;  :arith-add-rows          6
;  :arith-assert-diseq      19
;  :arith-assert-lower      57
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              34
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             634
;  :mk-clause               84
;  :num-allocs              4093286
;  :num-checks              105
;  :propagations            56
;  :quant-instantiations    47
;  :rlimit-count            135882)
(push) ; 9
; [then-branch: 13 | 0 <= __flatten_30__39@61@04[i__44@72@04] | live]
; [else-branch: 13 | !(0 <= __flatten_30__39@61@04[i__44@72@04]) | live]
(push) ; 10
; [then-branch: 13 | 0 <= __flatten_30__39@61@04[i__44@72@04]]
(assert (<= 0 (Seq_index __flatten_30__39@61@04 i__44@72@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 11
(assert (not (>= i__44@72@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               698
;  :arith-add-rows          6
;  :arith-assert-diseq      20
;  :arith-assert-lower      60
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 61
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               59
;  :del-clause              34
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             637
;  :mk-clause               85
;  :num-allocs              4093286
;  :num-checks              106
;  :propagations            56
;  :quant-instantiations    47
;  :rlimit-count            135956)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 13 | !(0 <= __flatten_30__39@61@04[i__44@72@04])]
(assert (not (<= 0 (Seq_index __flatten_30__39@61@04 i__44@72@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 11 | !(i__44@72@04 < |__flatten_30__39@61@04| && 0 <= i__44@72@04)]
(assert (not
  (and (< i__44@72@04 (Seq_length __flatten_30__39@61@04)) (<= 0 i__44@72@04))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((i__44@72@04 Int)) (!
  (implies
    (and (< i__44@72@04 (Seq_length __flatten_30__39@61@04)) (<= 0 i__44@72@04))
    (or
      (= (Seq_index __flatten_30__39@61@04 i__44@72@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_30__39@61@04 i__44@72@04)
          (Seq_length __flatten_33__42@64@04))
        (<= 0 (Seq_index __flatten_30__39@61@04 i__44@72@04)))))
  :pattern ((Seq_index __flatten_30__39@61@04 i__44@72@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      74
;  :arith-assert-upper      55
;  :arith-conflicts         4
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             675
;  :mk-clause               132
;  :num-allocs              4093286
;  :num-checks              107
;  :propagations            86
;  :quant-instantiations    50
;  :rlimit-count            136594)
(assert (forall ((i__44@72@04 Int)) (!
  (implies
    (and (< i__44@72@04 (Seq_length __flatten_30__39@61@04)) (<= 0 i__44@72@04))
    (or
      (= (Seq_index __flatten_30__39@61@04 i__44@72@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_30__39@61@04 i__44@72@04)
          (Seq_length __flatten_33__42@64@04))
        (<= 0 (Seq_index __flatten_30__39@61@04 i__44@72@04)))))
  :pattern ((Seq_index __flatten_30__39@61@04 i__44@72@04))
  :qid |prog.l<no position>|)))
(declare-const $k@73@04 $Perm)
(assert ($Perm.isReadVar $k@73@04 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@73@04 $Perm.No) (< $Perm.No $k@73@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      56
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             680
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              108
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137065)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@52@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      76
;  :arith-assert-upper      56
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             680
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              109
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137076)
(assert (< $k@73@04 $k@52@04))
(assert (<= $Perm.No (- $k@52@04 $k@73@04)))
(assert (<= (- $k@52@04 $k@73@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@52@04 $k@73@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              110
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137290)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              111
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137338)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              112
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137386)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              113
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137434)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              114
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137482)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              115
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137530)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              116
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137578)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              117
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137626)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              118
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137674)
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      78
;  :arith-assert-upper      57
;  :arith-conflicts         4
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             683
;  :mk-clause               134
;  :num-allocs              4093286
;  :num-checks              119
;  :propagations            87
;  :quant-instantiations    50
;  :rlimit-count            137722)
(declare-const $k@74@04 $Perm)
(assert ($Perm.isReadVar $k@74@04 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      80
;  :arith-assert-upper      58
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             687
;  :mk-clause               136
;  :num-allocs              4093286
;  :num-checks              120
;  :propagations            88
;  :quant-instantiations    50
;  :rlimit-count            137918)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@74@04 $Perm.No) (< $Perm.No $k@74@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      80
;  :arith-assert-upper      58
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             687
;  :mk-clause               136
;  :num-allocs              4093286
;  :num-checks              121
;  :propagations            88
;  :quant-instantiations    50
;  :rlimit-count            137968)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@53@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      80
;  :arith-assert-upper      58
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             687
;  :mk-clause               136
;  :num-allocs              4093286
;  :num-checks              122
;  :propagations            88
;  :quant-instantiations    50
;  :rlimit-count            137979)
(assert (< $k@74@04 $k@53@04))
(assert (<= $Perm.No (- $k@53@04 $k@74@04)))
(assert (<= (- $k@53@04 $k@74@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@53@04 $k@74@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(push) ; 4
(assert (not (< $Perm.No $k@52@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      82
;  :arith-assert-upper      59
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             690
;  :mk-clause               136
;  :num-allocs              4093286
;  :num-checks              123
;  :propagations            88
;  :quant-instantiations    50
;  :rlimit-count            138193)
(push) ; 4
(assert (not (< $Perm.No $k@53@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      82
;  :arith-assert-upper      59
;  :arith-conflicts         4
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             690
;  :mk-clause               136
;  :num-allocs              4093286
;  :num-checks              124
;  :propagations            88
;  :quant-instantiations    50
;  :rlimit-count            138241)
(declare-const $k@75@04 $Perm)
(assert ($Perm.isReadVar $k@75@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@75@04 $Perm.No) (< $Perm.No $k@75@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      84
;  :arith-assert-upper      60
;  :arith-conflicts         4
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             694
;  :mk-clause               138
;  :num-allocs              4093286
;  :num-checks              125
;  :propagations            89
;  :quant-instantiations    50
;  :rlimit-count            138439)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@54@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      84
;  :arith-assert-upper      60
;  :arith-conflicts         4
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             694
;  :mk-clause               138
;  :num-allocs              4093286
;  :num-checks              126
;  :propagations            89
;  :quant-instantiations    50
;  :rlimit-count            138450)
(assert (< $k@75@04 $k@54@04))
(assert (<= $Perm.No (- $k@54@04 $k@75@04)))
(assert (<= (- $k@54@04 $k@75@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@54@04 $k@75@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(push) ; 4
(assert (not (< $Perm.No $k@54@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      86
;  :arith-assert-upper      61
;  :arith-conflicts         4
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             697
;  :mk-clause               138
;  :num-allocs              4093286
;  :num-checks              127
;  :propagations            89
;  :quant-instantiations    50
;  :rlimit-count            138670)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      86
;  :arith-assert-upper      61
;  :arith-conflicts         4
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             697
;  :mk-clause               138
;  :num-allocs              4093286
;  :num-checks              128
;  :propagations            89
;  :quant-instantiations    50
;  :rlimit-count            138683)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@54@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      86
;  :arith-assert-upper      61
;  :arith-conflicts         4
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             697
;  :mk-clause               138
;  :num-allocs              4093286
;  :num-checks              129
;  :propagations            89
;  :quant-instantiations    50
;  :rlimit-count            138731)
(declare-const $k@76@04 $Perm)
(assert ($Perm.isReadVar $k@76@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@76@04 $Perm.No) (< $Perm.No $k@76@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      88
;  :arith-assert-upper      62
;  :arith-conflicts         4
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             701
;  :mk-clause               140
;  :num-allocs              4093286
;  :num-checks              130
;  :propagations            90
;  :quant-instantiations    50
;  :rlimit-count            138930)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@55@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      88
;  :arith-assert-upper      62
;  :arith-conflicts         4
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         8
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             701
;  :mk-clause               140
;  :num-allocs              4093286
;  :num-checks              131
;  :propagations            90
;  :quant-instantiations    50
;  :rlimit-count            138941)
(assert (< $k@76@04 $k@55@04))
(assert (<= $Perm.No (- $k@55@04 $k@76@04)))
(assert (<= (- $k@55@04 $k@76@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@55@04 $k@76@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(push) ; 4
(assert (not (< $Perm.No $k@55@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      90
;  :arith-assert-upper      63
;  :arith-conflicts         4
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             704
;  :mk-clause               140
;  :num-allocs              4093286
;  :num-checks              132
;  :propagations            90
;  :quant-instantiations    50
;  :rlimit-count            139155)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      90
;  :arith-assert-upper      63
;  :arith-conflicts         4
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             704
;  :mk-clause               140
;  :num-allocs              4093286
;  :num-checks              133
;  :propagations            90
;  :quant-instantiations    50
;  :rlimit-count            139168)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@55@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      90
;  :arith-assert-upper      63
;  :arith-conflicts         4
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             704
;  :mk-clause               140
;  :num-allocs              4093286
;  :num-checks              134
;  :propagations            90
;  :quant-instantiations    50
;  :rlimit-count            139216)
(declare-const $k@77@04 $Perm)
(assert ($Perm.isReadVar $k@77@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@77@04 $Perm.No) (< $Perm.No $k@77@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               719
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      92
;  :arith-assert-upper      64
;  :arith-conflicts         4
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              92
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             708
;  :mk-clause               142
;  :num-allocs              4093286
;  :num-checks              135
;  :propagations            91
;  :quant-instantiations    50
;  :rlimit-count            139415)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@20@04 $k@56@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      92
;  :arith-assert-upper      65
;  :arith-conflicts         5
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         8
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              94
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             710
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              136
;  :propagations            92
;  :quant-instantiations    50
;  :rlimit-count            139475)
(assert (< $k@77@04 (+ $k@20@04 $k@56@04)))
(assert (<= $Perm.No (- (+ $k@20@04 $k@56@04) $k@77@04)))
(assert (<= (- (+ $k@20@04 $k@56@04) $k@77@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@20@04 $k@56@04) $k@77@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04)))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(push) ; 4
(assert (not (< $Perm.No (+ $k@20@04 $k@56@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      67
;  :arith-conflicts         6
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         9
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              94
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             714
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              137
;  :propagations            92
;  :quant-instantiations    50
;  :rlimit-count            139703)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      67
;  :arith-conflicts         6
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         9
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              94
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             714
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              138
;  :propagations            92
;  :quant-instantiations    50
;  :rlimit-count            139716)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ $k@20@04 $k@56@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      68
;  :arith-conflicts         7
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         10
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              94
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             715
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              139
;  :propagations            92
;  :quant-instantiations    50
;  :rlimit-count            139776)
(push) ; 4
(assert (not (= diz@17@04 $t@57@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               720
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      68
;  :arith-conflicts         7
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         10
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 64
;  :datatype-occurs-check   35
;  :datatype-splits         42
;  :decisions               65
;  :del-clause              94
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             716
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              140
;  :propagations            92
;  :quant-instantiations    50
;  :rlimit-count            139836)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               780
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      68
;  :arith-conflicts         7
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         10
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 85
;  :datatype-occurs-check   41
;  :datatype-splits         60
;  :decisions               85
;  :del-clause              94
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             733
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              141
;  :propagations            93
;  :quant-instantiations    50
;  :rlimit-count            140503
;  :time                    0.00)
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(push) ; 4
(assert (not (< $Perm.No (+ $k@20@04 $k@56@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               780
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      69
;  :arith-conflicts         8
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         11
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 85
;  :datatype-occurs-check   41
;  :datatype-splits         60
;  :decisions               85
;  :del-clause              94
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             734
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              142
;  :propagations            93
;  :quant-instantiations    50
;  :rlimit-count            140563)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@57@04 diz@17@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               780
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      69
;  :arith-conflicts         8
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         11
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 85
;  :datatype-occurs-check   41
;  :datatype-splits         60
;  :decisions               85
;  :del-clause              94
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             734
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              143
;  :propagations            93
;  :quant-instantiations    50
;  :rlimit-count            140619)
(assert (= $t@57@04 diz@17@04))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               780
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      94
;  :arith-assert-upper      69
;  :arith-conflicts         8
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         11
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 85
;  :datatype-occurs-check   41
;  :datatype-splits         60
;  :decisions               85
;  :del-clause              94
;  :final-checks            23
;  :max-generation          2
;  :max-memory              4.24
;  :memory                  4.24
;  :mk-bool-var             734
;  :mk-clause               144
;  :num-allocs              4093286
;  :num-checks              144
;  :propagations            93
;  :quant-instantiations    50
;  :rlimit-count            140667)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@67@04 $Perm.Write))
(assert ($Perm.isReadVar $k@68@04 $Perm.Write))
(assert ($Perm.isReadVar $k@69@04 $Perm.Write))
(assert ($Perm.isReadVar $k@70@04 $Perm.Write))
(assert ($Perm.isReadVar $k@71@04 $Perm.Write))
(assert (= $t@65@04 ($Snap.combine ($Snap.first $t@65@04) ($Snap.second $t@65@04))))
(assert (=
  ($Snap.second $t@65@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@65@04))
    ($Snap.second ($Snap.second $t@65@04)))))
(assert (= ($Snap.first ($Snap.second $t@65@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@65@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@65@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@65@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
  $Snap.unit))
(assert (forall ((i__44@66@04 Int)) (!
  (implies
    (and
      (<
        i__44@66@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
      (<= 0 i__44@66@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          i__44@66@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i__44@66@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i__44@66@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i__44@66@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))
(assert (<= $Perm.No $k@67@04))
(assert (<= $k@67@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@67@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
(assert (<= $Perm.No $k@68@04))
(assert (<= $k@68@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@68@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))
(assert (<= $Perm.No $k@69@04))
(assert (<= $k@69@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@69@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@70@04))
(assert (<= $k@70@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@70@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@71@04))
(assert (<= $k@71@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@71@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
  diz@17@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[4] != -2
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1364
;  :arith-add-rows          6
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      81
;  :arith-conflicts         8
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         11
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 225
;  :datatype-occurs-check   59
;  :datatype-splits         142
;  :decisions               217
;  :del-clause              106
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             916
;  :mk-clause               158
;  :num-allocs              4374972
;  :num-checks              147
;  :propagations            104
;  :quant-instantiations    63
;  :rlimit-count            148596)
; [eval] -1
(push) ; 5
; [then-branch: 14 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@65@04))))[2] == -1 | live]
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      2)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 14 | First:(Second:(Second:(Second:($t@65@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    2)
  (- 0 1)))
; [eval] diz.Prc_half_adder_2_m.Main_event_state[4] != -2
; [eval] diz.Prc_half_adder_2_m.Main_event_state[4]
(push) ; 7
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1365
;  :arith-add-rows          6
;  :arith-assert-diseq      36
;  :arith-assert-lower      108
;  :arith-assert-upper      81
;  :arith-conflicts         8
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         11
;  :arith-pivots            11
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 225
;  :datatype-occurs-check   59
;  :datatype-splits         142
;  :decisions               217
;  :del-clause              106
;  :final-checks            29
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             917
;  :mk-clause               158
;  :num-allocs              4374972
;  :num-checks              148
;  :propagations            104
;  :quant-instantiations    63
;  :rlimit-count            148754)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
          4)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1493
;  :arith-add-rows          6
;  :arith-assert-diseq      38
;  :arith-assert-lower      115
;  :arith-assert-upper      84
;  :arith-conflicts         8
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 269
;  :datatype-occurs-check   68
;  :datatype-splits         183
;  :decisions               259
;  :del-clause              117
;  :final-checks            32
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             973
;  :mk-clause               169
;  :num-allocs              4374972
;  :num-checks              149
;  :propagations            112
;  :quant-instantiations    65
;  :rlimit-count            150161
;  :time                    0.00)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
        4)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      38
;  :arith-assert-lower      115
;  :arith-assert-upper      84
;  :arith-conflicts         8
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              117
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1015
;  :mk-clause               169
;  :num-allocs              4374972
;  :num-checks              150
;  :propagations            115
;  :quant-instantiations    65
;  :rlimit-count            151383
;  :time                    0.00)
; [then-branch: 15 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@65@04))))))[4] != -2 | live]
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@65@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@65@04))))))[4] != -2) | live]
(push) ; 5
; [then-branch: 15 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@65@04))))))[4] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
        4)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@78@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 16 | 0 <= i@78@04 | live]
; [else-branch: 16 | !(0 <= i@78@04) | live]
(push) ; 8
; [then-branch: 16 | 0 <= i@78@04]
(assert (<= 0 i@78@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 16 | !(0 <= i@78@04)]
(assert (not (<= 0 i@78@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 17 | i@78@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i@78@04 | live]
; [else-branch: 17 | !(i@78@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i@78@04) | live]
(push) ; 8
; [then-branch: 17 | i@78@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i@78@04]
(assert (and
  (<
    i@78@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
  (<= 0 i@78@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@78@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      38
;  :arith-assert-lower      116
;  :arith-assert-upper      85
;  :arith-conflicts         8
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              117
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1019
;  :mk-clause               170
;  :num-allocs              4374972
;  :num-checks              151
;  :propagations            115
;  :quant-instantiations    65
;  :rlimit-count            151749)
; [eval] -1
(push) ; 9
; [then-branch: 18 | First:(Second:(Second:(Second:($t@65@04))))[i@78@04] == -1 | live]
; [else-branch: 18 | First:(Second:(Second:(Second:($t@65@04))))[i@78@04] != -1 | live]
(push) ; 10
; [then-branch: 18 | First:(Second:(Second:(Second:($t@65@04))))[i@78@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i@78@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 18 | First:(Second:(Second:(Second:($t@65@04))))[i@78@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      i@78@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@78@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      119
;  :arith-assert-upper      86
;  :arith-conflicts         8
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              117
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1025
;  :mk-clause               174
;  :num-allocs              4374972
;  :num-checks              152
;  :propagations            117
;  :quant-instantiations    66
;  :rlimit-count            151981)
(push) ; 11
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@65@04))))[i@78@04] | live]
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@65@04))))[i@78@04]) | live]
(push) ; 12
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@65@04))))[i@78@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i@78@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@78@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      119
;  :arith-assert-upper      86
;  :arith-conflicts         8
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              117
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1025
;  :mk-clause               174
;  :num-allocs              4374972
;  :num-checks              153
;  :propagations            117
;  :quant-instantiations    66
;  :rlimit-count            152095)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@65@04))))[i@78@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      i@78@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(i@78@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i@78@04)]
(assert (not
  (and
    (<
      i@78@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
    (<= 0 i@78@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@78@04 Int)) (!
  (implies
    (and
      (<
        i@78@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
      (<= 0 i@78@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          i@78@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i@78@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i@78@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i@78@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      87
;  :arith-conflicts         8
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1033
;  :mk-clause               188
;  :num-allocs              4374972
;  :num-checks              154
;  :propagations            119
;  :quant-instantiations    67
;  :rlimit-count            152541)
(assert (forall ((i@78@04 Int)) (!
  (implies
    (and
      (<
        i@78@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
      (<= 0 i@78@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          i@78@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i@78@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i@78@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i@78@04))
  :qid |prog.l<no position>|)))
(declare-const $k@79@04 $Perm)
(assert ($Perm.isReadVar $k@79@04 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@79@04 $Perm.No) (< $Perm.No $k@79@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      88
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1038
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              155
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153101)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@67@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      88
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1038
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              156
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153112)
(assert (< $k@79@04 $k@67@04))
(assert (<= $Perm.No (- $k@67@04 $k@79@04)))
(assert (<= (- $k@67@04 $k@79@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@67@04 $k@79@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              157
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153326)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              158
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153374)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              159
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153422)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              160
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153470)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              161
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153518)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              162
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153566)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              163
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153614)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              164
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153662)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              165
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153710)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      89
;  :arith-conflicts         8
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1041
;  :mk-clause               190
;  :num-allocs              4374972
;  :num-checks              166
;  :propagations            120
;  :quant-instantiations    67
;  :rlimit-count            153758)
(declare-const $k@80@04 $Perm)
(assert ($Perm.isReadVar $k@80@04 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      126
;  :arith-assert-upper      90
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1045
;  :mk-clause               192
;  :num-allocs              4374972
;  :num-checks              167
;  :propagations            121
;  :quant-instantiations    67
;  :rlimit-count            153954)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@80@04 $Perm.No) (< $Perm.No $k@80@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      126
;  :arith-assert-upper      90
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1045
;  :mk-clause               192
;  :num-allocs              4374972
;  :num-checks              168
;  :propagations            121
;  :quant-instantiations    67
;  :rlimit-count            154004)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@68@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      126
;  :arith-assert-upper      90
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1045
;  :mk-clause               192
;  :num-allocs              4374972
;  :num-checks              169
;  :propagations            121
;  :quant-instantiations    67
;  :rlimit-count            154015)
(assert (< $k@80@04 $k@68@04))
(assert (<= $Perm.No (- $k@68@04 $k@80@04)))
(assert (<= (- $k@68@04 $k@80@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@04 $k@80@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      128
;  :arith-assert-upper      91
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1048
;  :mk-clause               192
;  :num-allocs              4374972
;  :num-checks              170
;  :propagations            121
;  :quant-instantiations    67
;  :rlimit-count            154235)
(push) ; 6
(assert (not (< $Perm.No $k@68@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      128
;  :arith-assert-upper      91
;  :arith-conflicts         8
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1048
;  :mk-clause               192
;  :num-allocs              4374972
;  :num-checks              171
;  :propagations            121
;  :quant-instantiations    67
;  :rlimit-count            154283)
(declare-const $k@81@04 $Perm)
(assert ($Perm.isReadVar $k@81@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@81@04 $Perm.No) (< $Perm.No $k@81@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      92
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1052
;  :mk-clause               194
;  :num-allocs              4374972
;  :num-checks              172
;  :propagations            122
;  :quant-instantiations    67
;  :rlimit-count            154482)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@69@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      92
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1052
;  :mk-clause               194
;  :num-allocs              4374972
;  :num-checks              173
;  :propagations            122
;  :quant-instantiations    67
;  :rlimit-count            154493)
(assert (< $k@81@04 $k@69@04))
(assert (<= $Perm.No (- $k@69@04 $k@81@04)))
(assert (<= (- $k@69@04 $k@81@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@69@04 $k@81@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 6
(assert (not (< $Perm.No $k@69@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      93
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1055
;  :mk-clause               194
;  :num-allocs              4374972
;  :num-checks              174
;  :propagations            122
;  :quant-instantiations    67
;  :rlimit-count            154707)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      93
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1055
;  :mk-clause               194
;  :num-allocs              4374972
;  :num-checks              175
;  :propagations            122
;  :quant-instantiations    67
;  :rlimit-count            154720)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@69@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      93
;  :arith-conflicts         8
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1055
;  :mk-clause               194
;  :num-allocs              4374972
;  :num-checks              176
;  :propagations            122
;  :quant-instantiations    67
;  :rlimit-count            154768)
(declare-const $k@82@04 $Perm)
(assert ($Perm.isReadVar $k@82@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@82@04 $Perm.No) (< $Perm.No $k@82@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      45
;  :arith-assert-lower      134
;  :arith-assert-upper      94
;  :arith-conflicts         8
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1059
;  :mk-clause               196
;  :num-allocs              4374972
;  :num-checks              177
;  :propagations            123
;  :quant-instantiations    67
;  :rlimit-count            154966)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@70@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      45
;  :arith-assert-lower      134
;  :arith-assert-upper      94
;  :arith-conflicts         8
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         12
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1059
;  :mk-clause               196
;  :num-allocs              4374972
;  :num-checks              178
;  :propagations            123
;  :quant-instantiations    67
;  :rlimit-count            154977)
(assert (< $k@82@04 $k@70@04))
(assert (<= $Perm.No (- $k@70@04 $k@82@04)))
(assert (<= (- $k@70@04 $k@82@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@70@04 $k@82@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 6
(assert (not (< $Perm.No $k@70@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      45
;  :arith-assert-lower      136
;  :arith-assert-upper      95
;  :arith-conflicts         8
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1062
;  :mk-clause               196
;  :num-allocs              4374972
;  :num-checks              179
;  :propagations            123
;  :quant-instantiations    67
;  :rlimit-count            155191)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      45
;  :arith-assert-lower      136
;  :arith-assert-upper      95
;  :arith-conflicts         8
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1062
;  :mk-clause               196
;  :num-allocs              4374972
;  :num-checks              180
;  :propagations            123
;  :quant-instantiations    67
;  :rlimit-count            155204)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@70@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      45
;  :arith-assert-lower      136
;  :arith-assert-upper      95
;  :arith-conflicts         8
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1062
;  :mk-clause               196
;  :num-allocs              4374972
;  :num-checks              181
;  :propagations            123
;  :quant-instantiations    67
;  :rlimit-count            155252)
(declare-const $k@83@04 $Perm)
(assert ($Perm.isReadVar $k@83@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@83@04 $Perm.No) (< $Perm.No $k@83@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      46
;  :arith-assert-lower      138
;  :arith-assert-upper      96
;  :arith-conflicts         8
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1066
;  :mk-clause               198
;  :num-allocs              4374972
;  :num-checks              182
;  :propagations            124
;  :quant-instantiations    67
;  :rlimit-count            155451)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@71@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      46
;  :arith-assert-lower      138
;  :arith-assert-upper      96
;  :arith-conflicts         8
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1066
;  :mk-clause               198
;  :num-allocs              4374972
;  :num-checks              183
;  :propagations            124
;  :quant-instantiations    67
;  :rlimit-count            155462)
(assert (< $k@83@04 $k@71@04))
(assert (<= $Perm.No (- $k@71@04 $k@83@04)))
(assert (<= (- $k@71@04 $k@83@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@71@04 $k@83@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 6
(assert (not (< $Perm.No $k@71@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      46
;  :arith-assert-lower      140
;  :arith-assert-upper      97
;  :arith-conflicts         8
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1069
;  :mk-clause               198
;  :num-allocs              4374972
;  :num-checks              184
;  :propagations            124
;  :quant-instantiations    67
;  :rlimit-count            155670)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      46
;  :arith-assert-lower      140
;  :arith-assert-upper      97
;  :arith-conflicts         8
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1069
;  :mk-clause               198
;  :num-allocs              4374972
;  :num-checks              185
;  :propagations            124
;  :quant-instantiations    67
;  :rlimit-count            155683)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@71@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1619
;  :arith-add-rows          6
;  :arith-assert-diseq      46
;  :arith-assert-lower      140
;  :arith-assert-upper      97
;  :arith-conflicts         8
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         12
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 313
;  :datatype-occurs-check   77
;  :datatype-splits         224
;  :decisions               300
;  :del-clause              135
;  :final-checks            35
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1069
;  :mk-clause               198
;  :num-allocs              4374972
;  :num-checks              186
;  :propagations            124
;  :quant-instantiations    67
;  :rlimit-count            155731)
(push) ; 6
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1747
;  :arith-add-rows          6
;  :arith-assert-diseq      48
;  :arith-assert-lower      147
;  :arith-assert-upper      100
;  :arith-conflicts         8
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         13
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 357
;  :datatype-occurs-check   86
;  :datatype-splits         265
;  :decisions               342
;  :del-clause              145
;  :final-checks            38
;  :max-generation          2
;  :max-memory              4.44
;  :memory                  4.44
;  :mk-bool-var             1123
;  :mk-clause               208
;  :num-allocs              4374972
;  :num-checks              187
;  :propagations            132
;  :quant-instantiations    70
;  :rlimit-count            156940
;  :time                    0.00)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) globals@18@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(declare-const $t@84@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(assert (= $t@84@04 ($Snap.combine ($Snap.first $t@84@04) ($Snap.second $t@84@04))))
(assert (= ($Snap.first $t@84@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@84@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@84@04))
    ($Snap.second ($Snap.second $t@84@04)))))
(assert (= ($Snap.first ($Snap.second $t@84@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@84@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@84@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@84@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@84@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@85@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 20 | 0 <= i@85@04 | live]
; [else-branch: 20 | !(0 <= i@85@04) | live]
(push) ; 8
; [then-branch: 20 | 0 <= i@85@04]
(assert (<= 0 i@85@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 20 | !(0 <= i@85@04)]
(assert (not (<= 0 i@85@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 21 | i@85@04 < |First:(Second:(Second:(Second:($t@84@04))))| && 0 <= i@85@04 | live]
; [else-branch: 21 | !(i@85@04 < |First:(Second:(Second:(Second:($t@84@04))))| && 0 <= i@85@04) | live]
(push) ; 8
; [then-branch: 21 | i@85@04 < |First:(Second:(Second:(Second:($t@84@04))))| && 0 <= i@85@04]
(assert (and
  (<
    i@85@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
  (<= 0 i@85@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@85@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2005
;  :arith-add-rows          6
;  :arith-assert-diseq      50
;  :arith-assert-lower      159
;  :arith-assert-upper      106
;  :arith-conflicts         8
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         14
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    174
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              165
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1204
;  :mk-clause               218
;  :num-allocs              4527124
;  :num-checks              189
;  :propagations            140
;  :quant-instantiations    77
;  :rlimit-count            160622)
; [eval] -1
(push) ; 9
; [then-branch: 22 | First:(Second:(Second:(Second:($t@84@04))))[i@85@04] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@84@04))))[i@85@04] != -1 | live]
(push) ; 10
; [then-branch: 22 | First:(Second:(Second:(Second:($t@84@04))))[i@85@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
    i@85@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 22 | First:(Second:(Second:(Second:($t@84@04))))[i@85@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
      i@85@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@85@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2005
;  :arith-add-rows          6
;  :arith-assert-diseq      50
;  :arith-assert-lower      159
;  :arith-assert-upper      106
;  :arith-conflicts         8
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         14
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    174
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              165
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1205
;  :mk-clause               218
;  :num-allocs              4527124
;  :num-checks              190
;  :propagations            140
;  :quant-instantiations    77
;  :rlimit-count            160797)
(push) ; 11
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@84@04))))[i@85@04] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@84@04))))[i@85@04]) | live]
(push) ; 12
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@84@04))))[i@85@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
    i@85@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@85@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2005
;  :arith-add-rows          6
;  :arith-assert-diseq      51
;  :arith-assert-lower      162
;  :arith-assert-upper      106
;  :arith-conflicts         8
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         14
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    174
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              165
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1208
;  :mk-clause               219
;  :num-allocs              4527124
;  :num-checks              191
;  :propagations            140
;  :quant-instantiations    77
;  :rlimit-count            160920)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@84@04))))[i@85@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
      i@85@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(i@85@04 < |First:(Second:(Second:(Second:($t@84@04))))| && 0 <= i@85@04)]
(assert (not
  (and
    (<
      i@85@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
    (<= 0 i@85@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@85@04 Int)) (!
  (implies
    (and
      (<
        i@85@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
      (<= 0 i@85@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
          i@85@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
            i@85@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
            i@85@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
    i@85@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))
(declare-const $k@86@04 $Perm)
(assert ($Perm.isReadVar $k@86@04 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@86@04 $Perm.No) (< $Perm.No $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2010
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      164
;  :arith-assert-upper      107
;  :arith-conflicts         8
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1214
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              192
;  :propagations            141
;  :quant-instantiations    77
;  :rlimit-count            161688)
(declare-const $t@87@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@67@04 $k@79@04))
    (=
      $t@87@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))
  (implies
    (< $Perm.No $k@86@04)
    (=
      $t@87@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))
(assert (<= $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04)))
(assert (<= (+ (- $k@67@04 $k@79@04) $k@86@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2020
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      109
;  :arith-conflicts         9
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         15
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    176
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1222
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              193
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            162374)
(assert (not (= $t@87@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2026
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      110
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         16
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1225
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              194
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            162698)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2031
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      111
;  :arith-conflicts         11
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         17
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    178
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1227
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              195
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            162987)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2036
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      112
;  :arith-conflicts         12
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         18
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1229
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              196
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            163286)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2041
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      113
;  :arith-conflicts         13
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         19
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1231
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              197
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            163595)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2046
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      114
;  :arith-conflicts         14
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         20
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1233
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              198
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            163914)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2051
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      115
;  :arith-conflicts         15
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         21
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1235
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              199
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            164243)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2056
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      116
;  :arith-conflicts         16
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         22
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1237
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              200
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            164582)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2061
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      117
;  :arith-conflicts         17
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         23
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1239
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              201
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            164931)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2066
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      118
;  :arith-conflicts         18
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         24
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    185
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1241
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              202
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            165290)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2071
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      119
;  :arith-conflicts         19
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         25
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1243
;  :mk-clause               221
;  :num-allocs              4527124
;  :num-checks              203
;  :propagations            141
;  :quant-instantiations    78
;  :rlimit-count            165659)
(declare-const $k@88@04 $Perm)
(assert ($Perm.isReadVar $k@88@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@88@04 $Perm.No) (< $Perm.No $k@88@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2071
;  :arith-add-rows          7
;  :arith-assert-diseq      53
;  :arith-assert-lower      167
;  :arith-assert-upper      120
;  :arith-conflicts         19
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         25
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1247
;  :mk-clause               223
;  :num-allocs              4527124
;  :num-checks              204
;  :propagations            142
;  :quant-instantiations    78
;  :rlimit-count            165858)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  $t@87@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2071
;  :arith-add-rows          7
;  :arith-assert-diseq      53
;  :arith-assert-lower      167
;  :arith-assert-upper      120
;  :arith-conflicts         19
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         25
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1247
;  :mk-clause               223
;  :num-allocs              4527124
;  :num-checks              205
;  :propagations            142
;  :quant-instantiations    78
;  :rlimit-count            165869)
(declare-const $t@89@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@68@04 $k@80@04))
    (=
      $t@89@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@88@04)
    (=
      $t@89@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@68@04 $k@80@04) $k@88@04)))
(assert (<= (+ (- $k@68@04 $k@80@04) $k@88@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@68@04 $k@80@04) $k@88@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2081
;  :arith-add-rows          8
;  :arith-assert-diseq      53
;  :arith-assert-lower      168
;  :arith-assert-upper      122
;  :arith-conflicts         20
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         26
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1255
;  :mk-clause               223
;  :num-allocs              4527124
;  :num-checks              206
;  :propagations            142
;  :quant-instantiations    79
;  :rlimit-count            166593)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  $t@87@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2081
;  :arith-add-rows          8
;  :arith-assert-diseq      53
;  :arith-assert-lower      168
;  :arith-assert-upper      122
;  :arith-conflicts         20
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         26
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1255
;  :mk-clause               223
;  :num-allocs              4527124
;  :num-checks              207
;  :propagations            142
;  :quant-instantiations    79
;  :rlimit-count            166604)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@68@04 $k@80@04) $k@88@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2081
;  :arith-add-rows          8
;  :arith-assert-diseq      53
;  :arith-assert-lower      168
;  :arith-assert-upper      123
;  :arith-conflicts         21
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         27
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1256
;  :mk-clause               223
;  :num-allocs              4527124
;  :num-checks              208
;  :propagations            142
;  :quant-instantiations    79
;  :rlimit-count            166682)
(assert (= $t@89@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))
(declare-const $k@90@04 $Perm)
(assert ($Perm.isReadVar $k@90@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@90@04 $Perm.No) (< $Perm.No $k@90@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2086
;  :arith-add-rows          8
;  :arith-assert-diseq      54
;  :arith-assert-lower      170
;  :arith-assert-upper      124
;  :arith-conflicts         21
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         27
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    188
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1261
;  :mk-clause               225
;  :num-allocs              4527124
;  :num-checks              209
;  :propagations            143
;  :quant-instantiations    79
;  :rlimit-count            167182)
(declare-const $t@91@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@69@04 $k@81@04))
    (=
      $t@91@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@90@04)
    (=
      $t@91@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@69@04 $k@81@04) $k@90@04)))
(assert (<= (+ (- $k@69@04 $k@81@04) $k@90@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@69@04 $k@81@04) $k@90@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@69@04 $k@81@04) $k@90@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2096
;  :arith-add-rows          9
;  :arith-assert-diseq      54
;  :arith-assert-lower      171
;  :arith-assert-upper      126
;  :arith-conflicts         22
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         28
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1269
;  :mk-clause               225
;  :num-allocs              4527124
;  :num-checks              210
;  :propagations            143
;  :quant-instantiations    80
;  :rlimit-count            168120)
(assert (not (= $t@91@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@69@04 $k@81@04) $k@90@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2102
;  :arith-add-rows          9
;  :arith-assert-diseq      54
;  :arith-assert-lower      171
;  :arith-assert-upper      127
;  :arith-conflicts         23
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         29
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1272
;  :mk-clause               225
;  :num-allocs              4527124
;  :num-checks              211
;  :propagations            143
;  :quant-instantiations    80
;  :rlimit-count            168572)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2102
;  :arith-add-rows          9
;  :arith-assert-diseq      54
;  :arith-assert-lower      171
;  :arith-assert-upper      127
;  :arith-conflicts         23
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         29
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    190
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1272
;  :mk-clause               225
;  :num-allocs              4527124
;  :num-checks              212
;  :propagations            143
;  :quant-instantiations    80
;  :rlimit-count            168585)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))))
(declare-const $k@92@04 $Perm)
(assert ($Perm.isReadVar $k@92@04 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@92@04 $Perm.No) (< $Perm.No $k@92@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2107
;  :arith-add-rows          9
;  :arith-assert-diseq      55
;  :arith-assert-lower      173
;  :arith-assert-upper      128
;  :arith-conflicts         23
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         29
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1277
;  :mk-clause               227
;  :num-allocs              4527124
;  :num-checks              213
;  :propagations            144
;  :quant-instantiations    80
;  :rlimit-count            169116)
(declare-const $t@93@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@70@04 $k@82@04))
    (=
      $t@93@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@92@04)
    (=
      $t@93@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@70@04 $k@82@04) $k@92@04)))
(assert (<= (+ (- $k@70@04 $k@82@04) $k@92@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@70@04 $k@82@04) $k@92@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@70@04 $k@82@04) $k@92@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2117
;  :arith-add-rows          10
;  :arith-assert-diseq      55
;  :arith-assert-lower      174
;  :arith-assert-upper      130
;  :arith-conflicts         24
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         30
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    192
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1285
;  :mk-clause               227
;  :num-allocs              4527124
;  :num-checks              214
;  :propagations            144
;  :quant-instantiations    81
;  :rlimit-count            170116)
(assert (not (= $t@93@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@70@04 $k@82@04) $k@92@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2123
;  :arith-add-rows          10
;  :arith-assert-diseq      55
;  :arith-assert-lower      174
;  :arith-assert-upper      131
;  :arith-conflicts         25
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         31
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1288
;  :mk-clause               227
;  :num-allocs              4527124
;  :num-checks              215
;  :propagations            144
;  :quant-instantiations    81
;  :rlimit-count            170598)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2123
;  :arith-add-rows          10
;  :arith-assert-diseq      55
;  :arith-assert-lower      174
;  :arith-assert-upper      131
;  :arith-conflicts         25
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         31
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1288
;  :mk-clause               227
;  :num-allocs              4527124
;  :num-checks              216
;  :propagations            144
;  :quant-instantiations    81
;  :rlimit-count            170611)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))))))
(declare-const $k@94@04 $Perm)
(assert ($Perm.isReadVar $k@94@04 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@94@04 $Perm.No) (< $Perm.No $k@94@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2128
;  :arith-add-rows          10
;  :arith-assert-diseq      56
;  :arith-assert-lower      176
;  :arith-assert-upper      132
;  :arith-conflicts         25
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         31
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1293
;  :mk-clause               229
;  :num-allocs              4527124
;  :num-checks              217
;  :propagations            145
;  :quant-instantiations    81
;  :rlimit-count            171171)
(declare-const $t@95@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@71@04 $k@83@04))
    (=
      $t@95@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@94@04)
    (=
      $t@95@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@71@04 $k@83@04) $k@94@04)))
(assert (<= (+ (- $k@71@04 $k@83@04) $k@94@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@71@04 $k@83@04) $k@94@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@71@04 $k@83@04) $k@94@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2138
;  :arith-add-rows          11
;  :arith-assert-diseq      56
;  :arith-assert-lower      177
;  :arith-assert-upper      134
;  :arith-conflicts         26
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         32
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1301
;  :mk-clause               229
;  :num-allocs              4527124
;  :num-checks              218
;  :propagations            145
;  :quant-instantiations    82
;  :rlimit-count            171984)
(assert (not (= $t@95@04 $Ref.null)))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@71@04 $k@83@04) $k@94@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2138
;  :arith-add-rows          12
;  :arith-assert-diseq      56
;  :arith-assert-lower      177
;  :arith-assert-upper      135
;  :arith-conflicts         27
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         33
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1302
;  :mk-clause               229
;  :num-allocs              4527124
;  :num-checks              219
;  :propagations            145
;  :quant-instantiations    82
;  :rlimit-count            172117)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2138
;  :arith-add-rows          12
;  :arith-assert-diseq      56
;  :arith-assert-lower      177
;  :arith-assert-upper      135
;  :arith-conflicts         27
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         33
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1302
;  :mk-clause               229
;  :num-allocs              4527124
;  :num-checks              220
;  :propagations            145
;  :quant-instantiations    82
;  :rlimit-count            172130)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
  $t@95@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2138
;  :arith-add-rows          12
;  :arith-assert-diseq      56
;  :arith-assert-lower      177
;  :arith-assert-upper      135
;  :arith-conflicts         27
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         33
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    195
;  :datatype-constructor-ax 401
;  :datatype-occurs-check   160
;  :datatype-splits         306
;  :decisions               384
;  :del-clause              166
;  :final-checks            41
;  :max-generation          2
;  :max-memory              4.54
;  :memory                  4.54
;  :mk-bool-var             1302
;  :mk-clause               229
;  :num-allocs              4527124
;  :num-checks              221
;  :propagations            145
;  :quant-instantiations    82
;  :rlimit-count            172141)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04))))))))))))))))))))))))))))))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@84@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) globals@18@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(declare-const $t@96@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2674
;  :arith-add-rows          13
;  :arith-assert-diseq      64
;  :arith-assert-lower      207
;  :arith-assert-upper      149
;  :arith-conflicts         27
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         39
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              220
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1481
;  :mk-clause               274
;  :num-allocs              4846943
;  :num-checks              224
;  :propagations            174
;  :quant-instantiations    93
;  :rlimit-count            176268)
; [eval] diz.Prc_half_adder_2_m != null
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] (forall i__44: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__44] } 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__44@97@04 Int)
(push) ; 6
; [eval] 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__44 && i__44 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__44
(push) ; 7
; [then-branch: 24 | 0 <= i__44@97@04 | live]
; [else-branch: 24 | !(0 <= i__44@97@04) | live]
(push) ; 8
; [then-branch: 24 | 0 <= i__44@97@04]
(assert (<= 0 i__44@97@04))
; [eval] i__44 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 24 | !(0 <= i__44@97@04)]
(assert (not (<= 0 i__44@97@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 25 | i__44@97@04 < |First:(Second:(Second:(Second:($t@84@04))))| && 0 <= i__44@97@04 | live]
; [else-branch: 25 | !(i__44@97@04 < |First:(Second:(Second:(Second:($t@84@04))))| && 0 <= i__44@97@04) | live]
(push) ; 8
; [then-branch: 25 | i__44@97@04 < |First:(Second:(Second:(Second:($t@84@04))))| && 0 <= i__44@97@04]
(assert (and
  (<
    i__44@97@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
  (<= 0 i__44@97@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 9
(assert (not (>= i__44@97@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2674
;  :arith-add-rows          13
;  :arith-assert-diseq      64
;  :arith-assert-lower      208
;  :arith-assert-upper      150
;  :arith-conflicts         27
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         39
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              220
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1483
;  :mk-clause               274
;  :num-allocs              4846943
;  :num-checks              225
;  :propagations            174
;  :quant-instantiations    93
;  :rlimit-count            176404)
; [eval] -1
(push) ; 9
; [then-branch: 26 | First:(Second:(Second:(Second:($t@84@04))))[i__44@97@04] == -1 | live]
; [else-branch: 26 | First:(Second:(Second:(Second:($t@84@04))))[i__44@97@04] != -1 | live]
(push) ; 10
; [then-branch: 26 | First:(Second:(Second:(Second:($t@84@04))))[i__44@97@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
    i__44@97@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 26 | First:(Second:(Second:(Second:($t@84@04))))[i__44@97@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
      i__44@97@04)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44] && diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__44]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 11
(assert (not (>= i__44@97@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2674
;  :arith-add-rows          13
;  :arith-assert-diseq      65
;  :arith-assert-lower      211
;  :arith-assert-upper      151
;  :arith-conflicts         27
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         39
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              220
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1489
;  :mk-clause               278
;  :num-allocs              4846943
;  :num-checks              226
;  :propagations            176
;  :quant-instantiations    94
;  :rlimit-count            176636)
(push) ; 11
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@84@04))))[i__44@97@04] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@84@04))))[i__44@97@04]) | live]
(push) ; 12
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@84@04))))[i__44@97@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
    i__44@97@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__44]
(push) ; 13
(assert (not (>= i__44@97@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2674
;  :arith-add-rows          13
;  :arith-assert-diseq      65
;  :arith-assert-lower      211
;  :arith-assert-upper      151
;  :arith-conflicts         27
;  :arith-eq-adapter        94
;  :arith-fixed-eqs         39
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              220
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1489
;  :mk-clause               278
;  :num-allocs              4846943
;  :num-checks              227
;  :propagations            176
;  :quant-instantiations    94
;  :rlimit-count            176750)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@84@04))))[i__44@97@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
      i__44@97@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(i__44@97@04 < |First:(Second:(Second:(Second:($t@84@04))))| && 0 <= i__44@97@04)]
(assert (not
  (and
    (<
      i__44@97@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
    (<= 0 i__44@97@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i__44@97@04 Int)) (!
  (implies
    (and
      (<
        i__44@97@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
      (<= 0 i__44@97@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
          i__44@97@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
            i__44@97@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
            i__44@97@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
    i__44@97@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2674
;  :arith-add-rows          13
;  :arith-assert-diseq      67
;  :arith-assert-lower      212
;  :arith-assert-upper      152
;  :arith-conflicts         27
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         39
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              238
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1497
;  :mk-clause               292
;  :num-allocs              4846943
;  :num-checks              228
;  :propagations            178
;  :quant-instantiations    95
;  :rlimit-count            177196)
(assert (forall ((i__44@97@04 Int)) (!
  (implies
    (and
      (<
        i__44@97@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))
      (<= 0 i__44@97@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
          i__44@97@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
            i__44@97@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
            i__44@97@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@04)))))
    i__44@97@04))
  :qid |prog.l<no position>|)))
(declare-const $k@98@04 $Perm)
(assert ($Perm.isReadVar $k@98@04 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@98@04 $Perm.No) (< $Perm.No $k@98@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2674
;  :arith-add-rows          13
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      153
;  :arith-conflicts         27
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         39
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              238
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1502
;  :mk-clause               294
;  :num-allocs              4846943
;  :num-checks              229
;  :propagations            179
;  :quant-instantiations    95
;  :rlimit-count            177756)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@67@04 $k@79@04) $k@86@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          13
;  :arith-assert-diseq      68
;  :arith-assert-lower      214
;  :arith-assert-upper      154
;  :arith-conflicts         28
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         39
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1504
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              230
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            177836)
(assert (< $k@98@04 (+ (- $k@67@04 $k@79@04) $k@86@04)))
(assert (<= $Perm.No (- (+ (- $k@67@04 $k@79@04) $k@86@04) $k@98@04)))
(assert (<= (- (+ (- $k@67@04 $k@79@04) $k@86@04) $k@98@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@67@04 $k@79@04) $k@86@04) $k@98@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      156
;  :arith-conflicts         29
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         40
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1508
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              231
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178105)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      157
;  :arith-conflicts         30
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         41
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1509
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              232
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178186)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      158
;  :arith-conflicts         31
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         42
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1510
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              233
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178267)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      159
;  :arith-conflicts         32
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         43
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1511
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              234
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178348)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      160
;  :arith-conflicts         33
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         44
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1512
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              235
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178429)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      161
;  :arith-conflicts         34
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         45
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1513
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              236
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178510)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      162
;  :arith-conflicts         35
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         46
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1514
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              237
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178591)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      163
;  :arith-conflicts         36
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         47
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1515
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              238
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178672)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      164
;  :arith-conflicts         37
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         48
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1516
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              239
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178753)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      68
;  :arith-assert-lower      216
;  :arith-assert-upper      165
;  :arith-conflicts         38
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         49
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1517
;  :mk-clause               296
;  :num-allocs              4846943
;  :num-checks              240
;  :propagations            180
;  :quant-instantiations    95
;  :rlimit-count            178834)
(declare-const $k@99@04 $Perm)
(assert ($Perm.isReadVar $k@99@04 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      167
;  :arith-conflicts         39
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         50
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1522
;  :mk-clause               298
;  :num-allocs              4846943
;  :num-checks              241
;  :propagations            181
;  :quant-instantiations    95
;  :rlimit-count            179063)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@99@04 $Perm.No) (< $Perm.No $k@99@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      167
;  :arith-conflicts         39
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         50
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1522
;  :mk-clause               298
;  :num-allocs              4846943
;  :num-checks              242
;  :propagations            181
;  :quant-instantiations    95
;  :rlimit-count            179113)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  $t@87@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2675
;  :arith-add-rows          15
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      167
;  :arith-conflicts         39
;  :arith-eq-adapter        98
;  :arith-fixed-eqs         50
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              240
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1522
;  :mk-clause               298
;  :num-allocs              4846943
;  :num-checks              243
;  :propagations            181
;  :quant-instantiations    95
;  :rlimit-count            179124)
(push) ; 6
(assert (not (not (= (+ (- $k@68@04 $k@80@04) $k@88@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2676
;  :arith-add-rows          15
;  :arith-assert-diseq      69
;  :arith-assert-lower      218
;  :arith-assert-upper      168
;  :arith-conflicts         40
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         50
;  :arith-pivots            41
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              242
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1524
;  :mk-clause               300
;  :num-allocs              4846943
;  :num-checks              244
;  :propagations            182
;  :quant-instantiations    95
;  :rlimit-count            179202)
(assert (< $k@99@04 (+ (- $k@68@04 $k@80@04) $k@88@04)))
(assert (<= $Perm.No (- (+ (- $k@68@04 $k@80@04) $k@88@04) $k@99@04)))
(assert (<= (- (+ (- $k@68@04 $k@80@04) $k@88@04) $k@99@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@68@04 $k@80@04) $k@88@04) $k@99@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@67@04 $k@79@04) $k@86@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2676
;  :arith-add-rows          16
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      170
;  :arith-conflicts         41
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         51
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              242
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1528
;  :mk-clause               300
;  :num-allocs              4846943
;  :num-checks              245
;  :propagations            182
;  :quant-instantiations    95
;  :rlimit-count            179477)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  $t@87@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2676
;  :arith-add-rows          16
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      170
;  :arith-conflicts         41
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         51
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              242
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1528
;  :mk-clause               300
;  :num-allocs              4846943
;  :num-checks              246
;  :propagations            182
;  :quant-instantiations    95
;  :rlimit-count            179488)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@68@04 $k@80@04) $k@88@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2676
;  :arith-add-rows          16
;  :arith-assert-diseq      69
;  :arith-assert-lower      220
;  :arith-assert-upper      171
;  :arith-conflicts         42
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         52
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              242
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1529
;  :mk-clause               300
;  :num-allocs              4846943
;  :num-checks              247
;  :propagations            182
;  :quant-instantiations    95
;  :rlimit-count            179566)
(declare-const $k@100@04 $Perm)
(assert ($Perm.isReadVar $k@100@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@100@04 $Perm.No) (< $Perm.No $k@100@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2676
;  :arith-add-rows          16
;  :arith-assert-diseq      70
;  :arith-assert-lower      222
;  :arith-assert-upper      172
;  :arith-conflicts         42
;  :arith-eq-adapter        100
;  :arith-fixed-eqs         52
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              242
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1533
;  :mk-clause               302
;  :num-allocs              4846943
;  :num-checks              248
;  :propagations            183
;  :quant-instantiations    95
;  :rlimit-count            179764)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@69@04 $k@81@04) $k@90@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2677
;  :arith-add-rows          16
;  :arith-assert-diseq      70
;  :arith-assert-lower      222
;  :arith-assert-upper      173
;  :arith-conflicts         43
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         52
;  :arith-pivots            42
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              244
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1535
;  :mk-clause               304
;  :num-allocs              4846943
;  :num-checks              249
;  :propagations            184
;  :quant-instantiations    95
;  :rlimit-count            179842)
(assert (< $k@100@04 (+ (- $k@69@04 $k@81@04) $k@90@04)))
(assert (<= $Perm.No (- (+ (- $k@69@04 $k@81@04) $k@90@04) $k@100@04)))
(assert (<= (- (+ (- $k@69@04 $k@81@04) $k@90@04) $k@100@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@69@04 $k@81@04) $k@90@04) $k@100@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@69@04 $k@81@04) $k@90@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2677
;  :arith-add-rows          17
;  :arith-assert-diseq      70
;  :arith-assert-lower      224
;  :arith-assert-upper      175
;  :arith-conflicts         44
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         53
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              244
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1539
;  :mk-clause               304
;  :num-allocs              4846943
;  :num-checks              250
;  :propagations            184
;  :quant-instantiations    95
;  :rlimit-count            180114)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2677
;  :arith-add-rows          17
;  :arith-assert-diseq      70
;  :arith-assert-lower      224
;  :arith-assert-upper      175
;  :arith-conflicts         44
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         53
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              244
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1539
;  :mk-clause               304
;  :num-allocs              4846943
;  :num-checks              251
;  :propagations            184
;  :quant-instantiations    95
;  :rlimit-count            180127)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@69@04 $k@81@04) $k@90@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2677
;  :arith-add-rows          17
;  :arith-assert-diseq      70
;  :arith-assert-lower      224
;  :arith-assert-upper      176
;  :arith-conflicts         45
;  :arith-eq-adapter        101
;  :arith-fixed-eqs         54
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              244
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1540
;  :mk-clause               304
;  :num-allocs              4846943
;  :num-checks              252
;  :propagations            184
;  :quant-instantiations    95
;  :rlimit-count            180205)
(declare-const $k@101@04 $Perm)
(assert ($Perm.isReadVar $k@101@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@101@04 $Perm.No) (< $Perm.No $k@101@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2677
;  :arith-add-rows          17
;  :arith-assert-diseq      71
;  :arith-assert-lower      226
;  :arith-assert-upper      177
;  :arith-conflicts         45
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         54
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              244
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1544
;  :mk-clause               306
;  :num-allocs              4846943
;  :num-checks              253
;  :propagations            185
;  :quant-instantiations    95
;  :rlimit-count            180404)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@70@04 $k@82@04) $k@92@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2678
;  :arith-add-rows          17
;  :arith-assert-diseq      71
;  :arith-assert-lower      226
;  :arith-assert-upper      178
;  :arith-conflicts         46
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         54
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              246
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1546
;  :mk-clause               308
;  :num-allocs              4846943
;  :num-checks              254
;  :propagations            186
;  :quant-instantiations    95
;  :rlimit-count            180482)
(assert (< $k@101@04 (+ (- $k@70@04 $k@82@04) $k@92@04)))
(assert (<= $Perm.No (- (+ (- $k@70@04 $k@82@04) $k@92@04) $k@101@04)))
(assert (<= (- (+ (- $k@70@04 $k@82@04) $k@92@04) $k@101@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@70@04 $k@82@04) $k@92@04) $k@101@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@70@04 $k@82@04) $k@92@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2678
;  :arith-add-rows          18
;  :arith-assert-diseq      71
;  :arith-assert-lower      228
;  :arith-assert-upper      180
;  :arith-conflicts         47
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         55
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              246
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1550
;  :mk-clause               308
;  :num-allocs              4846943
;  :num-checks              255
;  :propagations            186
;  :quant-instantiations    95
;  :rlimit-count            180747)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2678
;  :arith-add-rows          18
;  :arith-assert-diseq      71
;  :arith-assert-lower      228
;  :arith-assert-upper      180
;  :arith-conflicts         47
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         55
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              246
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1550
;  :mk-clause               308
;  :num-allocs              4846943
;  :num-checks              256
;  :propagations            186
;  :quant-instantiations    95
;  :rlimit-count            180760)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@70@04 $k@82@04) $k@92@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2678
;  :arith-add-rows          18
;  :arith-assert-diseq      71
;  :arith-assert-lower      228
;  :arith-assert-upper      181
;  :arith-conflicts         48
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         56
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              246
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1551
;  :mk-clause               308
;  :num-allocs              4846943
;  :num-checks              257
;  :propagations            186
;  :quant-instantiations    95
;  :rlimit-count            180838)
(declare-const $k@102@04 $Perm)
(assert ($Perm.isReadVar $k@102@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@102@04 $Perm.No) (< $Perm.No $k@102@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2678
;  :arith-add-rows          18
;  :arith-assert-diseq      72
;  :arith-assert-lower      230
;  :arith-assert-upper      182
;  :arith-conflicts         48
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         56
;  :arith-pivots            43
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              246
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1555
;  :mk-clause               310
;  :num-allocs              4846943
;  :num-checks              258
;  :propagations            187
;  :quant-instantiations    95
;  :rlimit-count            181037)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@71@04 $k@83@04) $k@94@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2679
;  :arith-add-rows          19
;  :arith-assert-diseq      72
;  :arith-assert-lower      230
;  :arith-assert-upper      183
;  :arith-conflicts         49
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         56
;  :arith-pivots            45
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              248
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1557
;  :mk-clause               312
;  :num-allocs              4846943
;  :num-checks              259
;  :propagations            188
;  :quant-instantiations    95
;  :rlimit-count            181145)
(assert (< $k@102@04 (+ (- $k@71@04 $k@83@04) $k@94@04)))
(assert (<= $Perm.No (- (+ (- $k@71@04 $k@83@04) $k@94@04) $k@102@04)))
(assert (<= (- (+ (- $k@71@04 $k@83@04) $k@94@04) $k@102@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@71@04 $k@83@04) $k@94@04) $k@102@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@71@04 $k@83@04) $k@94@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2679
;  :arith-add-rows          21
;  :arith-assert-diseq      72
;  :arith-assert-lower      232
;  :arith-assert-upper      185
;  :arith-conflicts         50
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         57
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              248
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1561
;  :mk-clause               312
;  :num-allocs              4846943
;  :num-checks              260
;  :propagations            188
;  :quant-instantiations    95
;  :rlimit-count            181446)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2679
;  :arith-add-rows          21
;  :arith-assert-diseq      72
;  :arith-assert-lower      232
;  :arith-assert-upper      185
;  :arith-conflicts         50
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         57
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              248
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1561
;  :mk-clause               312
;  :num-allocs              4846943
;  :num-checks              261
;  :propagations            188
;  :quant-instantiations    95
;  :rlimit-count            181459)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@71@04 $k@83@04) $k@94@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2679
;  :arith-add-rows          22
;  :arith-assert-diseq      72
;  :arith-assert-lower      232
;  :arith-assert-upper      186
;  :arith-conflicts         51
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         58
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              248
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1562
;  :mk-clause               312
;  :num-allocs              4846943
;  :num-checks              262
;  :propagations            188
;  :quant-instantiations    95
;  :rlimit-count            181568)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))))))))))))))))))
  $t@95@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2679
;  :arith-add-rows          22
;  :arith-assert-diseq      72
;  :arith-assert-lower      232
;  :arith-assert-upper      186
;  :arith-conflicts         51
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         58
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   250
;  :datatype-splits         418
;  :decisions               529
;  :del-clause              248
;  :final-checks            47
;  :max-generation          2
;  :max-memory              4.73
;  :memory                  4.73
;  :mk-bool-var             1562
;  :mk-clause               312
;  :num-allocs              4846943
;  :num-checks              263
;  :propagations            188
;  :quant-instantiations    95
;  :rlimit-count            181579)
(push) ; 6
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2897
;  :arith-add-rows          23
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      191
;  :arith-conflicts         51
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         60
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 611
;  :datatype-occurs-check   295
;  :datatype-splits         474
;  :decisions               585
;  :del-clause              265
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.83
;  :mk-bool-var             1640
;  :mk-clause               329
;  :num-allocs              5015456
;  :num-checks              264
;  :propagations            200
;  :quant-instantiations    100
;  :rlimit-count            183243
;  :time                    0.00)
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@71@04 $k@83@04) $k@94@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2897
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 611
;  :datatype-occurs-check   295
;  :datatype-splits         474
;  :decisions               585
;  :del-clause              265
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.83
;  :mk-bool-var             1641
;  :mk-clause               329
;  :num-allocs              5015456
;  :num-checks              265
;  :propagations            200
;  :quant-instantiations    100
;  :rlimit-count            183357)
(set-option :timeout 0)
(push) ; 6
(assert (not (= $t@95@04 diz@17@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2897
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 611
;  :datatype-occurs-check   295
;  :datatype-splits         474
;  :decisions               585
;  :del-clause              265
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.83
;  :mk-bool-var             1641
;  :mk-clause               329
;  :num-allocs              5015456
;  :num-checks              266
;  :propagations            200
;  :quant-instantiations    100
;  :rlimit-count            183368)
(assert (= $t@95@04 diz@17@04))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2897
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 611
;  :datatype-occurs-check   295
;  :datatype-splits         474
;  :decisions               585
;  :del-clause              265
;  :final-checks            50
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.83
;  :mk-bool-var             1641
;  :mk-clause               329
;  :num-allocs              5015456
;  :num-checks              267
;  :propagations            200
;  :quant-instantiations    100
;  :rlimit-count            183384)
(pop) ; 5
(push) ; 5
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@65@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@65@04))))))[4] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
          4)
        (- 0 2))))))
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3120
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 690
;  :datatype-occurs-check   307
;  :datatype-splits         551
;  :decisions               657
;  :del-clause              278
;  :final-checks            54
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             1720
;  :mk-clause               330
;  :num-allocs              5184705
;  :num-checks              268
;  :propagations            206
;  :quant-instantiations    100
;  :rlimit-count            184998
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3343
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 769
;  :datatype-occurs-check   319
;  :datatype-splits         628
;  :decisions               729
;  :del-clause              279
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             1799
;  :mk-clause               331
;  :num-allocs              5184705
;  :num-checks              269
;  :propagations            212
;  :quant-instantiations    100
;  :rlimit-count            186531
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3566
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    228
;  :datatype-constructor-ax 848
;  :datatype-occurs-check   331
;  :datatype-splits         705
;  :decisions               801
;  :del-clause              280
;  :final-checks            62
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             1878
;  :mk-clause               332
;  :num-allocs              5184705
;  :num-checks              270
;  :propagations            218
;  :quant-instantiations    100
;  :rlimit-count            188064
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3738
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 910
;  :datatype-occurs-check   340
;  :datatype-splits         748
;  :decisions               859
;  :del-clause              281
;  :final-checks            65
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             1924
;  :mk-clause               333
;  :num-allocs              5184705
;  :num-checks              271
;  :propagations            221
;  :quant-instantiations    100
;  :rlimit-count            189567
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3961
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 989
;  :datatype-occurs-check   352
;  :datatype-splits         825
;  :decisions               931
;  :del-clause              282
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2003
;  :mk-clause               334
;  :num-allocs              5184705
;  :num-checks              272
;  :propagations            227
;  :quant-instantiations    100
;  :rlimit-count            191100
;  :time                    0.00)
; [eval] !(diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[4] != -2)
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[4] != -2
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2]
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3961
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 989
;  :datatype-occurs-check   352
;  :datatype-splits         825
;  :decisions               931
;  :del-clause              282
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2003
;  :mk-clause               334
;  :num-allocs              5184705
;  :num-checks              273
;  :propagations            227
;  :quant-instantiations    100
;  :rlimit-count            191115)
; [eval] -1
(push) ; 5
; [then-branch: 28 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1 | live]
; [else-branch: 28 | First:(Second:(Second:(Second:($t@65@04))))[2] == -1 | live]
(push) ; 6
; [then-branch: 28 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      2)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | First:(Second:(Second:(Second:($t@65@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    2)
  (- 0 1)))
; [eval] diz.Prc_half_adder_2_m.Main_event_state[4] != -2
; [eval] diz.Prc_half_adder_2_m.Main_event_state[4]
(push) ; 7
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3962
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 989
;  :datatype-occurs-check   352
;  :datatype-splits         825
;  :decisions               931
;  :del-clause              282
;  :final-checks            69
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2004
;  :mk-clause               334
;  :num-allocs              5184705
;  :num-checks              274
;  :propagations            227
;  :quant-instantiations    100
;  :rlimit-count            191273)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
        4)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4088
;  :arith-add-rows          24
;  :arith-assert-diseq      75
;  :arith-assert-lower      243
;  :arith-assert-upper      192
;  :arith-conflicts         52
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    242
;  :datatype-constructor-ax 1033
;  :datatype-occurs-check   361
;  :datatype-splits         866
;  :decisions               972
;  :del-clause              282
;  :final-checks            72
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2046
;  :mk-clause               334
;  :num-allocs              5184705
;  :num-checks              275
;  :propagations            230
;  :quant-instantiations    100
;  :rlimit-count            192495
;  :time                    0.00)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
          4)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4216
;  :arith-add-rows          24
;  :arith-assert-diseq      77
;  :arith-assert-lower      250
;  :arith-assert-upper      195
;  :arith-conflicts         52
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              293
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2102
;  :mk-clause               345
;  :num-allocs              5184705
;  :num-checks              276
;  :propagations            238
;  :quant-instantiations    102
;  :rlimit-count            193862
;  :time                    0.00)
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@65@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@65@04))))))[4] != -2) | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@65@04))))))[4] != -2 | live]
(push) ; 5
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@65@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@65@04))))))[4] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
          4)
        (- 0 2))))))
(declare-const __flatten_36__46@103@04 $Ref)
(declare-const __flatten_35__45@104@04 $Ref)
(declare-const __flatten_38__48@105@04 $Ref)
(declare-const __flatten_40__50@106@04 $Ref)
(declare-const __flatten_39__49@107@04 $Ref)
(declare-const __flatten_42__52@108@04 $Ref)
(declare-const __flatten_41__51@109@04 $Ref)
(declare-const __flatten_37__47@110@04 Bool)
(declare-const __flatten_45__54@111@04 $Ref)
(declare-const __flatten_44__53@112@04 $Ref)
(declare-const __flatten_48__57@113@04 $Ref)
(declare-const __flatten_47__56@114@04 $Ref)
(declare-const __flatten_50__59@115@04 $Ref)
(declare-const __flatten_49__58@116@04 $Ref)
(declare-const __flatten_46__55@117@04 Bool)
(declare-const __flatten_51__60@118@04 $Ref)
(declare-const __flatten_53__62@119@04 $Ref)
(declare-const __flatten_52__61@120@04 Seq<Int>)
(declare-const __flatten_54__63@121@04 $Ref)
(declare-const __flatten_56__65@122@04 $Ref)
(declare-const __flatten_55__64@123@04 Seq<Int>)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@124@04 $Snap)
(assert (= $t@124@04 ($Snap.combine ($Snap.first $t@124@04) ($Snap.second $t@124@04))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4223
;  :arith-add-rows          24
;  :arith-assert-diseq      77
;  :arith-assert-lower      250
;  :arith-assert-upper      195
;  :arith-conflicts         52
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    246
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              293
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2105
;  :mk-clause               345
;  :num-allocs              5184705
;  :num-checks              277
;  :propagations            238
;  :quant-instantiations    102
;  :rlimit-count            194179)
(assert (=
  ($Snap.second $t@124@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@124@04))
    ($Snap.second ($Snap.second $t@124@04)))))
(assert (= ($Snap.first ($Snap.second $t@124@04)) $Snap.unit))
; [eval] diz.Prc_half_adder_2_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@124@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@124@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@124@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
  $Snap.unit))
; [eval] (forall i__66: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__66] } 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__66@125@04 Int)
(push) ; 7
; [eval] 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__66
(push) ; 8
; [then-branch: 30 | 0 <= i__66@125@04 | live]
; [else-branch: 30 | !(0 <= i__66@125@04) | live]
(push) ; 9
; [then-branch: 30 | 0 <= i__66@125@04]
(assert (<= 0 i__66@125@04))
; [eval] i__66 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 30 | !(0 <= i__66@125@04)]
(assert (not (<= 0 i__66@125@04)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 31 | i__66@125@04 < |First:(Second:(Second:(Second:($t@124@04))))| && 0 <= i__66@125@04 | live]
; [else-branch: 31 | !(i__66@125@04 < |First:(Second:(Second:(Second:($t@124@04))))| && 0 <= i__66@125@04) | live]
(push) ; 9
; [then-branch: 31 | i__66@125@04 < |First:(Second:(Second:(Second:($t@124@04))))| && 0 <= i__66@125@04]
(assert (and
  (<
    i__66@125@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
  (<= 0 i__66@125@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 10
(assert (not (>= i__66@125@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4267
;  :arith-add-rows          24
;  :arith-assert-diseq      77
;  :arith-assert-lower      255
;  :arith-assert-upper      198
;  :arith-conflicts         52
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              293
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2130
;  :mk-clause               345
;  :num-allocs              5184705
;  :num-checks              278
;  :propagations            238
;  :quant-instantiations    107
;  :rlimit-count            195456)
; [eval] -1
(push) ; 10
; [then-branch: 32 | First:(Second:(Second:(Second:($t@124@04))))[i__66@125@04] == -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@124@04))))[i__66@125@04] != -1 | live]
(push) ; 11
; [then-branch: 32 | First:(Second:(Second:(Second:($t@124@04))))[i__66@125@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    i__66@125@04)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 32 | First:(Second:(Second:(Second:($t@124@04))))[i__66@125@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
      i__66@125@04)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 12
(assert (not (>= i__66@125@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4267
;  :arith-add-rows          24
;  :arith-assert-diseq      77
;  :arith-assert-lower      255
;  :arith-assert-upper      198
;  :arith-conflicts         52
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              293
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2131
;  :mk-clause               345
;  :num-allocs              5184705
;  :num-checks              279
;  :propagations            238
;  :quant-instantiations    107
;  :rlimit-count            195631)
(push) ; 12
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@124@04))))[i__66@125@04] | live]
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@124@04))))[i__66@125@04]) | live]
(push) ; 13
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@124@04))))[i__66@125@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    i__66@125@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 14
(assert (not (>= i__66@125@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4267
;  :arith-add-rows          24
;  :arith-assert-diseq      78
;  :arith-assert-lower      258
;  :arith-assert-upper      198
;  :arith-conflicts         52
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              293
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2134
;  :mk-clause               346
;  :num-allocs              5184705
;  :num-checks              280
;  :propagations            238
;  :quant-instantiations    107
;  :rlimit-count            195755)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@124@04))))[i__66@125@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
      i__66@125@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 31 | !(i__66@125@04 < |First:(Second:(Second:(Second:($t@124@04))))| && 0 <= i__66@125@04)]
(assert (not
  (and
    (<
      i__66@125@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
    (<= 0 i__66@125@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__66@125@04 Int)) (!
  (implies
    (and
      (<
        i__66@125@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
      (<= 0 i__66@125@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
          i__66@125@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
            i__66@125@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
            i__66@125@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    i__66@125@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
(declare-const $k@126@04 $Perm)
(assert ($Perm.isReadVar $k@126@04 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@126@04 $Perm.No) (< $Perm.No $k@126@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4272
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      199
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2140
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              281
;  :propagations            239
;  :quant-instantiations    107
;  :rlimit-count            196524)
(assert (<= $Perm.No $k@126@04))
(assert (<= $k@126@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@126@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4278
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    255
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2143
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              282
;  :propagations            239
;  :quant-instantiations    107
;  :rlimit-count            196847)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4284
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    256
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2146
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              283
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            197203)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4289
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2147
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              284
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            197460)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4294
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2148
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              285
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            197727)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4299
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2149
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              286
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            198004)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4304
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2150
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              287
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            198291)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4309
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2151
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              288
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            198588)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4314
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    262
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2152
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              289
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            198895)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4319
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2153
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              290
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            199212)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4324
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2154
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              291
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            199539)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4329
;  :arith-add-rows          24
;  :arith-assert-diseq      79
;  :arith-assert-lower      260
;  :arith-assert-upper      200
;  :arith-conflicts         52
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2155
;  :mk-clause               348
;  :num-allocs              5184705
;  :num-checks              292
;  :propagations            239
;  :quant-instantiations    108
;  :rlimit-count            199876)
(declare-const $k@127@04 $Perm)
(assert ($Perm.isReadVar $k@127@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@127@04 $Perm.No) (< $Perm.No $k@127@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4329
;  :arith-add-rows          24
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      201
;  :arith-conflicts         52
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2159
;  :mk-clause               350
;  :num-allocs              5184705
;  :num-checks              293
;  :propagations            240
;  :quant-instantiations    108
;  :rlimit-count            200075)
(assert (<= $Perm.No $k@127@04))
(assert (<= $k@127@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@127@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4335
;  :arith-add-rows          24
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      202
;  :arith-conflicts         52
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2162
;  :mk-clause               350
;  :num-allocs              5184705
;  :num-checks              294
;  :propagations            240
;  :quant-instantiations    108
;  :rlimit-count            200508)
(push) ; 7
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4335
;  :arith-add-rows          24
;  :arith-assert-diseq      80
;  :arith-assert-lower      262
;  :arith-assert-upper      202
;  :arith-conflicts         52
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2162
;  :mk-clause               350
;  :num-allocs              5184705
;  :num-checks              295
;  :propagations            240
;  :quant-instantiations    108
;  :rlimit-count            200556)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))
(declare-const $k@128@04 $Perm)
(assert ($Perm.isReadVar $k@128@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@128@04 $Perm.No) (< $Perm.No $k@128@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4343
;  :arith-add-rows          24
;  :arith-assert-diseq      81
;  :arith-assert-lower      264
;  :arith-assert-upper      203
;  :arith-conflicts         52
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    267
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2169
;  :mk-clause               352
;  :num-allocs              5184705
;  :num-checks              296
;  :propagations            241
;  :quant-instantiations    109
;  :rlimit-count            201186)
(assert (<= $Perm.No $k@128@04))
(assert (<= $k@128@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@128@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@128@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4349
;  :arith-add-rows          24
;  :arith-assert-diseq      81
;  :arith-assert-lower      264
;  :arith-assert-upper      204
;  :arith-conflicts         52
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2172
;  :mk-clause               352
;  :num-allocs              5184705
;  :num-checks              297
;  :propagations            241
;  :quant-instantiations    109
;  :rlimit-count            201639)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@128@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4355
;  :arith-add-rows          24
;  :arith-assert-diseq      81
;  :arith-assert-lower      264
;  :arith-assert-upper      204
;  :arith-conflicts         52
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2175
;  :mk-clause               352
;  :num-allocs              5184705
;  :num-checks              298
;  :propagations            241
;  :quant-instantiations    110
;  :rlimit-count            202123)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4355
;  :arith-add-rows          24
;  :arith-assert-diseq      81
;  :arith-assert-lower      264
;  :arith-assert-upper      204
;  :arith-conflicts         52
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2175
;  :mk-clause               352
;  :num-allocs              5184705
;  :num-checks              299
;  :propagations            241
;  :quant-instantiations    110
;  :rlimit-count            202136)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))
(declare-const $k@129@04 $Perm)
(assert ($Perm.isReadVar $k@129@04 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@129@04 $Perm.No) (< $Perm.No $k@129@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4360
;  :arith-add-rows          24
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      205
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2180
;  :mk-clause               354
;  :num-allocs              5184705
;  :num-checks              300
;  :propagations            242
;  :quant-instantiations    110
;  :rlimit-count            202666)
(assert (<= $Perm.No $k@129@04))
(assert (<= $k@129@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@129@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@129@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4366
;  :arith-add-rows          24
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      206
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2183
;  :mk-clause               354
;  :num-allocs              5184705
;  :num-checks              301
;  :propagations            242
;  :quant-instantiations    110
;  :rlimit-count            203149)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@129@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4372
;  :arith-add-rows          24
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      206
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2186
;  :mk-clause               354
;  :num-allocs              5184705
;  :num-checks              302
;  :propagations            242
;  :quant-instantiations    111
;  :rlimit-count            203665)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4372
;  :arith-add-rows          24
;  :arith-assert-diseq      82
;  :arith-assert-lower      266
;  :arith-assert-upper      206
;  :arith-conflicts         52
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2186
;  :mk-clause               354
;  :num-allocs              5184705
;  :num-checks              303
;  :propagations            242
;  :quant-instantiations    111
;  :rlimit-count            203678)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
(declare-const $k@130@04 $Perm)
(assert ($Perm.isReadVar $k@130@04 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@130@04 $Perm.No) (< $Perm.No $k@130@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4377
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      268
;  :arith-assert-upper      207
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2191
;  :mk-clause               356
;  :num-allocs              5184705
;  :num-checks              304
;  :propagations            243
;  :quant-instantiations    111
;  :rlimit-count            204239)
(assert (<= $Perm.No $k@130@04))
(assert (<= $k@130@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@130@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@130@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4383
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      268
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    274
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2194
;  :mk-clause               356
;  :num-allocs              5184705
;  :num-checks              305
;  :propagations            243
;  :quant-instantiations    111
;  :rlimit-count            204752)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@130@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4389
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      268
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2197
;  :mk-clause               356
;  :num-allocs              5184705
;  :num-checks              306
;  :propagations            243
;  :quant-instantiations    112
;  :rlimit-count            205298)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4389
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      268
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2197
;  :mk-clause               356
;  :num-allocs              5184705
;  :num-checks              307
;  :propagations            243
;  :quant-instantiations    112
;  :rlimit-count            205311)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@130@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4395
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      268
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2199
;  :mk-clause               356
;  :num-allocs              5184705
;  :num-checks              308
;  :propagations            243
;  :quant-instantiations    112
;  :rlimit-count            205790)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
  diz@17@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4403
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      268
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              294
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2201
;  :mk-clause               356
;  :num-allocs              5184705
;  :num-checks              309
;  :propagations            243
;  :quant-instantiations    112
;  :rlimit-count            206264)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
(pop) ; 7
(push) ; 7
; [eval] !true
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      268
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              304
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2206
;  :mk-clause               356
;  :num-allocs              5184705
;  :num-checks              310
;  :propagations            243
;  :quant-instantiations    114
;  :rlimit-count            206824)
; [eval] diz.Prc_half_adder_2_m != null
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] (forall i__66: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__66] } 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__66@131@04 Int)
(push) ; 7
; [eval] 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__66
(push) ; 8
; [then-branch: 34 | 0 <= i__66@131@04 | live]
; [else-branch: 34 | !(0 <= i__66@131@04) | live]
(push) ; 9
; [then-branch: 34 | 0 <= i__66@131@04]
(assert (<= 0 i__66@131@04))
; [eval] i__66 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 34 | !(0 <= i__66@131@04)]
(assert (not (<= 0 i__66@131@04)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 35 | i__66@131@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i__66@131@04 | live]
; [else-branch: 35 | !(i__66@131@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i__66@131@04) | live]
(push) ; 9
; [then-branch: 35 | i__66@131@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i__66@131@04]
(assert (and
  (<
    i__66@131@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
  (<= 0 i__66@131@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 10
(assert (not (>= i__66@131@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      83
;  :arith-assert-lower      269
;  :arith-assert-upper      209
;  :arith-conflicts         52
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              304
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2208
;  :mk-clause               356
;  :num-allocs              5184705
;  :num-checks              311
;  :propagations            243
;  :quant-instantiations    114
;  :rlimit-count            206960)
; [eval] -1
(push) ; 10
; [then-branch: 36 | First:(Second:(Second:(Second:($t@65@04))))[i__66@131@04] == -1 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:($t@65@04))))[i__66@131@04] != -1 | live]
(push) ; 11
; [then-branch: 36 | First:(Second:(Second:(Second:($t@65@04))))[i__66@131@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i__66@131@04)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 36 | First:(Second:(Second:(Second:($t@65@04))))[i__66@131@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      i__66@131@04)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 12
(assert (not (>= i__66@131@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      84
;  :arith-assert-lower      272
;  :arith-assert-upper      210
;  :arith-conflicts         52
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              304
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2214
;  :mk-clause               360
;  :num-allocs              5184705
;  :num-checks              312
;  :propagations            245
;  :quant-instantiations    115
;  :rlimit-count            207192)
(push) ; 12
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@65@04))))[i__66@131@04] | live]
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@65@04))))[i__66@131@04]) | live]
(push) ; 13
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@65@04))))[i__66@131@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i__66@131@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 14
(assert (not (>= i__66@131@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      84
;  :arith-assert-lower      272
;  :arith-assert-upper      210
;  :arith-conflicts         52
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              304
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2214
;  :mk-clause               360
;  :num-allocs              5184705
;  :num-checks              313
;  :propagations            245
;  :quant-instantiations    115
;  :rlimit-count            207306)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@65@04))))[i__66@131@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
      i__66@131@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(i__66@131@04 < |First:(Second:(Second:(Second:($t@65@04))))| && 0 <= i__66@131@04)]
(assert (not
  (and
    (<
      i__66@131@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
    (<= 0 i__66@131@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i__66@131@04 Int)) (!
  (implies
    (and
      (<
        i__66@131@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
      (<= 0 i__66@131@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          i__66@131@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i__66@131@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i__66@131@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i__66@131@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      85
;  :arith-assert-lower      273
;  :arith-assert-upper      211
;  :arith-conflicts         52
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2222
;  :mk-clause               372
;  :num-allocs              5184705
;  :num-checks              314
;  :propagations            247
;  :quant-instantiations    116
;  :rlimit-count            207752)
(assert (forall ((i__66@131@04 Int)) (!
  (implies
    (and
      (<
        i__66@131@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
      (<= 0 i__66@131@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
          i__66@131@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i__66@131@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
            i__66@131@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
    i__66@131@04))
  :qid |prog.l<no position>|)))
(declare-const $k@132@04 $Perm)
(assert ($Perm.isReadVar $k@132@04 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@132@04 $Perm.No) (< $Perm.No $k@132@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      212
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2227
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              315
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208314)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@67@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      275
;  :arith-assert-upper      212
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2227
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              316
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208325)
(assert (< $k@132@04 $k@67@04))
(assert (<= $Perm.No (- $k@67@04 $k@132@04)))
(assert (<= (- $k@67@04 $k@132@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@67@04 $k@132@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              317
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208533)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              318
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208581)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              319
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208629)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              320
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208677)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              321
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208725)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              322
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208773)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              323
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208821)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              324
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208869)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              325
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208917)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      86
;  :arith-assert-lower      277
;  :arith-assert-upper      213
;  :arith-conflicts         52
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2230
;  :mk-clause               374
;  :num-allocs              5184705
;  :num-checks              326
;  :propagations            248
;  :quant-instantiations    116
;  :rlimit-count            208965)
(declare-const $k@133@04 $Perm)
(assert ($Perm.isReadVar $k@133@04 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      214
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2234
;  :mk-clause               376
;  :num-allocs              5184705
;  :num-checks              327
;  :propagations            249
;  :quant-instantiations    116
;  :rlimit-count            209161)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@133@04 $Perm.No) (< $Perm.No $k@133@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      214
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2234
;  :mk-clause               376
;  :num-allocs              5184705
;  :num-checks              328
;  :propagations            249
;  :quant-instantiations    116
;  :rlimit-count            209211)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@68@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      279
;  :arith-assert-upper      214
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2234
;  :mk-clause               376
;  :num-allocs              5184705
;  :num-checks              329
;  :propagations            249
;  :quant-instantiations    116
;  :rlimit-count            209222)
(assert (< $k@133@04 $k@68@04))
(assert (<= $Perm.No (- $k@68@04 $k@133@04)))
(assert (<= (- $k@68@04 $k@133@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@04 $k@133@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      281
;  :arith-assert-upper      215
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2237
;  :mk-clause               376
;  :num-allocs              5184705
;  :num-checks              330
;  :propagations            249
;  :quant-instantiations    116
;  :rlimit-count            209442)
(push) ; 7
(assert (not (< $Perm.No $k@68@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      87
;  :arith-assert-lower      281
;  :arith-assert-upper      215
;  :arith-conflicts         52
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2237
;  :mk-clause               376
;  :num-allocs              5184705
;  :num-checks              331
;  :propagations            249
;  :quant-instantiations    116
;  :rlimit-count            209490)
(declare-const $k@134@04 $Perm)
(assert ($Perm.isReadVar $k@134@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@134@04 $Perm.No) (< $Perm.No $k@134@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      283
;  :arith-assert-upper      216
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2241
;  :mk-clause               378
;  :num-allocs              5184705
;  :num-checks              332
;  :propagations            250
;  :quant-instantiations    116
;  :rlimit-count            209689)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@69@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      283
;  :arith-assert-upper      216
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2241
;  :mk-clause               378
;  :num-allocs              5184705
;  :num-checks              333
;  :propagations            250
;  :quant-instantiations    116
;  :rlimit-count            209700)
(assert (< $k@134@04 $k@69@04))
(assert (<= $Perm.No (- $k@69@04 $k@134@04)))
(assert (<= (- $k@69@04 $k@134@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@69@04 $k@134@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(push) ; 7
(assert (not (< $Perm.No $k@69@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      285
;  :arith-assert-upper      217
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2244
;  :mk-clause               378
;  :num-allocs              5184705
;  :num-checks              334
;  :propagations            250
;  :quant-instantiations    116
;  :rlimit-count            209908)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      285
;  :arith-assert-upper      217
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2244
;  :mk-clause               378
;  :num-allocs              5184705
;  :num-checks              335
;  :propagations            250
;  :quant-instantiations    116
;  :rlimit-count            209921)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@69@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      88
;  :arith-assert-lower      285
;  :arith-assert-upper      217
;  :arith-conflicts         52
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2244
;  :mk-clause               378
;  :num-allocs              5184705
;  :num-checks              336
;  :propagations            250
;  :quant-instantiations    116
;  :rlimit-count            209969)
(declare-const $k@135@04 $Perm)
(assert ($Perm.isReadVar $k@135@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@135@04 $Perm.No) (< $Perm.No $k@135@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      287
;  :arith-assert-upper      218
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2248
;  :mk-clause               380
;  :num-allocs              5184705
;  :num-checks              337
;  :propagations            251
;  :quant-instantiations    116
;  :rlimit-count            210167)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@70@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      287
;  :arith-assert-upper      218
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2248
;  :mk-clause               380
;  :num-allocs              5184705
;  :num-checks              338
;  :propagations            251
;  :quant-instantiations    116
;  :rlimit-count            210178)
(assert (< $k@135@04 $k@70@04))
(assert (<= $Perm.No (- $k@70@04 $k@135@04)))
(assert (<= (- $k@70@04 $k@135@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@70@04 $k@135@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(push) ; 7
(assert (not (< $Perm.No $k@70@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      289
;  :arith-assert-upper      219
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2251
;  :mk-clause               380
;  :num-allocs              5184705
;  :num-checks              339
;  :propagations            251
;  :quant-instantiations    116
;  :rlimit-count            210392)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      289
;  :arith-assert-upper      219
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2251
;  :mk-clause               380
;  :num-allocs              5184705
;  :num-checks              340
;  :propagations            251
;  :quant-instantiations    116
;  :rlimit-count            210405)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@70@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      89
;  :arith-assert-lower      289
;  :arith-assert-upper      219
;  :arith-conflicts         52
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2251
;  :mk-clause               380
;  :num-allocs              5184705
;  :num-checks              341
;  :propagations            251
;  :quant-instantiations    116
;  :rlimit-count            210453)
(declare-const $k@136@04 $Perm)
(assert ($Perm.isReadVar $k@136@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@136@04 $Perm.No) (< $Perm.No $k@136@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      220
;  :arith-conflicts         52
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2255
;  :mk-clause               382
;  :num-allocs              5184705
;  :num-checks              342
;  :propagations            252
;  :quant-instantiations    116
;  :rlimit-count            210652)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@71@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      220
;  :arith-conflicts         52
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2255
;  :mk-clause               382
;  :num-allocs              5184705
;  :num-checks              343
;  :propagations            252
;  :quant-instantiations    116
;  :rlimit-count            210663)
(assert (< $k@136@04 $k@71@04))
(assert (<= $Perm.No (- $k@71@04 $k@136@04)))
(assert (<= (- $k@71@04 $k@136@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@71@04 $k@136@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(push) ; 7
(assert (not (< $Perm.No $k@71@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      293
;  :arith-assert-upper      221
;  :arith-conflicts         52
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2258
;  :mk-clause               382
;  :num-allocs              5184705
;  :num-checks              344
;  :propagations            252
;  :quant-instantiations    116
;  :rlimit-count            210871)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      293
;  :arith-assert-upper      221
;  :arith-conflicts         52
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2258
;  :mk-clause               382
;  :num-allocs              5184705
;  :num-checks              345
;  :propagations            252
;  :quant-instantiations    116
;  :rlimit-count            210884)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@71@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4415
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      293
;  :arith-assert-upper      221
;  :arith-conflicts         52
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1077
;  :datatype-occurs-check   370
;  :datatype-splits         907
;  :decisions               1014
;  :del-clause              320
;  :final-checks            75
;  :max-generation          2
;  :max-memory              4.83
;  :memory                  4.74
;  :mk-bool-var             2258
;  :mk-clause               382
;  :num-allocs              5184705
;  :num-checks              346
;  :propagations            252
;  :quant-instantiations    116
;  :rlimit-count            210932)
(push) ; 7
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4539
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      293
;  :arith-assert-upper      221
;  :arith-conflicts         52
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1121
;  :datatype-occurs-check   379
;  :datatype-splits         948
;  :decisions               1055
;  :del-clause              320
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2298
;  :mk-clause               382
;  :num-allocs              5374026
;  :num-checks              347
;  :propagations            255
;  :quant-instantiations    116
;  :rlimit-count            211995
;  :time                    0.00)
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(push) ; 7
(assert (not (< $Perm.No $k@71@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4539
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      293
;  :arith-assert-upper      221
;  :arith-conflicts         52
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1121
;  :datatype-occurs-check   379
;  :datatype-splits         948
;  :decisions               1055
;  :del-clause              320
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2298
;  :mk-clause               382
;  :num-allocs              5374026
;  :num-checks              348
;  :propagations            255
;  :quant-instantiations    116
;  :rlimit-count            212043)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4539
;  :arith-add-rows          24
;  :arith-assert-diseq      90
;  :arith-assert-lower      293
;  :arith-assert-upper      221
;  :arith-conflicts         52
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1121
;  :datatype-occurs-check   379
;  :datatype-splits         948
;  :decisions               1055
;  :del-clause              320
;  :final-checks            78
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2298
;  :mk-clause               382
;  :num-allocs              5374026
;  :num-checks              349
;  :propagations            255
;  :quant-instantiations    116
;  :rlimit-count            212056)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@126@04 $Perm.Write))
(assert ($Perm.isReadVar $k@127@04 $Perm.Write))
(assert ($Perm.isReadVar $k@128@04 $Perm.Write))
(assert ($Perm.isReadVar $k@129@04 $Perm.Write))
(assert ($Perm.isReadVar $k@130@04 $Perm.Write))
(assert (= $t@124@04 ($Snap.combine ($Snap.first $t@124@04) ($Snap.second $t@124@04))))
(assert (=
  ($Snap.second $t@124@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@124@04))
    ($Snap.second ($Snap.second $t@124@04)))))
(assert (= ($Snap.first ($Snap.second $t@124@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@124@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@124@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@124@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
  $Snap.unit))
(assert (forall ((i__66@125@04 Int)) (!
  (implies
    (and
      (<
        i__66@125@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
      (<= 0 i__66@125@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
          i__66@125@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
            i__66@125@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
            i__66@125@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    i__66@125@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
(assert (<= $Perm.No $k@126@04))
(assert (<= $k@126@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@126@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
(assert (<= $Perm.No $k@127@04))
(assert (<= $k@127@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@127@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))
(assert (<= $Perm.No $k@128@04))
(assert (<= $k@128@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@128@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@129@04))
(assert (<= $k@129@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@129@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@130@04))
(assert (<= $k@130@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@130@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
  diz@17@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5440
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2575
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              352
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            221939
;  :time                    0.00)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(push) ; 8
; [then-branch: 38 | True]
; [exec]
; __flatten_36__46 := diz.Prc_half_adder_2_m
(declare-const __flatten_36__46@137@04 $Ref)
(assert (= __flatten_36__46@137@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_35__45 := __flatten_36__46.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) __flatten_36__46@137@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5441
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2576
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              353
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222012)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5441
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2576
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              354
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222060)
(declare-const __flatten_35__45@138@04 $Ref)
(assert (=
  __flatten_35__45@138@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
; [exec]
; __flatten_38__48 := diz.Prc_half_adder_2_m
(declare-const __flatten_38__48@139@04 $Ref)
(assert (= __flatten_38__48@139@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_40__50 := diz.Prc_half_adder_2_m
(declare-const __flatten_40__50@140@04 $Ref)
(assert (= __flatten_40__50@140@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_39__49 := __flatten_40__50.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) __flatten_40__50@140@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5444
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2579
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              355
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222268)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5444
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2579
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              356
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222316)
(declare-const __flatten_39__49@141@04 $Ref)
(assert (=
  __flatten_39__49@141@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
; [exec]
; __flatten_42__52 := diz.Prc_half_adder_2_m
(declare-const __flatten_42__52@142@04 $Ref)
(assert (= __flatten_42__52@142@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_41__51 := __flatten_42__52.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) __flatten_42__52@142@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5446
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2581
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              357
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222394)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5446
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2581
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              358
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222442)
(declare-const __flatten_41__51@143@04 $Ref)
(assert (=
  __flatten_41__51@143@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
; [exec]
; __flatten_37__47 := Full_adder_sum__EncodedGlobalVariables_Boolean_Boolean(__flatten_38__48.Main_adder, globals, __flatten_39__49.Full_adder_s1, __flatten_41__51.Full_adder_carry_in)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) __flatten_38__48@139@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2582
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              359
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222490)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2582
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              360
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222538)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  __flatten_39__49@141@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2582
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              361
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222549)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  __flatten_41__51@143@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      307
;  :arith-assert-upper      233
;  :arith-conflicts         52
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2582
;  :mk-clause               395
;  :num-allocs              5374026
;  :num-checks              362
;  :propagations            271
;  :quant-instantiations    128
;  :rlimit-count            222560)
; [eval] diz != null
(declare-const $k@144@04 $Perm)
(assert ($Perm.isReadVar $k@144@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@144@04 $Perm.No) (< $Perm.No $k@144@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      309
;  :arith-assert-upper      234
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2586
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              363
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            222758)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= $k@127@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      309
;  :arith-assert-upper      234
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            71
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2586
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              364
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            222769)
(assert (< $k@144@04 $k@127@04))
(assert (<= $Perm.No (- $k@127@04 $k@144@04)))
(assert (<= (- $k@127@04 $k@144@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@127@04 $k@144@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
      $Ref.null))))
; [eval] diz.Full_adder_m != null
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              365
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            222983)
(set-option :timeout 0)
(push) ; 9
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              366
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223001)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))
    $Ref.null)))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              367
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223069)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              368
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223088)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              369
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223136)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              370
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223155)
; [eval] |diz.Full_adder_m.Main_process_state| == 3
; [eval] |diz.Full_adder_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              371
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223203)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              372
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223222)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              373
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223270)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              374
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223289)
; [eval] |diz.Full_adder_m.Main_event_state| == 6
; [eval] |diz.Full_adder_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              375
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223337)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2589
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              376
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223356)
; [eval] (forall i: Int :: { diz.Full_adder_m.Main_process_state[i] } 0 <= i && i < |diz.Full_adder_m.Main_process_state| ==> diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|)
(declare-const i@145@04 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Full_adder_m.Main_process_state| ==> diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Full_adder_m.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 39 | 0 <= i@145@04 | live]
; [else-branch: 39 | !(0 <= i@145@04) | live]
(push) ; 11
; [then-branch: 39 | 0 <= i@145@04]
(assert (<= 0 i@145@04))
; [eval] i < |diz.Full_adder_m.Main_process_state|
; [eval] |diz.Full_adder_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      311
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2590
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              377
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223457)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      311
;  :arith-assert-upper      236
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2590
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              378
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223476)
(pop) ; 11
(push) ; 11
; [else-branch: 39 | !(0 <= i@145@04)]
(assert (not (<= 0 i@145@04)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 40 | i@145@04 < |First:(Second:(Second:(Second:($t@124@04))))| && 0 <= i@145@04 | live]
; [else-branch: 40 | !(i@145@04 < |First:(Second:(Second:(Second:($t@124@04))))| && 0 <= i@145@04) | live]
(push) ; 11
; [then-branch: 40 | i@145@04 < |First:(Second:(Second:(Second:($t@124@04))))| && 0 <= i@145@04]
(assert (and
  (<
    i@145@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
  (<= 0 i@145@04)))
; [eval] diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] diz.Full_adder_m.Main_process_state[i] == -1
; [eval] diz.Full_adder_m.Main_process_state[i]
(push) ; 12
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      312
;  :arith-assert-upper      237
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2592
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              379
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223633)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      312
;  :arith-assert-upper      237
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2592
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              380
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223652)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@145@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      96
;  :arith-assert-lower      312
;  :arith-assert-upper      237
;  :arith-conflicts         52
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2592
;  :mk-clause               397
;  :num-allocs              5374026
;  :num-checks              381
;  :propagations            272
;  :quant-instantiations    128
;  :rlimit-count            223661)
; [eval] -1
(push) ; 12
; [then-branch: 41 | First:(Second:(Second:(Second:($t@124@04))))[i@145@04] == -1 | live]
; [else-branch: 41 | First:(Second:(Second:(Second:($t@124@04))))[i@145@04] != -1 | live]
(push) ; 13
; [then-branch: 41 | First:(Second:(Second:(Second:($t@124@04))))[i@145@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    i@145@04)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 41 | First:(Second:(Second:(Second:($t@124@04))))[i@145@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
      i@145@04)
    (- 0 1))))
; [eval] 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] 0 <= diz.Full_adder_m.Main_process_state[i]
; [eval] diz.Full_adder_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      315
;  :arith-assert-upper      238
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2598
;  :mk-clause               401
;  :num-allocs              5374026
;  :num-checks              382
;  :propagations            274
;  :quant-instantiations    129
;  :rlimit-count            223932)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      315
;  :arith-assert-upper      238
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2598
;  :mk-clause               401
;  :num-allocs              5374026
;  :num-checks              383
;  :propagations            274
;  :quant-instantiations    129
;  :rlimit-count            223951)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i@145@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      315
;  :arith-assert-upper      238
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2598
;  :mk-clause               401
;  :num-allocs              5374026
;  :num-checks              384
;  :propagations            274
;  :quant-instantiations    129
;  :rlimit-count            223960)
(push) ; 14
; [then-branch: 42 | 0 <= First:(Second:(Second:(Second:($t@124@04))))[i@145@04] | live]
; [else-branch: 42 | !(0 <= First:(Second:(Second:(Second:($t@124@04))))[i@145@04]) | live]
(push) ; 15
; [then-branch: 42 | 0 <= First:(Second:(Second:(Second:($t@124@04))))[i@145@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    i@145@04)))
; [eval] diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] diz.Full_adder_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      315
;  :arith-assert-upper      238
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2598
;  :mk-clause               401
;  :num-allocs              5374026
;  :num-checks              385
;  :propagations            274
;  :quant-instantiations    129
;  :rlimit-count            224113)
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      315
;  :arith-assert-upper      238
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2598
;  :mk-clause               401
;  :num-allocs              5374026
;  :num-checks              386
;  :propagations            274
;  :quant-instantiations    129
;  :rlimit-count            224132)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@145@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      315
;  :arith-assert-upper      238
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2598
;  :mk-clause               401
;  :num-allocs              5374026
;  :num-checks              387
;  :propagations            274
;  :quant-instantiations    129
;  :rlimit-count            224141)
; [eval] |diz.Full_adder_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      315
;  :arith-assert-upper      238
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2598
;  :mk-clause               401
;  :num-allocs              5374026
;  :num-checks              388
;  :propagations            274
;  :quant-instantiations    129
;  :rlimit-count            224189)
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      315
;  :arith-assert-upper      238
;  :arith-conflicts         52
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              332
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2598
;  :mk-clause               401
;  :num-allocs              5374026
;  :num-checks              389
;  :propagations            274
;  :quant-instantiations    129
;  :rlimit-count            224208)
(pop) ; 15
(push) ; 15
; [else-branch: 42 | !(0 <= First:(Second:(Second:(Second:($t@124@04))))[i@145@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
      i@145@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 40 | !(i@145@04 < |First:(Second:(Second:(Second:($t@124@04))))| && 0 <= i@145@04)]
(assert (not
  (and
    (<
      i@145@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
    (<= 0 i@145@04))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 9
(assert (not (forall ((i@145@04 Int)) (!
  (implies
    (and
      (<
        i@145@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
      (<= 0 i@145@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
          i@145@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
            i@145@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
            i@145@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    i@145@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      99
;  :arith-assert-lower      316
;  :arith-assert-upper      239
;  :arith-conflicts         52
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2606
;  :mk-clause               415
;  :num-allocs              5374026
;  :num-checks              390
;  :propagations            276
;  :quant-instantiations    130
;  :rlimit-count            224654)
(assert (forall ((i@145@04 Int)) (!
  (implies
    (and
      (<
        i@145@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))
      (<= 0 i@145@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
          i@145@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
            i@145@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
            i@145@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))
    i@145@04))
  :qid |prog.l<no position>|)))
(declare-const $k@146@04 $Perm)
(assert ($Perm.isReadVar $k@146@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      240
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2611
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              391
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225212)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@146@04 $Perm.No) (< $Perm.No $k@146@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      240
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2611
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              392
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225262)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      240
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2611
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              393
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225281)
(push) ; 9
(assert (not (not (= $k@126@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      240
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2611
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              394
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225292)
(assert (< $k@146@04 $k@126@04))
(assert (<= $Perm.No (- $k@126@04 $k@146@04)))
(assert (<= (- $k@126@04 $k@146@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@126@04 $k@146@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder != null
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              395
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225512)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              396
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225531)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              397
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225579)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              398
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225627)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              399
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225646)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              400
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225694)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              401
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225742)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              402
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225761)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              403
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225809)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              404
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225857)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              405
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225876)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              406
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225924)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              407
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225972)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              408
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            225991)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              409
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226039)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              410
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226087)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              411
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226106)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              412
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226154)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              413
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226202)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              414
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226221)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              415
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226269)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              416
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226317)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              417
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226336)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              418
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226384)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              419
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226432)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              420
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226451)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              421
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226499)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              422
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226547)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              423
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226566)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      100
;  :arith-assert-lower      320
;  :arith-assert-upper      241
;  :arith-conflicts         52
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2614
;  :mk-clause               417
;  :num-allocs              5374026
;  :num-checks              424
;  :propagations            277
;  :quant-instantiations    130
;  :rlimit-count            226614)
(declare-const $k@147@04 $Perm)
(assert ($Perm.isReadVar $k@147@04 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2618
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              425
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            226810)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2618
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              426
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            226829)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2618
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              427
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            226877)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@147@04 $Perm.No) (< $Perm.No $k@147@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2618
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              428
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            226927)
(set-option :timeout 10)
(push) ; 9
(assert (not (not (= (- $k@127@04 $k@144@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          24
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      242
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2619
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              429
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            226995)
(assert (< $k@147@04 (- $k@127@04 $k@144@04)))
(assert (<= $Perm.No (- (- $k@127@04 $k@144@04) $k@147@04)))
(assert (<= (- (- $k@127@04 $k@144@04) $k@147@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@127@04 $k@144@04) $k@147@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
      $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder.Full_adder_m == diz.Full_adder_m
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2622
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              430
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            227243)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2622
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              431
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            227262)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2622
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              432
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            227310)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2622
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              433
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            227358)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      101
;  :arith-assert-lower      323
;  :arith-assert-upper      244
;  :arith-conflicts         52
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2622
;  :mk-clause               419
;  :num-allocs              5374026
;  :num-checks              434
;  :propagations            278
;  :quant-instantiations    130
;  :rlimit-count            227406)
(declare-const $k@148@04 $Perm)
(assert ($Perm.isReadVar $k@148@04 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      325
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2626
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              435
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            227603)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@148@04 $Perm.No) (< $Perm.No $k@148@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      325
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2626
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              436
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            227653)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      325
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2626
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              437
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            227672)
(push) ; 9
(assert (not (not (= $k@128@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      325
;  :arith-assert-upper      245
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            76
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2626
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              438
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            227683)
(assert (< $k@148@04 $k@128@04))
(assert (<= $Perm.No (- $k@128@04 $k@148@04)))
(assert (<= (- $k@128@04 $k@148@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@128@04 $k@148@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder_prc != null
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2629
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              439
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            227897)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2629
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              440
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            227916)
(push) ; 9
(assert (not (< $Perm.No $k@128@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2629
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              441
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            227964)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2629
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              442
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            227977)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2629
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              443
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            228025)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2629
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              444
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            228044)
(push) ; 9
(assert (not (< $Perm.No $k@128@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      102
;  :arith-assert-lower      327
;  :arith-assert-upper      246
;  :arith-conflicts         52
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2629
;  :mk-clause               421
;  :num-allocs              5374026
;  :num-checks              445
;  :propagations            279
;  :quant-instantiations    130
;  :rlimit-count            228092)
(declare-const $k@149@04 $Perm)
(assert ($Perm.isReadVar $k@149@04 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      329
;  :arith-assert-upper      247
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2633
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              446
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228289)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@149@04 $Perm.No) (< $Perm.No $k@149@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      329
;  :arith-assert-upper      247
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2633
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              447
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228339)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      329
;  :arith-assert-upper      247
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2633
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              448
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228358)
(push) ; 9
(assert (not (not (= $k@129@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      329
;  :arith-assert-upper      247
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2633
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              449
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228369)
(assert (< $k@149@04 $k@129@04))
(assert (<= $Perm.No (- $k@129@04 $k@149@04)))
(assert (<= (- $k@129@04 $k@149@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@129@04 $k@149@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder_half_adder1 != null
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      331
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2636
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              450
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228583)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      331
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2636
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              451
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228602)
(push) ; 9
(assert (not (< $Perm.No $k@129@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      331
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2636
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              452
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228650)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      331
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2636
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              453
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228663)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      331
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2636
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              454
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228711)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      331
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2636
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              455
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228730)
(push) ; 9
(assert (not (< $Perm.No $k@129@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      103
;  :arith-assert-lower      331
;  :arith-assert-upper      248
;  :arith-conflicts         52
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2636
;  :mk-clause               423
;  :num-allocs              5374026
;  :num-checks              456
;  :propagations            280
;  :quant-instantiations    130
;  :rlimit-count            228778)
(declare-const $k@150@04 $Perm)
(assert ($Perm.isReadVar $k@150@04 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      333
;  :arith-assert-upper      249
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2640
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              457
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            228974)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@150@04 $Perm.No) (< $Perm.No $k@150@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      333
;  :arith-assert-upper      249
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2640
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              458
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229024)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      333
;  :arith-assert-upper      249
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2640
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              459
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229043)
(push) ; 9
(assert (not (not (= $k@130@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      333
;  :arith-assert-upper      249
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2640
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              460
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229054)
(assert (< $k@150@04 $k@130@04))
(assert (<= $Perm.No (- $k@130@04 $k@150@04)))
(assert (<= (- $k@130@04 $k@150@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@130@04 $k@150@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder_half_adder2 != null
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      250
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2643
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              461
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229274)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      250
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2643
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              462
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229293)
(push) ; 9
(assert (not (< $Perm.No $k@130@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      250
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2643
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              463
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229341)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      250
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2643
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              464
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229354)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      250
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2643
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              465
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229402)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      250
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2643
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              466
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229421)
(push) ; 9
(assert (not (< $Perm.No $k@130@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5447
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      250
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   412
;  :datatype-splits         1131
;  :decisions               1269
;  :del-clause              350
;  :final-checks            87
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2643
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              467
;  :propagations            281
;  :quant-instantiations    130
;  :rlimit-count            229469)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          26
;  :arith-assert-diseq      104
;  :arith-assert-lower      335
;  :arith-assert-upper      250
;  :arith-conflicts         52
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2703
;  :mk-clause               425
;  :num-allocs              5374026
;  :num-checks              468
;  :propagations            285
;  :quant-instantiations    130
;  :rlimit-count            230932
;  :time                    0.00)
(declare-const $k@151@04 $Perm)
(assert ($Perm.isReadVar $k@151@04 $Perm.Write))
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          26
;  :arith-assert-diseq      105
;  :arith-assert-lower      337
;  :arith-assert-upper      251
;  :arith-conflicts         52
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2707
;  :mk-clause               427
;  :num-allocs              5374026
;  :num-checks              469
;  :propagations            286
;  :quant-instantiations    130
;  :rlimit-count            231128)
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@151@04 $Perm.No) (< $Perm.No $k@151@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          26
;  :arith-assert-diseq      105
;  :arith-assert-lower      337
;  :arith-assert-upper      251
;  :arith-conflicts         52
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2707
;  :mk-clause               427
;  :num-allocs              5374026
;  :num-checks              470
;  :propagations            286
;  :quant-instantiations    130
;  :rlimit-count            231178)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          26
;  :arith-assert-diseq      105
;  :arith-assert-lower      337
;  :arith-assert-upper      251
;  :arith-conflicts         52
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2707
;  :mk-clause               427
;  :num-allocs              5374026
;  :num-checks              471
;  :propagations            286
;  :quant-instantiations    130
;  :rlimit-count            231197)
(push) ; 9
(assert (not (not (= (- $k@126@04 $k@146@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          26
;  :arith-assert-diseq      105
;  :arith-assert-lower      337
;  :arith-assert-upper      251
;  :arith-conflicts         52
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         62
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2708
;  :mk-clause               427
;  :num-allocs              5374026
;  :num-checks              472
;  :propagations            286
;  :quant-instantiations    130
;  :rlimit-count            231265)
(assert (< $k@151@04 (- $k@126@04 $k@146@04)))
(assert (<= $Perm.No (- (- $k@126@04 $k@146@04) $k@151@04)))
(assert (<= (- (- $k@126@04 $k@146@04) $k@151@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@126@04 $k@146@04) $k@151@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Full_adder_m.Main_adder == diz
(push) ; 9
(assert (not (< $Perm.No $k@127@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          28
;  :arith-assert-diseq      105
;  :arith-assert-lower      339
;  :arith-assert-upper      252
;  :arith-conflicts         52
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         62
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2711
;  :mk-clause               427
;  :num-allocs              5374026
;  :num-checks              473
;  :propagations            286
;  :quant-instantiations    130
;  :rlimit-count            231525)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          28
;  :arith-assert-diseq      105
;  :arith-assert-lower      339
;  :arith-assert-upper      252
;  :arith-conflicts         52
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         62
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2711
;  :mk-clause               427
;  :num-allocs              5374026
;  :num-checks              474
;  :propagations            286
;  :quant-instantiations    130
;  :rlimit-count            231544)
(push) ; 9
(assert (not (< $Perm.No $k@126@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          28
;  :arith-assert-diseq      105
;  :arith-assert-lower      339
;  :arith-assert-upper      252
;  :arith-conflicts         52
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         62
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2711
;  :mk-clause               427
;  :num-allocs              5374026
;  :num-checks              475
;  :propagations            286
;  :quant-instantiations    130
;  :rlimit-count            231592)
(declare-const sys__result@152@04 Bool)
(declare-const $t@153@04 $Snap)
(assert (= $t@153@04 ($Snap.combine ($Snap.first $t@153@04) ($Snap.second $t@153@04))))
(declare-const $k@154@04 $Perm)
(assert ($Perm.isReadVar $k@154@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@154@04 $Perm.No) (< $Perm.No $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5657
;  :arith-add-rows          28
;  :arith-assert-diseq      106
;  :arith-assert-lower      341
;  :arith-assert-upper      253
;  :arith-conflicts         52
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         62
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2716
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              476
;  :propagations            287
;  :quant-instantiations    130
;  :rlimit-count            231878)
(declare-const $t@155@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@127@04 $k@144@04) $k@147@04))
    (=
      $t@155@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@154@04)
    (= $t@155@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@04))))))
(assert (<= $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04)))
(assert (<= (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@153@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@153@04))
    ($Snap.second ($Snap.second $t@153@04)))))
(assert (= ($Snap.first ($Snap.second $t@153@04)) $Snap.unit))
; [eval] diz.Full_adder_m != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5667
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      343
;  :arith-assert-upper      254
;  :arith-conflicts         53
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         63
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2724
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              477
;  :propagations            287
;  :quant-instantiations    131
;  :rlimit-count            232428)
(assert (not (= $t@155@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@153@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@153@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5673
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      344
;  :arith-assert-upper      254
;  :arith-conflicts         54
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         64
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2727
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              478
;  :propagations            287
;  :quant-instantiations    131
;  :rlimit-count            232690)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@153@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5678
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      345
;  :arith-assert-upper      254
;  :arith-conflicts         55
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         65
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    332
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2729
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              479
;  :propagations            287
;  :quant-instantiations    131
;  :rlimit-count            232917)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
  $Snap.unit))
; [eval] |diz.Full_adder_m.Main_process_state| == 3
; [eval] |diz.Full_adder_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5684
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      346
;  :arith-assert-upper      254
;  :arith-conflicts         56
;  :arith-eq-adapter        147
;  :arith-fixed-eqs         66
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2732
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              480
;  :propagations            287
;  :quant-instantiations    131
;  :rlimit-count            233186)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5691
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      349
;  :arith-assert-upper      255
;  :arith-conflicts         57
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         67
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    334
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2739
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              481
;  :propagations            287
;  :quant-instantiations    133
;  :rlimit-count            233566)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))
  $Snap.unit))
; [eval] |diz.Full_adder_m.Main_event_state| == 6
; [eval] |diz.Full_adder_m.Main_event_state|
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5697
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      350
;  :arith-assert-upper      255
;  :arith-conflicts         58
;  :arith-eq-adapter        148
;  :arith-fixed-eqs         68
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    335
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2742
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              482
;  :propagations            287
;  :quant-instantiations    133
;  :rlimit-count            233855)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Full_adder_m.Main_process_state[i] } 0 <= i && i < |diz.Full_adder_m.Main_process_state| ==> diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|)
(declare-const i@156@04 Int)
(push) ; 9
; [eval] 0 <= i && i < |diz.Full_adder_m.Main_process_state| ==> diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Full_adder_m.Main_process_state|
; [eval] 0 <= i
(push) ; 10
; [then-branch: 43 | 0 <= i@156@04 | live]
; [else-branch: 43 | !(0 <= i@156@04) | live]
(push) ; 11
; [then-branch: 43 | 0 <= i@156@04]
(assert (<= 0 i@156@04))
; [eval] i < |diz.Full_adder_m.Main_process_state|
; [eval] |diz.Full_adder_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      354
;  :arith-assert-upper      256
;  :arith-conflicts         59
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         69
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2751
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              483
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            234345)
(pop) ; 11
(push) ; 11
; [else-branch: 43 | !(0 <= i@156@04)]
(assert (not (<= 0 i@156@04)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
; [then-branch: 44 | i@156@04 < |First:(Second:(Second:(Second:($t@153@04))))| && 0 <= i@156@04 | live]
; [else-branch: 44 | !(i@156@04 < |First:(Second:(Second:(Second:($t@153@04))))| && 0 <= i@156@04) | live]
(push) ; 11
; [then-branch: 44 | i@156@04 < |First:(Second:(Second:(Second:($t@153@04))))| && 0 <= i@156@04]
(assert (and
  (<
    i@156@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))
  (<= 0 i@156@04)))
; [eval] diz.Full_adder_m.Main_process_state[i] == -1 || 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] diz.Full_adder_m.Main_process_state[i] == -1
; [eval] diz.Full_adder_m.Main_process_state[i]
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      356
;  :arith-assert-upper      257
;  :arith-conflicts         60
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         70
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2754
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              484
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            234552)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i@156@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      356
;  :arith-assert-upper      257
;  :arith-conflicts         60
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         70
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2754
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              485
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            234561)
; [eval] -1
(push) ; 12
; [then-branch: 45 | First:(Second:(Second:(Second:($t@153@04))))[i@156@04] == -1 | live]
; [else-branch: 45 | First:(Second:(Second:(Second:($t@153@04))))[i@156@04] != -1 | live]
(push) ; 13
; [then-branch: 45 | First:(Second:(Second:(Second:($t@153@04))))[i@156@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
    i@156@04)
  (- 0 1)))
(pop) ; 13
(push) ; 13
; [else-branch: 45 | First:(Second:(Second:(Second:($t@153@04))))[i@156@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
      i@156@04)
    (- 0 1))))
; [eval] 0 <= diz.Full_adder_m.Main_process_state[i] && diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] 0 <= diz.Full_adder_m.Main_process_state[i]
; [eval] diz.Full_adder_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      357
;  :arith-assert-upper      257
;  :arith-conflicts         61
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         71
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2756
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              486
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            234825)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i@156@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          29
;  :arith-assert-diseq      106
;  :arith-assert-lower      357
;  :arith-assert-upper      257
;  :arith-conflicts         61
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         71
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2756
;  :mk-clause               429
;  :num-allocs              5374026
;  :num-checks              487
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            234834)
(push) ; 14
; [then-branch: 46 | 0 <= First:(Second:(Second:(Second:($t@153@04))))[i@156@04] | live]
; [else-branch: 46 | !(0 <= First:(Second:(Second:(Second:($t@153@04))))[i@156@04]) | live]
(push) ; 15
; [then-branch: 46 | 0 <= First:(Second:(Second:(Second:($t@153@04))))[i@156@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
    i@156@04)))
; [eval] diz.Full_adder_m.Main_process_state[i] < |diz.Full_adder_m.Main_event_state|
; [eval] diz.Full_adder_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          29
;  :arith-assert-diseq      107
;  :arith-assert-lower      361
;  :arith-assert-upper      257
;  :arith-conflicts         62
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         72
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2760
;  :mk-clause               430
;  :num-allocs              5374026
;  :num-checks              488
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            235046)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@156@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          29
;  :arith-assert-diseq      107
;  :arith-assert-lower      361
;  :arith-assert-upper      257
;  :arith-conflicts         62
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         72
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2760
;  :mk-clause               430
;  :num-allocs              5374026
;  :num-checks              489
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            235055)
; [eval] |diz.Full_adder_m.Main_event_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5705
;  :arith-add-rows          29
;  :arith-assert-diseq      107
;  :arith-assert-lower      362
;  :arith-assert-upper      257
;  :arith-conflicts         63
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         73
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              350
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2761
;  :mk-clause               430
;  :num-allocs              5374026
;  :num-checks              490
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            235153)
(pop) ; 15
(push) ; 15
; [else-branch: 46 | !(0 <= First:(Second:(Second:(Second:($t@153@04))))[i@156@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
      i@156@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 44 | !(i@156@04 < |First:(Second:(Second:(Second:($t@153@04))))| && 0 <= i@156@04)]
(assert (not
  (and
    (<
      i@156@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))
    (<= 0 i@156@04))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@156@04 Int)) (!
  (implies
    (and
      (<
        i@156@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))
      (<= 0 i@156@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
          i@156@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
            i@156@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
            i@156@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
    i@156@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5710
;  :arith-add-rows          29
;  :arith-assert-diseq      107
;  :arith-assert-lower      363
;  :arith-assert-upper      257
;  :arith-conflicts         64
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         74
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    337
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2764
;  :mk-clause               430
;  :num-allocs              5374026
;  :num-checks              491
;  :propagations            287
;  :quant-instantiations    135
;  :rlimit-count            235828)
(declare-const $k@157@04 $Perm)
(assert ($Perm.isReadVar $k@157@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@157@04 $Perm.No) (< $Perm.No $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5710
;  :arith-add-rows          29
;  :arith-assert-diseq      108
;  :arith-assert-lower      365
;  :arith-assert-upper      258
;  :arith-conflicts         64
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         74
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    337
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2768
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              492
;  :propagations            288
;  :quant-instantiations    135
;  :rlimit-count            236027)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5710
;  :arith-add-rows          29
;  :arith-assert-diseq      108
;  :arith-assert-lower      365
;  :arith-assert-upper      258
;  :arith-conflicts         64
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         74
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    337
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2768
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              493
;  :propagations            288
;  :quant-instantiations    135
;  :rlimit-count            236038)
(declare-const $t@158@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@126@04 $k@146@04) $k@151@04))
    (=
      $t@158@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
  (implies
    (< $Perm.No $k@157@04)
    (=
      $t@158@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))
(assert (<= $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04)))
(assert (<= (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder != null
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5720
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      367
;  :arith-assert-upper      259
;  :arith-conflicts         65
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         75
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2776
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              494
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            236660)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5720
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      367
;  :arith-assert-upper      259
;  :arith-conflicts         65
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         75
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2776
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              495
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            236671)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5720
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      367
;  :arith-assert-upper      260
;  :arith-conflicts         66
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         76
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2777
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              496
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            236765)
(assert (not (= $t@158@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5726
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      368
;  :arith-assert-upper      260
;  :arith-conflicts         67
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         77
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2780
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              497
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            237107)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5726
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      368
;  :arith-assert-upper      260
;  :arith-conflicts         67
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         77
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2780
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              498
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            237118)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5726
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      368
;  :arith-assert-upper      261
;  :arith-conflicts         68
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         78
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2781
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              499
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            237212)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5731
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      369
;  :arith-assert-upper      261
;  :arith-conflicts         69
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         79
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2783
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              500
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            237519)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5731
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      369
;  :arith-assert-upper      261
;  :arith-conflicts         69
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         79
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2783
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              501
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            237530)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5731
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      369
;  :arith-assert-upper      262
;  :arith-conflicts         70
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         80
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    340
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2784
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              502
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            237624)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5736
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      370
;  :arith-assert-upper      262
;  :arith-conflicts         71
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         81
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2786
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              503
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            237941)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5736
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      370
;  :arith-assert-upper      262
;  :arith-conflicts         71
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         81
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2786
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              504
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            237952)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5736
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      370
;  :arith-assert-upper      263
;  :arith-conflicts         72
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         82
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2787
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              505
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            238046)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5741
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      371
;  :arith-assert-upper      263
;  :arith-conflicts         73
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         83
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2789
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              506
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            238373)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5741
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      371
;  :arith-assert-upper      263
;  :arith-conflicts         73
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         83
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2789
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              507
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            238384)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5741
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      371
;  :arith-assert-upper      264
;  :arith-conflicts         74
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         84
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2790
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              508
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            238478)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5746
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      372
;  :arith-assert-upper      264
;  :arith-conflicts         75
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         85
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    343
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2792
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              509
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            238815)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5746
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      372
;  :arith-assert-upper      264
;  :arith-conflicts         75
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         85
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    343
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2792
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              510
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            238826)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5746
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      372
;  :arith-assert-upper      265
;  :arith-conflicts         76
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         86
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    343
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2793
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              511
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            238920)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5751
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      373
;  :arith-assert-upper      265
;  :arith-conflicts         77
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         87
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2795
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              512
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            239267)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5751
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      373
;  :arith-assert-upper      265
;  :arith-conflicts         77
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         87
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2795
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              513
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            239278)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5751
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      373
;  :arith-assert-upper      266
;  :arith-conflicts         78
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         88
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    344
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2796
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              514
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            239372)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5756
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      374
;  :arith-assert-upper      266
;  :arith-conflicts         79
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         89
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2798
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              515
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            239729)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5756
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      374
;  :arith-assert-upper      266
;  :arith-conflicts         79
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         89
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2798
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              516
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            239740)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5756
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      374
;  :arith-assert-upper      267
;  :arith-conflicts         80
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         90
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2799
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              517
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            239834)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5761
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      375
;  :arith-assert-upper      267
;  :arith-conflicts         81
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         91
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2801
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              518
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            240201)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5761
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      375
;  :arith-assert-upper      267
;  :arith-conflicts         81
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         91
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2801
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              519
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            240212)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5761
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      375
;  :arith-assert-upper      268
;  :arith-conflicts         82
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         92
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    346
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2802
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              520
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            240306)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5766
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      376
;  :arith-assert-upper      268
;  :arith-conflicts         83
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         93
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    347
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2804
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              521
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            240683)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5766
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      376
;  :arith-assert-upper      268
;  :arith-conflicts         83
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         93
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    347
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2804
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              522
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            240694)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5766
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      376
;  :arith-assert-upper      269
;  :arith-conflicts         84
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         94
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    347
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2805
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              523
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            240788)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5771
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      377
;  :arith-assert-upper      269
;  :arith-conflicts         85
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         95
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2807
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              524
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            241175)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5771
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      377
;  :arith-assert-upper      269
;  :arith-conflicts         85
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         95
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2807
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              525
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            241186)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5771
;  :arith-add-rows          30
;  :arith-assert-diseq      108
;  :arith-assert-lower      377
;  :arith-assert-upper      270
;  :arith-conflicts         86
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         96
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2808
;  :mk-clause               432
;  :num-allocs              5374026
;  :num-checks              526
;  :propagations            288
;  :quant-instantiations    136
;  :rlimit-count            241280)
(declare-const $k@159@04 $Perm)
(assert ($Perm.isReadVar $k@159@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@159@04 $Perm.No) (< $Perm.No $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5771
;  :arith-add-rows          30
;  :arith-assert-diseq      109
;  :arith-assert-lower      379
;  :arith-assert-upper      271
;  :arith-conflicts         86
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         96
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2812
;  :mk-clause               434
;  :num-allocs              5374026
;  :num-checks              527
;  :propagations            289
;  :quant-instantiations    136
;  :rlimit-count            241478)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  $t@158@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5771
;  :arith-add-rows          30
;  :arith-assert-diseq      109
;  :arith-assert-lower      379
;  :arith-assert-upper      271
;  :arith-conflicts         86
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         96
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2812
;  :mk-clause               434
;  :num-allocs              5374026
;  :num-checks              528
;  :propagations            289
;  :quant-instantiations    136
;  :rlimit-count            241489)
(declare-const $t@160@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04))
    (= $t@160@04 $t@155@04))
  (implies
    (< $Perm.No $k@159@04)
    (=
      $t@160@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04)))
(assert (<=
  (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder.Full_adder_m == diz.Full_adder_m
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5779
;  :arith-add-rows          33
;  :arith-assert-diseq      109
;  :arith-assert-lower      381
;  :arith-assert-upper      272
;  :arith-conflicts         87
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         97
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2821
;  :mk-clause               435
;  :num-allocs              5374026
;  :num-checks              529
;  :propagations            289
;  :quant-instantiations    137
;  :rlimit-count            242337)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5780
;  :arith-add-rows          34
;  :arith-assert-diseq      109
;  :arith-assert-lower      382
;  :arith-assert-upper      272
;  :arith-conflicts         88
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         98
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2822
;  :mk-clause               435
;  :num-allocs              5374026
;  :num-checks              530
;  :propagations            290
;  :quant-instantiations    137
;  :rlimit-count            242427)
(push) ; 9
(assert (not (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5780
;  :arith-add-rows          34
;  :arith-assert-diseq      109
;  :arith-assert-lower      382
;  :arith-assert-upper      273
;  :arith-conflicts         89
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         99
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2823
;  :mk-clause               435
;  :num-allocs              5374026
;  :num-checks              531
;  :propagations            290
;  :quant-instantiations    137
;  :rlimit-count            242521)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  $t@158@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5780
;  :arith-add-rows          34
;  :arith-assert-diseq      109
;  :arith-assert-lower      382
;  :arith-assert-upper      273
;  :arith-conflicts         89
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         99
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2823
;  :mk-clause               435
;  :num-allocs              5374026
;  :num-checks              532
;  :propagations            290
;  :quant-instantiations    137
;  :rlimit-count            242532)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5780
;  :arith-add-rows          35
;  :arith-assert-diseq      109
;  :arith-assert-lower      383
;  :arith-assert-upper      273
;  :arith-conflicts         90
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         100
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2824
;  :mk-clause               435
;  :num-allocs              5374026
;  :num-checks              533
;  :propagations            290
;  :quant-instantiations    137
;  :rlimit-count            242661)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5780
;  :arith-add-rows          35
;  :arith-assert-diseq      109
;  :arith-assert-lower      384
;  :arith-assert-upper      273
;  :arith-conflicts         91
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         101
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2825
;  :mk-clause               435
;  :num-allocs              5374026
;  :num-checks              534
;  :propagations            290
;  :quant-instantiations    137
;  :rlimit-count            242772)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5785
;  :arith-add-rows          35
;  :arith-assert-diseq      109
;  :arith-assert-lower      385
;  :arith-assert-upper      273
;  :arith-conflicts         92
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         102
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2827
;  :mk-clause               435
;  :num-allocs              5374026
;  :num-checks              535
;  :propagations            290
;  :quant-instantiations    137
;  :rlimit-count            243188)
(declare-const $k@161@04 $Perm)
(assert ($Perm.isReadVar $k@161@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@161@04 $Perm.No) (< $Perm.No $k@161@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5785
;  :arith-add-rows          35
;  :arith-assert-diseq      110
;  :arith-assert-lower      387
;  :arith-assert-upper      274
;  :arith-conflicts         92
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         102
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2831
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              536
;  :propagations            291
;  :quant-instantiations    137
;  :rlimit-count            243387)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5786
;  :arith-add-rows          36
;  :arith-assert-diseq      110
;  :arith-assert-lower      388
;  :arith-assert-upper      274
;  :arith-conflicts         93
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         103
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2832
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              537
;  :propagations            292
;  :quant-instantiations    137
;  :rlimit-count            243477)
(declare-const $t@162@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@128@04 $k@148@04))
    (=
      $t@162@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@161@04)
    (=
      $t@162@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@128@04 $k@148@04) $k@161@04)))
(assert (<= (+ (- $k@128@04 $k@148@04) $k@161@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@128@04 $k@148@04) $k@161@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder_prc != null
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5796
;  :arith-add-rows          38
;  :arith-assert-diseq      110
;  :arith-assert-lower      390
;  :arith-assert-upper      275
;  :arith-conflicts         94
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         104
;  :arith-pivots            89
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2840
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              538
;  :propagations            292
;  :quant-instantiations    138
;  :rlimit-count            244468)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5797
;  :arith-add-rows          39
;  :arith-assert-diseq      110
;  :arith-assert-lower      391
;  :arith-assert-upper      275
;  :arith-conflicts         95
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         105
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2841
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              539
;  :propagations            293
;  :quant-instantiations    138
;  :rlimit-count            244558)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@128@04 $k@148@04) $k@161@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5797
;  :arith-add-rows          39
;  :arith-assert-diseq      110
;  :arith-assert-lower      391
;  :arith-assert-upper      276
;  :arith-conflicts         96
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         106
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2842
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              540
;  :propagations            293
;  :quant-instantiations    138
;  :rlimit-count            244636)
(assert (not (= $t@162@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5803
;  :arith-add-rows          40
;  :arith-assert-diseq      110
;  :arith-assert-lower      392
;  :arith-assert-upper      276
;  :arith-conflicts         97
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         107
;  :arith-pivots            91
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2845
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              541
;  :propagations            293
;  :quant-instantiations    138
;  :rlimit-count            245141)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5804
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      393
;  :arith-assert-upper      276
;  :arith-conflicts         98
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         108
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2846
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              542
;  :propagations            294
;  :quant-instantiations    138
;  :rlimit-count            245231)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@128@04 $k@148@04) $k@161@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5804
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      393
;  :arith-assert-upper      277
;  :arith-conflicts         99
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         109
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2847
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              543
;  :propagations            294
;  :quant-instantiations    138
;  :rlimit-count            245309)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5804
;  :arith-add-rows          41
;  :arith-assert-diseq      110
;  :arith-assert-lower      393
;  :arith-assert-upper      277
;  :arith-conflicts         99
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         109
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2847
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              544
;  :propagations            294
;  :quant-instantiations    138
;  :rlimit-count            245322)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5809
;  :arith-add-rows          42
;  :arith-assert-diseq      110
;  :arith-assert-lower      394
;  :arith-assert-upper      277
;  :arith-conflicts         100
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         110
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    353
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2849
;  :mk-clause               437
;  :num-allocs              5374026
;  :num-checks              545
;  :propagations            294
;  :quant-instantiations    138
;  :rlimit-count            245792)
(declare-const $k@163@04 $Perm)
(assert ($Perm.isReadVar $k@163@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@163@04 $Perm.No) (< $Perm.No $k@163@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5809
;  :arith-add-rows          42
;  :arith-assert-diseq      111
;  :arith-assert-lower      396
;  :arith-assert-upper      278
;  :arith-conflicts         100
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         110
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    353
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2853
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              546
;  :propagations            295
;  :quant-instantiations    138
;  :rlimit-count            245990)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5810
;  :arith-add-rows          43
;  :arith-assert-diseq      111
;  :arith-assert-lower      397
;  :arith-assert-upper      278
;  :arith-conflicts         101
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         111
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    353
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2854
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              547
;  :propagations            296
;  :quant-instantiations    138
;  :rlimit-count            246080)
(declare-const $t@164@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@129@04 $k@149@04))
    (=
      $t@164@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@163@04)
    (=
      $t@164@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@129@04 $k@149@04) $k@163@04)))
(assert (<= (+ (- $k@129@04 $k@149@04) $k@163@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@129@04 $k@149@04) $k@163@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder_half_adder1 != null
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5820
;  :arith-add-rows          45
;  :arith-assert-diseq      111
;  :arith-assert-lower      399
;  :arith-assert-upper      279
;  :arith-conflicts         102
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         112
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2862
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              548
;  :propagations            296
;  :quant-instantiations    139
;  :rlimit-count            247133)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5821
;  :arith-add-rows          46
;  :arith-assert-diseq      111
;  :arith-assert-lower      400
;  :arith-assert-upper      279
;  :arith-conflicts         103
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         113
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2863
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              549
;  :propagations            297
;  :quant-instantiations    139
;  :rlimit-count            247223)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@129@04 $k@149@04) $k@163@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5821
;  :arith-add-rows          46
;  :arith-assert-diseq      111
;  :arith-assert-lower      400
;  :arith-assert-upper      280
;  :arith-conflicts         104
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         114
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2864
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              550
;  :propagations            297
;  :quant-instantiations    139
;  :rlimit-count            247307)
(assert (not (= $t@164@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5827
;  :arith-add-rows          47
;  :arith-assert-diseq      111
;  :arith-assert-lower      401
;  :arith-assert-upper      280
;  :arith-conflicts         105
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         115
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2867
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              551
;  :propagations            297
;  :quant-instantiations    139
;  :rlimit-count            247842)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5828
;  :arith-add-rows          48
;  :arith-assert-diseq      111
;  :arith-assert-lower      402
;  :arith-assert-upper      280
;  :arith-conflicts         106
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         116
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2868
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              552
;  :propagations            298
;  :quant-instantiations    139
;  :rlimit-count            247932)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@129@04 $k@149@04) $k@163@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5828
;  :arith-add-rows          48
;  :arith-assert-diseq      111
;  :arith-assert-lower      402
;  :arith-assert-upper      281
;  :arith-conflicts         107
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         117
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2869
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              553
;  :propagations            298
;  :quant-instantiations    139
;  :rlimit-count            248012)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5828
;  :arith-add-rows          48
;  :arith-assert-diseq      111
;  :arith-assert-lower      402
;  :arith-assert-upper      281
;  :arith-conflicts         107
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         117
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2869
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              554
;  :propagations            298
;  :quant-instantiations    139
;  :rlimit-count            248025)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5833
;  :arith-add-rows          49
;  :arith-assert-diseq      111
;  :arith-assert-lower      403
;  :arith-assert-upper      281
;  :arith-conflicts         108
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         118
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2871
;  :mk-clause               439
;  :num-allocs              5374026
;  :num-checks              555
;  :propagations            298
;  :quant-instantiations    139
;  :rlimit-count            248525)
(declare-const $k@165@04 $Perm)
(assert ($Perm.isReadVar $k@165@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@165@04 $Perm.No) (< $Perm.No $k@165@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5833
;  :arith-add-rows          49
;  :arith-assert-diseq      112
;  :arith-assert-lower      405
;  :arith-assert-upper      282
;  :arith-conflicts         108
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         118
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2875
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              556
;  :propagations            299
;  :quant-instantiations    139
;  :rlimit-count            248724)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5834
;  :arith-add-rows          50
;  :arith-assert-diseq      112
;  :arith-assert-lower      406
;  :arith-assert-upper      282
;  :arith-conflicts         109
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         119
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2876
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              557
;  :propagations            300
;  :quant-instantiations    139
;  :rlimit-count            248814)
(declare-const $t@166@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@130@04 $k@150@04))
    (=
      $t@166@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@165@04)
    (=
      $t@166@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@130@04 $k@150@04) $k@165@04)))
(assert (<= (+ (- $k@130@04 $k@150@04) $k@165@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@130@04 $k@150@04) $k@165@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder_half_adder2 != null
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5844
;  :arith-add-rows          52
;  :arith-assert-diseq      112
;  :arith-assert-lower      408
;  :arith-assert-upper      283
;  :arith-conflicts         110
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         120
;  :arith-pivots            102
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2884
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              558
;  :propagations            300
;  :quant-instantiations    140
;  :rlimit-count            249643)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5845
;  :arith-add-rows          53
;  :arith-assert-diseq      112
;  :arith-assert-lower      409
;  :arith-assert-upper      283
;  :arith-conflicts         111
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         121
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2885
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              559
;  :propagations            301
;  :quant-instantiations    140
;  :rlimit-count            249733)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@130@04 $k@150@04) $k@165@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5845
;  :arith-add-rows          53
;  :arith-assert-diseq      112
;  :arith-assert-lower      409
;  :arith-assert-upper      284
;  :arith-conflicts         112
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         122
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2886
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              560
;  :propagations            301
;  :quant-instantiations    140
;  :rlimit-count            249811)
(assert (not (= $t@166@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5850
;  :arith-add-rows          54
;  :arith-assert-diseq      112
;  :arith-assert-lower      410
;  :arith-assert-upper      284
;  :arith-conflicts         113
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         123
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2888
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              561
;  :propagations            301
;  :quant-instantiations    140
;  :rlimit-count            250347)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5851
;  :arith-add-rows          55
;  :arith-assert-diseq      112
;  :arith-assert-lower      411
;  :arith-assert-upper      284
;  :arith-conflicts         114
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         124
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2889
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              562
;  :propagations            302
;  :quant-instantiations    140
;  :rlimit-count            250437)
(push) ; 9
(assert (not (< $Perm.No (+ (- $k@130@04 $k@150@04) $k@165@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5851
;  :arith-add-rows          55
;  :arith-assert-diseq      112
;  :arith-assert-lower      411
;  :arith-assert-upper      285
;  :arith-conflicts         115
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         125
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2890
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              563
;  :propagations            302
;  :quant-instantiations    140
;  :rlimit-count            250515)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5851
;  :arith-add-rows          55
;  :arith-assert-diseq      112
;  :arith-assert-lower      411
;  :arith-assert-upper      285
;  :arith-conflicts         115
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         125
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2890
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              564
;  :propagations            302
;  :quant-instantiations    140
;  :rlimit-count            250528)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
  $t@166@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5851
;  :arith-add-rows          55
;  :arith-assert-diseq      112
;  :arith-assert-lower      411
;  :arith-assert-upper      285
;  :arith-conflicts         115
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         125
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2890
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              565
;  :propagations            302
;  :quant-instantiations    140
;  :rlimit-count            250539)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5859
;  :arith-add-rows          56
;  :arith-assert-diseq      112
;  :arith-assert-lower      412
;  :arith-assert-upper      285
;  :arith-conflicts         116
;  :arith-eq-adapter        155
;  :arith-fixed-eqs         126
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2894
;  :mk-clause               441
;  :num-allocs              5374026
;  :num-checks              566
;  :propagations            302
;  :quant-instantiations    141
;  :rlimit-count            251146)
(declare-const $k@167@04 $Perm)
(assert ($Perm.isReadVar $k@167@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 9
(assert (not (or (= $k@167@04 $Perm.No) (< $Perm.No $k@167@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5859
;  :arith-add-rows          56
;  :arith-assert-diseq      113
;  :arith-assert-lower      414
;  :arith-assert-upper      286
;  :arith-conflicts         116
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         126
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2898
;  :mk-clause               443
;  :num-allocs              5374026
;  :num-checks              567
;  :propagations            303
;  :quant-instantiations    141
;  :rlimit-count            251344)
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5860
;  :arith-add-rows          57
;  :arith-assert-diseq      113
;  :arith-assert-lower      415
;  :arith-assert-upper      286
;  :arith-conflicts         117
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         127
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2899
;  :mk-clause               443
;  :num-allocs              5374026
;  :num-checks              568
;  :propagations            304
;  :quant-instantiations    141
;  :rlimit-count            251434)
(declare-const $t@168@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04))
    (= $t@168@04 $t@158@04))
  (implies
    (< $Perm.No $k@167@04)
    (=
      $t@168@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04)))
(assert (<=
  (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Full_adder_m.Main_adder == diz
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5863
;  :arith-add-rows          59
;  :arith-assert-diseq      113
;  :arith-assert-lower      417
;  :arith-assert-upper      287
;  :arith-conflicts         118
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         128
;  :arith-pivots            109
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2907
;  :mk-clause               444
;  :num-allocs              5374026
;  :num-checks              569
;  :propagations            304
;  :quant-instantiations    142
;  :rlimit-count            252243)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $t@160@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      287
;  :arith-conflicts         119
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         129
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2908
;  :mk-clause               444
;  :num-allocs              5374026
;  :num-checks              570
;  :propagations            305
;  :quant-instantiations    142
;  :rlimit-count            252333)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5864
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      288
;  :arith-conflicts         120
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         130
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1411
;  :datatype-occurs-check   423
;  :datatype-splits         1192
;  :decisions               1329
;  :del-clause              351
;  :final-checks            90
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             2909
;  :mk-clause               444
;  :num-allocs              5374026
;  :num-checks              571
;  :propagations            305
;  :quant-instantiations    142
;  :rlimit-count            252433)
(assert (=
  $t@168@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_35__45.Full_adder_sum_next := __flatten_37__47
(set-option :timeout 10)
(push) ; 9
(assert (not (= $t@158@04 __flatten_35__45@138@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6235
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      288
;  :arith-conflicts         120
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         130
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2987
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              573
;  :propagations            309
;  :quant-instantiations    142
;  :rlimit-count            254880)
(assert (not (= __flatten_35__45@138@04 $Ref.null)))
; [exec]
; __flatten_45__54 := diz.Prc_half_adder_2_m
(declare-const __flatten_45__54@169@04 $Ref)
(assert (= __flatten_45__54@169@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_44__53 := __flatten_45__54.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) __flatten_45__54@169@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6236
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      288
;  :arith-conflicts         120
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         130
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2988
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              574
;  :propagations            309
;  :quant-instantiations    142
;  :rlimit-count            254931)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6236
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      289
;  :arith-conflicts         121
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         131
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2989
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              575
;  :propagations            309
;  :quant-instantiations    142
;  :rlimit-count            255031)
; [exec]
; __flatten_48__57 := diz.Prc_half_adder_2_m
(declare-const __flatten_48__57@170@04 $Ref)
(assert (= __flatten_48__57@170@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_47__56 := __flatten_48__57.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) __flatten_48__57@170@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6237
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      289
;  :arith-conflicts         121
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         131
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2990
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              576
;  :propagations            309
;  :quant-instantiations    142
;  :rlimit-count            255079)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6237
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      290
;  :arith-conflicts         122
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         132
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2991
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              577
;  :propagations            309
;  :quant-instantiations    142
;  :rlimit-count            255179)
; [exec]
; __flatten_50__59 := diz.Prc_half_adder_2_m
(declare-const __flatten_50__59@171@04 $Ref)
(assert (= __flatten_50__59@171@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_49__58 := __flatten_50__59.Main_adder
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) __flatten_50__59@171@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6238
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      290
;  :arith-conflicts         122
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         132
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2992
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              578
;  :propagations            309
;  :quant-instantiations    142
;  :rlimit-count            255227)
(push) ; 9
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6238
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         133
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2993
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              579
;  :propagations            309
;  :quant-instantiations    142
;  :rlimit-count            255327)
; [exec]
; __flatten_46__55 := __flatten_47__56.Full_adder_s1 && __flatten_49__58.Full_adder_carry_in
; [eval] __flatten_47__56.Full_adder_s1 && __flatten_49__58.Full_adder_carry_in
(push) ; 9
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6238
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         133
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2993
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              580
;  :propagations            309
;  :quant-instantiations    142
;  :rlimit-count            255338)
(push) ; 9
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@153@04)))))))))))))))))) | live]
; [else-branch: 47 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@153@04))))))))))))))))))) | live]
(push) ; 10
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@153@04))))))))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))
(push) ; 11
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6241
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         133
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2995
;  :mk-clause               445
;  :num-allocs              5814945
;  :num-checks              581
;  :propagations            309
;  :quant-instantiations    143
;  :rlimit-count            255607)
(pop) ; 10
(push) ; 10
; [else-branch: 47 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@153@04)))))))))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const __flatten_46__55@172@04 Bool)
(assert (=
  __flatten_46__55@172@04
  (and
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04))))))))))))))))))))))
; [exec]
; __flatten_44__53.Full_adder_c2 := __flatten_46__55
(push) ; 9
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6241
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         133
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             2999
;  :mk-clause               450
;  :num-allocs              5814945
;  :num-checks              582
;  :propagations            309
;  :quant-instantiations    143
;  :rlimit-count            255965)
(assert (not (= $t@168@04 $Ref.null)))
; [exec]
; __flatten_51__60 := diz.Prc_half_adder_2_m
(declare-const __flatten_51__60@173@04 $Ref)
(assert (= __flatten_51__60@173@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_53__62 := diz.Prc_half_adder_2_m
(declare-const __flatten_53__62@174@04 $Ref)
(assert (= __flatten_53__62@174@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_52__61 := __flatten_53__62.Main_process_state[2 := 5]
; [eval] __flatten_53__62.Main_process_state[2 := 5]
(push) ; 9
(assert (not (= $t@155@04 __flatten_53__62@174@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6243
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         133
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3001
;  :mk-clause               450
;  :num-allocs              5814945
;  :num-checks              583
;  :propagations            309
;  :quant-instantiations    143
;  :rlimit-count            256062)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6243
;  :arith-add-rows          60
;  :arith-assert-diseq      113
;  :arith-assert-lower      418
;  :arith-assert-upper      291
;  :arith-conflicts         123
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         133
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.04
;  :memory                  5.04
;  :mk-bool-var             3001
;  :mk-clause               450
;  :num-allocs              5814945
;  :num-checks              584
;  :propagations            309
;  :quant-instantiations    143
;  :rlimit-count            256077)
(declare-const __flatten_52__61@175@04 Seq<Int>)
(assert (Seq_equal
  __flatten_52__61@175@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))
    2
    5)))
; [exec]
; __flatten_51__60.Main_process_state := __flatten_52__61
(set-option :timeout 10)
(push) ; 9
(assert (not (= $t@155@04 __flatten_51__60@173@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6253
;  :arith-add-rows          63
;  :arith-assert-diseq      114
;  :arith-assert-lower      422
;  :arith-assert-upper      293
;  :arith-conflicts         123
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         135
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3024
;  :mk-clause               469
;  :num-allocs              6260179
;  :num-checks              585
;  :propagations            318
;  :quant-instantiations    148
;  :rlimit-count            256558)
(assert (not (= __flatten_51__60@173@04 $Ref.null)))
; [exec]
; __flatten_54__63 := diz.Prc_half_adder_2_m
(declare-const __flatten_54__63@176@04 $Ref)
(assert (= __flatten_54__63@176@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_56__65 := diz.Prc_half_adder_2_m
(declare-const __flatten_56__65@177@04 $Ref)
(assert (= __flatten_56__65@177@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
; [exec]
; __flatten_55__64 := __flatten_56__65.Main_event_state[5 := 5]
; [eval] __flatten_56__65.Main_event_state[5 := 5]
(push) ; 9
(assert (not (= $t@155@04 __flatten_56__65@177@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6255
;  :arith-add-rows          63
;  :arith-assert-diseq      114
;  :arith-assert-lower      422
;  :arith-assert-upper      293
;  :arith-conflicts         123
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         135
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3026
;  :mk-clause               469
;  :num-allocs              6260179
;  :num-checks              586
;  :propagations            318
;  :quant-instantiations    148
;  :rlimit-count            256655)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6255
;  :arith-add-rows          63
;  :arith-assert-diseq      114
;  :arith-assert-lower      422
;  :arith-assert-upper      293
;  :arith-conflicts         123
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         135
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3026
;  :mk-clause               469
;  :num-allocs              6260179
;  :num-checks              587
;  :propagations            318
;  :quant-instantiations    148
;  :rlimit-count            256670)
(declare-const __flatten_55__64@178@04 Seq<Int>)
(assert (Seq_equal
  __flatten_55__64@178@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@04)))))))
    5
    5)))
; [exec]
; __flatten_54__63.Main_event_state := __flatten_55__64
(set-option :timeout 10)
(push) ; 9
(assert (not (= $t@155@04 __flatten_54__63@176@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6265
;  :arith-add-rows          66
;  :arith-assert-diseq      115
;  :arith-assert-lower      426
;  :arith-assert-upper      295
;  :arith-conflicts         123
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3049
;  :mk-clause               488
;  :num-allocs              6260179
;  :num-checks              588
;  :propagations            327
;  :quant-instantiations    153
;  :rlimit-count            257183)
(assert (not (= __flatten_54__63@176@04 $Ref.null)))
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@179@04 $Snap)
(assert (= $t@179@04 ($Snap.combine ($Snap.first $t@179@04) ($Snap.second $t@179@04))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6270
;  :arith-add-rows          66
;  :arith-assert-diseq      115
;  :arith-assert-lower      426
;  :arith-assert-upper      295
;  :arith-conflicts         123
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3050
;  :mk-clause               488
;  :num-allocs              6260179
;  :num-checks              589
;  :propagations            327
;  :quant-instantiations    153
;  :rlimit-count            257316)
(assert (=
  ($Snap.second $t@179@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@179@04))
    ($Snap.second ($Snap.second $t@179@04)))))
(assert (= ($Snap.first ($Snap.second $t@179@04)) $Snap.unit))
; [eval] diz.Prc_half_adder_2_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@179@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@179@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@179@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
  $Snap.unit))
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
  $Snap.unit))
; [eval] (forall i__67: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__67] } 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__67@180@04 Int)
(push) ; 10
; [eval] 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__67
(push) ; 11
; [then-branch: 48 | 0 <= i__67@180@04 | live]
; [else-branch: 48 | !(0 <= i__67@180@04) | live]
(push) ; 12
; [then-branch: 48 | 0 <= i__67@180@04]
(assert (<= 0 i__67@180@04))
; [eval] i__67 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 48 | !(0 <= i__67@180@04)]
(assert (not (<= 0 i__67@180@04)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 49 | i__67@180@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i__67@180@04 | live]
; [else-branch: 49 | !(i__67@180@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i__67@180@04) | live]
(push) ; 12
; [then-branch: 49 | i__67@180@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i__67@180@04]
(assert (and
  (<
    i__67@180@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
  (<= 0 i__67@180@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 13
(assert (not (>= i__67@180@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6314
;  :arith-add-rows          66
;  :arith-assert-diseq      115
;  :arith-assert-lower      431
;  :arith-assert-upper      298
;  :arith-conflicts         123
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3075
;  :mk-clause               488
;  :num-allocs              6260179
;  :num-checks              590
;  :propagations            327
;  :quant-instantiations    158
;  :rlimit-count            258594)
; [eval] -1
(push) ; 13
; [then-branch: 50 | First:(Second:(Second:(Second:($t@179@04))))[i__67@180@04] == -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@179@04))))[i__67@180@04] != -1 | live]
(push) ; 14
; [then-branch: 50 | First:(Second:(Second:(Second:($t@179@04))))[i__67@180@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i__67@180@04)
  (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 50 | First:(Second:(Second:(Second:($t@179@04))))[i__67@180@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      i__67@180@04)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 15
(assert (not (>= i__67@180@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6314
;  :arith-add-rows          66
;  :arith-assert-diseq      115
;  :arith-assert-lower      431
;  :arith-assert-upper      298
;  :arith-conflicts         123
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3076
;  :mk-clause               488
;  :num-allocs              6260179
;  :num-checks              591
;  :propagations            327
;  :quant-instantiations    158
;  :rlimit-count            258769)
(push) ; 15
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@179@04))))[i__67@180@04] | live]
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@179@04))))[i__67@180@04]) | live]
(push) ; 16
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@179@04))))[i__67@180@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i__67@180@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 17
(assert (not (>= i__67@180@04 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6314
;  :arith-add-rows          66
;  :arith-assert-diseq      116
;  :arith-assert-lower      434
;  :arith-assert-upper      298
;  :arith-conflicts         123
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              380
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3079
;  :mk-clause               489
;  :num-allocs              6260179
;  :num-checks              592
;  :propagations            327
;  :quant-instantiations    158
;  :rlimit-count            258893)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@179@04))))[i__67@180@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      i__67@180@04))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 49 | !(i__67@180@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i__67@180@04)]
(assert (not
  (and
    (<
      i__67@180@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
    (<= 0 i__67@180@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__67@180@04 Int)) (!
  (implies
    (and
      (<
        i__67@180@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
      (<= 0 i__67@180@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          i__67@180@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i__67@180@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i__67@180@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i__67@180@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))
(declare-const $k@181@04 $Perm)
(assert ($Perm.isReadVar $k@181@04 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@181@04 $Perm.No) (< $Perm.No $k@181@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6319
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      299
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    373
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3085
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              593
;  :propagations            328
;  :quant-instantiations    158
;  :rlimit-count            259662)
(assert (<= $Perm.No $k@181@04))
(assert (<= $k@181@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@181@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6325
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    374
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3088
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              594
;  :propagations            328
;  :quant-instantiations    158
;  :rlimit-count            259985)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6331
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    375
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3091
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              595
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            260341)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6336
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    376
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3092
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              596
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            260598)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6341
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3093
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              597
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            260865)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6346
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3094
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              598
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            261142)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6351
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    379
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3095
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              599
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            261429)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6356
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3096
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              600
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            261726)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6361
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3097
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              601
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            262033)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6366
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3098
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              602
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            262350)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6371
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    383
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3099
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              603
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            262677)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6376
;  :arith-add-rows          66
;  :arith-assert-diseq      117
;  :arith-assert-lower      436
;  :arith-assert-upper      300
;  :arith-conflicts         123
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3100
;  :mk-clause               491
;  :num-allocs              6260179
;  :num-checks              604
;  :propagations            328
;  :quant-instantiations    159
;  :rlimit-count            263014)
(declare-const $k@182@04 $Perm)
(assert ($Perm.isReadVar $k@182@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@182@04 $Perm.No) (< $Perm.No $k@182@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6376
;  :arith-add-rows          66
;  :arith-assert-diseq      118
;  :arith-assert-lower      438
;  :arith-assert-upper      301
;  :arith-conflicts         123
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3104
;  :mk-clause               493
;  :num-allocs              6260179
;  :num-checks              605
;  :propagations            329
;  :quant-instantiations    159
;  :rlimit-count            263212)
(assert (<= $Perm.No $k@182@04))
(assert (<= $k@182@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@182@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6382
;  :arith-add-rows          66
;  :arith-assert-diseq      118
;  :arith-assert-lower      438
;  :arith-assert-upper      302
;  :arith-conflicts         123
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3107
;  :mk-clause               493
;  :num-allocs              6260179
;  :num-checks              606
;  :propagations            329
;  :quant-instantiations    159
;  :rlimit-count            263645)
(push) ; 10
(assert (not (< $Perm.No $k@182@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6382
;  :arith-add-rows          66
;  :arith-assert-diseq      118
;  :arith-assert-lower      438
;  :arith-assert-upper      302
;  :arith-conflicts         123
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.18
;  :mk-bool-var             3107
;  :mk-clause               493
;  :num-allocs              6260179
;  :num-checks              607
;  :propagations            329
;  :quant-instantiations    159
;  :rlimit-count            263693)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))
(declare-const $k@183@04 $Perm)
(assert ($Perm.isReadVar $k@183@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@183@04 $Perm.No) (< $Perm.No $k@183@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6390
;  :arith-add-rows          66
;  :arith-assert-diseq      119
;  :arith-assert-lower      440
;  :arith-assert-upper      303
;  :arith-conflicts         123
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3114
;  :mk-clause               495
;  :num-allocs              6487481
;  :num-checks              608
;  :propagations            330
;  :quant-instantiations    160
;  :rlimit-count            264324)
(assert (<= $Perm.No $k@183@04))
(assert (<= $k@183@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@183@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6396
;  :arith-add-rows          66
;  :arith-assert-diseq      119
;  :arith-assert-lower      440
;  :arith-assert-upper      304
;  :arith-conflicts         123
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3117
;  :mk-clause               495
;  :num-allocs              6487481
;  :num-checks              609
;  :propagations            330
;  :quant-instantiations    160
;  :rlimit-count            264777)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6402
;  :arith-add-rows          66
;  :arith-assert-diseq      119
;  :arith-assert-lower      440
;  :arith-assert-upper      304
;  :arith-conflicts         123
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    388
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3120
;  :mk-clause               495
;  :num-allocs              6487481
;  :num-checks              610
;  :propagations            330
;  :quant-instantiations    161
;  :rlimit-count            265261)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6402
;  :arith-add-rows          66
;  :arith-assert-diseq      119
;  :arith-assert-lower      440
;  :arith-assert-upper      304
;  :arith-conflicts         123
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    388
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3120
;  :mk-clause               495
;  :num-allocs              6487481
;  :num-checks              611
;  :propagations            330
;  :quant-instantiations    161
;  :rlimit-count            265274)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))
(declare-const $k@184@04 $Perm)
(assert ($Perm.isReadVar $k@184@04 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@184@04 $Perm.No) (< $Perm.No $k@184@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6407
;  :arith-add-rows          66
;  :arith-assert-diseq      120
;  :arith-assert-lower      442
;  :arith-assert-upper      305
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3125
;  :mk-clause               497
;  :num-allocs              6487481
;  :num-checks              612
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            265805)
(assert (<= $Perm.No $k@184@04))
(assert (<= $k@184@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@184@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@184@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6413
;  :arith-add-rows          66
;  :arith-assert-diseq      120
;  :arith-assert-lower      442
;  :arith-assert-upper      306
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    390
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3128
;  :mk-clause               497
;  :num-allocs              6487481
;  :num-checks              613
;  :propagations            331
;  :quant-instantiations    161
;  :rlimit-count            266288)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@184@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6419
;  :arith-add-rows          66
;  :arith-assert-diseq      120
;  :arith-assert-lower      442
;  :arith-assert-upper      306
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    391
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3131
;  :mk-clause               497
;  :num-allocs              6487481
;  :num-checks              614
;  :propagations            331
;  :quant-instantiations    162
;  :rlimit-count            266804)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6419
;  :arith-add-rows          66
;  :arith-assert-diseq      120
;  :arith-assert-lower      442
;  :arith-assert-upper      306
;  :arith-conflicts         123
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    391
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3131
;  :mk-clause               497
;  :num-allocs              6487481
;  :num-checks              615
;  :propagations            331
;  :quant-instantiations    162
;  :rlimit-count            266817)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
(declare-const $k@185@04 $Perm)
(assert ($Perm.isReadVar $k@185@04 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@185@04 $Perm.No) (< $Perm.No $k@185@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6424
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      307
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    392
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3136
;  :mk-clause               499
;  :num-allocs              6487481
;  :num-checks              616
;  :propagations            332
;  :quant-instantiations    162
;  :rlimit-count            267377)
(assert (<= $Perm.No $k@185@04))
(assert (<= $k@185@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@185@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6430
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.33
;  :memory                  5.27
;  :mk-bool-var             3139
;  :mk-clause               499
;  :num-allocs              6487481
;  :num-checks              617
;  :propagations            332
;  :quant-instantiations    162
;  :rlimit-count            267890)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6436
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3142
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              618
;  :propagations            332
;  :quant-instantiations    163
;  :rlimit-count            268436)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6436
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3142
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              619
;  :propagations            332
;  :quant-instantiations    163
;  :rlimit-count            268449)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6442
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3144
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              620
;  :propagations            332
;  :quant-instantiations    163
;  :rlimit-count            268928)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
  diz@17@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6450
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3146
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              621
;  :propagations            332
;  :quant-instantiations    163
;  :rlimit-count            269402)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 10
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[5] != -2
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2]
(push) ; 11
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6462
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3151
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              622
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            269954)
; [eval] -1
(push) ; 11
; [then-branch: 52 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1 | live]
; [else-branch: 52 | First:(Second:(Second:(Second:($t@179@04))))[2] == -1 | live]
(push) ; 12
; [then-branch: 52 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      2)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 52 | First:(Second:(Second:(Second:($t@179@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    2)
  (- 0 1)))
; [eval] diz.Prc_half_adder_2_m.Main_event_state[5] != -2
; [eval] diz.Prc_half_adder_2_m.Main_event_state[5]
(push) ; 13
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6463
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3152
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              623
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            270116)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [eval] !(diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[5] != -2)
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[5] != -2
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2]
(push) ; 11
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6463
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3152
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              624
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            270136)
; [eval] -1
(push) ; 11
; [then-branch: 53 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1 | live]
; [else-branch: 53 | First:(Second:(Second:(Second:($t@179@04))))[2] == -1 | live]
(push) ; 12
; [then-branch: 53 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      2)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 53 | First:(Second:(Second:(Second:($t@179@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    2)
  (- 0 1)))
; [eval] diz.Prc_half_adder_2_m.Main_event_state[5] != -2
; [eval] diz.Prc_half_adder_2_m.Main_event_state[5]
(push) ; 13
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6464
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              381
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3153
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              625
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            270294)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6464
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              391
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3153
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              626
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            270312)
; [eval] diz.Prc_half_adder_2_m != null
(set-option :timeout 10)
(push) ; 10
(assert (not (= $t@155@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6464
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              391
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3153
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              627
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            270323)
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(set-option :timeout 0)
(push) ; 10
(assert (not (= (Seq_length __flatten_52__61@175@04) 3)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6464
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      444
;  :arith-assert-upper      308
;  :arith-conflicts         123
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              391
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3156
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              628
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            270397)
(assert (= (Seq_length __flatten_52__61@175@04) 3))
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_55__64@178@04) 6)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6465
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      445
;  :arith-assert-upper      309
;  :arith-conflicts         123
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              391
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3162
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              629
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            270522)
(assert (= (Seq_length __flatten_55__64@178@04) 6))
; [eval] (forall i__67: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__67] } 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__67@186@04 Int)
(push) ; 10
; [eval] 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__67
(push) ; 11
; [then-branch: 54 | 0 <= i__67@186@04 | live]
; [else-branch: 54 | !(0 <= i__67@186@04) | live]
(push) ; 12
; [then-branch: 54 | 0 <= i__67@186@04]
(assert (<= 0 i__67@186@04))
; [eval] i__67 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 54 | !(0 <= i__67@186@04)]
(assert (not (<= 0 i__67@186@04)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 55 | i__67@186@04 < |__flatten_52__61@175@04| && 0 <= i__67@186@04 | live]
; [else-branch: 55 | !(i__67@186@04 < |__flatten_52__61@175@04| && 0 <= i__67@186@04) | live]
(push) ; 12
; [then-branch: 55 | i__67@186@04 < |__flatten_52__61@175@04| && 0 <= i__67@186@04]
(assert (and (< i__67@186@04 (Seq_length __flatten_52__61@175@04)) (<= 0 i__67@186@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 13
(assert (not (>= i__67@186@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6466
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      447
;  :arith-assert-upper      311
;  :arith-conflicts         123
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              391
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3167
;  :mk-clause               499
;  :num-allocs              6716740
;  :num-checks              630
;  :propagations            332
;  :quant-instantiations    165
;  :rlimit-count            270709)
; [eval] -1
(push) ; 13
; [then-branch: 56 | __flatten_52__61@175@04[i__67@186@04] == -1 | live]
; [else-branch: 56 | __flatten_52__61@175@04[i__67@186@04] != -1 | live]
(push) ; 14
; [then-branch: 56 | __flatten_52__61@175@04[i__67@186@04] == -1]
(assert (= (Seq_index __flatten_52__61@175@04 i__67@186@04) (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 56 | __flatten_52__61@175@04[i__67@186@04] != -1]
(assert (not (= (Seq_index __flatten_52__61@175@04 i__67@186@04) (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 15
(assert (not (>= i__67@186@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6467
;  :arith-add-rows          66
;  :arith-assert-diseq      121
;  :arith-assert-lower      447
;  :arith-assert-upper      312
;  :arith-conflicts         123
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              391
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3175
;  :mk-clause               509
;  :num-allocs              6716740
;  :num-checks              631
;  :propagations            332
;  :quant-instantiations    166
;  :rlimit-count            270877)
(push) ; 15
; [then-branch: 57 | 0 <= __flatten_52__61@175@04[i__67@186@04] | live]
; [else-branch: 57 | !(0 <= __flatten_52__61@175@04[i__67@186@04]) | live]
(push) ; 16
; [then-branch: 57 | 0 <= __flatten_52__61@175@04[i__67@186@04]]
(assert (<= 0 (Seq_index __flatten_52__61@175@04 i__67@186@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 17
(assert (not (>= i__67@186@04 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6467
;  :arith-add-rows          66
;  :arith-assert-diseq      122
;  :arith-assert-lower      450
;  :arith-assert-upper      312
;  :arith-conflicts         123
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         137
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1539
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1453
;  :del-clause              391
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3178
;  :mk-clause               510
;  :num-allocs              6716740
;  :num-checks              632
;  :propagations            332
;  :quant-instantiations    166
;  :rlimit-count            270950)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 57 | !(0 <= __flatten_52__61@175@04[i__67@186@04])]
(assert (not (<= 0 (Seq_index __flatten_52__61@175@04 i__67@186@04))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 55 | !(i__67@186@04 < |__flatten_52__61@175@04| && 0 <= i__67@186@04)]
(assert (not
  (and (< i__67@186@04 (Seq_length __flatten_52__61@175@04)) (<= 0 i__67@186@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((i__67@186@04 Int)) (!
  (implies
    (and
      (< i__67@186@04 (Seq_length __flatten_52__61@175@04))
      (<= 0 i__67@186@04))
    (or
      (= (Seq_index __flatten_52__61@175@04 i__67@186@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_52__61@175@04 i__67@186@04)
          (Seq_length __flatten_55__64@178@04))
        (<= 0 (Seq_index __flatten_52__61@175@04 i__67@186@04)))))
  :pattern ((Seq_index __flatten_52__61@175@04 i__67@186@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6493
;  :arith-add-rows          66
;  :arith-assert-diseq      128
;  :arith-assert-lower      464
;  :arith-assert-upper      324
;  :arith-conflicts         125
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         139
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              449
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3217
;  :mk-clause               557
;  :num-allocs              6716740
;  :num-checks              633
;  :propagations            364
;  :quant-instantiations    170
;  :rlimit-count            271657)
(assert (forall ((i__67@186@04 Int)) (!
  (implies
    (and
      (< i__67@186@04 (Seq_length __flatten_52__61@175@04))
      (<= 0 i__67@186@04))
    (or
      (= (Seq_index __flatten_52__61@175@04 i__67@186@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_52__61@175@04 i__67@186@04)
          (Seq_length __flatten_55__64@178@04))
        (<= 0 (Seq_index __flatten_52__61@175@04 i__67@186@04)))))
  :pattern ((Seq_index __flatten_52__61@175@04 i__67@186@04))
  :qid |prog.l<no position>|)))
(declare-const $k@187@04 $Perm)
(assert ($Perm.isReadVar $k@187@04 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@187@04 $Perm.No) (< $Perm.No $k@187@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6493
;  :arith-add-rows          66
;  :arith-assert-diseq      129
;  :arith-assert-lower      466
;  :arith-assert-upper      325
;  :arith-conflicts         125
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         139
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              449
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3222
;  :mk-clause               559
;  :num-allocs              6716740
;  :num-checks              634
;  :propagations            365
;  :quant-instantiations    170
;  :rlimit-count            272128)
(set-option :timeout 10)
(push) ; 10
(assert (not (not
  (= (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          66
;  :arith-assert-diseq      129
;  :arith-assert-lower      466
;  :arith-assert-upper      326
;  :arith-conflicts         126
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         139
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3224
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              635
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272228)
(assert (< $k@187@04 (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04)))
(assert (<=
  $Perm.No
  (- (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04) $k@187@04)))
(assert (<=
  (- (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04) $k@187@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04)
      $k@187@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      328
;  :arith-conflicts         127
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         140
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3228
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              636
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272537)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      329
;  :arith-conflicts         128
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         141
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3229
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              637
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272638)
(push) ; 10
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      329
;  :arith-conflicts         128
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         141
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3229
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              638
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272649)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      330
;  :arith-conflicts         129
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         142
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3230
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              639
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272750)
(push) ; 10
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      330
;  :arith-conflicts         129
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         142
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3230
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              640
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272761)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      331
;  :arith-conflicts         130
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         143
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3231
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              641
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272862)
(push) ; 10
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      331
;  :arith-conflicts         130
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         143
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3231
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              642
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272873)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      332
;  :arith-conflicts         131
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         144
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3232
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              643
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272974)
(push) ; 10
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      332
;  :arith-conflicts         131
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         144
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3232
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              644
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            272985)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      333
;  :arith-conflicts         132
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         145
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3233
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              645
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273086)
(push) ; 10
(assert (not (= __flatten_35__45@138@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      333
;  :arith-conflicts         132
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         145
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3233
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              646
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273097)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      334
;  :arith-conflicts         133
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         146
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3234
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              647
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273198)
(push) ; 10
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      334
;  :arith-conflicts         133
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         146
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3234
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              648
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273209)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      335
;  :arith-conflicts         134
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         147
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3235
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              649
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273310)
(push) ; 10
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      335
;  :arith-conflicts         134
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         147
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3235
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              650
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273321)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      336
;  :arith-conflicts         135
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         148
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3236
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              651
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273422)
(push) ; 10
(assert (not (= $t@158@04 $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      336
;  :arith-conflicts         135
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         148
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3236
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              652
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273433)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      129
;  :arith-assert-lower      468
;  :arith-assert-upper      337
;  :arith-conflicts         136
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         149
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3237
;  :mk-clause               561
;  :num-allocs              6716740
;  :num-checks              653
;  :propagations            366
;  :quant-instantiations    170
;  :rlimit-count            273534)
(declare-const $k@188@04 $Perm)
(assert ($Perm.isReadVar $k@188@04 $Perm.Write))
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      130
;  :arith-assert-lower      470
;  :arith-assert-upper      339
;  :arith-conflicts         137
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         150
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3242
;  :mk-clause               563
;  :num-allocs              6716740
;  :num-checks              654
;  :propagations            367
;  :quant-instantiations    170
;  :rlimit-count            273784)
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@188@04 $Perm.No) (< $Perm.No $k@188@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      130
;  :arith-assert-lower      470
;  :arith-assert-upper      339
;  :arith-conflicts         137
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         150
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3242
;  :mk-clause               563
;  :num-allocs              6716740
;  :num-checks              655
;  :propagations            367
;  :quant-instantiations    170
;  :rlimit-count            273834)
(set-option :timeout 10)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6494
;  :arith-add-rows          68
;  :arith-assert-diseq      130
;  :arith-assert-lower      470
;  :arith-assert-upper      339
;  :arith-conflicts         137
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         150
;  :arith-pivots            117
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              451
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3242
;  :mk-clause               563
;  :num-allocs              6716740
;  :num-checks              656
;  :propagations            367
;  :quant-instantiations    170
;  :rlimit-count            273845)
(push) ; 10
(assert (not (not
  (= (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6495
;  :arith-add-rows          69
;  :arith-assert-diseq      130
;  :arith-assert-lower      471
;  :arith-assert-upper      339
;  :arith-conflicts         138
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         150
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              453
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3244
;  :mk-clause               565
;  :num-allocs              6716740
;  :num-checks              657
;  :propagations            368
;  :quant-instantiations    170
;  :rlimit-count            273976)
(assert (< $k@188@04 (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04)))
(assert (<=
  $Perm.No
  (- (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04) $k@188@04)))
(assert (<=
  (- (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04) $k@188@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04)
      $k@188@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@126@04 $k@146@04) $k@151@04) $k@157@04) $k@167@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6495
;  :arith-add-rows          71
;  :arith-assert-diseq      130
;  :arith-assert-lower      472
;  :arith-assert-upper      342
;  :arith-conflicts         139
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         151
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              453
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3248
;  :mk-clause               565
;  :num-allocs              6716740
;  :num-checks              658
;  :propagations            368
;  :quant-instantiations    170
;  :rlimit-count            274285)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  $t@168@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6495
;  :arith-add-rows          71
;  :arith-assert-diseq      130
;  :arith-assert-lower      472
;  :arith-assert-upper      342
;  :arith-conflicts         139
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         151
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              453
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3248
;  :mk-clause               565
;  :num-allocs              6716740
;  :num-checks              659
;  :propagations            368
;  :quant-instantiations    170
;  :rlimit-count            274296)
(push) ; 10
(assert (not (< $Perm.No (+ (+ (- (- $k@127@04 $k@144@04) $k@147@04) $k@154@04) $k@159@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6495
;  :arith-add-rows          71
;  :arith-assert-diseq      130
;  :arith-assert-lower      473
;  :arith-assert-upper      342
;  :arith-conflicts         140
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         152
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              453
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3249
;  :mk-clause               565
;  :num-allocs              6716740
;  :num-checks              660
;  :propagations            368
;  :quant-instantiations    170
;  :rlimit-count            274408)
(set-option :timeout 0)
(push) ; 10
(assert (not (= $t@160@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6495
;  :arith-add-rows          72
;  :arith-assert-diseq      130
;  :arith-assert-lower      474
;  :arith-assert-upper      342
;  :arith-conflicts         141
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         153
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              453
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3249
;  :mk-clause               565
;  :num-allocs              6716740
;  :num-checks              661
;  :propagations            369
;  :quant-instantiations    170
;  :rlimit-count            274487)
(assert (= $t@160@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))))
(declare-const $k@189@04 $Perm)
(assert ($Perm.isReadVar $k@189@04 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@189@04 $Perm.No) (< $Perm.No $k@189@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6497
;  :arith-add-rows          72
;  :arith-assert-diseq      131
;  :arith-assert-lower      476
;  :arith-assert-upper      343
;  :arith-conflicts         141
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         153
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              453
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3253
;  :mk-clause               567
;  :num-allocs              6716740
;  :num-checks              662
;  :propagations            370
;  :quant-instantiations    170
;  :rlimit-count            274717)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= (+ (- $k@128@04 $k@148@04) $k@161@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6498
;  :arith-add-rows          72
;  :arith-assert-diseq      131
;  :arith-assert-lower      476
;  :arith-assert-upper      344
;  :arith-conflicts         142
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         153
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              455
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3255
;  :mk-clause               569
;  :num-allocs              6716740
;  :num-checks              663
;  :propagations            371
;  :quant-instantiations    170
;  :rlimit-count            274795)
(assert (< $k@189@04 (+ (- $k@128@04 $k@148@04) $k@161@04)))
(assert (<= $Perm.No (- (+ (- $k@128@04 $k@148@04) $k@161@04) $k@189@04)))
(assert (<= (- (+ (- $k@128@04 $k@148@04) $k@161@04) $k@189@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@128@04 $k@148@04) $k@161@04) $k@189@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@128@04 $k@148@04) $k@161@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6498
;  :arith-add-rows          73
;  :arith-assert-diseq      131
;  :arith-assert-lower      478
;  :arith-assert-upper      346
;  :arith-conflicts         143
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         154
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              455
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3259
;  :mk-clause               569
;  :num-allocs              6716740
;  :num-checks              664
;  :propagations            371
;  :quant-instantiations    170
;  :rlimit-count            275060)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6498
;  :arith-add-rows          73
;  :arith-assert-diseq      131
;  :arith-assert-lower      478
;  :arith-assert-upper      346
;  :arith-conflicts         143
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         154
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              455
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3259
;  :mk-clause               569
;  :num-allocs              6716740
;  :num-checks              665
;  :propagations            371
;  :quant-instantiations    170
;  :rlimit-count            275073)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@128@04 $k@148@04) $k@161@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6498
;  :arith-add-rows          73
;  :arith-assert-diseq      131
;  :arith-assert-lower      478
;  :arith-assert-upper      347
;  :arith-conflicts         144
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         155
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              455
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3260
;  :mk-clause               569
;  :num-allocs              6716740
;  :num-checks              666
;  :propagations            371
;  :quant-instantiations    170
;  :rlimit-count            275151)
(declare-const $k@190@04 $Perm)
(assert ($Perm.isReadVar $k@190@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@190@04 $Perm.No) (< $Perm.No $k@190@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6498
;  :arith-add-rows          73
;  :arith-assert-diseq      132
;  :arith-assert-lower      480
;  :arith-assert-upper      348
;  :arith-conflicts         144
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         155
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              455
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3264
;  :mk-clause               571
;  :num-allocs              6716740
;  :num-checks              667
;  :propagations            372
;  :quant-instantiations    170
;  :rlimit-count            275349)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= (+ (- $k@129@04 $k@149@04) $k@163@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6499
;  :arith-add-rows          73
;  :arith-assert-diseq      132
;  :arith-assert-lower      480
;  :arith-assert-upper      349
;  :arith-conflicts         145
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         155
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              457
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3266
;  :mk-clause               573
;  :num-allocs              6716740
;  :num-checks              668
;  :propagations            373
;  :quant-instantiations    170
;  :rlimit-count            275429)
(assert (< $k@190@04 (+ (- $k@129@04 $k@149@04) $k@163@04)))
(assert (<= $Perm.No (- (+ (- $k@129@04 $k@149@04) $k@163@04) $k@190@04)))
(assert (<= (- (+ (- $k@129@04 $k@149@04) $k@163@04) $k@190@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@129@04 $k@149@04) $k@163@04) $k@190@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@129@04 $k@149@04) $k@163@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6499
;  :arith-add-rows          75
;  :arith-assert-diseq      132
;  :arith-assert-lower      482
;  :arith-assert-upper      351
;  :arith-conflicts         146
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         156
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              457
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3270
;  :mk-clause               573
;  :num-allocs              6716740
;  :num-checks              669
;  :propagations            373
;  :quant-instantiations    170
;  :rlimit-count            275698)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6499
;  :arith-add-rows          75
;  :arith-assert-diseq      132
;  :arith-assert-lower      482
;  :arith-assert-upper      351
;  :arith-conflicts         146
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         156
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              457
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3270
;  :mk-clause               573
;  :num-allocs              6716740
;  :num-checks              670
;  :propagations            373
;  :quant-instantiations    170
;  :rlimit-count            275711)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@129@04 $k@149@04) $k@163@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6499
;  :arith-add-rows          75
;  :arith-assert-diseq      132
;  :arith-assert-lower      482
;  :arith-assert-upper      352
;  :arith-conflicts         147
;  :arith-eq-adapter        192
;  :arith-fixed-eqs         157
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              457
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3271
;  :mk-clause               573
;  :num-allocs              6716740
;  :num-checks              671
;  :propagations            373
;  :quant-instantiations    170
;  :rlimit-count            275792)
(declare-const $k@191@04 $Perm)
(assert ($Perm.isReadVar $k@191@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@191@04 $Perm.No) (< $Perm.No $k@191@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6499
;  :arith-add-rows          75
;  :arith-assert-diseq      133
;  :arith-assert-lower      484
;  :arith-assert-upper      353
;  :arith-conflicts         147
;  :arith-eq-adapter        193
;  :arith-fixed-eqs         157
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              457
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3275
;  :mk-clause               575
;  :num-allocs              6716740
;  :num-checks              672
;  :propagations            374
;  :quant-instantiations    170
;  :rlimit-count            275990)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= (+ (- $k@130@04 $k@150@04) $k@165@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6500
;  :arith-add-rows          75
;  :arith-assert-diseq      133
;  :arith-assert-lower      484
;  :arith-assert-upper      354
;  :arith-conflicts         148
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         157
;  :arith-pivots            119
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              459
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3277
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              673
;  :propagations            375
;  :quant-instantiations    170
;  :rlimit-count            276068)
(assert (< $k@191@04 (+ (- $k@130@04 $k@150@04) $k@165@04)))
(assert (<= $Perm.No (- (+ (- $k@130@04 $k@150@04) $k@165@04) $k@191@04)))
(assert (<= (- (+ (- $k@130@04 $k@150@04) $k@165@04) $k@191@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@130@04 $k@150@04) $k@165@04) $k@191@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@130@04 $k@150@04) $k@165@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6500
;  :arith-add-rows          76
;  :arith-assert-diseq      133
;  :arith-assert-lower      486
;  :arith-assert-upper      356
;  :arith-conflicts         149
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         158
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              459
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3281
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              674
;  :propagations            375
;  :quant-instantiations    170
;  :rlimit-count            276340)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6500
;  :arith-add-rows          76
;  :arith-assert-diseq      133
;  :arith-assert-lower      486
;  :arith-assert-upper      356
;  :arith-conflicts         149
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         158
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              459
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3281
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              675
;  :propagations            375
;  :quant-instantiations    170
;  :rlimit-count            276353)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@130@04 $k@150@04) $k@165@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6500
;  :arith-add-rows          76
;  :arith-assert-diseq      133
;  :arith-assert-lower      486
;  :arith-assert-upper      357
;  :arith-conflicts         150
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         159
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              459
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3282
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              676
;  :propagations            375
;  :quant-instantiations    170
;  :rlimit-count            276431)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))))))))))))))))))
  $t@166@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6500
;  :arith-add-rows          76
;  :arith-assert-diseq      133
;  :arith-assert-lower      486
;  :arith-assert-upper      357
;  :arith-conflicts         150
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         159
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 1542
;  :datatype-occurs-check   437
;  :datatype-splits         1269
;  :decisions               1462
;  :del-clause              459
;  :final-checks            93
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3282
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              677
;  :propagations            375
;  :quant-instantiations    170
;  :rlimit-count            276442)
(push) ; 10
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6746
;  :arith-add-rows          76
;  :arith-assert-diseq      133
;  :arith-assert-lower      486
;  :arith-assert-upper      357
;  :arith-conflicts         150
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         159
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 1621
;  :datatype-occurs-check   451
;  :datatype-splits         1345
;  :decisions               1538
;  :del-clause              459
;  :final-checks            96
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3358
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              678
;  :propagations            381
;  :quant-instantiations    171
;  :rlimit-count            278291
;  :time                    0.00)
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(push) ; 10
(assert (not (< $Perm.No (+ (- $k@130@04 $k@150@04) $k@165@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6746
;  :arith-add-rows          76
;  :arith-assert-diseq      133
;  :arith-assert-lower      486
;  :arith-assert-upper      358
;  :arith-conflicts         151
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 1621
;  :datatype-occurs-check   451
;  :datatype-splits         1345
;  :decisions               1538
;  :del-clause              459
;  :final-checks            96
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3359
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              679
;  :propagations            381
;  :quant-instantiations    171
;  :rlimit-count            278369)
(set-option :timeout 0)
(push) ; 10
(assert (not (= $t@166@04 diz@17@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6746
;  :arith-add-rows          76
;  :arith-assert-diseq      133
;  :arith-assert-lower      486
;  :arith-assert-upper      358
;  :arith-conflicts         151
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 1621
;  :datatype-occurs-check   451
;  :datatype-splits         1345
;  :decisions               1538
;  :del-clause              459
;  :final-checks            96
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3359
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              680
;  :propagations            381
;  :quant-instantiations    171
;  :rlimit-count            278380)
(assert (= $t@166@04 diz@17@04))
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6746
;  :arith-add-rows          76
;  :arith-assert-diseq      133
;  :arith-assert-lower      486
;  :arith-assert-upper      358
;  :arith-conflicts         151
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 1621
;  :datatype-occurs-check   451
;  :datatype-splits         1345
;  :decisions               1538
;  :del-clause              459
;  :final-checks            96
;  :max-generation          2
;  :max-memory              5.37
;  :memory                  5.37
;  :mk-bool-var             3359
;  :mk-clause               577
;  :num-allocs              6716740
;  :num-checks              681
;  :propagations            381
;  :quant-instantiations    171
;  :rlimit-count            278396)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 10
(assert ($Perm.isReadVar $k@181@04 $Perm.Write))
(assert ($Perm.isReadVar $k@182@04 $Perm.Write))
(assert ($Perm.isReadVar $k@183@04 $Perm.Write))
(assert ($Perm.isReadVar $k@184@04 $Perm.Write))
(assert ($Perm.isReadVar $k@185@04 $Perm.Write))
(assert (= $t@179@04 ($Snap.combine ($Snap.first $t@179@04) ($Snap.second $t@179@04))))
(assert (=
  ($Snap.second $t@179@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@179@04))
    ($Snap.second ($Snap.second $t@179@04)))))
(assert (= ($Snap.first ($Snap.second $t@179@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@179@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@179@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@179@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
  $Snap.unit))
(assert (forall ((i__67@180@04 Int)) (!
  (implies
    (and
      (<
        i__67@180@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
      (<= 0 i__67@180@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          i__67@180@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i__67@180@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i__67@180@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i__67@180@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))
(assert (<= $Perm.No $k@181@04))
(assert (<= $k@181@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@181@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
(assert (<= $Perm.No $k@182@04))
(assert (<= $k@182@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@182@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))
(assert (<= $Perm.No $k@183@04))
(assert (<= $k@183@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@183@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@184@04))
(assert (<= $k@184@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@184@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@185@04))
(assert (<= $k@185@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@185@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
  diz@17@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[5] != -2
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7777
;  :arith-add-rows          76
;  :arith-assert-diseq      138
;  :arith-assert-lower      500
;  :arith-assert-upper      370
;  :arith-conflicts         151
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    445
;  :datatype-constructor-ax 1882
;  :datatype-occurs-check   483
;  :datatype-splits         1537
;  :decisions               1791
;  :del-clause              471
;  :final-checks            102
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3648
;  :mk-clause               590
;  :num-allocs              7197817
;  :num-checks              684
;  :propagations            399
;  :quant-instantiations    185
;  :rlimit-count            288856)
; [eval] -1
(push) ; 11
; [then-branch: 58 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@179@04))))[2] == -1 | live]
(push) ; 12
; [then-branch: 58 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      2)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 58 | First:(Second:(Second:(Second:($t@179@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    2)
  (- 0 1)))
; [eval] diz.Prc_half_adder_2_m.Main_event_state[5] != -2
; [eval] diz.Prc_half_adder_2_m.Main_event_state[5]
(push) ; 13
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7778
;  :arith-add-rows          76
;  :arith-assert-diseq      138
;  :arith-assert-lower      500
;  :arith-assert-upper      370
;  :arith-conflicts         151
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    445
;  :datatype-constructor-ax 1882
;  :datatype-occurs-check   483
;  :datatype-splits         1537
;  :decisions               1791
;  :del-clause              471
;  :final-checks            102
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3649
;  :mk-clause               590
;  :num-allocs              7197817
;  :num-checks              685
;  :propagations            399
;  :quant-instantiations    185
;  :rlimit-count            289014)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
          5)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8256
;  :arith-add-rows          76
;  :arith-assert-diseq      139
;  :arith-assert-lower      503
;  :arith-assert-upper      371
;  :arith-conflicts         151
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    453
;  :datatype-constructor-ax 2032
;  :datatype-occurs-check   505
;  :datatype-splits         1637
;  :decisions               1936
;  :del-clause              478
;  :final-checks            106
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3766
;  :mk-clause               597
;  :num-allocs              7197817
;  :num-checks              686
;  :propagations            408
;  :quant-instantiations    187
;  :rlimit-count            292211
;  :time                    0.00)
(push) ; 11
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
        5)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      139
;  :arith-assert-lower      503
;  :arith-assert-upper      371
;  :arith-conflicts         151
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              478
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3864
;  :mk-clause               597
;  :num-allocs              7197817
;  :num-checks              687
;  :propagations            415
;  :quant-instantiations    188
;  :rlimit-count            294610
;  :time                    0.00)
; [then-branch: 59 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@179@04))))))[5] != -2 | live]
; [else-branch: 59 | !(First:(Second:(Second:(Second:($t@179@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@179@04))))))[5] != -2) | live]
(push) ; 11
; [then-branch: 59 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@179@04))))))[5] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
        5)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@192@04 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 60 | 0 <= i@192@04 | live]
; [else-branch: 60 | !(0 <= i@192@04) | live]
(push) ; 14
; [then-branch: 60 | 0 <= i@192@04]
(assert (<= 0 i@192@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 60 | !(0 <= i@192@04)]
(assert (not (<= 0 i@192@04)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 61 | i@192@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i@192@04 | live]
; [else-branch: 61 | !(i@192@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i@192@04) | live]
(push) ; 14
; [then-branch: 61 | i@192@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i@192@04]
(assert (and
  (<
    i@192@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
  (<= 0 i@192@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@192@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      139
;  :arith-assert-lower      504
;  :arith-assert-upper      372
;  :arith-conflicts         151
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              478
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3868
;  :mk-clause               598
;  :num-allocs              7197817
;  :num-checks              688
;  :propagations            415
;  :quant-instantiations    188
;  :rlimit-count            294976)
; [eval] -1
(push) ; 15
; [then-branch: 62 | First:(Second:(Second:(Second:($t@179@04))))[i@192@04] == -1 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@179@04))))[i@192@04] != -1 | live]
(push) ; 16
; [then-branch: 62 | First:(Second:(Second:(Second:($t@179@04))))[i@192@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i@192@04)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 62 | First:(Second:(Second:(Second:($t@179@04))))[i@192@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      i@192@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 17
(assert (not (>= i@192@04 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      140
;  :arith-assert-lower      507
;  :arith-assert-upper      373
;  :arith-conflicts         151
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              478
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3874
;  :mk-clause               602
;  :num-allocs              7197817
;  :num-checks              689
;  :propagations            417
;  :quant-instantiations    189
;  :rlimit-count            295208)
(push) ; 17
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@179@04))))[i@192@04] | live]
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@179@04))))[i@192@04]) | live]
(push) ; 18
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@179@04))))[i@192@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i@192@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 19
(assert (not (>= i@192@04 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      140
;  :arith-assert-lower      507
;  :arith-assert-upper      373
;  :arith-conflicts         151
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              478
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3874
;  :mk-clause               602
;  :num-allocs              7197817
;  :num-checks              690
;  :propagations            417
;  :quant-instantiations    189
;  :rlimit-count            295322)
; [eval] |diz.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@179@04))))[i@192@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      i@192@04))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 61 | !(i@192@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i@192@04)]
(assert (not
  (and
    (<
      i@192@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
    (<= 0 i@192@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i@192@04 Int)) (!
  (implies
    (and
      (<
        i@192@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
      (<= 0 i@192@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          i@192@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i@192@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i@192@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i@192@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      141
;  :arith-assert-lower      508
;  :arith-assert-upper      374
;  :arith-conflicts         151
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3882
;  :mk-clause               614
;  :num-allocs              7197817
;  :num-checks              691
;  :propagations            419
;  :quant-instantiations    190
;  :rlimit-count            295768)
(assert (forall ((i@192@04 Int)) (!
  (implies
    (and
      (<
        i@192@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
      (<= 0 i@192@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          i@192@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i@192@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i@192@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i@192@04))
  :qid |prog.l<no position>|)))
(declare-const $k@193@04 $Perm)
(assert ($Perm.isReadVar $k@193@04 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@193@04 $Perm.No) (< $Perm.No $k@193@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      510
;  :arith-assert-upper      375
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3887
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              692
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296328)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@181@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      510
;  :arith-assert-upper      375
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3887
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              693
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296339)
(assert (< $k@193@04 $k@181@04))
(assert (<= $Perm.No (- $k@181@04 $k@193@04)))
(assert (<= (- $k@181@04 $k@193@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@181@04 $k@193@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              694
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296559)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              695
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296607)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              696
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296655)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              697
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296703)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              698
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296751)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              699
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296799)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              700
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296847)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              701
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296895)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              702
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296943)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      142
;  :arith-assert-lower      512
;  :arith-assert-upper      376
;  :arith-conflicts         151
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3890
;  :mk-clause               616
;  :num-allocs              7197817
;  :num-checks              703
;  :propagations            420
;  :quant-instantiations    190
;  :rlimit-count            296991)
(declare-const $k@194@04 $Perm)
(assert ($Perm.isReadVar $k@194@04 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      143
;  :arith-assert-lower      514
;  :arith-assert-upper      377
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3894
;  :mk-clause               618
;  :num-allocs              7197817
;  :num-checks              704
;  :propagations            421
;  :quant-instantiations    190
;  :rlimit-count            297187)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@194@04 $Perm.No) (< $Perm.No $k@194@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      143
;  :arith-assert-lower      514
;  :arith-assert-upper      377
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3894
;  :mk-clause               618
;  :num-allocs              7197817
;  :num-checks              705
;  :propagations            421
;  :quant-instantiations    190
;  :rlimit-count            297237)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@182@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      143
;  :arith-assert-lower      514
;  :arith-assert-upper      377
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3894
;  :mk-clause               618
;  :num-allocs              7197817
;  :num-checks              706
;  :propagations            421
;  :quant-instantiations    190
;  :rlimit-count            297248)
(assert (< $k@194@04 $k@182@04))
(assert (<= $Perm.No (- $k@182@04 $k@194@04)))
(assert (<= (- $k@182@04 $k@194@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@182@04 $k@194@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      143
;  :arith-assert-lower      516
;  :arith-assert-upper      378
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3897
;  :mk-clause               618
;  :num-allocs              7197817
;  :num-checks              707
;  :propagations            421
;  :quant-instantiations    190
;  :rlimit-count            297468)
(push) ; 12
(assert (not (< $Perm.No $k@182@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      143
;  :arith-assert-lower      516
;  :arith-assert-upper      378
;  :arith-conflicts         151
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3897
;  :mk-clause               618
;  :num-allocs              7197817
;  :num-checks              708
;  :propagations            421
;  :quant-instantiations    190
;  :rlimit-count            297516)
(declare-const $k@195@04 $Perm)
(assert ($Perm.isReadVar $k@195@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@195@04 $Perm.No) (< $Perm.No $k@195@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      144
;  :arith-assert-lower      518
;  :arith-assert-upper      379
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3901
;  :mk-clause               620
;  :num-allocs              7197817
;  :num-checks              709
;  :propagations            422
;  :quant-instantiations    190
;  :rlimit-count            297715)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@183@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      144
;  :arith-assert-lower      518
;  :arith-assert-upper      379
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3901
;  :mk-clause               620
;  :num-allocs              7197817
;  :num-checks              710
;  :propagations            422
;  :quant-instantiations    190
;  :rlimit-count            297726)
(assert (< $k@195@04 $k@183@04))
(assert (<= $Perm.No (- $k@183@04 $k@195@04)))
(assert (<= (- $k@183@04 $k@195@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@183@04 $k@195@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      144
;  :arith-assert-lower      520
;  :arith-assert-upper      380
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3904
;  :mk-clause               620
;  :num-allocs              7197817
;  :num-checks              711
;  :propagations            422
;  :quant-instantiations    190
;  :rlimit-count            297934)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      144
;  :arith-assert-lower      520
;  :arith-assert-upper      380
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3904
;  :mk-clause               620
;  :num-allocs              7197817
;  :num-checks              712
;  :propagations            422
;  :quant-instantiations    190
;  :rlimit-count            297947)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      144
;  :arith-assert-lower      520
;  :arith-assert-upper      380
;  :arith-conflicts         151
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3904
;  :mk-clause               620
;  :num-allocs              7197817
;  :num-checks              713
;  :propagations            422
;  :quant-instantiations    190
;  :rlimit-count            297995)
(declare-const $k@196@04 $Perm)
(assert ($Perm.isReadVar $k@196@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@196@04 $Perm.No) (< $Perm.No $k@196@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      145
;  :arith-assert-lower      522
;  :arith-assert-upper      381
;  :arith-conflicts         151
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3908
;  :mk-clause               622
;  :num-allocs              7197817
;  :num-checks              714
;  :propagations            423
;  :quant-instantiations    190
;  :rlimit-count            298193)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@184@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      145
;  :arith-assert-lower      522
;  :arith-assert-upper      381
;  :arith-conflicts         151
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         160
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3908
;  :mk-clause               622
;  :num-allocs              7197817
;  :num-checks              715
;  :propagations            423
;  :quant-instantiations    190
;  :rlimit-count            298204)
(assert (< $k@196@04 $k@184@04))
(assert (<= $Perm.No (- $k@184@04 $k@196@04)))
(assert (<= (- $k@184@04 $k@196@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@184@04 $k@196@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No $k@184@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      145
;  :arith-assert-lower      524
;  :arith-assert-upper      382
;  :arith-conflicts         151
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         160
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3911
;  :mk-clause               622
;  :num-allocs              7197817
;  :num-checks              716
;  :propagations            423
;  :quant-instantiations    190
;  :rlimit-count            298424)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      145
;  :arith-assert-lower      524
;  :arith-assert-upper      382
;  :arith-conflicts         151
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         160
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3911
;  :mk-clause               622
;  :num-allocs              7197817
;  :num-checks              717
;  :propagations            423
;  :quant-instantiations    190
;  :rlimit-count            298437)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@184@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      145
;  :arith-assert-lower      524
;  :arith-assert-upper      382
;  :arith-conflicts         151
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         160
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3911
;  :mk-clause               622
;  :num-allocs              7197817
;  :num-checks              718
;  :propagations            423
;  :quant-instantiations    190
;  :rlimit-count            298485)
(declare-const $k@197@04 $Perm)
(assert ($Perm.isReadVar $k@197@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@197@04 $Perm.No) (< $Perm.No $k@197@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      146
;  :arith-assert-lower      526
;  :arith-assert-upper      383
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3915
;  :mk-clause               624
;  :num-allocs              7197817
;  :num-checks              719
;  :propagations            424
;  :quant-instantiations    190
;  :rlimit-count            298684)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@185@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      146
;  :arith-assert-lower      526
;  :arith-assert-upper      383
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3915
;  :mk-clause               624
;  :num-allocs              7197817
;  :num-checks              720
;  :propagations            424
;  :quant-instantiations    190
;  :rlimit-count            298695)
(assert (< $k@197@04 $k@185@04))
(assert (<= $Perm.No (- $k@185@04 $k@197@04)))
(assert (<= (- $k@185@04 $k@197@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@185@04 $k@197@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      146
;  :arith-assert-lower      528
;  :arith-assert-upper      384
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3918
;  :mk-clause               624
;  :num-allocs              7197817
;  :num-checks              721
;  :propagations            424
;  :quant-instantiations    190
;  :rlimit-count            298909)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      146
;  :arith-assert-lower      528
;  :arith-assert-upper      384
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3918
;  :mk-clause               624
;  :num-allocs              7197817
;  :num-checks              722
;  :propagations            424
;  :quant-instantiations    190
;  :rlimit-count            298922)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8585
;  :arith-add-rows          76
;  :arith-assert-diseq      146
;  :arith-assert-lower      528
;  :arith-assert-upper      384
;  :arith-conflicts         151
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         160
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    459
;  :datatype-constructor-ax 2131
;  :datatype-occurs-check   521
;  :datatype-splits         1733
;  :decisions               2031
;  :del-clause              494
;  :final-checks            109
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             3918
;  :mk-clause               624
;  :num-allocs              7197817
;  :num-checks              723
;  :propagations            424
;  :quant-instantiations    190
;  :rlimit-count            298970)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9063
;  :arith-add-rows          76
;  :arith-assert-diseq      147
;  :arith-assert-lower      531
;  :arith-assert-upper      385
;  :arith-conflicts         151
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         160
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    467
;  :datatype-constructor-ax 2281
;  :datatype-occurs-check   543
;  :datatype-splits         1833
;  :decisions               2176
;  :del-clause              500
;  :final-checks            113
;  :max-generation          2
;  :max-memory              5.57
;  :memory                  5.57
;  :mk-bool-var             4033
;  :mk-clause               630
;  :num-allocs              7197817
;  :num-checks              724
;  :propagations            433
;  :quant-instantiations    193
;  :rlimit-count            301983
;  :time                    0.00)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) globals@18@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(declare-const $t@198@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(assert (= $t@198@04 ($Snap.combine ($Snap.first $t@198@04) ($Snap.second $t@198@04))))
(assert (= ($Snap.first $t@198@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@198@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@198@04))
    ($Snap.second ($Snap.second $t@198@04)))))
(assert (= ($Snap.first ($Snap.second $t@198@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@198@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@198@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@198@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@198@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@199@04 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 64 | 0 <= i@199@04 | live]
; [else-branch: 64 | !(0 <= i@199@04) | live]
(push) ; 14
; [then-branch: 64 | 0 <= i@199@04]
(assert (<= 0 i@199@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 64 | !(0 <= i@199@04)]
(assert (not (<= 0 i@199@04)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 65 | i@199@04 < |First:(Second:(Second:(Second:($t@198@04))))| && 0 <= i@199@04 | live]
; [else-branch: 65 | !(i@199@04 < |First:(Second:(Second:(Second:($t@198@04))))| && 0 <= i@199@04) | live]
(push) ; 14
; [then-branch: 65 | i@199@04 < |First:(Second:(Second:(Second:($t@198@04))))| && 0 <= i@199@04]
(assert (and
  (<
    i@199@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
  (<= 0 i@199@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@199@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9671
;  :arith-add-rows          76
;  :arith-assert-diseq      148
;  :arith-assert-lower      539
;  :arith-assert-upper      389
;  :arith-conflicts         151
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         160
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    512
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              514
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4175
;  :mk-clause               636
;  :num-allocs              7453661
;  :num-checks              726
;  :propagations            442
;  :quant-instantiations    200
;  :rlimit-count            307468)
; [eval] -1
(push) ; 15
; [then-branch: 66 | First:(Second:(Second:(Second:($t@198@04))))[i@199@04] == -1 | live]
; [else-branch: 66 | First:(Second:(Second:(Second:($t@198@04))))[i@199@04] != -1 | live]
(push) ; 16
; [then-branch: 66 | First:(Second:(Second:(Second:($t@198@04))))[i@199@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
    i@199@04)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 66 | First:(Second:(Second:(Second:($t@198@04))))[i@199@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
      i@199@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 17
(assert (not (>= i@199@04 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9671
;  :arith-add-rows          76
;  :arith-assert-diseq      148
;  :arith-assert-lower      539
;  :arith-assert-upper      389
;  :arith-conflicts         151
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         160
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    512
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              514
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4176
;  :mk-clause               636
;  :num-allocs              7453661
;  :num-checks              727
;  :propagations            442
;  :quant-instantiations    200
;  :rlimit-count            307643)
(push) ; 17
; [then-branch: 67 | 0 <= First:(Second:(Second:(Second:($t@198@04))))[i@199@04] | live]
; [else-branch: 67 | !(0 <= First:(Second:(Second:(Second:($t@198@04))))[i@199@04]) | live]
(push) ; 18
; [then-branch: 67 | 0 <= First:(Second:(Second:(Second:($t@198@04))))[i@199@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
    i@199@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 19
(assert (not (>= i@199@04 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9671
;  :arith-add-rows          76
;  :arith-assert-diseq      149
;  :arith-assert-lower      542
;  :arith-assert-upper      389
;  :arith-conflicts         151
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         160
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    512
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              514
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4179
;  :mk-clause               637
;  :num-allocs              7453661
;  :num-checks              728
;  :propagations            442
;  :quant-instantiations    200
;  :rlimit-count            307767)
; [eval] |diz.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 67 | !(0 <= First:(Second:(Second:(Second:($t@198@04))))[i@199@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
      i@199@04))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 65 | !(i@199@04 < |First:(Second:(Second:(Second:($t@198@04))))| && 0 <= i@199@04)]
(assert (not
  (and
    (<
      i@199@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
    (<= 0 i@199@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@199@04 Int)) (!
  (implies
    (and
      (<
        i@199@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
      (<= 0 i@199@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
          i@199@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
            i@199@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
            i@199@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
    i@199@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))
(declare-const $k@200@04 $Perm)
(assert ($Perm.isReadVar $k@200@04 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@200@04 $Perm.No) (< $Perm.No $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9676
;  :arith-add-rows          76
;  :arith-assert-diseq      150
;  :arith-assert-lower      544
;  :arith-assert-upper      390
;  :arith-conflicts         151
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         160
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    513
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4185
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              729
;  :propagations            443
;  :quant-instantiations    200
;  :rlimit-count            308536)
(declare-const $t@201@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@181@04 $k@193@04))
    (=
      $t@201@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))
  (implies
    (< $Perm.No $k@200@04)
    (=
      $t@201@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))
(assert (<= $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04)))
(assert (<= (+ (- $k@181@04 $k@193@04) $k@200@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9686
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      392
;  :arith-conflicts         152
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         161
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    514
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4193
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              730
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            309216)
(assert (not (= $t@201@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9692
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      393
;  :arith-conflicts         153
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         162
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    515
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4196
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              731
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            309538)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9697
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      394
;  :arith-conflicts         154
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         163
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    516
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4198
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              732
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            309825)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9702
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      395
;  :arith-conflicts         155
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         164
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4200
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              733
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            310122)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9707
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      396
;  :arith-conflicts         156
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         165
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4202
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              734
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            310429)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9712
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      397
;  :arith-conflicts         157
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         166
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4204
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              735
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            310746)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9717
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      398
;  :arith-conflicts         158
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         167
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4206
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              736
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            311073)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9722
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      399
;  :arith-conflicts         159
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         168
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    521
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4208
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              737
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            311410)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9727
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      400
;  :arith-conflicts         160
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         169
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    522
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4210
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              738
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            311757)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9732
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      401
;  :arith-conflicts         161
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         170
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4212
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              739
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            312114)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9737
;  :arith-add-rows          77
;  :arith-assert-diseq      150
;  :arith-assert-lower      545
;  :arith-assert-upper      402
;  :arith-conflicts         162
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         171
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4214
;  :mk-clause               639
;  :num-allocs              7453661
;  :num-checks              740
;  :propagations            443
;  :quant-instantiations    201
;  :rlimit-count            312481)
(declare-const $k@202@04 $Perm)
(assert ($Perm.isReadVar $k@202@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@202@04 $Perm.No) (< $Perm.No $k@202@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9737
;  :arith-add-rows          77
;  :arith-assert-diseq      151
;  :arith-assert-lower      547
;  :arith-assert-upper      403
;  :arith-conflicts         162
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         171
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4218
;  :mk-clause               641
;  :num-allocs              7453661
;  :num-checks              741
;  :propagations            444
;  :quant-instantiations    201
;  :rlimit-count            312679)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  $t@201@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9737
;  :arith-add-rows          77
;  :arith-assert-diseq      151
;  :arith-assert-lower      547
;  :arith-assert-upper      403
;  :arith-conflicts         162
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         171
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4218
;  :mk-clause               641
;  :num-allocs              7453661
;  :num-checks              742
;  :propagations            444
;  :quant-instantiations    201
;  :rlimit-count            312690)
(declare-const $t@203@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@182@04 $k@194@04))
    (=
      $t@203@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))
  (implies
    (< $Perm.No $k@202@04)
    (=
      $t@203@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@182@04 $k@194@04) $k@202@04)))
(assert (<= (+ (- $k@182@04 $k@194@04) $k@202@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@182@04 $k@194@04) $k@202@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9747
;  :arith-add-rows          78
;  :arith-assert-diseq      151
;  :arith-assert-lower      548
;  :arith-assert-upper      405
;  :arith-conflicts         163
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         172
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    525
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4226
;  :mk-clause               641
;  :num-allocs              7453661
;  :num-checks              743
;  :propagations            444
;  :quant-instantiations    202
;  :rlimit-count            313412)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  $t@201@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9747
;  :arith-add-rows          78
;  :arith-assert-diseq      151
;  :arith-assert-lower      548
;  :arith-assert-upper      405
;  :arith-conflicts         163
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         172
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    525
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4226
;  :mk-clause               641
;  :num-allocs              7453661
;  :num-checks              744
;  :propagations            444
;  :quant-instantiations    202
;  :rlimit-count            313423)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@182@04 $k@194@04) $k@202@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9747
;  :arith-add-rows          78
;  :arith-assert-diseq      151
;  :arith-assert-lower      548
;  :arith-assert-upper      406
;  :arith-conflicts         164
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         173
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    525
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4227
;  :mk-clause               641
;  :num-allocs              7453661
;  :num-checks              745
;  :propagations            444
;  :quant-instantiations    202
;  :rlimit-count            313507)
(assert (= $t@203@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))
(declare-const $k@204@04 $Perm)
(assert ($Perm.isReadVar $k@204@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@204@04 $Perm.No) (< $Perm.No $k@204@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9752
;  :arith-add-rows          78
;  :arith-assert-diseq      152
;  :arith-assert-lower      550
;  :arith-assert-upper      407
;  :arith-conflicts         164
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         173
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    526
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4232
;  :mk-clause               643
;  :num-allocs              7453661
;  :num-checks              746
;  :propagations            445
;  :quant-instantiations    202
;  :rlimit-count            314007)
(declare-const $t@205@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@183@04 $k@195@04))
    (=
      $t@205@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@204@04)
    (=
      $t@205@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@183@04 $k@195@04) $k@204@04)))
(assert (<= (+ (- $k@183@04 $k@195@04) $k@204@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@183@04 $k@195@04) $k@204@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@04 $k@195@04) $k@204@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9762
;  :arith-add-rows          79
;  :arith-assert-diseq      152
;  :arith-assert-lower      551
;  :arith-assert-upper      409
;  :arith-conflicts         165
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         174
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    527
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4240
;  :mk-clause               643
;  :num-allocs              7453661
;  :num-checks              747
;  :propagations            445
;  :quant-instantiations    203
;  :rlimit-count            314973)
(assert (not (= $t@205@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@04 $k@195@04) $k@204@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9768
;  :arith-add-rows          79
;  :arith-assert-diseq      152
;  :arith-assert-lower      551
;  :arith-assert-upper      410
;  :arith-conflicts         166
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         175
;  :arith-pivots            131
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    528
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4243
;  :mk-clause               643
;  :num-allocs              7453661
;  :num-checks              748
;  :propagations            445
;  :quant-instantiations    203
;  :rlimit-count            315435)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9768
;  :arith-add-rows          79
;  :arith-assert-diseq      152
;  :arith-assert-lower      551
;  :arith-assert-upper      410
;  :arith-conflicts         166
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         175
;  :arith-pivots            131
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    528
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4243
;  :mk-clause               643
;  :num-allocs              7453661
;  :num-checks              749
;  :propagations            445
;  :quant-instantiations    203
;  :rlimit-count            315448)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))))
(declare-const $k@206@04 $Perm)
(assert ($Perm.isReadVar $k@206@04 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@206@04 $Perm.No) (< $Perm.No $k@206@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9773
;  :arith-add-rows          79
;  :arith-assert-diseq      153
;  :arith-assert-lower      553
;  :arith-assert-upper      411
;  :arith-conflicts         166
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         175
;  :arith-pivots            131
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    529
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4248
;  :mk-clause               645
;  :num-allocs              7453661
;  :num-checks              750
;  :propagations            446
;  :quant-instantiations    203
;  :rlimit-count            315978)
(declare-const $t@207@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@184@04 $k@196@04))
    (=
      $t@207@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@206@04)
    (=
      $t@207@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@184@04 $k@196@04) $k@206@04)))
(assert (<= (+ (- $k@184@04 $k@196@04) $k@206@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@184@04 $k@196@04) $k@206@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@184@04 $k@196@04) $k@206@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9783
;  :arith-add-rows          80
;  :arith-assert-diseq      153
;  :arith-assert-lower      554
;  :arith-assert-upper      413
;  :arith-conflicts         167
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         176
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    530
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4256
;  :mk-clause               645
;  :num-allocs              7453661
;  :num-checks              751
;  :propagations            446
;  :quant-instantiations    204
;  :rlimit-count            316984)
(assert (not (= $t@207@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@184@04 $k@196@04) $k@206@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9789
;  :arith-add-rows          80
;  :arith-assert-diseq      153
;  :arith-assert-lower      554
;  :arith-assert-upper      414
;  :arith-conflicts         168
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         177
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    531
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4259
;  :mk-clause               645
;  :num-allocs              7453661
;  :num-checks              752
;  :propagations            446
;  :quant-instantiations    204
;  :rlimit-count            317468)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9789
;  :arith-add-rows          80
;  :arith-assert-diseq      153
;  :arith-assert-lower      554
;  :arith-assert-upper      414
;  :arith-conflicts         168
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         177
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    531
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4259
;  :mk-clause               645
;  :num-allocs              7453661
;  :num-checks              753
;  :propagations            446
;  :quant-instantiations    204
;  :rlimit-count            317481)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))))))
(declare-const $k@208@04 $Perm)
(assert ($Perm.isReadVar $k@208@04 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@208@04 $Perm.No) (< $Perm.No $k@208@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9794
;  :arith-add-rows          80
;  :arith-assert-diseq      154
;  :arith-assert-lower      556
;  :arith-assert-upper      415
;  :arith-conflicts         168
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         177
;  :arith-pivots            132
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    532
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4264
;  :mk-clause               647
;  :num-allocs              7453661
;  :num-checks              754
;  :propagations            447
;  :quant-instantiations    204
;  :rlimit-count            318041)
(declare-const $t@209@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@185@04 $k@197@04))
    (=
      $t@209@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@208@04)
    (=
      $t@209@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@185@04 $k@197@04) $k@208@04)))
(assert (<= (+ (- $k@185@04 $k@197@04) $k@208@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@185@04 $k@197@04) $k@208@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@04 $k@197@04) $k@208@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9804
;  :arith-add-rows          81
;  :arith-assert-diseq      154
;  :arith-assert-lower      557
;  :arith-assert-upper      417
;  :arith-conflicts         169
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         178
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               506
;  :datatype-accessor-ax    533
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4272
;  :mk-clause               647
;  :num-allocs              7453661
;  :num-checks              755
;  :propagations            447
;  :quant-instantiations    205
;  :rlimit-count            318823)
(assert (not (= $t@209@04 $Ref.null)))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@04 $k@197@04) $k@208@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9804
;  :arith-add-rows          81
;  :arith-assert-diseq      154
;  :arith-assert-lower      557
;  :arith-assert-upper      418
;  :arith-conflicts         170
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    533
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4273
;  :mk-clause               647
;  :num-allocs              7453661
;  :num-checks              756
;  :propagations            447
;  :quant-instantiations    205
;  :rlimit-count            318923)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9804
;  :arith-add-rows          81
;  :arith-assert-diseq      154
;  :arith-assert-lower      557
;  :arith-assert-upper      418
;  :arith-conflicts         170
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    533
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4273
;  :mk-clause               647
;  :num-allocs              7453661
;  :num-checks              757
;  :propagations            447
;  :quant-instantiations    205
;  :rlimit-count            318936)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
  $t@209@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9804
;  :arith-add-rows          81
;  :arith-assert-diseq      154
;  :arith-assert-lower      557
;  :arith-assert-upper      418
;  :arith-conflicts         170
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    533
;  :datatype-constructor-ax 2431
;  :datatype-occurs-check   637
;  :datatype-splits         1933
;  :decisions               2321
;  :del-clause              515
;  :final-checks            117
;  :max-generation          2
;  :max-memory              5.68
;  :memory                  5.68
;  :mk-bool-var             4273
;  :mk-clause               647
;  :num-allocs              7453661
;  :num-checks              758
;  :propagations            447
;  :quant-instantiations    205
;  :rlimit-count            318947)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04))))))))))))))))))))))))))))))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@198@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) globals@18@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Prc_half_adder_2_m, globals), write)
(declare-const $t@210@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11008
;  :arith-add-rows          81
;  :arith-assert-diseq      156
;  :arith-assert-lower      563
;  :arith-assert-upper      420
;  :arith-conflicts         170
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              533
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4537
;  :mk-clause               661
;  :num-allocs              9050191
;  :num-checks              761
;  :propagations            477
;  :quant-instantiations    212
;  :rlimit-count            326136)
; [eval] diz.Prc_half_adder_2_m != null
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] (forall i__67: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__67] } 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__67@211@04 Int)
(push) ; 12
; [eval] 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__67 && i__67 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__67
(push) ; 13
; [then-branch: 68 | 0 <= i__67@211@04 | live]
; [else-branch: 68 | !(0 <= i__67@211@04) | live]
(push) ; 14
; [then-branch: 68 | 0 <= i__67@211@04]
(assert (<= 0 i__67@211@04))
; [eval] i__67 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 68 | !(0 <= i__67@211@04)]
(assert (not (<= 0 i__67@211@04)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 69 | i__67@211@04 < |First:(Second:(Second:(Second:($t@198@04))))| && 0 <= i__67@211@04 | live]
; [else-branch: 69 | !(i__67@211@04 < |First:(Second:(Second:(Second:($t@198@04))))| && 0 <= i__67@211@04) | live]
(push) ; 14
; [then-branch: 69 | i__67@211@04 < |First:(Second:(Second:(Second:($t@198@04))))| && 0 <= i__67@211@04]
(assert (and
  (<
    i__67@211@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
  (<= 0 i__67@211@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 15
(assert (not (>= i__67@211@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11008
;  :arith-add-rows          81
;  :arith-assert-diseq      156
;  :arith-assert-lower      564
;  :arith-assert-upper      421
;  :arith-conflicts         170
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              533
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4539
;  :mk-clause               661
;  :num-allocs              9050191
;  :num-checks              762
;  :propagations            477
;  :quant-instantiations    212
;  :rlimit-count            326272)
; [eval] -1
(push) ; 15
; [then-branch: 70 | First:(Second:(Second:(Second:($t@198@04))))[i__67@211@04] == -1 | live]
; [else-branch: 70 | First:(Second:(Second:(Second:($t@198@04))))[i__67@211@04] != -1 | live]
(push) ; 16
; [then-branch: 70 | First:(Second:(Second:(Second:($t@198@04))))[i__67@211@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
    i__67@211@04)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 70 | First:(Second:(Second:(Second:($t@198@04))))[i__67@211@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
      i__67@211@04)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67] && diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__67]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 17
(assert (not (>= i__67@211@04 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11008
;  :arith-add-rows          81
;  :arith-assert-diseq      157
;  :arith-assert-lower      567
;  :arith-assert-upper      422
;  :arith-conflicts         170
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              533
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4545
;  :mk-clause               665
;  :num-allocs              9050191
;  :num-checks              763
;  :propagations            479
;  :quant-instantiations    213
;  :rlimit-count            326504)
(push) ; 17
; [then-branch: 71 | 0 <= First:(Second:(Second:(Second:($t@198@04))))[i__67@211@04] | live]
; [else-branch: 71 | !(0 <= First:(Second:(Second:(Second:($t@198@04))))[i__67@211@04]) | live]
(push) ; 18
; [then-branch: 71 | 0 <= First:(Second:(Second:(Second:($t@198@04))))[i__67@211@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
    i__67@211@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__67]
(push) ; 19
(assert (not (>= i__67@211@04 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11008
;  :arith-add-rows          81
;  :arith-assert-diseq      157
;  :arith-assert-lower      567
;  :arith-assert-upper      422
;  :arith-conflicts         170
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              533
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4545
;  :mk-clause               665
;  :num-allocs              9050191
;  :num-checks              764
;  :propagations            479
;  :quant-instantiations    213
;  :rlimit-count            326618)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 71 | !(0 <= First:(Second:(Second:(Second:($t@198@04))))[i__67@211@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
      i__67@211@04))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 69 | !(i__67@211@04 < |First:(Second:(Second:(Second:($t@198@04))))| && 0 <= i__67@211@04)]
(assert (not
  (and
    (<
      i__67@211@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
    (<= 0 i__67@211@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i__67@211@04 Int)) (!
  (implies
    (and
      (<
        i__67@211@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
      (<= 0 i__67@211@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
          i__67@211@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
            i__67@211@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
            i__67@211@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
    i__67@211@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11008
;  :arith-add-rows          81
;  :arith-assert-diseq      159
;  :arith-assert-lower      568
;  :arith-assert-upper      423
;  :arith-conflicts         170
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              551
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4553
;  :mk-clause               679
;  :num-allocs              9050191
;  :num-checks              765
;  :propagations            481
;  :quant-instantiations    214
;  :rlimit-count            327064)
(assert (forall ((i__67@211@04 Int)) (!
  (implies
    (and
      (<
        i__67@211@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))
      (<= 0 i__67@211@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
          i__67@211@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
            i__67@211@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
            i__67@211@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@198@04)))))
    i__67@211@04))
  :qid |prog.l<no position>|)))
(declare-const $k@212@04 $Perm)
(assert ($Perm.isReadVar $k@212@04 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@212@04 $Perm.No) (< $Perm.No $k@212@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11008
;  :arith-add-rows          81
;  :arith-assert-diseq      160
;  :arith-assert-lower      570
;  :arith-assert-upper      424
;  :arith-conflicts         170
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              551
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4558
;  :mk-clause               681
;  :num-allocs              9050191
;  :num-checks              766
;  :propagations            482
;  :quant-instantiations    214
;  :rlimit-count            327624)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@181@04 $k@193@04) $k@200@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          81
;  :arith-assert-diseq      160
;  :arith-assert-lower      570
;  :arith-assert-upper      425
;  :arith-conflicts         171
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         179
;  :arith-pivots            133
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4560
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              767
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            327702)
(assert (< $k@212@04 (+ (- $k@181@04 $k@193@04) $k@200@04)))
(assert (<= $Perm.No (- (+ (- $k@181@04 $k@193@04) $k@200@04) $k@212@04)))
(assert (<= (- (+ (- $k@181@04 $k@193@04) $k@200@04) $k@212@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@181@04 $k@193@04) $k@200@04) $k@212@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      427
;  :arith-conflicts         172
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         180
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4564
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              768
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            327974)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      428
;  :arith-conflicts         173
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         181
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4565
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              769
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328052)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      429
;  :arith-conflicts         174
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         182
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4566
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              770
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328130)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      430
;  :arith-conflicts         175
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         183
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4567
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              771
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328208)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      431
;  :arith-conflicts         176
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         184
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4568
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              772
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328286)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      432
;  :arith-conflicts         177
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         185
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4569
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              773
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328364)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      433
;  :arith-conflicts         178
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         186
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4570
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              774
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328442)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      434
;  :arith-conflicts         179
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         187
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4571
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              775
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328520)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      435
;  :arith-conflicts         180
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         188
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4572
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              776
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328598)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      160
;  :arith-assert-lower      572
;  :arith-assert-upper      436
;  :arith-conflicts         181
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         189
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4573
;  :mk-clause               683
;  :num-allocs              9050191
;  :num-checks              777
;  :propagations            483
;  :quant-instantiations    214
;  :rlimit-count            328676)
(declare-const $k@213@04 $Perm)
(assert ($Perm.isReadVar $k@213@04 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      161
;  :arith-assert-lower      574
;  :arith-assert-upper      438
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         190
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               527
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4578
;  :mk-clause               685
;  :num-allocs              9050191
;  :num-checks              778
;  :propagations            484
;  :quant-instantiations    214
;  :rlimit-count            328902)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@213@04 $Perm.No) (< $Perm.No $k@213@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      161
;  :arith-assert-lower      574
;  :arith-assert-upper      438
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         190
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4578
;  :mk-clause               685
;  :num-allocs              9050191
;  :num-checks              779
;  :propagations            484
;  :quant-instantiations    214
;  :rlimit-count            328952)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  $t@201@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11009
;  :arith-add-rows          82
;  :arith-assert-diseq      161
;  :arith-assert-lower      574
;  :arith-assert-upper      438
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         190
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              553
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4578
;  :mk-clause               685
;  :num-allocs              9050191
;  :num-checks              780
;  :propagations            484
;  :quant-instantiations    214
;  :rlimit-count            328963)
(push) ; 12
(assert (not (not (= (+ (- $k@182@04 $k@194@04) $k@202@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11010
;  :arith-add-rows          82
;  :arith-assert-diseq      161
;  :arith-assert-lower      574
;  :arith-assert-upper      439
;  :arith-conflicts         183
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         190
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               529
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              555
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4580
;  :mk-clause               687
;  :num-allocs              9050191
;  :num-checks              781
;  :propagations            485
;  :quant-instantiations    214
;  :rlimit-count            329043)
(assert (< $k@213@04 (+ (- $k@182@04 $k@194@04) $k@202@04)))
(assert (<= $Perm.No (- (+ (- $k@182@04 $k@194@04) $k@202@04) $k@213@04)))
(assert (<= (- (+ (- $k@182@04 $k@194@04) $k@202@04) $k@213@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@182@04 $k@194@04) $k@202@04) $k@213@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@181@04 $k@193@04) $k@200@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11010
;  :arith-add-rows          84
;  :arith-assert-diseq      161
;  :arith-assert-lower      576
;  :arith-assert-upper      441
;  :arith-conflicts         184
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         191
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              555
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4584
;  :mk-clause               687
;  :num-allocs              9050191
;  :num-checks              782
;  :propagations            485
;  :quant-instantiations    214
;  :rlimit-count            329309)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  $t@201@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11010
;  :arith-add-rows          84
;  :arith-assert-diseq      161
;  :arith-assert-lower      576
;  :arith-assert-upper      441
;  :arith-conflicts         184
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         191
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              555
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4584
;  :mk-clause               687
;  :num-allocs              9050191
;  :num-checks              783
;  :propagations            485
;  :quant-instantiations    214
;  :rlimit-count            329320)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@182@04 $k@194@04) $k@202@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11010
;  :arith-add-rows          84
;  :arith-assert-diseq      161
;  :arith-assert-lower      576
;  :arith-assert-upper      442
;  :arith-conflicts         185
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         192
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              555
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4585
;  :mk-clause               687
;  :num-allocs              9050191
;  :num-checks              784
;  :propagations            485
;  :quant-instantiations    214
;  :rlimit-count            329401)
(declare-const $k@214@04 $Perm)
(assert ($Perm.isReadVar $k@214@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@214@04 $Perm.No) (< $Perm.No $k@214@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11010
;  :arith-add-rows          84
;  :arith-assert-diseq      162
;  :arith-assert-lower      578
;  :arith-assert-upper      443
;  :arith-conflicts         185
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         192
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              555
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4589
;  :mk-clause               689
;  :num-allocs              9050191
;  :num-checks              785
;  :propagations            486
;  :quant-instantiations    214
;  :rlimit-count            329599)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@183@04 $k@195@04) $k@204@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11011
;  :arith-add-rows          84
;  :arith-assert-diseq      162
;  :arith-assert-lower      578
;  :arith-assert-upper      444
;  :arith-conflicts         186
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         192
;  :arith-pivots            135
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              557
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4591
;  :mk-clause               691
;  :num-allocs              9050191
;  :num-checks              786
;  :propagations            487
;  :quant-instantiations    214
;  :rlimit-count            329687)
(assert (< $k@214@04 (+ (- $k@183@04 $k@195@04) $k@204@04)))
(assert (<= $Perm.No (- (+ (- $k@183@04 $k@195@04) $k@204@04) $k@214@04)))
(assert (<= (- (+ (- $k@183@04 $k@195@04) $k@204@04) $k@214@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@183@04 $k@195@04) $k@204@04) $k@214@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@04 $k@195@04) $k@204@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11011
;  :arith-add-rows          85
;  :arith-assert-diseq      162
;  :arith-assert-lower      580
;  :arith-assert-upper      446
;  :arith-conflicts         187
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         193
;  :arith-pivots            137
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              557
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4595
;  :mk-clause               691
;  :num-allocs              9050191
;  :num-checks              787
;  :propagations            487
;  :quant-instantiations    214
;  :rlimit-count            329969)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11011
;  :arith-add-rows          85
;  :arith-assert-diseq      162
;  :arith-assert-lower      580
;  :arith-assert-upper      446
;  :arith-conflicts         187
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         193
;  :arith-pivots            137
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              557
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4595
;  :mk-clause               691
;  :num-allocs              9050191
;  :num-checks              788
;  :propagations            487
;  :quant-instantiations    214
;  :rlimit-count            329982)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@183@04 $k@195@04) $k@204@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11011
;  :arith-add-rows          85
;  :arith-assert-diseq      162
;  :arith-assert-lower      580
;  :arith-assert-upper      447
;  :arith-conflicts         188
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         194
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              557
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4596
;  :mk-clause               691
;  :num-allocs              9050191
;  :num-checks              789
;  :propagations            487
;  :quant-instantiations    214
;  :rlimit-count            330071)
(declare-const $k@215@04 $Perm)
(assert ($Perm.isReadVar $k@215@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@215@04 $Perm.No) (< $Perm.No $k@215@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11011
;  :arith-add-rows          85
;  :arith-assert-diseq      163
;  :arith-assert-lower      582
;  :arith-assert-upper      448
;  :arith-conflicts         188
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         194
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              557
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4600
;  :mk-clause               693
;  :num-allocs              9050191
;  :num-checks              790
;  :propagations            488
;  :quant-instantiations    214
;  :rlimit-count            330269)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@184@04 $k@196@04) $k@206@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11012
;  :arith-add-rows          85
;  :arith-assert-diseq      163
;  :arith-assert-lower      582
;  :arith-assert-upper      449
;  :arith-conflicts         189
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         194
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              559
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4602
;  :mk-clause               695
;  :num-allocs              9050191
;  :num-checks              791
;  :propagations            489
;  :quant-instantiations    214
;  :rlimit-count            330349)
(assert (< $k@215@04 (+ (- $k@184@04 $k@196@04) $k@206@04)))
(assert (<= $Perm.No (- (+ (- $k@184@04 $k@196@04) $k@206@04) $k@215@04)))
(assert (<= (- (+ (- $k@184@04 $k@196@04) $k@206@04) $k@215@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@184@04 $k@196@04) $k@206@04) $k@215@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@184@04 $k@196@04) $k@206@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11012
;  :arith-add-rows          87
;  :arith-assert-diseq      163
;  :arith-assert-lower      584
;  :arith-assert-upper      451
;  :arith-conflicts         190
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         195
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              559
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4606
;  :mk-clause               695
;  :num-allocs              9050191
;  :num-checks              792
;  :propagations            489
;  :quant-instantiations    214
;  :rlimit-count            330618)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11012
;  :arith-add-rows          87
;  :arith-assert-diseq      163
;  :arith-assert-lower      584
;  :arith-assert-upper      451
;  :arith-conflicts         190
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         195
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              559
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4606
;  :mk-clause               695
;  :num-allocs              9050191
;  :num-checks              793
;  :propagations            489
;  :quant-instantiations    214
;  :rlimit-count            330631)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@184@04 $k@196@04) $k@206@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11012
;  :arith-add-rows          87
;  :arith-assert-diseq      163
;  :arith-assert-lower      584
;  :arith-assert-upper      452
;  :arith-conflicts         191
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         196
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               539
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              559
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4607
;  :mk-clause               695
;  :num-allocs              9050191
;  :num-checks              794
;  :propagations            489
;  :quant-instantiations    214
;  :rlimit-count            330712)
(declare-const $k@216@04 $Perm)
(assert ($Perm.isReadVar $k@216@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@216@04 $Perm.No) (< $Perm.No $k@216@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11012
;  :arith-add-rows          87
;  :arith-assert-diseq      164
;  :arith-assert-lower      586
;  :arith-assert-upper      453
;  :arith-conflicts         191
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         196
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              559
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4611
;  :mk-clause               697
;  :num-allocs              9050191
;  :num-checks              795
;  :propagations            490
;  :quant-instantiations    214
;  :rlimit-count            330910)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@185@04 $k@197@04) $k@208@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11013
;  :arith-add-rows          87
;  :arith-assert-diseq      164
;  :arith-assert-lower      586
;  :arith-assert-upper      454
;  :arith-conflicts         192
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         196
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              561
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4613
;  :mk-clause               699
;  :num-allocs              9050191
;  :num-checks              796
;  :propagations            491
;  :quant-instantiations    214
;  :rlimit-count            330990)
(assert (< $k@216@04 (+ (- $k@185@04 $k@197@04) $k@208@04)))
(assert (<= $Perm.No (- (+ (- $k@185@04 $k@197@04) $k@208@04) $k@216@04)))
(assert (<= (- (+ (- $k@185@04 $k@197@04) $k@208@04) $k@216@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@185@04 $k@197@04) $k@208@04) $k@216@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@04 $k@197@04) $k@208@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11013
;  :arith-add-rows          89
;  :arith-assert-diseq      164
;  :arith-assert-lower      588
;  :arith-assert-upper      456
;  :arith-conflicts         193
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         197
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              561
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4617
;  :mk-clause               699
;  :num-allocs              9050191
;  :num-checks              797
;  :propagations            491
;  :quant-instantiations    214
;  :rlimit-count            331259)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11013
;  :arith-add-rows          89
;  :arith-assert-diseq      164
;  :arith-assert-lower      588
;  :arith-assert-upper      456
;  :arith-conflicts         193
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         197
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              561
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4617
;  :mk-clause               699
;  :num-allocs              9050191
;  :num-checks              798
;  :propagations            491
;  :quant-instantiations    214
;  :rlimit-count            331272)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@04 $k@197@04) $k@208@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11013
;  :arith-add-rows          89
;  :arith-assert-diseq      164
;  :arith-assert-lower      588
;  :arith-assert-upper      457
;  :arith-conflicts         194
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         198
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              561
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4618
;  :mk-clause               699
;  :num-allocs              9050191
;  :num-checks              799
;  :propagations            491
;  :quant-instantiations    214
;  :rlimit-count            331353)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))))))))))))))))))))
  $t@209@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11013
;  :arith-add-rows          89
;  :arith-assert-diseq      164
;  :arith-assert-lower      588
;  :arith-assert-upper      457
;  :arith-conflicts         194
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         198
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2775
;  :datatype-occurs-check   782
;  :datatype-splits         2183
;  :decisions               2641
;  :del-clause              561
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             4618
;  :mk-clause               699
;  :num-allocs              9050191
;  :num-checks              800
;  :propagations            491
;  :quant-instantiations    214
;  :rlimit-count            331364)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11472
;  :arith-add-rows          89
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      458
;  :arith-conflicts         194
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         198
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    577
;  :datatype-constructor-ax 2903
;  :datatype-occurs-check   853
;  :datatype-splits         2308
;  :decisions               2758
;  :del-clause              565
;  :final-checks            127
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.91
;  :mk-bool-var             4732
;  :mk-clause               703
;  :num-allocs              9599657
;  :num-checks              801
;  :propagations            508
;  :quant-instantiations    217
;  :rlimit-count            334184
;  :time                    0.00)
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@185@04 $k@197@04) $k@208@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11472
;  :arith-add-rows          89
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    577
;  :datatype-constructor-ax 2903
;  :datatype-occurs-check   853
;  :datatype-splits         2308
;  :decisions               2758
;  :del-clause              565
;  :final-checks            127
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.91
;  :mk-bool-var             4733
;  :mk-clause               703
;  :num-allocs              9599657
;  :num-checks              802
;  :propagations            508
;  :quant-instantiations    217
;  :rlimit-count            334265)
(set-option :timeout 0)
(push) ; 12
(assert (not (= $t@209@04 diz@17@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11472
;  :arith-add-rows          89
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    577
;  :datatype-constructor-ax 2903
;  :datatype-occurs-check   853
;  :datatype-splits         2308
;  :decisions               2758
;  :del-clause              565
;  :final-checks            127
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.91
;  :mk-bool-var             4733
;  :mk-clause               703
;  :num-allocs              9599657
;  :num-checks              803
;  :propagations            508
;  :quant-instantiations    217
;  :rlimit-count            334276)
(assert (= $t@209@04 diz@17@04))
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11472
;  :arith-add-rows          89
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            138
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    577
;  :datatype-constructor-ax 2903
;  :datatype-occurs-check   853
;  :datatype-splits         2308
;  :decisions               2758
;  :del-clause              565
;  :final-checks            127
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.91
;  :mk-bool-var             4733
;  :mk-clause               703
;  :num-allocs              9599657
;  :num-checks              804
;  :propagations            508
;  :quant-instantiations    217
;  :rlimit-count            334292)
(pop) ; 11
(push) ; 11
; [else-branch: 59 | !(First:(Second:(Second:(Second:($t@179@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@179@04))))))[5] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
          5)
        (- 0 2))))))
(pop) ; 11
(set-option :timeout 10)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11879
;  :arith-add-rows          90
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    584
;  :datatype-constructor-ax 3034
;  :datatype-occurs-check   870
;  :datatype-splits         2406
;  :decisions               2884
;  :del-clause              585
;  :final-checks            130
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             4835
;  :mk-clause               704
;  :num-allocs              9874926
;  :num-checks              805
;  :propagations            515
;  :quant-instantiations    218
;  :rlimit-count            337078
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12286
;  :arith-add-rows          90
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    591
;  :datatype-constructor-ax 3165
;  :datatype-occurs-check   887
;  :datatype-splits         2504
;  :decisions               3010
;  :del-clause              586
;  :final-checks            133
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             4937
;  :mk-clause               705
;  :num-allocs              9874926
;  :num-checks              806
;  :propagations            522
;  :quant-instantiations    219
;  :rlimit-count            339766
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12693
;  :arith-add-rows          90
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    598
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   904
;  :datatype-splits         2602
;  :decisions               3136
;  :del-clause              587
;  :final-checks            136
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5039
;  :mk-clause               706
;  :num-allocs              9874926
;  :num-checks              807
;  :propagations            529
;  :quant-instantiations    220
;  :rlimit-count            342454
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04)))))))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13073
;  :arith-add-rows          90
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    605
;  :datatype-constructor-ax 3412
;  :datatype-occurs-check   921
;  :datatype-splits         2700
;  :decisions               3247
;  :del-clause              588
;  :final-checks            139
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5141
;  :mk-clause               707
;  :num-allocs              9874926
;  :num-checks              808
;  :propagations            536
;  :quant-instantiations    221
;  :rlimit-count            345038
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13480
;  :arith-add-rows          90
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    612
;  :datatype-constructor-ax 3543
;  :datatype-occurs-check   938
;  :datatype-splits         2798
;  :decisions               3373
;  :del-clause              589
;  :final-checks            142
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5243
;  :mk-clause               708
;  :num-allocs              9874926
;  :num-checks              809
;  :propagations            543
;  :quant-instantiations    222
;  :rlimit-count            347726
;  :time                    0.00)
; [eval] !(diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[5] != -2)
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1 || diz.Prc_half_adder_2_m.Main_event_state[5] != -2
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2] != -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[2]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13480
;  :arith-add-rows          90
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    612
;  :datatype-constructor-ax 3543
;  :datatype-occurs-check   938
;  :datatype-splits         2798
;  :decisions               3373
;  :del-clause              589
;  :final-checks            142
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5243
;  :mk-clause               708
;  :num-allocs              9874926
;  :num-checks              810
;  :propagations            543
;  :quant-instantiations    222
;  :rlimit-count            347741)
; [eval] -1
(push) ; 11
; [then-branch: 72 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1 | live]
; [else-branch: 72 | First:(Second:(Second:(Second:($t@179@04))))[2] == -1 | live]
(push) ; 12
; [then-branch: 72 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      2)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 72 | First:(Second:(Second:(Second:($t@179@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    2)
  (- 0 1)))
; [eval] diz.Prc_half_adder_2_m.Main_event_state[5] != -2
; [eval] diz.Prc_half_adder_2_m.Main_event_state[5]
(push) ; 13
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13481
;  :arith-add-rows          90
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    612
;  :datatype-constructor-ax 3543
;  :datatype-occurs-check   938
;  :datatype-splits         2798
;  :decisions               3373
;  :del-clause              589
;  :final-checks            142
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5244
;  :mk-clause               708
;  :num-allocs              9874926
;  :num-checks              811
;  :propagations            543
;  :quant-instantiations    222
;  :rlimit-count            347899)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
        5)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13810
;  :arith-add-rows          90
;  :arith-assert-diseq      165
;  :arith-assert-lower      591
;  :arith-assert-upper      459
;  :arith-conflicts         195
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    618
;  :datatype-constructor-ax 3642
;  :datatype-occurs-check   954
;  :datatype-splits         2894
;  :decisions               3468
;  :del-clause              589
;  :final-checks            145
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5342
;  :mk-clause               708
;  :num-allocs              9874926
;  :num-checks              812
;  :propagations            550
;  :quant-instantiations    223
;  :rlimit-count            350298
;  :time                    0.00)
(push) ; 11
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
          5)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14288
;  :arith-add-rows          90
;  :arith-assert-diseq      166
;  :arith-assert-lower      594
;  :arith-assert-upper      460
;  :arith-conflicts         195
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              596
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5459
;  :mk-clause               715
;  :num-allocs              9874926
;  :num-checks              813
;  :propagations            559
;  :quant-instantiations    225
;  :rlimit-count            353469
;  :time                    0.00)
; [then-branch: 73 | !(First:(Second:(Second:(Second:($t@179@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@179@04))))))[5] != -2) | live]
; [else-branch: 73 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@179@04))))))[5] != -2 | live]
(push) ; 11
; [then-branch: 73 | !(First:(Second:(Second:(Second:($t@179@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@179@04))))))[5] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
          5)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      166
;  :arith-assert-lower      594
;  :arith-assert-upper      460
;  :arith-conflicts         195
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              596
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5461
;  :mk-clause               715
;  :num-allocs              9874926
;  :num-checks              814
;  :propagations            559
;  :quant-instantiations    225
;  :rlimit-count            353686)
; [eval] diz.Prc_half_adder_2_m != null
; [eval] |diz.Prc_half_adder_2_m.Main_process_state| == 3
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_event_state| == 6
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] (forall i__66: Int :: { diz.Prc_half_adder_2_m.Main_process_state[i__66] } 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|)
(declare-const i__66@217@04 Int)
(push) ; 12
; [eval] 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state| ==> diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= i__66 && i__66 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] 0 <= i__66
(push) ; 13
; [then-branch: 74 | 0 <= i__66@217@04 | live]
; [else-branch: 74 | !(0 <= i__66@217@04) | live]
(push) ; 14
; [then-branch: 74 | 0 <= i__66@217@04]
(assert (<= 0 i__66@217@04))
; [eval] i__66 < |diz.Prc_half_adder_2_m.Main_process_state|
; [eval] |diz.Prc_half_adder_2_m.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 74 | !(0 <= i__66@217@04)]
(assert (not (<= 0 i__66@217@04)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 75 | i__66@217@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i__66@217@04 | live]
; [else-branch: 75 | !(i__66@217@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i__66@217@04) | live]
(push) ; 14
; [then-branch: 75 | i__66@217@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i__66@217@04]
(assert (and
  (<
    i__66@217@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
  (<= 0 i__66@217@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1 || 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] == -1
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 15
(assert (not (>= i__66@217@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      166
;  :arith-assert-lower      595
;  :arith-assert-upper      461
;  :arith-conflicts         195
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              596
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5463
;  :mk-clause               715
;  :num-allocs              9874926
;  :num-checks              815
;  :propagations            559
;  :quant-instantiations    225
;  :rlimit-count            353822)
; [eval] -1
(push) ; 15
; [then-branch: 76 | First:(Second:(Second:(Second:($t@179@04))))[i__66@217@04] == -1 | live]
; [else-branch: 76 | First:(Second:(Second:(Second:($t@179@04))))[i__66@217@04] != -1 | live]
(push) ; 16
; [then-branch: 76 | First:(Second:(Second:(Second:($t@179@04))))[i__66@217@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i__66@217@04)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 76 | First:(Second:(Second:(Second:($t@179@04))))[i__66@217@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      i__66@217@04)
    (- 0 1))))
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66] && diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] 0 <= diz.Prc_half_adder_2_m.Main_process_state[i__66]
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 17
(assert (not (>= i__66@217@04 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      167
;  :arith-assert-lower      598
;  :arith-assert-upper      462
;  :arith-conflicts         195
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              596
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5469
;  :mk-clause               719
;  :num-allocs              9874926
;  :num-checks              816
;  :propagations            561
;  :quant-instantiations    226
;  :rlimit-count            354054)
(push) ; 17
; [then-branch: 77 | 0 <= First:(Second:(Second:(Second:($t@179@04))))[i__66@217@04] | live]
; [else-branch: 77 | !(0 <= First:(Second:(Second:(Second:($t@179@04))))[i__66@217@04]) | live]
(push) ; 18
; [then-branch: 77 | 0 <= First:(Second:(Second:(Second:($t@179@04))))[i__66@217@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i__66@217@04)))
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66] < |diz.Prc_half_adder_2_m.Main_event_state|
; [eval] diz.Prc_half_adder_2_m.Main_process_state[i__66]
(push) ; 19
(assert (not (>= i__66@217@04 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      167
;  :arith-assert-lower      598
;  :arith-assert-upper      462
;  :arith-conflicts         195
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              596
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5469
;  :mk-clause               719
;  :num-allocs              9874926
;  :num-checks              817
;  :propagations            561
;  :quant-instantiations    226
;  :rlimit-count            354168)
; [eval] |diz.Prc_half_adder_2_m.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 77 | !(0 <= First:(Second:(Second:(Second:($t@179@04))))[i__66@217@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
      i__66@217@04))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 75 | !(i__66@217@04 < |First:(Second:(Second:(Second:($t@179@04))))| && 0 <= i__66@217@04)]
(assert (not
  (and
    (<
      i__66@217@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
    (<= 0 i__66@217@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i__66@217@04 Int)) (!
  (implies
    (and
      (<
        i__66@217@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
      (<= 0 i__66@217@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          i__66@217@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i__66@217@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i__66@217@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i__66@217@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      169
;  :arith-assert-lower      599
;  :arith-assert-upper      463
;  :arith-conflicts         195
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5477
;  :mk-clause               733
;  :num-allocs              9874926
;  :num-checks              818
;  :propagations            563
;  :quant-instantiations    227
;  :rlimit-count            354614)
(assert (forall ((i__66@217@04 Int)) (!
  (implies
    (and
      (<
        i__66@217@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
      (<= 0 i__66@217@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
          i__66@217@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i__66@217@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
            i__66@217@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
    i__66@217@04))
  :qid |prog.l<no position>|)))
(declare-const $k@218@04 $Perm)
(assert ($Perm.isReadVar $k@218@04 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@218@04 $Perm.No) (< $Perm.No $k@218@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      601
;  :arith-assert-upper      464
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5482
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              819
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355175)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@181@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      601
;  :arith-assert-upper      464
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5482
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              820
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355186)
(assert (< $k@218@04 $k@181@04))
(assert (<= $Perm.No (- $k@181@04 $k@218@04)))
(assert (<= (- $k@181@04 $k@218@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@181@04 $k@218@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder != null
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              821
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355400)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              822
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355448)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              823
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355496)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              824
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355544)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              825
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355592)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              826
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355640)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               560
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              827
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355688)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              828
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355736)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              829
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355784)
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      170
;  :arith-assert-lower      603
;  :arith-assert-upper      465
;  :arith-conflicts         195
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5485
;  :mk-clause               735
;  :num-allocs              9874926
;  :num-checks              830
;  :propagations            564
;  :quant-instantiations    227
;  :rlimit-count            355832)
(declare-const $k@219@04 $Perm)
(assert ($Perm.isReadVar $k@219@04 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      171
;  :arith-assert-lower      605
;  :arith-assert-upper      466
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5489
;  :mk-clause               737
;  :num-allocs              9874926
;  :num-checks              831
;  :propagations            565
;  :quant-instantiations    227
;  :rlimit-count            356028)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@219@04 $Perm.No) (< $Perm.No $k@219@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      171
;  :arith-assert-lower      605
;  :arith-assert-upper      466
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5489
;  :mk-clause               737
;  :num-allocs              9874926
;  :num-checks              832
;  :propagations            565
;  :quant-instantiations    227
;  :rlimit-count            356078)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@182@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      171
;  :arith-assert-lower      605
;  :arith-assert-upper      466
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            149
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5489
;  :mk-clause               737
;  :num-allocs              9874926
;  :num-checks              833
;  :propagations            565
;  :quant-instantiations    227
;  :rlimit-count            356089)
(assert (< $k@219@04 $k@182@04))
(assert (<= $Perm.No (- $k@182@04 $k@219@04)))
(assert (<= (- $k@182@04 $k@219@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@182@04 $k@219@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04))))))))))
      $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder.Full_adder_m == diz.Prc_half_adder_2_m
(push) ; 12
(assert (not (< $Perm.No $k@181@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      171
;  :arith-assert-lower      607
;  :arith-assert-upper      467
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5492
;  :mk-clause               737
;  :num-allocs              9874926
;  :num-checks              834
;  :propagations            565
;  :quant-instantiations    227
;  :rlimit-count            356303)
(push) ; 12
(assert (not (< $Perm.No $k@182@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      171
;  :arith-assert-lower      607
;  :arith-assert-upper      467
;  :arith-conflicts         195
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5492
;  :mk-clause               737
;  :num-allocs              9874926
;  :num-checks              835
;  :propagations            565
;  :quant-instantiations    227
;  :rlimit-count            356351)
(declare-const $k@220@04 $Perm)
(assert ($Perm.isReadVar $k@220@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@220@04 $Perm.No) (< $Perm.No $k@220@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      172
;  :arith-assert-lower      609
;  :arith-assert-upper      468
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5496
;  :mk-clause               739
;  :num-allocs              9874926
;  :num-checks              836
;  :propagations            566
;  :quant-instantiations    227
;  :rlimit-count            356550)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@183@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      172
;  :arith-assert-lower      609
;  :arith-assert-upper      468
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5496
;  :mk-clause               739
;  :num-allocs              9874926
;  :num-checks              837
;  :propagations            566
;  :quant-instantiations    227
;  :rlimit-count            356561)
(assert (< $k@220@04 $k@183@04))
(assert (<= $Perm.No (- $k@183@04 $k@220@04)))
(assert (<= (- $k@183@04 $k@220@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@183@04 $k@220@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_prc != null
(push) ; 12
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      172
;  :arith-assert-lower      611
;  :arith-assert-upper      469
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5499
;  :mk-clause               739
;  :num-allocs              9874926
;  :num-checks              838
;  :propagations            566
;  :quant-instantiations    227
;  :rlimit-count            356769)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      172
;  :arith-assert-lower      611
;  :arith-assert-upper      469
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5499
;  :mk-clause               739
;  :num-allocs              9874926
;  :num-checks              839
;  :propagations            566
;  :quant-instantiations    227
;  :rlimit-count            356782)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      172
;  :arith-assert-lower      611
;  :arith-assert-upper      469
;  :arith-conflicts         195
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5499
;  :mk-clause               739
;  :num-allocs              9874926
;  :num-checks              840
;  :propagations            566
;  :quant-instantiations    227
;  :rlimit-count            356830)
(declare-const $k@221@04 $Perm)
(assert ($Perm.isReadVar $k@221@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@221@04 $Perm.No) (< $Perm.No $k@221@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      173
;  :arith-assert-lower      613
;  :arith-assert-upper      470
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5503
;  :mk-clause               741
;  :num-allocs              9874926
;  :num-checks              841
;  :propagations            567
;  :quant-instantiations    227
;  :rlimit-count            357028)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@184@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      173
;  :arith-assert-lower      613
;  :arith-assert-upper      470
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5503
;  :mk-clause               741
;  :num-allocs              9874926
;  :num-checks              842
;  :propagations            567
;  :quant-instantiations    227
;  :rlimit-count            357039)
(assert (< $k@221@04 $k@184@04))
(assert (<= $Perm.No (- $k@184@04 $k@221@04)))
(assert (<= (- $k@184@04 $k@221@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@184@04 $k@221@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder1 != null
(push) ; 12
(assert (not (< $Perm.No $k@184@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      173
;  :arith-assert-lower      615
;  :arith-assert-upper      471
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5506
;  :mk-clause               741
;  :num-allocs              9874926
;  :num-checks              843
;  :propagations            567
;  :quant-instantiations    227
;  :rlimit-count            357253)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      173
;  :arith-assert-lower      615
;  :arith-assert-upper      471
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5506
;  :mk-clause               741
;  :num-allocs              9874926
;  :num-checks              844
;  :propagations            567
;  :quant-instantiations    227
;  :rlimit-count            357266)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@184@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      173
;  :arith-assert-lower      615
;  :arith-assert-upper      471
;  :arith-conflicts         195
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5506
;  :mk-clause               741
;  :num-allocs              9874926
;  :num-checks              845
;  :propagations            567
;  :quant-instantiations    227
;  :rlimit-count            357314)
(declare-const $k@222@04 $Perm)
(assert ($Perm.isReadVar $k@222@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@222@04 $Perm.No) (< $Perm.No $k@222@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      174
;  :arith-assert-lower      617
;  :arith-assert-upper      472
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5510
;  :mk-clause               743
;  :num-allocs              9874926
;  :num-checks              846
;  :propagations            568
;  :quant-instantiations    227
;  :rlimit-count            357513)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@185@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      174
;  :arith-assert-lower      617
;  :arith-assert-upper      472
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5510
;  :mk-clause               743
;  :num-allocs              9874926
;  :num-checks              847
;  :propagations            568
;  :quant-instantiations    227
;  :rlimit-count            357524)
(assert (< $k@222@04 $k@185@04))
(assert (<= $Perm.No (- $k@185@04 $k@222@04)))
(assert (<= (- $k@185@04 $k@222@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@185@04 $k@222@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@179@04)) $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 != null
(push) ; 12
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5513
;  :mk-clause               743
;  :num-allocs              9874926
;  :num-checks              848
;  :propagations            568
;  :quant-instantiations    227
;  :rlimit-count            357732)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5513
;  :mk-clause               743
;  :num-allocs              9874926
;  :num-checks              849
;  :propagations            568
;  :quant-instantiations    227
;  :rlimit-count            357745)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14290
;  :arith-add-rows          90
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    626
;  :datatype-constructor-ax 3792
;  :datatype-occurs-check   976
;  :datatype-splits         2994
;  :decisions               3613
;  :del-clause              614
;  :final-checks            149
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5513
;  :mk-clause               743
;  :num-allocs              9874926
;  :num-checks              850
;  :propagations            568
;  :quant-instantiations    227
;  :rlimit-count            357793)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14617
;  :arith-add-rows          90
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    632
;  :datatype-constructor-ax 3891
;  :datatype-occurs-check   992
;  :datatype-splits         3090
;  :decisions               3708
;  :del-clause              614
;  :final-checks            152
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5609
;  :mk-clause               743
;  :num-allocs              9874926
;  :num-checks              851
;  :propagations            575
;  :quant-instantiations    228
;  :rlimit-count            360034
;  :time                    0.00)
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(push) ; 12
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14617
;  :arith-add-rows          90
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    632
;  :datatype-constructor-ax 3891
;  :datatype-occurs-check   992
;  :datatype-splits         3090
;  :decisions               3708
;  :del-clause              614
;  :final-checks            152
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5609
;  :mk-clause               743
;  :num-allocs              9874926
;  :num-checks              852
;  :propagations            575
;  :quant-instantiations    228
;  :rlimit-count            360082)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14617
;  :arith-add-rows          90
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            151
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    632
;  :datatype-constructor-ax 3891
;  :datatype-occurs-check   992
;  :datatype-splits         3090
;  :decisions               3708
;  :del-clause              614
;  :final-checks            152
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.82
;  :mk-bool-var             5609
;  :mk-clause               743
;  :num-allocs              9874926
;  :num-checks              853
;  :propagations            575
;  :quant-instantiations    228
;  :rlimit-count            360095)
(pop) ; 11
(push) ; 11
; [else-branch: 73 | First:(Second:(Second:(Second:($t@179@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@179@04))))))[5] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@04)))))))
        5)
      (- 0 2)))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14850
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    637
;  :datatype-constructor-ax 3974
;  :datatype-occurs-check   1004
;  :datatype-splits         3153
;  :decisions               3786
;  :del-clause              681
;  :final-checks            155
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.83
;  :mk-bool-var             5675
;  :mk-clause               744
;  :num-allocs              10467209
;  :num-checks              854
;  :propagations            579
;  :quant-instantiations    228
;  :rlimit-count            361985
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15083
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               579
;  :datatype-accessor-ax    642
;  :datatype-constructor-ax 4057
;  :datatype-occurs-check   1016
;  :datatype-splits         3216
;  :decisions               3864
;  :del-clause              682
;  :final-checks            158
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             5741
;  :mk-clause               745
;  :num-allocs              11062223
;  :num-checks              855
;  :propagations            583
;  :quant-instantiations    228
;  :rlimit-count            363712
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15316
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 4140
;  :datatype-occurs-check   1028
;  :datatype-splits         3279
;  :decisions               3942
;  :del-clause              683
;  :final-checks            161
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             5807
;  :mk-clause               746
;  :num-allocs              11659962
;  :num-checks              856
;  :propagations            587
;  :quant-instantiations    228
;  :rlimit-count            365439
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15560
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    652
;  :datatype-constructor-ax 4223
;  :datatype-occurs-check   1040
;  :datatype-splits         3342
;  :decisions               4020
;  :del-clause              684
;  :final-checks            164
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             5873
;  :mk-clause               747
;  :num-allocs              12260419
;  :num-checks              857
;  :propagations            591
;  :quant-instantiations    228
;  :rlimit-count            367337
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15793
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               582
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4306
;  :datatype-occurs-check   1052
;  :datatype-splits         3405
;  :decisions               4098
;  :del-clause              685
;  :final-checks            167
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             5939
;  :mk-clause               748
;  :num-allocs              12863578
;  :num-checks              858
;  :propagations            595
;  :quant-instantiations    228
;  :rlimit-count            369064
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16082
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    666
;  :datatype-constructor-ax 4406
;  :datatype-occurs-check   1068
;  :datatype-splits         3520
;  :decisions               4189
;  :del-clause              686
;  :final-checks            171
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6056
;  :mk-clause               749
;  :num-allocs              13469673
;  :num-checks              859
;  :propagations            603
;  :quant-instantiations    228
;  :rlimit-count            370983
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16414
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               584
;  :datatype-accessor-ax    675
;  :datatype-constructor-ax 4523
;  :datatype-occurs-check   1084
;  :datatype-splits         3635
;  :decisions               4297
;  :del-clause              687
;  :final-checks            175
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6173
;  :mk-clause               750
;  :num-allocs              14078706
;  :num-checks              860
;  :propagations            611
;  :quant-instantiations    228
;  :rlimit-count            373122
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16703
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               585
;  :datatype-accessor-ax    684
;  :datatype-constructor-ax 4623
;  :datatype-occurs-check   1100
;  :datatype-splits         3750
;  :decisions               4388
;  :del-clause              688
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6290
;  :mk-clause               751
;  :num-allocs              14690675
;  :num-checks              861
;  :propagations            619
;  :quant-instantiations    228
;  :rlimit-count            375041
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17035
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    693
;  :datatype-constructor-ax 4740
;  :datatype-occurs-check   1116
;  :datatype-splits         3865
;  :decisions               4496
;  :del-clause              689
;  :final-checks            183
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6407
;  :mk-clause               752
;  :num-allocs              15305580
;  :num-checks              862
;  :propagations            627
;  :quant-instantiations    228
;  :rlimit-count            377180
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17324
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    702
;  :datatype-constructor-ax 4840
;  :datatype-occurs-check   1132
;  :datatype-splits         3980
;  :decisions               4587
;  :del-clause              690
;  :final-checks            187
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6524
;  :mk-clause               753
;  :num-allocs              15923421
;  :num-checks              863
;  :propagations            635
;  :quant-instantiations    228
;  :rlimit-count            379099
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17656
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    711
;  :datatype-constructor-ax 4957
;  :datatype-occurs-check   1148
;  :datatype-splits         4095
;  :decisions               4695
;  :del-clause              691
;  :final-checks            191
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6641
;  :mk-clause               754
;  :num-allocs              16544198
;  :num-checks              864
;  :propagations            643
;  :quant-instantiations    228
;  :rlimit-count            381238
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17900
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    716
;  :datatype-constructor-ax 5039
;  :datatype-occurs-check   1160
;  :datatype-splits         4158
;  :decisions               4772
;  :del-clause              692
;  :final-checks            194
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6707
;  :mk-clause               755
;  :num-allocs              17167693
;  :num-checks              865
;  :propagations            647
;  :quant-instantiations    228
;  :rlimit-count            383127
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@124@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@04)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18187
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               590
;  :datatype-accessor-ax    721
;  :datatype-constructor-ax 5138
;  :datatype-occurs-check   1172
;  :datatype-splits         4221
;  :decisions               4866
;  :del-clause              693
;  :final-checks            197
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6773
;  :mk-clause               756
;  :num-allocs              17793884
;  :num-checks              866
;  :propagations            651
;  :quant-instantiations    228
;  :rlimit-count            385236
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@65@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18476
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    730
;  :datatype-constructor-ax 5238
;  :datatype-occurs-check   1188
;  :datatype-splits         4336
;  :decisions               4957
;  :del-clause              694
;  :final-checks            201
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             6890
;  :mk-clause               757
;  :num-allocs              18422989
;  :num-checks              867
;  :propagations            659
;  :quant-instantiations    228
;  :rlimit-count            387155
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@124@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@19@04))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18808
;  :arith-add-rows          94
;  :arith-assert-diseq      174
;  :arith-assert-lower      619
;  :arith-assert-upper      473
;  :arith-conflicts         195
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         199
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               592
;  :datatype-accessor-ax    739
;  :datatype-constructor-ax 5355
;  :datatype-occurs-check   1204
;  :datatype-splits         4451
;  :decisions               5065
;  :del-clause              695
;  :final-checks            205
;  :max-generation          2
;  :max-memory              6.01
;  :memory                  5.81
;  :mk-bool-var             7007
;  :mk-clause               758
;  :num-allocs              19055030
;  :num-checks              868
;  :propagations            667
;  :quant-instantiations    228
;  :rlimit-count            389294
;  :time                    0.00)
; [eval] !true
; [then-branch: 78 | False | dead]
; [else-branch: 78 | True | live]
(push) ; 8
; [else-branch: 78 | True]
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 29 | First:(Second:(Second:(Second:($t@65@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@65@04))))))[4] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@65@04)))))))
        4)
      (- 0 2)))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
