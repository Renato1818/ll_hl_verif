(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-17 23:27:22
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_Full_adder<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Prc_half_adder_1<TYPE> TYPE)
(declare-const class_Prc_half_adder_2<TYPE> TYPE)
(declare-const class_Prc_or<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Full_adder_m: Ref]
(declare-fun $FVF.domain_Full_adder_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Full_adder_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Full_adder_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Full_adder_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Full_adder_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Full_adder_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_half_adder_1_m: Ref]
(declare-fun $FVF.domain_Prc_half_adder_1_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_half_adder_1_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_half_adder_1_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_half_adder_1_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_half_adder_1_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_half_adder_1_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_half_adder_2_m: Ref]
(declare-fun $FVF.domain_Prc_half_adder_2_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_half_adder_2_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_half_adder_2_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_half_adder_2_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_half_adder_2_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_half_adder_2_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Prc_or_m: Ref]
(declare-fun $FVF.domain_Prc_or_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Prc_or_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Prc_or_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Prc_or_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Prc_or_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Prc_or_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Prc_half_adder_1_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_1_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_2_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_half_adder_2_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_or_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Prc_or_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Full_adder<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Prc_half_adder_1<TYPE> class_Prc_half_adder_2<TYPE> class_Prc_or<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Full_adder<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_half_adder_1<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_half_adder_2<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Prc_or<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Full_adder_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Full_adder_m vs) ($FVF.domain_Full_adder_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Full_adder_m vs))
            (= ($FVF.lookup_Full_adder_m vs x) ($FVF.lookup_Full_adder_m ws x)))
          :pattern (($FVF.lookup_Full_adder_m vs x) ($FVF.lookup_Full_adder_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Full_adder_m pm r))
    :pattern ($FVF.perm_Full_adder_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Full_adder_m f r) true)
    :pattern ($FVF.loc_Full_adder_m f r))))
; /field_value_functions_axioms.smt2 [Prc_half_adder_1_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_half_adder_1_m vs) ($FVF.domain_Prc_half_adder_1_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_half_adder_1_m vs))
            (= ($FVF.lookup_Prc_half_adder_1_m vs x) ($FVF.lookup_Prc_half_adder_1_m ws x)))
          :pattern (($FVF.lookup_Prc_half_adder_1_m vs x) ($FVF.lookup_Prc_half_adder_1_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_half_adder_1_m pm r))
    :pattern ($FVF.perm_Prc_half_adder_1_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_half_adder_1_m f r) true)
    :pattern ($FVF.loc_Prc_half_adder_1_m f r))))
; /field_value_functions_axioms.smt2 [Prc_half_adder_2_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_half_adder_2_m vs) ($FVF.domain_Prc_half_adder_2_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_half_adder_2_m vs))
            (= ($FVF.lookup_Prc_half_adder_2_m vs x) ($FVF.lookup_Prc_half_adder_2_m ws x)))
          :pattern (($FVF.lookup_Prc_half_adder_2_m vs x) ($FVF.lookup_Prc_half_adder_2_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_half_adder_2_m pm r))
    :pattern ($FVF.perm_Prc_half_adder_2_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_half_adder_2_m f r) true)
    :pattern ($FVF.loc_Prc_half_adder_2_m f r))))
; /field_value_functions_axioms.smt2 [Prc_or_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Prc_or_m vs) ($FVF.domain_Prc_or_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Prc_or_m vs))
            (= ($FVF.lookup_Prc_or_m vs x) ($FVF.lookup_Prc_or_m ws x)))
          :pattern (($FVF.lookup_Prc_or_m vs x) ($FVF.lookup_Prc_or_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Prc_or_m pm r))
    :pattern ($FVF.perm_Prc_or_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Prc_or_m f r) true)
    :pattern ($FVF.loc_Prc_or_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Prc_half_adder_1_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@0@02 $Ref)
(declare-const globals@1@02 $Ref)
(declare-const diz@2@02 $Ref)
(declare-const globals@3@02 $Ref)
(push) ; 1
(declare-const $t@4@02 $Snap)
(assert (= $t@4@02 ($Snap.combine ($Snap.first $t@4@02) ($Snap.second $t@4@02))))
(assert (= ($Snap.first $t@4@02) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@2@02 $Ref.null)))
(assert (=
  ($Snap.second $t@4@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@4@02))
    ($Snap.second ($Snap.second $t@4@02)))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            18
;  :arith-assert-lower   1
;  :arith-assert-upper   1
;  :arith-eq-adapter     1
;  :binary-propagations  22
;  :datatype-accessor-ax 3
;  :max-generation       1
;  :max-memory           3.96
;  :memory               3.67
;  :mk-bool-var          241
;  :mk-clause            1
;  :num-allocs           3250513
;  :num-checks           1
;  :propagations         22
;  :quant-instantiations 1
;  :rlimit-count         100591)
(assert (=
  ($Snap.second ($Snap.second $t@4@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@4@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@4@02))) $Snap.unit))
; [eval] diz.Prc_half_adder_1_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@4@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))
(declare-const $k@5@02 $Perm)
(assert ($Perm.isReadVar $k@5@02 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@5@02 $Perm.No) (< $Perm.No $k@5@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            30
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   2
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            1
;  :datatype-accessor-ax 5
;  :max-generation       1
;  :max-memory           3.96
;  :memory               3.67
;  :mk-bool-var          250
;  :mk-clause            3
;  :num-allocs           3250513
;  :num-checks           2
;  :propagations         23
;  :quant-instantiations 2
;  :rlimit-count         101163)
(assert (<= $Perm.No $k@5@02))
(assert (<= $k@5@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@5@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@4@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@5@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            36
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            2
;  :datatype-accessor-ax 6
;  :max-generation       1
;  :max-memory           3.96
;  :memory               3.67
;  :mk-bool-var          253
;  :mk-clause            3
;  :num-allocs           3250513
;  :num-checks           3
;  :propagations         23
;  :quant-instantiations 2
;  :rlimit-count         101436
;  :time                 0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))
  diz@2@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs            43
;  :arith-assert-diseq   1
;  :arith-assert-lower   3
;  :arith-assert-upper   3
;  :arith-eq-adapter     2
;  :binary-propagations  22
;  :conflicts            2
;  :datatype-accessor-ax 7
;  :max-generation       1
;  :max-memory           3.96
;  :memory               3.67
;  :mk-bool-var          256
;  :mk-clause            3
;  :num-allocs           3250513
;  :num-checks           4
;  :propagations         23
;  :quant-instantiations 3
;  :rlimit-count         101687)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))
  $Snap.unit))
; [eval] !diz.Prc_half_adder_1_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@02)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@6@02 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Prc_half_adder_2___contract_unsatisfiable__Prc_half_adder_2_EncodedGlobalVariables_Main ----------
(declare-const diz@7@02 $Ref)
(declare-const globals@8@02 $Ref)
(declare-const m_param@9@02 $Ref)
(declare-const diz@10@02 $Ref)
(declare-const globals@11@02 $Ref)
(declare-const m_param@12@02 $Ref)
(push) ; 1
(declare-const $t@13@02 $Snap)
(assert (= $t@13@02 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@10@02 $Ref.null)))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@14@02 $Snap)
(assert (= $t@14@02 ($Snap.combine ($Snap.first $t@14@02) ($Snap.second $t@14@02))))
(assert (= ($Snap.first $t@14@02) $Snap.unit))
(assert (= ($Snap.second $t@14@02) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Prc_half_adder_2___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@15@02 $Ref)
(declare-const globals@16@02 $Ref)
(declare-const diz@17@02 $Ref)
(declare-const globals@18@02 $Ref)
(push) ; 1
(declare-const $t@19@02 $Snap)
(assert (= $t@19@02 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@17@02 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.Prc_half_adder_2_m, 1 / 2) && diz.Prc_half_adder_2_m != null && acc(diz.Prc_half_adder_2_m.Main_adder_half_adder2, wildcard) && diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz && acc(diz.Prc_half_adder_2_init, 1 / 2) && !diz.Prc_half_adder_2_init)
(declare-const $t@20@02 $Snap)
(assert (= $t@20@02 ($Snap.combine ($Snap.first $t@20@02) ($Snap.second $t@20@02))))
(assert (= ($Snap.first $t@20@02) $Snap.unit))
(assert (=
  ($Snap.second $t@20@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@20@02))
    ($Snap.second ($Snap.second $t@20@02)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               83
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     22
;  :conflicts               2
;  :datatype-accessor-ax    13
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   12
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             275
;  :mk-clause               3
;  :num-allocs              3359843
;  :num-checks              12
;  :propagations            23
;  :quant-instantiations    5
;  :rlimit-count            104313)
(assert (=
  ($Snap.second ($Snap.second $t@20@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@20@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@20@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@20@02))) $Snap.unit))
; [eval] diz.Prc_half_adder_2_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@20@02))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@20@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@20@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02)))))))
(declare-const $k@21@02 $Perm)
(assert ($Perm.isReadVar $k@21@02 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@21@02 $Perm.No) (< $Perm.No $k@21@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               95
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               3
;  :datatype-accessor-ax    15
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   12
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             284
;  :mk-clause               5
;  :num-allocs              3359843
;  :num-checks              13
;  :propagations            24
;  :quant-instantiations    6
;  :rlimit-count            104886)
(assert (<= $Perm.No $k@21@02))
(assert (<= $k@21@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@21@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@20@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02)))))
  $Snap.unit))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@21@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               101
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   12
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             287
;  :mk-clause               5
;  :num-allocs              3359843
;  :num-checks              14
;  :propagations            24
;  :quant-instantiations    6
;  :rlimit-count            105159)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@20@02)))))
  diz@17@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02)))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   12
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              2
;  :final-checks            8
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             290
;  :mk-clause               5
;  :num-allocs              3359843
;  :num-checks              15
;  :propagations            24
;  :quant-instantiations    7
;  :rlimit-count            105410)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02))))))
  $Snap.unit))
; [eval] !diz.Prc_half_adder_2_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@20@02)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Prc_or___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@22@02 $Ref)
(declare-const globals@23@02 $Ref)
(declare-const diz@24@02 $Ref)
(declare-const globals@25@02 $Ref)
(push) ; 1
(declare-const $t@26@02 $Snap)
(assert (= $t@26@02 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@24@02 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.Prc_or_m, 1 / 2) && diz.Prc_or_m != null && acc(diz.Prc_or_m.Main_adder_prc, wildcard) && diz.Prc_or_m.Main_adder_prc == diz && acc(diz.Prc_or_init, 1 / 2) && !diz.Prc_or_init)
(declare-const $t@27@02 $Snap)
(assert (= $t@27@02 ($Snap.combine ($Snap.first $t@27@02) ($Snap.second $t@27@02))))
(assert (= ($Snap.first $t@27@02) $Snap.unit))
(assert (=
  ($Snap.second $t@27@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@27@02))
    ($Snap.second ($Snap.second $t@27@02)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               157
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     22
;  :conflicts               4
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   23
;  :datatype-splits         7
;  :decisions               16
;  :del-clause              4
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             302
;  :mk-clause               5
;  :num-allocs              3359843
;  :num-checks              21
;  :propagations            24
;  :quant-instantiations    9
;  :rlimit-count            107348)
(assert (=
  ($Snap.second ($Snap.second $t@27@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@27@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@27@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@27@02))) $Snap.unit))
; [eval] diz.Prc_or_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@27@02))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@27@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@27@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))))
(declare-const $k@28@02 $Perm)
(assert ($Perm.isReadVar $k@28@02 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@28@02 $Perm.No) (< $Perm.No $k@28@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               169
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      6
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               5
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   23
;  :datatype-splits         7
;  :decisions               16
;  :del-clause              4
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             311
;  :mk-clause               7
;  :num-allocs              3359843
;  :num-checks              22
;  :propagations            25
;  :quant-instantiations    10
;  :rlimit-count            107921)
(assert (<= $Perm.No $k@28@02))
(assert (<= $k@28@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@28@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@27@02)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))
  $Snap.unit))
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@28@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               175
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   23
;  :datatype-splits         7
;  :decisions               16
;  :del-clause              4
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             314
;  :mk-clause               7
;  :num-allocs              3359843
;  :num-checks              23
;  :propagations            25
;  :quant-instantiations    10
;  :rlimit-count            108194)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))
  diz@24@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               182
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               6
;  :datatype-accessor-ax    24
;  :datatype-constructor-ax 16
;  :datatype-occurs-check   23
;  :datatype-splits         7
;  :decisions               16
;  :del-clause              4
;  :final-checks            14
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             317
;  :mk-clause               7
;  :num-allocs              3359843
;  :num-checks              24
;  :propagations            25
;  :quant-instantiations    11
;  :rlimit-count            108445)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02))))))
  $Snap.unit))
; [eval] !diz.Prc_or_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@02)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Main_main_EncodedGlobalVariables ----------
(declare-const diz@29@02 $Ref)
(declare-const globals@30@02 $Ref)
(declare-const diz@31@02 $Ref)
(declare-const globals@32@02 $Ref)
(push) ; 1
(declare-const $t@33@02 $Snap)
(assert (= $t@33@02 ($Snap.combine ($Snap.first $t@33@02) ($Snap.second $t@33@02))))
(assert (= ($Snap.first $t@33@02) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@31@02 $Ref.null)))
(assert (=
  ($Snap.second $t@33@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@33@02))
    ($Snap.second ($Snap.second $t@33@02)))))
(declare-const $k@34@02 $Perm)
(assert ($Perm.isReadVar $k@34@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@34@02 $Perm.No) (< $Perm.No $k@34@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               230
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      8
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             332
;  :mk-clause               9
;  :num-allocs              3359843
;  :num-checks              29
;  :propagations            26
;  :quant-instantiations    13
;  :rlimit-count            110303)
(assert (<= $Perm.No $k@34@02))
(assert (<= $k@34@02 $Perm.Write))
(assert (implies (< $Perm.No $k@34@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@33@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@33@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@33@02))) $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@34@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               236
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    28
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             335
;  :mk-clause               9
;  :num-allocs              3359843
;  :num-checks              30
;  :propagations            26
;  :quant-instantiations    13
;  :rlimit-count            110556)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@33@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))
(push) ; 2
(assert (not (< $Perm.No $k@34@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             338
;  :mk-clause               9
;  :num-allocs              3359843
;  :num-checks              31
;  :propagations            26
;  :quant-instantiations    14
;  :rlimit-count            110840)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               242
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    29
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             338
;  :mk-clause               9
;  :num-allocs              3359843
;  :num-checks              32
;  :propagations            26
;  :quant-instantiations    14
;  :rlimit-count            110853)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))
  $Snap.unit))
; [eval] diz.Main_adder_prc.Prc_or_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@34@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               248
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               10
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.77
;  :mk-bool-var             340
;  :mk-clause               9
;  :num-allocs              3359843
;  :num-checks              33
;  :propagations            26
;  :quant-instantiations    14
;  :rlimit-count            111072)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))
  diz@31@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
(push) ; 2
(assert (not (< $Perm.No $k@34@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               11
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             343
;  :mk-clause               9
;  :num-allocs              3479291
;  :num-checks              34
;  :propagations            26
;  :quant-instantiations    15
;  :rlimit-count            111358)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               11
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             343
;  :mk-clause               9
;  :num-allocs              3479291
;  :num-checks              35
;  :propagations            26
;  :quant-instantiations    15
;  :rlimit-count            111371)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))
  $Snap.unit))
; [eval] !diz.Main_adder_prc.Prc_or_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@34@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               261
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               12
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             345
;  :mk-clause               9
;  :num-allocs              3479291
;  :num-checks              36
;  :propagations            26
;  :quant-instantiations    15
;  :rlimit-count            111610)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))
(declare-const $k@35@02 $Perm)
(assert ($Perm.isReadVar $k@35@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@35@02 $Perm.No) (< $Perm.No $k@35@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               270
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      10
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             353
;  :mk-clause               11
;  :num-allocs              3479291
;  :num-checks              37
;  :propagations            27
;  :quant-instantiations    17
;  :rlimit-count            112077)
(assert (<= $Perm.No $k@35@02))
(assert (<= $k@35@02 $Perm.Write))
(assert (implies (< $Perm.No $k@35@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               276
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               14
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             356
;  :mk-clause               11
;  :num-allocs              3479291
;  :num-checks              38
;  :propagations            27
;  :quant-instantiations    17
;  :rlimit-count            112390)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@35@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               282
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               15
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             359
;  :mk-clause               11
;  :num-allocs              3479291
;  :num-checks              39
;  :propagations            27
;  :quant-instantiations    18
;  :rlimit-count            112734)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               282
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               15
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             359
;  :mk-clause               11
;  :num-allocs              3479291
;  :num-checks              40
;  :propagations            27
;  :quant-instantiations    18
;  :rlimit-count            112747)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1.Prc_half_adder_1_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               288
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               16
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             361
;  :mk-clause               11
;  :num-allocs              3479291
;  :num-checks              41
;  :propagations            27
;  :quant-instantiations    18
;  :rlimit-count            113026)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))
  diz@31@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@35@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               296
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               17
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             364
;  :mk-clause               11
;  :num-allocs              3479291
;  :num-checks              42
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            113371)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               296
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               17
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             364
;  :mk-clause               11
;  :num-allocs              3479291
;  :num-checks              43
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            113384)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))
  $Snap.unit))
; [eval] !diz.Main_adder_half_adder1.Prc_half_adder_1_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               302
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               18
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             366
;  :mk-clause               11
;  :num-allocs              3479291
;  :num-checks              44
;  :propagations            27
;  :quant-instantiations    19
;  :rlimit-count            113683)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))
(declare-const $k@36@02 $Perm)
(assert ($Perm.isReadVar $k@36@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@36@02 $Perm.No) (< $Perm.No $k@36@02))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               310
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      12
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             373
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              45
;  :propagations            28
;  :quant-instantiations    20
;  :rlimit-count            114193)
(assert (<= $Perm.No $k@36@02))
(assert (<= $k@36@02 $Perm.Write))
(assert (implies (< $Perm.No $k@36@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@36@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               316
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             376
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              46
;  :propagations            28
;  :quant-instantiations    20
;  :rlimit-count            114566)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@36@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               322
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             379
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              47
;  :propagations            28
;  :quant-instantiations    21
;  :rlimit-count            114970)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               322
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             379
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              48
;  :propagations            28
;  :quant-instantiations    21
;  :rlimit-count            114983)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2.Prc_half_adder_2_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@36@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               328
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             381
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              49
;  :propagations            28
;  :quant-instantiations    21
;  :rlimit-count            115322)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))
  diz@31@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@36@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               336
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             384
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              50
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            115727)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               336
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             384
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              51
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            115740)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_adder_half_adder2.Prc_half_adder_2_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@36@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               342
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             386
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              52
;  :propagations            28
;  :quant-instantiations    22
;  :rlimit-count            116099)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@34@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               350
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             389
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              53
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            116525)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@35@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               355
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             390
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              54
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            116872)
(push) ; 2
(assert (not (< $Perm.No $k@36@02)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               355
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 28
;  :datatype-occurs-check   33
;  :datatype-splits         10
;  :decisions               28
;  :del-clause              6
;  :final-checks            19
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             390
;  :mk-clause               13
;  :num-allocs              3479291
;  :num-checks              55
;  :propagations            28
;  :quant-instantiations    23
;  :rlimit-count            116920)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@37@02 $Snap)
(assert (= $t@37@02 ($Snap.combine ($Snap.first $t@37@02) ($Snap.second $t@37@02))))
(declare-const $k@38@02 $Perm)
(assert ($Perm.isReadVar $k@38@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@38@02 $Perm.No) (< $Perm.No $k@38@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               382
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      14
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             403
;  :mk-clause               15
;  :num-allocs              3479291
;  :num-checks              57
;  :propagations            29
;  :quant-instantiations    23
;  :rlimit-count            117607)
(assert (<= $Perm.No $k@38@02))
(assert (<= $k@38@02 $Perm.Write))
(assert (implies (< $Perm.No $k@38@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second $t@37@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@37@02))
    ($Snap.second ($Snap.second $t@37@02)))))
(assert (= ($Snap.first ($Snap.second $t@37@02)) $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               388
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             406
;  :mk-clause               15
;  :num-allocs              3479291
;  :num-checks              58
;  :propagations            29
;  :quant-instantiations    23
;  :rlimit-count            117850)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@37@02)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@37@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@37@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))
(push) ; 3
(assert (not (< $Perm.No $k@38@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               394
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             409
;  :mk-clause               15
;  :num-allocs              3479291
;  :num-checks              59
;  :propagations            29
;  :quant-instantiations    24
;  :rlimit-count            118122)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               394
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             409
;  :mk-clause               15
;  :num-allocs              3479291
;  :num-checks              60
;  :propagations            29
;  :quant-instantiations    24
;  :rlimit-count            118135)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@37@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@02))))
  $Snap.unit))
; [eval] diz.Main_adder_prc.Prc_or_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               400
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             411
;  :mk-clause               15
;  :num-allocs              3479291
;  :num-checks              61
;  :propagations            29
;  :quant-instantiations    24
;  :rlimit-count            118344
;  :time                    0.00)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@37@02))))
  diz@31@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))
(push) ; 3
(assert (not (< $Perm.No $k@38@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               408
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             414
;  :mk-clause               15
;  :num-allocs              3479291
;  :num-checks              62
;  :propagations            29
;  :quant-instantiations    25
;  :rlimit-count            118619)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               408
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             414
;  :mk-clause               15
;  :num-allocs              3479291
;  :num-checks              63
;  :propagations            29
;  :quant-instantiations    25
;  :rlimit-count            118632)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))
  $Snap.unit))
; [eval] !diz.Main_adder_prc.Prc_or_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               414
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             416
;  :mk-clause               15
;  :num-allocs              3479291
;  :num-checks              64
;  :propagations            29
;  :quant-instantiations    25
;  :rlimit-count            118861)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))
(declare-const $k@39@02 $Perm)
(assert ($Perm.isReadVar $k@39@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@39@02 $Perm.No) (< $Perm.No $k@39@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               422
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      16
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             423
;  :mk-clause               17
;  :num-allocs              3479291
;  :num-checks              65
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            119301)
(assert (<= $Perm.No $k@39@02))
(assert (<= $k@39@02 $Perm.Write))
(assert (implies (< $Perm.No $k@39@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@39@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               428
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             426
;  :mk-clause               17
;  :num-allocs              3479291
;  :num-checks              66
;  :propagations            30
;  :quant-instantiations    26
;  :rlimit-count            119604)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@39@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               434
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             429
;  :mk-clause               17
;  :num-allocs              3479291
;  :num-checks              67
;  :propagations            30
;  :quant-instantiations    27
;  :rlimit-count            119938)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               434
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             429
;  :mk-clause               17
;  :num-allocs              3479291
;  :num-checks              68
;  :propagations            30
;  :quant-instantiations    27
;  :rlimit-count            119951)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1.Prc_half_adder_1_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@39@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               440
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               37
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             431
;  :mk-clause               17
;  :num-allocs              3479291
;  :num-checks              69
;  :propagations            30
;  :quant-instantiations    27
;  :rlimit-count            120220)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))
  diz@31@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@39@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               448
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             434
;  :mk-clause               17
;  :num-allocs              3479291
;  :num-checks              70
;  :propagations            30
;  :quant-instantiations    28
;  :rlimit-count            120555)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               448
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             434
;  :mk-clause               17
;  :num-allocs              3479291
;  :num-checks              71
;  :propagations            30
;  :quant-instantiations    28
;  :rlimit-count            120568)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))
  $Snap.unit))
; [eval] !diz.Main_adder_half_adder1.Prc_half_adder_1_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@39@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               454
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             436
;  :mk-clause               17
;  :num-allocs              3479291
;  :num-checks              72
;  :propagations            30
;  :quant-instantiations    28
;  :rlimit-count            120857)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))
(declare-const $k@40@02 $Perm)
(assert ($Perm.isReadVar $k@40@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@40@02 $Perm.No) (< $Perm.No $k@40@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               462
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      18
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             443
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              73
;  :propagations            31
;  :quant-instantiations    29
;  :rlimit-count            121357)
(assert (<= $Perm.No $k@40@02))
(assert (<= $k@40@02 $Perm.Write))
(assert (implies (< $Perm.No $k@40@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@40@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               468
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               41
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             446
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              74
;  :propagations            31
;  :quant-instantiations    29
;  :rlimit-count            121720)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@40@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             449
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              75
;  :propagations            31
;  :quant-instantiations    30
;  :rlimit-count            122114)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               474
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             449
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              76
;  :propagations            31
;  :quant-instantiations    30
;  :rlimit-count            122127)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2.Prc_half_adder_2_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@40@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               480
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             451
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              77
;  :propagations            31
;  :quant-instantiations    30
;  :rlimit-count            122456)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))
  diz@31@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@40@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               488
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             454
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              78
;  :propagations            31
;  :quant-instantiations    31
;  :rlimit-count            122851)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               488
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             454
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              79
;  :propagations            31
;  :quant-instantiations    31
;  :rlimit-count            122864)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))))
  $Snap.unit))
; [eval] !diz.Main_adder_half_adder2.Prc_half_adder_2_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@40@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               494
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             456
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              80
;  :propagations            31
;  :quant-instantiations    31
;  :rlimit-count            123213)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@38@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               502
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               46
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             459
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              81
;  :propagations            31
;  :quant-instantiations    32
;  :rlimit-count            123629)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@02)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@39@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               507
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               47
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             460
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              82
;  :propagations            31
;  :quant-instantiations    32
;  :rlimit-count            123966)
(push) ; 3
(assert (not (< $Perm.No $k@40@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               507
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 36
;  :datatype-occurs-check   35
;  :datatype-splits         18
;  :decisions               36
;  :del-clause              12
;  :final-checks            21
;  :max-generation          2
;  :max-memory              3.96
;  :memory                  3.95
;  :mk-bool-var             460
;  :mk-clause               19
;  :num-allocs              3479291
;  :num-checks              83
;  :propagations            31
;  :quant-instantiations    32
;  :rlimit-count            124014)
(pop) ; 2
(push) ; 2
; [exec]
; var min_advance__107: Int
(declare-const min_advance__107@41@02 Int)
; [exec]
; var __flatten_99__105: Seq[Int]
(declare-const __flatten_99__105@42@02 Seq<Int>)
; [exec]
; var __flatten_100__106: Seq[Int]
(declare-const __flatten_100__106@43@02 Seq<Int>)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@44@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@44@02 ($Snap.combine ($Snap.first $t@44@02) ($Snap.second $t@44@02))))
(assert (= ($Snap.first $t@44@02) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@44@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@44@02))
    ($Snap.second ($Snap.second $t@44@02)))))
(assert (= ($Snap.first ($Snap.second $t@44@02)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@44@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@44@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@44@02))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@44@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@45@02 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@45@02 | live]
; [else-branch: 0 | !(0 <= i@45@02) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@45@02]
(assert (<= 0 i@45@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@45@02)]
(assert (not (<= 0 i@45@02)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@45@02 < |First:(Second:(Second:(Second:($t@44@02))))| && 0 <= i@45@02 | live]
; [else-branch: 1 | !(i@45@02 < |First:(Second:(Second:(Second:($t@44@02))))| && 0 <= i@45@02) | live]
(push) ; 5
; [then-branch: 1 | i@45@02 < |First:(Second:(Second:(Second:($t@44@02))))| && 0 <= i@45@02]
(assert (and
  (<
    i@45@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
  (<= 0 i@45@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@45@02 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               579
;  :arith-assert-diseq      11
;  :arith-assert-lower      26
;  :arith-assert-upper      22
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              18
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             492
;  :mk-clause               25
;  :num-allocs              3607787
;  :num-checks              85
;  :propagations            33
;  :quant-instantiations    38
;  :rlimit-count            125751)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@44@02))))[i@45@02] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@44@02))))[i@45@02] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@44@02))))[i@45@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    i@45@02)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@44@02))))[i@45@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
      i@45@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@45@02 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               579
;  :arith-assert-diseq      11
;  :arith-assert-lower      26
;  :arith-assert-upper      22
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              18
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             493
;  :mk-clause               25
;  :num-allocs              3607787
;  :num-checks              86
;  :propagations            33
;  :quant-instantiations    38
;  :rlimit-count            125926)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@44@02))))[i@45@02] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@44@02))))[i@45@02]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@44@02))))[i@45@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    i@45@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@45@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               579
;  :arith-assert-diseq      12
;  :arith-assert-lower      29
;  :arith-assert-upper      22
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              18
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             496
;  :mk-clause               26
;  :num-allocs              3607787
;  :num-checks              87
;  :propagations            33
;  :quant-instantiations    38
;  :rlimit-count            126049)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@44@02))))[i@45@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
      i@45@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@45@02 < |First:(Second:(Second:(Second:($t@44@02))))| && 0 <= i@45@02)]
(assert (not
  (and
    (<
      i@45@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
    (<= 0 i@45@02))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@45@02 Int)) (!
  (implies
    (and
      (<
        i@45@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
      (<= 0 i@45@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
          i@45@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
            i@45@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
            i@45@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    i@45@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))
(declare-const $k@46@02 $Perm)
(assert ($Perm.isReadVar $k@46@02 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@46@02 $Perm.No) (< $Perm.No $k@46@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               584
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             502
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              88
;  :propagations            34
;  :quant-instantiations    38
;  :rlimit-count            126817)
(assert (<= $Perm.No $k@46@02))
(assert (<= $k@46@02 $Perm.Write))
(assert (implies (< $Perm.No $k@46@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               590
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             505
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              89
;  :propagations            34
;  :quant-instantiations    38
;  :rlimit-count            127140)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               596
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             508
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              90
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            127496)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               601
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               52
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             509
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              91
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            127753)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               606
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               53
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             510
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              92
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            128020)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               611
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             511
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              93
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            128297)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               616
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             512
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              94
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            128584)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               621
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             513
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              95
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            128881)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               626
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             514
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              96
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            129188)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               631
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             515
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              97
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            129505)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               636
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             516
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              98
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            129832)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               641
;  :arith-assert-diseq      13
;  :arith-assert-lower      31
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             517
;  :mk-clause               28
;  :num-allocs              3607787
;  :num-checks              99
;  :propagations            34
;  :quant-instantiations    39
;  :rlimit-count            130169)
(declare-const $k@47@02 $Perm)
(assert ($Perm.isReadVar $k@47@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@47@02 $Perm.No) (< $Perm.No $k@47@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               641
;  :arith-assert-diseq      14
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               61
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             521
;  :mk-clause               30
;  :num-allocs              3607787
;  :num-checks              100
;  :propagations            35
;  :quant-instantiations    39
;  :rlimit-count            130367)
(assert (<= $Perm.No $k@47@02))
(assert (<= $k@47@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@47@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               647
;  :arith-assert-diseq      14
;  :arith-assert-lower      33
;  :arith-assert-upper      26
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               62
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             524
;  :mk-clause               30
;  :num-allocs              3607787
;  :num-checks              101
;  :propagations            35
;  :quant-instantiations    39
;  :rlimit-count            130800)
(push) ; 3
(assert (not (< $Perm.No $k@47@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               647
;  :arith-assert-diseq      14
;  :arith-assert-lower      33
;  :arith-assert-upper      26
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               63
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             524
;  :mk-clause               30
;  :num-allocs              3607787
;  :num-checks              102
;  :propagations            35
;  :quant-instantiations    39
;  :rlimit-count            130848)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))
  diz@31@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))
(declare-const $k@48@02 $Perm)
(assert ($Perm.isReadVar $k@48@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@48@02 $Perm.No) (< $Perm.No $k@48@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               655
;  :arith-assert-diseq      15
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               64
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             531
;  :mk-clause               32
;  :num-allocs              3607787
;  :num-checks              103
;  :propagations            36
;  :quant-instantiations    40
;  :rlimit-count            131455)
(declare-const $t@49@02 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@34@02)
    (=
      $t@49@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02)))))
  (implies
    (< $Perm.No $k@48@02)
    (=
      $t@49@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@34@02 $k@48@02)))
(assert (<= (+ $k@34@02 $k@48@02) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@34@02 $k@48@02)) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@02 $k@48@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               665
;  :arith-assert-diseq      15
;  :arith-assert-lower      36
;  :arith-assert-upper      29
;  :arith-conflicts         1
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         1
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             539
;  :mk-clause               32
;  :num-allocs              3607787
;  :num-checks              104
;  :propagations            36
;  :quant-instantiations    41
;  :rlimit-count            132182)
(assert (not (= $t@49@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@02 $k@48@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               671
;  :arith-assert-diseq      15
;  :arith-assert-lower      36
;  :arith-assert-upper      30
;  :arith-conflicts         2
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             542
;  :mk-clause               32
;  :num-allocs              3607787
;  :num-checks              105
;  :propagations            36
;  :quant-instantiations    41
;  :rlimit-count            132616)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               671
;  :arith-assert-diseq      15
;  :arith-assert-lower      36
;  :arith-assert-upper      30
;  :arith-conflicts         2
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             542
;  :mk-clause               32
;  :num-allocs              3607787
;  :num-checks              106
;  :propagations            36
;  :quant-instantiations    41
;  :rlimit-count            132629)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               671
;  :arith-assert-diseq      15
;  :arith-assert-lower      36
;  :arith-assert-upper      30
;  :arith-conflicts         2
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             543
;  :mk-clause               32
;  :num-allocs              3607787
;  :num-checks              107
;  :propagations            36
;  :quant-instantiations    41
;  :rlimit-count            132719)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))))
(declare-const $k@50@02 $Perm)
(assert ($Perm.isReadVar $k@50@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@50@02 $Perm.No) (< $Perm.No $k@50@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               679
;  :arith-assert-diseq      16
;  :arith-assert-lower      38
;  :arith-assert-upper      31
;  :arith-conflicts         2
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             550
;  :mk-clause               34
;  :num-allocs              3607787
;  :num-checks              108
;  :propagations            37
;  :quant-instantiations    42
;  :rlimit-count            133339)
(declare-const $t@51@02 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@35@02)
    (=
      $t@51@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))
  (implies
    (< $Perm.No $k@50@02)
    (=
      $t@51@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@35@02 $k@50@02)))
(assert (<= (+ $k@35@02 $k@50@02) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@35@02 $k@50@02)) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@02 $k@50@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               689
;  :arith-assert-diseq      16
;  :arith-assert-lower      39
;  :arith-assert-upper      33
;  :arith-conflicts         3
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         3
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             558
;  :mk-clause               34
;  :num-allocs              3607787
;  :num-checks              109
;  :propagations            37
;  :quant-instantiations    43
;  :rlimit-count            134160)
(assert (not (= $t@51@02 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@02 $k@50@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      16
;  :arith-assert-lower      39
;  :arith-assert-upper      34
;  :arith-conflicts         4
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         4
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             561
;  :mk-clause               34
;  :num-allocs              3607787
;  :num-checks              110
;  :propagations            37
;  :quant-instantiations    43
;  :rlimit-count            134626)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      16
;  :arith-assert-lower      39
;  :arith-assert-upper      34
;  :arith-conflicts         4
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         4
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             561
;  :mk-clause               34
;  :num-allocs              3607787
;  :num-checks              111
;  :propagations            37
;  :quant-instantiations    43
;  :rlimit-count            134639)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      16
;  :arith-assert-lower      39
;  :arith-assert-upper      34
;  :arith-conflicts         4
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         4
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             562
;  :mk-clause               34
;  :num-allocs              3607787
;  :num-checks              112
;  :propagations            37
;  :quant-instantiations    43
;  :rlimit-count            134789)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))))))
(declare-const $k@52@02 $Perm)
(assert ($Perm.isReadVar $k@52@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@52@02 $Perm.No) (< $Perm.No $k@52@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               703
;  :arith-assert-diseq      17
;  :arith-assert-lower      41
;  :arith-assert-upper      35
;  :arith-conflicts         4
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         4
;  :arith-pivots            1
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.04
;  :memory                  4.04
;  :mk-bool-var             569
;  :mk-clause               36
;  :num-allocs              3607787
;  :num-checks              113
;  :propagations            38
;  :quant-instantiations    44
;  :rlimit-count            135438)
(declare-const $t@53@02 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@36@02)
    (=
      $t@53@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))
  (implies
    (< $Perm.No $k@52@02)
    (=
      $t@53@02
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@36@02 $k@52@02)))
(assert (<= (+ $k@36@02 $k@52@02) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@36@02 $k@52@02)) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@02 $k@52@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               713
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      37
;  :arith-conflicts         5
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         5
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             577
;  :mk-clause               36
;  :num-allocs              3742802
;  :num-checks              114
;  :propagations            38
;  :quant-instantiations    45
;  :rlimit-count            136349)
(assert (not (= $t@53@02 $Ref.null)))
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@02 $k@52@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               714
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      38
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         6
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             579
;  :mk-clause               36
;  :num-allocs              3742802
;  :num-checks              115
;  :propagations            38
;  :quant-instantiations    45
;  :rlimit-count            136467)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               714
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      38
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         6
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             579
;  :mk-clause               36
;  :num-allocs              3742802
;  :num-checks              116
;  :propagations            38
;  :quant-instantiations    45
;  :rlimit-count            136480)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               714
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      38
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         6
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 44
;  :datatype-occurs-check   36
;  :datatype-splits         18
;  :decisions               44
;  :del-clause              19
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             580
;  :mk-clause               36
;  :num-allocs              3742802
;  :num-checks              117
;  :propagations            38
;  :quant-instantiations    45
;  :rlimit-count            136690)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))))))))))))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@44@02 diz@31@02 globals@32@02))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@54@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Prc_or_forkOperator_EncodedGlobalVariables(diz.Main_adder_prc, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@02 $k@48@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      39
;  :arith-conflicts         7
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              35
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             614
;  :mk-clause               37
;  :num-allocs              3742802
;  :num-checks              120
;  :propagations            39
;  :quant-instantiations    46
;  :rlimit-count            138537)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      39
;  :arith-conflicts         7
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              35
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             614
;  :mk-clause               37
;  :num-allocs              3742802
;  :num-checks              121
;  :propagations            39
;  :quant-instantiations    46
;  :rlimit-count            138550)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      39
;  :arith-conflicts         7
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              35
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             615
;  :mk-clause               37
;  :num-allocs              3742802
;  :num-checks              122
;  :propagations            39
;  :quant-instantiations    46
;  :rlimit-count            138640)
; [eval] diz.Prc_or_m != null
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      39
;  :arith-conflicts         7
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              35
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             616
;  :mk-clause               37
;  :num-allocs              3742802
;  :num-checks              123
;  :propagations            39
;  :quant-instantiations    46
;  :rlimit-count            138730)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      17
;  :arith-assert-lower      42
;  :arith-assert-upper      39
;  :arith-conflicts         7
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              35
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             616
;  :mk-clause               37
;  :num-allocs              3742802
;  :num-checks              124
;  :propagations            39
;  :quant-instantiations    46
;  :rlimit-count            138748)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))
    $Ref.null)))
(declare-const $k@55@02 $Perm)
(assert ($Perm.isReadVar $k@55@02 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      18
;  :arith-assert-lower      44
;  :arith-assert-upper      40
;  :arith-conflicts         7
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              35
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             621
;  :mk-clause               39
;  :num-allocs              3742802
;  :num-checks              125
;  :propagations            40
;  :quant-instantiations    46
;  :rlimit-count            139013)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@55@02 $Perm.No) (< $Perm.No $k@55@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      18
;  :arith-assert-lower      44
;  :arith-assert-upper      40
;  :arith-conflicts         7
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              35
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             621
;  :mk-clause               39
;  :num-allocs              3742802
;  :num-checks              126
;  :propagations            40
;  :quant-instantiations    46
;  :rlimit-count            139063)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@31@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               875
;  :arith-assert-diseq      18
;  :arith-assert-lower      44
;  :arith-assert-upper      40
;  :arith-conflicts         7
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              35
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             621
;  :mk-clause               39
;  :num-allocs              3742802
;  :num-checks              127
;  :propagations            40
;  :quant-instantiations    46
;  :rlimit-count            139074)
(push) ; 3
(assert (not (not (= (+ $k@34@02 $k@48@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-assert-diseq      18
;  :arith-assert-lower      44
;  :arith-assert-upper      41
;  :arith-conflicts         8
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              37
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             623
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              128
;  :propagations            41
;  :quant-instantiations    46
;  :rlimit-count            139134)
(assert (< $k@55@02 (+ $k@34@02 $k@48@02)))
(assert (<= $Perm.No (- (+ $k@34@02 $k@48@02) $k@55@02)))
(assert (<= (- (+ $k@34@02 $k@48@02) $k@55@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@34@02 $k@48@02) $k@55@02))
  (not (= diz@31@02 $Ref.null))))
; [eval] diz.Prc_or_m.Main_adder_prc == diz
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      42
;  :arith-conflicts         8
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              37
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             627
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              129
;  :propagations            41
;  :quant-instantiations    46
;  :rlimit-count            139392)
(push) ; 3
(assert (not (=
  diz@31@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      42
;  :arith-conflicts         8
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         7
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              37
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             627
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              130
;  :propagations            41
;  :quant-instantiations    46
;  :rlimit-count            139403)
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@02 $k@48@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      43
;  :arith-conflicts         9
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         8
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              37
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             628
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              131
;  :propagations            41
;  :quant-instantiations    46
;  :rlimit-count            139463)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      43
;  :arith-conflicts         9
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         8
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              37
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             628
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              132
;  :propagations            41
;  :quant-instantiations    46
;  :rlimit-count            139476)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      43
;  :arith-conflicts         9
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         8
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 89
;  :datatype-occurs-check   52
;  :datatype-splits         46
;  :decisions               87
;  :del-clause              37
;  :final-checks            28
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             629
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              133
;  :propagations            41
;  :quant-instantiations    46
;  :rlimit-count            139566)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               953
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      43
;  :arith-conflicts         9
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         8
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 111
;  :datatype-occurs-check   60
;  :datatype-splits         60
;  :decisions               108
;  :del-clause              37
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             642
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              134
;  :propagations            42
;  :quant-instantiations    46
;  :rlimit-count            140269
;  :time                    0.00)
; [eval] !diz.Prc_or_init
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               953
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      43
;  :arith-conflicts         9
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         8
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 111
;  :datatype-occurs-check   60
;  :datatype-splits         60
;  :decisions               108
;  :del-clause              37
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             643
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              135
;  :propagations            42
;  :quant-instantiations    46
;  :rlimit-count            140359)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               953
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      43
;  :arith-conflicts         9
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         8
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 111
;  :datatype-occurs-check   60
;  :datatype-splits         60
;  :decisions               108
;  :del-clause              37
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             644
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              136
;  :propagations            42
;  :quant-instantiations    46
;  :rlimit-count            140449)
(declare-const $t@56@02 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Prc_half_adder_1_forkOperator_EncodedGlobalVariables(diz.Main_adder_half_adder1, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@02 $k@50@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1030
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      44
;  :arith-conflicts         10
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              39
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             658
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              138
;  :propagations            43
;  :quant-instantiations    46
;  :rlimit-count            141198)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1030
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      44
;  :arith-conflicts         10
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              39
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             658
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              139
;  :propagations            43
;  :quant-instantiations    46
;  :rlimit-count            141211)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1030
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      44
;  :arith-conflicts         10
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              39
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             659
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              140
;  :propagations            43
;  :quant-instantiations    46
;  :rlimit-count            141361)
; [eval] diz.Prc_half_adder_1_m != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1030
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      44
;  :arith-conflicts         10
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              39
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             660
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              141
;  :propagations            43
;  :quant-instantiations    46
;  :rlimit-count            141511)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1030
;  :arith-assert-diseq      18
;  :arith-assert-lower      46
;  :arith-assert-upper      44
;  :arith-conflicts         10
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              39
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             660
;  :mk-clause               41
;  :num-allocs              3742802
;  :num-checks              142
;  :propagations            43
;  :quant-instantiations    46
;  :rlimit-count            141529)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))
    $Ref.null)))
(declare-const $k@57@02 $Perm)
(assert ($Perm.isReadVar $k@57@02 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1030
;  :arith-assert-diseq      19
;  :arith-assert-lower      48
;  :arith-assert-upper      45
;  :arith-conflicts         10
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              39
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             665
;  :mk-clause               43
;  :num-allocs              3742802
;  :num-checks              143
;  :propagations            44
;  :quant-instantiations    46
;  :rlimit-count            141854)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@57@02 $Perm.No) (< $Perm.No $k@57@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1030
;  :arith-assert-diseq      19
;  :arith-assert-lower      48
;  :arith-assert-upper      45
;  :arith-conflicts         10
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              39
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             665
;  :mk-clause               43
;  :num-allocs              3742802
;  :num-checks              144
;  :propagations            44
;  :quant-instantiations    46
;  :rlimit-count            141904)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@31@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1030
;  :arith-assert-diseq      19
;  :arith-assert-lower      48
;  :arith-assert-upper      45
;  :arith-conflicts         10
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              39
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             665
;  :mk-clause               43
;  :num-allocs              3742802
;  :num-checks              145
;  :propagations            44
;  :quant-instantiations    46
;  :rlimit-count            141915)
(push) ; 3
(assert (not (not (= (+ $k@35@02 $k@50@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1031
;  :arith-assert-diseq      19
;  :arith-assert-lower      48
;  :arith-assert-upper      46
;  :arith-conflicts         11
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              41
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             667
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              146
;  :propagations            45
;  :quant-instantiations    46
;  :rlimit-count            141977)
(assert (< $k@57@02 (+ $k@35@02 $k@50@02)))
(assert (<= $Perm.No (- (+ $k@35@02 $k@50@02) $k@57@02)))
(assert (<= (- (+ $k@35@02 $k@50@02) $k@57@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@35@02 $k@50@02) $k@57@02))
  (not (= diz@31@02 $Ref.null))))
; [eval] diz.Prc_half_adder_1_m.Main_adder_half_adder1 == diz
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1031
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      47
;  :arith-conflicts         11
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              41
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             671
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              147
;  :propagations            45
;  :quant-instantiations    46
;  :rlimit-count            142296)
(push) ; 3
(assert (not (=
  diz@31@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1031
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      47
;  :arith-conflicts         11
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         9
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              41
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             671
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              148
;  :propagations            45
;  :quant-instantiations    46
;  :rlimit-count            142307)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@02 $k@50@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1031
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      48
;  :arith-conflicts         12
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              41
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             672
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              149
;  :propagations            45
;  :quant-instantiations    46
;  :rlimit-count            142370)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1031
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      48
;  :arith-conflicts         12
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              41
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             672
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              150
;  :propagations            45
;  :quant-instantiations    46
;  :rlimit-count            142383)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1031
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      48
;  :arith-conflicts         12
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 133
;  :datatype-occurs-check   68
;  :datatype-splits         74
;  :decisions               129
;  :del-clause              41
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             673
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              151
;  :propagations            45
;  :quant-instantiations    46
;  :rlimit-count            142533)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1108
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      48
;  :arith-conflicts         12
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   76
;  :datatype-splits         88
;  :decisions               150
;  :del-clause              41
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             686
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              152
;  :propagations            46
;  :quant-instantiations    46
;  :rlimit-count            143242)
; [eval] !diz.Prc_half_adder_1_init
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1108
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      48
;  :arith-conflicts         12
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   76
;  :datatype-splits         88
;  :decisions               150
;  :del-clause              41
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             687
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              153
;  :propagations            46
;  :quant-instantiations    46
;  :rlimit-count            143392)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1108
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      48
;  :arith-conflicts         12
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         10
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 155
;  :datatype-occurs-check   76
;  :datatype-splits         88
;  :decisions               150
;  :del-clause              41
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             688
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              154
;  :propagations            46
;  :quant-instantiations    46
;  :rlimit-count            143542)
(declare-const $t@58@02 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Prc_half_adder_2_forkOperator_EncodedGlobalVariables(diz.Main_adder_half_adder2, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@02 $k@52@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1185
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      49
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              43
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             702
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              156
;  :propagations            47
;  :quant-instantiations    46
;  :rlimit-count            144297)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1185
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      49
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              43
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             702
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              157
;  :propagations            47
;  :quant-instantiations    46
;  :rlimit-count            144310)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1185
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      49
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              43
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             703
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              158
;  :propagations            47
;  :quant-instantiations    46
;  :rlimit-count            144520)
; [eval] diz.Prc_half_adder_2_m != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1185
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      49
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              43
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             704
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              159
;  :propagations            47
;  :quant-instantiations    46
;  :rlimit-count            144730)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1185
;  :arith-add-rows          1
;  :arith-assert-diseq      19
;  :arith-assert-lower      50
;  :arith-assert-upper      49
;  :arith-conflicts         13
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              43
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             704
;  :mk-clause               45
;  :num-allocs              3742802
;  :num-checks              160
;  :propagations            47
;  :quant-instantiations    46
;  :rlimit-count            144748)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))))
    $Ref.null)))
(declare-const $k@59@02 $Perm)
(assert ($Perm.isReadVar $k@59@02 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1185
;  :arith-add-rows          1
;  :arith-assert-diseq      20
;  :arith-assert-lower      52
;  :arith-assert-upper      50
;  :arith-conflicts         13
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              43
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             709
;  :mk-clause               47
;  :num-allocs              3742802
;  :num-checks              161
;  :propagations            48
;  :quant-instantiations    46
;  :rlimit-count            145132)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@59@02 $Perm.No) (< $Perm.No $k@59@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1185
;  :arith-add-rows          1
;  :arith-assert-diseq      20
;  :arith-assert-lower      52
;  :arith-assert-upper      50
;  :arith-conflicts         13
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              43
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             709
;  :mk-clause               47
;  :num-allocs              3742802
;  :num-checks              162
;  :propagations            48
;  :quant-instantiations    46
;  :rlimit-count            145182)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@31@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1185
;  :arith-add-rows          1
;  :arith-assert-diseq      20
;  :arith-assert-lower      52
;  :arith-assert-upper      50
;  :arith-conflicts         13
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              43
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             709
;  :mk-clause               47
;  :num-allocs              3742802
;  :num-checks              163
;  :propagations            48
;  :quant-instantiations    46
;  :rlimit-count            145193)
(push) ; 3
(assert (not (not (= (+ $k@36@02 $k@52@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1186
;  :arith-add-rows          1
;  :arith-assert-diseq      20
;  :arith-assert-lower      52
;  :arith-assert-upper      51
;  :arith-conflicts         14
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              45
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             711
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              164
;  :propagations            49
;  :quant-instantiations    46
;  :rlimit-count            145255)
(assert (< $k@59@02 (+ $k@36@02 $k@52@02)))
(assert (<= $Perm.No (- (+ $k@36@02 $k@52@02) $k@59@02)))
(assert (<= (- (+ $k@36@02 $k@52@02) $k@59@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@36@02 $k@52@02) $k@59@02))
  (not (= diz@31@02 $Ref.null))))
; [eval] diz.Prc_half_adder_2_m.Main_adder_half_adder2 == diz
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1186
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      54
;  :arith-assert-upper      52
;  :arith-conflicts         14
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              45
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             715
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              165
;  :propagations            49
;  :quant-instantiations    46
;  :rlimit-count            145634)
(push) ; 3
(assert (not (=
  diz@31@02
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1186
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      54
;  :arith-assert-upper      52
;  :arith-conflicts         14
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         11
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              45
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             715
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              166
;  :propagations            49
;  :quant-instantiations    46
;  :rlimit-count            145645)
(push) ; 3
(assert (not (< $Perm.No (+ $k@36@02 $k@52@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1186
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      54
;  :arith-assert-upper      53
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              45
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             716
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              167
;  :propagations            49
;  :quant-instantiations    46
;  :rlimit-count            145708)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1186
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      54
;  :arith-assert-upper      53
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              45
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             716
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              168
;  :propagations            49
;  :quant-instantiations    46
;  :rlimit-count            145721)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1186
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      54
;  :arith-assert-upper      53
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 177
;  :datatype-occurs-check   84
;  :datatype-splits         102
;  :decisions               171
;  :del-clause              45
;  :final-checks            40
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             717
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              169
;  :propagations            49
;  :quant-instantiations    46
;  :rlimit-count            145931)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1263
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      54
;  :arith-assert-upper      53
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   92
;  :datatype-splits         116
;  :decisions               192
;  :del-clause              45
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             730
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              170
;  :propagations            50
;  :quant-instantiations    46
;  :rlimit-count            146646
;  :time                    0.00)
; [eval] !diz.Prc_half_adder_2_init
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1263
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      54
;  :arith-assert-upper      53
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   92
;  :datatype-splits         116
;  :decisions               192
;  :del-clause              45
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             731
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              171
;  :propagations            50
;  :quant-instantiations    46
;  :rlimit-count            146856)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1263
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      54
;  :arith-assert-upper      53
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 199
;  :datatype-occurs-check   92
;  :datatype-splits         116
;  :decisions               192
;  :del-clause              45
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.14
;  :memory                  4.14
;  :mk-bool-var             732
;  :mk-clause               49
;  :num-allocs              3742802
;  :num-checks              172
;  :propagations            50
;  :quant-instantiations    46
;  :rlimit-count            147066)
(declare-const $t@60@02 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@61@02 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@61@02 | live]
; [else-branch: 4 | !(0 <= i@61@02) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@61@02]
(assert (<= 0 i@61@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@61@02)]
(assert (not (<= 0 i@61@02)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@61@02 < |First:(Second:(Second:(Second:($t@44@02))))| && 0 <= i@61@02 | live]
; [else-branch: 5 | !(i@61@02 < |First:(Second:(Second:(Second:($t@44@02))))| && 0 <= i@61@02) | live]
(push) ; 5
; [then-branch: 5 | i@61@02 < |First:(Second:(Second:(Second:($t@44@02))))| && 0 <= i@61@02]
(assert (and
  (<
    i@61@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
  (<= 0 i@61@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@61@02 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      20
;  :arith-assert-lower      55
;  :arith-assert-upper      54
;  :arith-conflicts         15
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              47
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             747
;  :mk-clause               49
;  :num-allocs              3888521
;  :num-checks              174
;  :propagations            51
;  :quant-instantiations    46
;  :rlimit-count            147901)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@44@02))))[i@61@02] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@44@02))))[i@61@02] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@44@02))))[i@61@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    i@61@02)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@44@02))))[i@61@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
      i@61@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@61@02 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      21
;  :arith-assert-lower      58
;  :arith-assert-upper      55
;  :arith-conflicts         15
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              47
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             753
;  :mk-clause               53
;  :num-allocs              3888521
;  :num-checks              175
;  :propagations            53
;  :quant-instantiations    47
;  :rlimit-count            148133)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@44@02))))[i@61@02] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@44@02))))[i@61@02]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@44@02))))[i@61@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    i@61@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@61@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      21
;  :arith-assert-lower      58
;  :arith-assert-upper      55
;  :arith-conflicts         15
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              47
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             753
;  :mk-clause               53
;  :num-allocs              3888521
;  :num-checks              176
;  :propagations            53
;  :quant-instantiations    47
;  :rlimit-count            148247)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@44@02))))[i@61@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
      i@61@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@61@02 < |First:(Second:(Second:(Second:($t@44@02))))| && 0 <= i@61@02)]
(assert (not
  (and
    (<
      i@61@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
    (<= 0 i@61@02))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 3
(assert (not (forall ((i@61@02 Int)) (!
  (implies
    (and
      (<
        i@61@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
      (<= 0 i@61@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
          i@61@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
            i@61@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
            i@61@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    i@61@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      23
;  :arith-assert-lower      59
;  :arith-assert-upper      56
;  :arith-conflicts         15
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             761
;  :mk-clause               67
;  :num-allocs              3888521
;  :num-checks              177
;  :propagations            55
;  :quant-instantiations    48
;  :rlimit-count            148693)
(assert (forall ((i@61@02 Int)) (!
  (implies
    (and
      (<
        i@61@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))
      (<= 0 i@61@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
          i@61@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
            i@61@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
            i@61@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))
    i@61@02))
  :qid |prog.l<no position>|)))
(declare-const $k@62@02 $Perm)
(assert ($Perm.isReadVar $k@62@02 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@62@02 $Perm.No) (< $Perm.No $k@62@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      61
;  :arith-assert-upper      57
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             766
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              178
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149253)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@46@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      61
;  :arith-assert-upper      57
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             766
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              179
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149264)
(assert (< $k@62@02 $k@46@02))
(assert (<= $Perm.No (- $k@46@02 $k@62@02)))
(assert (<= (- $k@46@02 $k@62@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@46@02 $k@62@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              180
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149478)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              181
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149526)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              182
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149574)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              183
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149622)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              184
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149670)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              185
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149718)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              186
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149766)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              187
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149814)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              188
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149862)
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      63
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             769
;  :mk-clause               69
;  :num-allocs              3888521
;  :num-checks              189
;  :propagations            56
;  :quant-instantiations    48
;  :rlimit-count            149910)
(declare-const $k@63@02 $Perm)
(assert ($Perm.isReadVar $k@63@02 $Perm.Write))
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      25
;  :arith-assert-lower      65
;  :arith-assert-upper      59
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             773
;  :mk-clause               71
;  :num-allocs              3888521
;  :num-checks              190
;  :propagations            57
;  :quant-instantiations    48
;  :rlimit-count            150107)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@63@02 $Perm.No) (< $Perm.No $k@63@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      25
;  :arith-assert-lower      65
;  :arith-assert-upper      59
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             773
;  :mk-clause               71
;  :num-allocs              3888521
;  :num-checks              191
;  :propagations            57
;  :quant-instantiations    48
;  :rlimit-count            150157)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@47@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      25
;  :arith-assert-lower      65
;  :arith-assert-upper      59
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             773
;  :mk-clause               71
;  :num-allocs              3888521
;  :num-checks              192
;  :propagations            57
;  :quant-instantiations    48
;  :rlimit-count            150168)
(assert (< $k@63@02 $k@47@02))
(assert (<= $Perm.No (- $k@47@02 $k@63@02)))
(assert (<= (- $k@47@02 $k@63@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@47@02 $k@63@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 3
(assert (not (< $Perm.No $k@46@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      25
;  :arith-assert-lower      67
;  :arith-assert-upper      60
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             776
;  :mk-clause               71
;  :num-allocs              3888521
;  :num-checks              193
;  :propagations            57
;  :quant-instantiations    48
;  :rlimit-count            150376)
(push) ; 3
(assert (not (< $Perm.No $k@47@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      25
;  :arith-assert-lower      67
;  :arith-assert-upper      60
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             776
;  :mk-clause               71
;  :num-allocs              3888521
;  :num-checks              194
;  :propagations            57
;  :quant-instantiations    48
;  :rlimit-count            150424)
(declare-const $k@64@02 $Perm)
(assert ($Perm.isReadVar $k@64@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@64@02 $Perm.No) (< $Perm.No $k@64@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      26
;  :arith-assert-lower      69
;  :arith-assert-upper      61
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             780
;  :mk-clause               73
;  :num-allocs              3888521
;  :num-checks              195
;  :propagations            58
;  :quant-instantiations    48
;  :rlimit-count            150622)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@34@02 $k@48@02) $k@55@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          2
;  :arith-assert-diseq      26
;  :arith-assert-lower      69
;  :arith-assert-upper      61
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            3
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             781
;  :mk-clause               73
;  :num-allocs              3888521
;  :num-checks              196
;  :propagations            58
;  :quant-instantiations    48
;  :rlimit-count            150696)
(assert (< $k@64@02 (- (+ $k@34@02 $k@48@02) $k@55@02)))
(assert (<= $Perm.No (- (- (+ $k@34@02 $k@48@02) $k@55@02) $k@64@02)))
(assert (<= (- (- (+ $k@34@02 $k@48@02) $k@55@02) $k@64@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@34@02 $k@48@02) $k@55@02) $k@64@02))
  (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@34@02 $k@48@02) $k@55@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      71
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             784
;  :mk-clause               73
;  :num-allocs              3888521
;  :num-checks              197
;  :propagations            58
;  :quant-instantiations    48
;  :rlimit-count            150959)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      71
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             784
;  :mk-clause               73
;  :num-allocs              3888521
;  :num-checks              198
;  :propagations            58
;  :quant-instantiations    48
;  :rlimit-count            150972)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@34@02 $k@48@02) $k@55@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      71
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             784
;  :mk-clause               73
;  :num-allocs              3888521
;  :num-checks              199
;  :propagations            58
;  :quant-instantiations    48
;  :rlimit-count            150993)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@02))) $t@49@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          4
;  :arith-assert-diseq      26
;  :arith-assert-lower      71
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             785
;  :mk-clause               73
;  :num-allocs              3888521
;  :num-checks              200
;  :propagations            58
;  :quant-instantiations    48
;  :rlimit-count            151083)
(declare-const $k@65@02 $Perm)
(assert ($Perm.isReadVar $k@65@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@65@02 $Perm.No) (< $Perm.No $k@65@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      73
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             789
;  :mk-clause               75
;  :num-allocs              3888521
;  :num-checks              201
;  :propagations            59
;  :quant-instantiations    48
;  :rlimit-count            151281)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@35@02 $k@50@02) $k@57@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          4
;  :arith-assert-diseq      27
;  :arith-assert-lower      73
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             790
;  :mk-clause               75
;  :num-allocs              3888521
;  :num-checks              202
;  :propagations            59
;  :quant-instantiations    48
;  :rlimit-count            151355)
(assert (< $k@65@02 (- (+ $k@35@02 $k@50@02) $k@57@02)))
(assert (<= $Perm.No (- (- (+ $k@35@02 $k@50@02) $k@57@02) $k@65@02)))
(assert (<= (- (- (+ $k@35@02 $k@50@02) $k@57@02) $k@65@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@35@02 $k@50@02) $k@57@02) $k@65@02))
  (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@35@02 $k@50@02) $k@57@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             793
;  :mk-clause               75
;  :num-allocs              3888521
;  :num-checks              203
;  :propagations            59
;  :quant-instantiations    48
;  :rlimit-count            151574)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             793
;  :mk-clause               75
;  :num-allocs              3888521
;  :num-checks              204
;  :propagations            59
;  :quant-instantiations    48
;  :rlimit-count            151587)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@35@02 $k@50@02) $k@57@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             793
;  :mk-clause               75
;  :num-allocs              3888521
;  :num-checks              205
;  :propagations            59
;  :quant-instantiations    48
;  :rlimit-count            151608)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))
  $t@51@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          5
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         12
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             794
;  :mk-clause               75
;  :num-allocs              3888521
;  :num-checks              206
;  :propagations            59
;  :quant-instantiations    48
;  :rlimit-count            151758)
(declare-const $k@66@02 $Perm)
(assert ($Perm.isReadVar $k@66@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@66@02 $Perm.No) (< $Perm.No $k@66@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      77
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         12
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             798
;  :mk-clause               77
;  :num-allocs              3888521
;  :num-checks              207
;  :propagations            60
;  :quant-instantiations    48
;  :rlimit-count            151956)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@36@02 $k@52@02) $k@59@02) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          5
;  :arith-assert-diseq      28
;  :arith-assert-lower      77
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         12
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             799
;  :mk-clause               77
;  :num-allocs              3888521
;  :num-checks              208
;  :propagations            60
;  :quant-instantiations    48
;  :rlimit-count            152030)
(assert (< $k@66@02 (- (+ $k@36@02 $k@52@02) $k@59@02)))
(assert (<= $Perm.No (- (- (+ $k@36@02 $k@52@02) $k@59@02) $k@66@02)))
(assert (<= (- (- (+ $k@36@02 $k@52@02) $k@59@02) $k@66@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@36@02 $k@52@02) $k@59@02) $k@66@02))
  (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@36@02 $k@52@02) $k@59@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          7
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             802
;  :mk-clause               77
;  :num-allocs              3888521
;  :num-checks              209
;  :propagations            60
;  :quant-instantiations    48
;  :rlimit-count            152271)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          7
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             802
;  :mk-clause               77
;  :num-allocs              3888521
;  :num-checks              210
;  :propagations            60
;  :quant-instantiations    48
;  :rlimit-count            152284)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@36@02 $k@52@02) $k@59@02))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          7
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             802
;  :mk-clause               77
;  :num-allocs              3888521
;  :num-checks              211
;  :propagations            60
;  :quant-instantiations    48
;  :rlimit-count            152305)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02)))))))))))))))
  $t@53@02)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1340
;  :arith-add-rows          7
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 221
;  :datatype-occurs-check   100
;  :datatype-splits         130
;  :decisions               213
;  :del-clause              65
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.23
;  :memory                  4.23
;  :mk-bool-var             803
;  :mk-clause               77
;  :num-allocs              3888521
;  :num-checks              212
;  :propagations            60
;  :quant-instantiations    48
;  :rlimit-count            152515)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@44@02))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@44@02))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($SortWrappers.$RefTo$Snap $t@49@02)
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))
                                                ($Snap.combine
                                                  ($SortWrappers.$RefTo$Snap $t@51@02)
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))
                                                      ($Snap.combine
                                                        ($SortWrappers.$RefTo$Snap $t@53@02)
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@02))))))))))))))))))))))))))))))))))))))))))))))) diz@31@02 globals@32@02))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const min_advance__107@67@02 Int)
(declare-const __flatten_100__106@68@02 Seq<Int>)
(declare-const __flatten_99__105@69@02 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1664
;  :arith-add-rows          7
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 287
;  :datatype-occurs-check   118
;  :datatype-splits         172
;  :decisions               276
;  :del-clause              65
;  :final-checks            55
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             843
;  :mk-clause               77
;  :num-allocs              4039952
;  :num-checks              215
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            156003)
; [then-branch: 8 | True | live]
; [else-branch: 8 | False | dead]
(push) ; 5
; [then-branch: 8 | True]
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@70@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@70@02 ($Snap.combine ($Snap.first $t@70@02) ($Snap.second $t@70@02))))
(assert (= ($Snap.first $t@70@02) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@70@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@70@02))
    ($Snap.second ($Snap.second $t@70@02)))))
(assert (= ($Snap.first ($Snap.second $t@70@02)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@70@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@70@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@70@02))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@70@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@71@02 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 9 | 0 <= i@71@02 | live]
; [else-branch: 9 | !(0 <= i@71@02) | live]
(push) ; 8
; [then-branch: 9 | 0 <= i@71@02]
(assert (<= 0 i@71@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 9 | !(0 <= i@71@02)]
(assert (not (<= 0 i@71@02)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 10 | i@71@02 < |First:(Second:(Second:(Second:($t@70@02))))| && 0 <= i@71@02 | live]
; [else-branch: 10 | !(i@71@02 < |First:(Second:(Second:(Second:($t@70@02))))| && 0 <= i@71@02) | live]
(push) ; 8
; [then-branch: 10 | i@71@02 < |First:(Second:(Second:(Second:($t@70@02))))| && 0 <= i@71@02]
(assert (and
  (<
    i@71@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
  (<= 0 i@71@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@71@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1791
;  :arith-add-rows          7
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              65
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             882
;  :mk-clause               77
;  :num-allocs              4039952
;  :num-checks              217
;  :propagations            64
;  :quant-instantiations    52
;  :rlimit-count            158043)
; [eval] -1
(push) ; 9
; [then-branch: 11 | First:(Second:(Second:(Second:($t@70@02))))[i@71@02] == -1 | live]
; [else-branch: 11 | First:(Second:(Second:(Second:($t@70@02))))[i@71@02] != -1 | live]
(push) ; 10
; [then-branch: 11 | First:(Second:(Second:(Second:($t@70@02))))[i@71@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    i@71@02)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 11 | First:(Second:(Second:(Second:($t@70@02))))[i@71@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      i@71@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@71@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1791
;  :arith-add-rows          7
;  :arith-assert-diseq      28
;  :arith-assert-lower      84
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              65
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             883
;  :mk-clause               77
;  :num-allocs              4039952
;  :num-checks              218
;  :propagations            64
;  :quant-instantiations    52
;  :rlimit-count            158218)
(push) ; 11
; [then-branch: 12 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[i@71@02] | live]
; [else-branch: 12 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[i@71@02]) | live]
(push) ; 12
; [then-branch: 12 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[i@71@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    i@71@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@71@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1791
;  :arith-add-rows          7
;  :arith-assert-diseq      29
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              65
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             886
;  :mk-clause               78
;  :num-allocs              4039952
;  :num-checks              219
;  :propagations            64
;  :quant-instantiations    52
;  :rlimit-count            158341)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 12 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[i@71@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      i@71@02))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 10 | !(i@71@02 < |First:(Second:(Second:(Second:($t@70@02))))| && 0 <= i@71@02)]
(assert (not
  (and
    (<
      i@71@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
    (<= 0 i@71@02))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@71@02 Int)) (!
  (implies
    (and
      (<
        i@71@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (<= 0 i@71@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          i@71@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            i@71@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            i@71@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    i@71@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))
(declare-const $k@72@02 $Perm)
(assert ($Perm.isReadVar $k@72@02 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@72@02 $Perm.No) (< $Perm.No $k@72@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1796
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      70
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             892
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              220
;  :propagations            65
;  :quant-instantiations    52
;  :rlimit-count            159110)
(assert (<= $Perm.No $k@72@02))
(assert (<= $k@72@02 $Perm.Write))
(assert (implies (< $Perm.No $k@72@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
  $Snap.unit))
; [eval] diz.Main_adder != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1802
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             895
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              221
;  :propagations            65
;  :quant-instantiations    52
;  :rlimit-count            159433)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1808
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             898
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              222
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            159789)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1813
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             899
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              223
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            160046)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1818
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             900
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              224
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            160313)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1823
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             901
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              225
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            160590)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1828
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             902
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              226
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            160877)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1833
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             903
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              227
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            161174)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1838
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             904
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              228
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            161481)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1843
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             905
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              229
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            161798)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1848
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             906
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              230
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            162125)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1853
;  :arith-add-rows          7
;  :arith-assert-diseq      30
;  :arith-assert-lower      89
;  :arith-assert-upper      71
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             907
;  :mk-clause               80
;  :num-allocs              4039952
;  :num-checks              231
;  :propagations            65
;  :quant-instantiations    53
;  :rlimit-count            162462)
(declare-const $k@73@02 $Perm)
(assert ($Perm.isReadVar $k@73@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@73@02 $Perm.No) (< $Perm.No $k@73@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1853
;  :arith-add-rows          7
;  :arith-assert-diseq      31
;  :arith-assert-lower      91
;  :arith-assert-upper      72
;  :arith-conflicts         15
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             911
;  :mk-clause               82
;  :num-allocs              4039952
;  :num-checks              232
;  :propagations            66
;  :quant-instantiations    53
;  :rlimit-count            162661)
(assert (<= $Perm.No $k@73@02))
(assert (<= $k@73@02 $Perm.Write))
(assert (implies
  (< $Perm.No $k@73@02)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder.Full_adder_m == diz
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1859
;  :arith-add-rows          7
;  :arith-assert-diseq      31
;  :arith-assert-lower      91
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             914
;  :mk-clause               82
;  :num-allocs              4039952
;  :num-checks              233
;  :propagations            66
;  :quant-instantiations    53
;  :rlimit-count            163094)
(push) ; 6
(assert (not (< $Perm.No $k@73@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1859
;  :arith-add-rows          7
;  :arith-assert-diseq      31
;  :arith-assert-lower      91
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             914
;  :mk-clause               82
;  :num-allocs              4039952
;  :num-checks              234
;  :propagations            66
;  :quant-instantiations    53
;  :rlimit-count            163142)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))
  diz@31@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))
(declare-const $k@74@02 $Perm)
(assert ($Perm.isReadVar $k@74@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@74@02 $Perm.No) (< $Perm.No $k@74@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1867
;  :arith-add-rows          7
;  :arith-assert-diseq      32
;  :arith-assert-lower      93
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             921
;  :mk-clause               84
;  :num-allocs              4039952
;  :num-checks              235
;  :propagations            67
;  :quant-instantiations    54
;  :rlimit-count            163749)
(assert (<= $Perm.No $k@74@02))
(assert (<= $k@74@02 $Perm.Write))
(assert (implies (< $Perm.No $k@74@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_prc != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@74@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1873
;  :arith-add-rows          7
;  :arith-assert-diseq      32
;  :arith-assert-lower      93
;  :arith-assert-upper      75
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             924
;  :mk-clause               84
;  :num-allocs              4039952
;  :num-checks              236
;  :propagations            67
;  :quant-instantiations    54
;  :rlimit-count            164202)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@74@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1879
;  :arith-add-rows          7
;  :arith-assert-diseq      32
;  :arith-assert-lower      93
;  :arith-assert-upper      75
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             927
;  :mk-clause               84
;  :num-allocs              4039952
;  :num-checks              237
;  :propagations            67
;  :quant-instantiations    55
;  :rlimit-count            164686)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1879
;  :arith-add-rows          7
;  :arith-assert-diseq      32
;  :arith-assert-lower      93
;  :arith-assert-upper      75
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             927
;  :mk-clause               84
;  :num-allocs              4039952
;  :num-checks              238
;  :propagations            67
;  :quant-instantiations    55
;  :rlimit-count            164699)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))))
(declare-const $k@75@02 $Perm)
(assert ($Perm.isReadVar $k@75@02 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@75@02 $Perm.No) (< $Perm.No $k@75@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1884
;  :arith-add-rows          7
;  :arith-assert-diseq      33
;  :arith-assert-lower      95
;  :arith-assert-upper      76
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             932
;  :mk-clause               86
;  :num-allocs              4039952
;  :num-checks              239
;  :propagations            68
;  :quant-instantiations    55
;  :rlimit-count            165229)
(assert (<= $Perm.No $k@75@02))
(assert (<= $k@75@02 $Perm.Write))
(assert (implies (< $Perm.No $k@75@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder1 != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@75@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1890
;  :arith-add-rows          7
;  :arith-assert-diseq      33
;  :arith-assert-lower      95
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.33
;  :memory                  4.33
;  :mk-bool-var             935
;  :mk-clause               86
;  :num-allocs              4039952
;  :num-checks              240
;  :propagations            68
;  :quant-instantiations    55
;  :rlimit-count            165712)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@75@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1896
;  :arith-add-rows          7
;  :arith-assert-diseq      33
;  :arith-assert-lower      95
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             938
;  :mk-clause               86
;  :num-allocs              4199519
;  :num-checks              241
;  :propagations            68
;  :quant-instantiations    56
;  :rlimit-count            166228)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1896
;  :arith-add-rows          7
;  :arith-assert-diseq      33
;  :arith-assert-lower      95
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             938
;  :mk-clause               86
;  :num-allocs              4199519
;  :num-checks              242
;  :propagations            68
;  :quant-instantiations    56
;  :rlimit-count            166241)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))))))
(declare-const $k@76@02 $Perm)
(assert ($Perm.isReadVar $k@76@02 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@76@02 $Perm.No) (< $Perm.No $k@76@02))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1901
;  :arith-add-rows          7
;  :arith-assert-diseq      34
;  :arith-assert-lower      97
;  :arith-assert-upper      78
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    164
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             943
;  :mk-clause               88
;  :num-allocs              4199519
;  :num-checks              243
;  :propagations            69
;  :quant-instantiations    56
;  :rlimit-count            166801)
(assert (<= $Perm.No $k@76@02))
(assert (<= $k@76@02 $Perm.Write))
(assert (implies (< $Perm.No $k@76@02) (not (= diz@31@02 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_adder_half_adder2 != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@76@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1907
;  :arith-add-rows          7
;  :arith-assert-diseq      34
;  :arith-assert-lower      97
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             946
;  :mk-clause               88
;  :num-allocs              4199519
;  :num-checks              244
;  :propagations            69
;  :quant-instantiations    56
;  :rlimit-count            167314)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))))
    $Ref.null)))
(push) ; 6
(assert (not (< $Perm.No $k@76@02)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1908
;  :arith-add-rows          7
;  :arith-assert-diseq      34
;  :arith-assert-lower      97
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             948
;  :mk-clause               88
;  :num-allocs              4199519
;  :num-checks              245
;  :propagations            69
;  :quant-instantiations    57
;  :rlimit-count            167752)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1908
;  :arith-add-rows          7
;  :arith-assert-diseq      34
;  :arith-assert-lower      97
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 309
;  :datatype-occurs-check   124
;  :datatype-splits         186
;  :decisions               297
;  :del-clause              66
;  :final-checks            58
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             948
;  :mk-clause               88
;  :num-allocs              4199519
;  :num-checks              246
;  :propagations            69
;  :quant-instantiations    57
;  :rlimit-count            167765)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@70@02 diz@31@02 globals@32@02))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@77@02 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Main_immediate_wakeup_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@78@02 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 13 | 0 <= i@78@02 | live]
; [else-branch: 13 | !(0 <= i@78@02) | live]
(push) ; 8
; [then-branch: 13 | 0 <= i@78@02]
(assert (<= 0 i@78@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 13 | !(0 <= i@78@02)]
(assert (not (<= 0 i@78@02)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 14 | i@78@02 < |First:(Second:(Second:(Second:($t@70@02))))| && 0 <= i@78@02 | live]
; [else-branch: 14 | !(i@78@02 < |First:(Second:(Second:(Second:($t@70@02))))| && 0 <= i@78@02) | live]
(push) ; 8
; [then-branch: 14 | i@78@02 < |First:(Second:(Second:(Second:($t@70@02))))| && 0 <= i@78@02]
(assert (and
  (<
    i@78@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
  (<= 0 i@78@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@78@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2269
;  :arith-add-rows          7
;  :arith-assert-diseq      34
;  :arith-assert-lower      98
;  :arith-assert-upper      80
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              76
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1019
;  :mk-clause               89
;  :num-allocs              4199519
;  :num-checks              249
;  :propagations            72
;  :quant-instantiations    57
;  :rlimit-count            170268)
; [eval] -1
(push) ; 9
; [then-branch: 15 | First:(Second:(Second:(Second:($t@70@02))))[i@78@02] == -1 | live]
; [else-branch: 15 | First:(Second:(Second:(Second:($t@70@02))))[i@78@02] != -1 | live]
(push) ; 10
; [then-branch: 15 | First:(Second:(Second:(Second:($t@70@02))))[i@78@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    i@78@02)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 15 | First:(Second:(Second:(Second:($t@70@02))))[i@78@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      i@78@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@78@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2269
;  :arith-add-rows          7
;  :arith-assert-diseq      35
;  :arith-assert-lower      101
;  :arith-assert-upper      81
;  :arith-conflicts         15
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              76
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1025
;  :mk-clause               93
;  :num-allocs              4199519
;  :num-checks              250
;  :propagations            74
;  :quant-instantiations    58
;  :rlimit-count            170500)
(push) ; 11
; [then-branch: 16 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[i@78@02] | live]
; [else-branch: 16 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[i@78@02]) | live]
(push) ; 12
; [then-branch: 16 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[i@78@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    i@78@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@78@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2269
;  :arith-add-rows          7
;  :arith-assert-diseq      35
;  :arith-assert-lower      101
;  :arith-assert-upper      81
;  :arith-conflicts         15
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              76
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1025
;  :mk-clause               93
;  :num-allocs              4199519
;  :num-checks              251
;  :propagations            74
;  :quant-instantiations    58
;  :rlimit-count            170614)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 16 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[i@78@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      i@78@02))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 14 | !(i@78@02 < |First:(Second:(Second:(Second:($t@70@02))))| && 0 <= i@78@02)]
(assert (not
  (and
    (<
      i@78@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
    (<= 0 i@78@02))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@78@02 Int)) (!
  (implies
    (and
      (<
        i@78@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (<= 0 i@78@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          i@78@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            i@78@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            i@78@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    i@78@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2269
;  :arith-add-rows          7
;  :arith-assert-diseq      37
;  :arith-assert-lower      102
;  :arith-assert-upper      82
;  :arith-conflicts         15
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    169
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              94
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1033
;  :mk-clause               107
;  :num-allocs              4199519
;  :num-checks              252
;  :propagations            76
;  :quant-instantiations    59
;  :rlimit-count            171060)
(assert (forall ((i@78@02 Int)) (!
  (implies
    (and
      (<
        i@78@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (<= 0 i@78@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          i@78@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            i@78@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            i@78@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    i@78@02))
  :qid |prog.l<no position>|)))
(declare-const $t@79@02 $Snap)
(assert (= $t@79@02 ($Snap.combine ($Snap.first $t@79@02) ($Snap.second $t@79@02))))
(assert (=
  ($Snap.second $t@79@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@79@02))
    ($Snap.second ($Snap.second $t@79@02)))))
(assert (=
  ($Snap.second ($Snap.second $t@79@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@79@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@79@02))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@79@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@80@02 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 17 | 0 <= i@80@02 | live]
; [else-branch: 17 | !(0 <= i@80@02) | live]
(push) ; 8
; [then-branch: 17 | 0 <= i@80@02]
(assert (<= 0 i@80@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(0 <= i@80@02)]
(assert (not (<= 0 i@80@02)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 18 | i@80@02 < |First:(Second:($t@79@02))| && 0 <= i@80@02 | live]
; [else-branch: 18 | !(i@80@02 < |First:(Second:($t@79@02))| && 0 <= i@80@02) | live]
(push) ; 8
; [then-branch: 18 | i@80@02 < |First:(Second:($t@79@02))| && 0 <= i@80@02]
(assert (and
  (<
    i@80@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))
  (<= 0 i@80@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@80@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2306
;  :arith-add-rows          7
;  :arith-assert-diseq      37
;  :arith-assert-lower      107
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              94
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1055
;  :mk-clause               107
;  :num-allocs              4199519
;  :num-checks              253
;  :propagations            76
;  :quant-instantiations    63
;  :rlimit-count            172488)
; [eval] -1
(push) ; 9
; [then-branch: 19 | First:(Second:($t@79@02))[i@80@02] == -1 | live]
; [else-branch: 19 | First:(Second:($t@79@02))[i@80@02] != -1 | live]
(push) ; 10
; [then-branch: 19 | First:(Second:($t@79@02))[i@80@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
    i@80@02)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 19 | First:(Second:($t@79@02))[i@80@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      i@80@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@80@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2306
;  :arith-add-rows          7
;  :arith-assert-diseq      37
;  :arith-assert-lower      107
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              94
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1056
;  :mk-clause               107
;  :num-allocs              4199519
;  :num-checks              254
;  :propagations            76
;  :quant-instantiations    63
;  :rlimit-count            172639)
(push) ; 11
; [then-branch: 20 | 0 <= First:(Second:($t@79@02))[i@80@02] | live]
; [else-branch: 20 | !(0 <= First:(Second:($t@79@02))[i@80@02]) | live]
(push) ; 12
; [then-branch: 20 | 0 <= First:(Second:($t@79@02))[i@80@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
    i@80@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@80@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2306
;  :arith-add-rows          7
;  :arith-assert-diseq      38
;  :arith-assert-lower      110
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         12
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    175
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              94
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1059
;  :mk-clause               108
;  :num-allocs              4199519
;  :num-checks              255
;  :propagations            76
;  :quant-instantiations    63
;  :rlimit-count            172742)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 20 | !(0 <= First:(Second:($t@79@02))[i@80@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      i@80@02))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 18 | !(i@80@02 < |First:(Second:($t@79@02))| && 0 <= i@80@02)]
(assert (not
  (and
    (<
      i@80@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))
    (<= 0 i@80@02))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@80@02 Int)) (!
  (implies
    (and
      (<
        i@80@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))
      (<= 0 i@80@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
          i@80@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
            i@80@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
            i@80@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
    i@80@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2324
;  :arith-add-rows          7
;  :arith-assert-diseq      38
;  :arith-assert-lower      111
;  :arith-assert-upper      86
;  :arith-conflicts         15
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         13
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              95
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1079
;  :mk-clause               118
;  :num-allocs              4199519
;  :num-checks              256
;  :propagations            80
;  :quant-instantiations    65
;  :rlimit-count            173815)
(push) ; 6
; [then-branch: 21 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[0] | live]
; [else-branch: 21 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[0]) | live]
(push) ; 7
; [then-branch: 21 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2324
;  :arith-add-rows          7
;  :arith-assert-diseq      38
;  :arith-assert-lower      112
;  :arith-assert-upper      86
;  :arith-conflicts         15
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         13
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              95
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1085
;  :mk-clause               125
;  :num-allocs              4199519
;  :num-checks              257
;  :propagations            80
;  :quant-instantiations    67
;  :rlimit-count            174013)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2324
;  :arith-add-rows          7
;  :arith-assert-diseq      38
;  :arith-assert-lower      112
;  :arith-assert-upper      86
;  :arith-conflicts         15
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         13
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              95
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1085
;  :mk-clause               125
;  :num-allocs              4199519
;  :num-checks              258
;  :propagations            80
;  :quant-instantiations    67
;  :rlimit-count            174022)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2325
;  :arith-add-rows          7
;  :arith-assert-diseq      38
;  :arith-assert-lower      113
;  :arith-assert-upper      87
;  :arith-conflicts         16
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         13
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 405
;  :datatype-occurs-check   140
;  :datatype-splits         254
;  :decisions               389
;  :del-clause              95
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.43
;  :memory                  4.43
;  :mk-bool-var             1085
;  :mk-clause               125
;  :num-allocs              4199519
;  :num-checks              259
;  :propagations            84
;  :quant-instantiations    67
;  :rlimit-count            174140)
(pop) ; 7
(push) ; 7
; [else-branch: 21 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2508
;  :arith-add-rows          8
;  :arith-assert-diseq      41
;  :arith-assert-lower      124
;  :arith-assert-upper      92
;  :arith-conflicts         16
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         15
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 450
;  :datatype-occurs-check   151
;  :datatype-splits         291
;  :decisions               432
;  :del-clause              117
;  :final-checks            67
;  :max-generation          2
;  :max-memory              4.52
;  :memory                  4.52
;  :mk-bool-var             1147
;  :mk-clause               140
;  :num-allocs              4364263
;  :num-checks              260
;  :propagations            93
;  :quant-instantiations    72
;  :rlimit-count            175789
;  :time                    0.00)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      0)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2690
;  :arith-add-rows          9
;  :arith-assert-diseq      44
;  :arith-assert-lower      135
;  :arith-assert-upper      97
;  :arith-conflicts         16
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         17
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 495
;  :datatype-occurs-check   162
;  :datatype-splits         328
;  :decisions               477
;  :del-clause              145
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1209
;  :mk-clause               168
;  :num-allocs              4531114
;  :num-checks              261
;  :propagations            106
;  :quant-instantiations    77
;  :rlimit-count            177415
;  :time                    0.00)
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[0] | live]
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[0]) | live]
(push) ; 7
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[0]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2691
;  :arith-add-rows          9
;  :arith-assert-diseq      44
;  :arith-assert-lower      136
;  :arith-assert-upper      97
;  :arith-conflicts         16
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         17
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 495
;  :datatype-occurs-check   162
;  :datatype-splits         328
;  :decisions               477
;  :del-clause              145
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1216
;  :mk-clause               175
;  :num-allocs              4531114
;  :num-checks              262
;  :propagations            106
;  :quant-instantiations    79
;  :rlimit-count            177632)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2697
;  :arith-add-rows          9
;  :arith-assert-diseq      44
;  :arith-assert-lower      136
;  :arith-assert-upper      97
;  :arith-conflicts         16
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         17
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 495
;  :datatype-occurs-check   162
;  :datatype-splits         328
;  :decisions               477
;  :del-clause              152
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1221
;  :mk-clause               176
;  :num-allocs              4531114
;  :num-checks              263
;  :propagations            106
;  :quant-instantiations    79
;  :rlimit-count            178137)
(push) ; 6
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[1] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[1]) | live]
(push) ; 7
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2697
;  :arith-add-rows          9
;  :arith-assert-diseq      44
;  :arith-assert-lower      137
;  :arith-assert-upper      97
;  :arith-conflicts         16
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         17
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 495
;  :datatype-occurs-check   162
;  :datatype-splits         328
;  :decisions               477
;  :del-clause              152
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1227
;  :mk-clause               183
;  :num-allocs              4531114
;  :num-checks              264
;  :propagations            106
;  :quant-instantiations    81
;  :rlimit-count            178334)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2697
;  :arith-add-rows          9
;  :arith-assert-diseq      44
;  :arith-assert-lower      137
;  :arith-assert-upper      97
;  :arith-conflicts         16
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         17
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 495
;  :datatype-occurs-check   162
;  :datatype-splits         328
;  :decisions               477
;  :del-clause              152
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1227
;  :mk-clause               183
;  :num-allocs              4531114
;  :num-checks              265
;  :propagations            106
;  :quant-instantiations    81
;  :rlimit-count            178343)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2698
;  :arith-add-rows          9
;  :arith-assert-diseq      44
;  :arith-assert-lower      138
;  :arith-assert-upper      98
;  :arith-conflicts         17
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         17
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 495
;  :datatype-occurs-check   162
;  :datatype-splits         328
;  :decisions               477
;  :del-clause              152
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1227
;  :mk-clause               183
;  :num-allocs              4531114
;  :num-checks              266
;  :propagations            110
;  :quant-instantiations    81
;  :rlimit-count            178460)
(pop) ; 7
(push) ; 7
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2892
;  :arith-add-rows          17
;  :arith-assert-diseq      52
;  :arith-assert-lower      165
;  :arith-assert-upper      109
;  :arith-conflicts         17
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         21
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 540
;  :datatype-occurs-check   173
;  :datatype-splits         365
;  :decisions               525
;  :del-clause              212
;  :final-checks            74
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1320
;  :mk-clause               236
;  :num-allocs              4531114
;  :num-checks              267
;  :propagations            137
;  :quant-instantiations    91
;  :rlimit-count            180494
;  :time                    0.00)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3076
;  :arith-add-rows          18
;  :arith-assert-diseq      55
;  :arith-assert-lower      177
;  :arith-assert-upper      116
;  :arith-conflicts         17
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         23
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 585
;  :datatype-occurs-check   184
;  :datatype-splits         402
;  :decisions               571
;  :del-clause              241
;  :final-checks            77
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1386
;  :mk-clause               265
;  :num-allocs              4531114
;  :num-checks              268
;  :propagations            150
;  :quant-instantiations    98
;  :rlimit-count            182192
;  :time                    0.00)
; [then-branch: 24 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[1] | live]
; [else-branch: 24 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[1]) | live]
(push) ; 7
; [then-branch: 24 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[1]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3077
;  :arith-add-rows          18
;  :arith-assert-diseq      55
;  :arith-assert-lower      178
;  :arith-assert-upper      116
;  :arith-conflicts         17
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         23
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    186
;  :datatype-constructor-ax 585
;  :datatype-occurs-check   184
;  :datatype-splits         402
;  :decisions               571
;  :del-clause              241
;  :final-checks            77
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1393
;  :mk-clause               272
;  :num-allocs              4531114
;  :num-checks              269
;  :propagations            150
;  :quant-instantiations    100
;  :rlimit-count            182401)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 24 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 ==> diz.Main_process_state[2] == -1
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3083
;  :arith-add-rows          18
;  :arith-assert-diseq      55
;  :arith-assert-lower      178
;  :arith-assert-upper      116
;  :arith-conflicts         17
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         23
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 585
;  :datatype-occurs-check   184
;  :datatype-splits         402
;  :decisions               571
;  :del-clause              248
;  :final-checks            77
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1398
;  :mk-clause               273
;  :num-allocs              4531114
;  :num-checks              270
;  :propagations            150
;  :quant-instantiations    100
;  :rlimit-count            182916)
(push) ; 6
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[2] | live]
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[2]) | live]
(push) ; 7
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3083
;  :arith-add-rows          18
;  :arith-assert-diseq      55
;  :arith-assert-lower      179
;  :arith-assert-upper      116
;  :arith-conflicts         17
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         23
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 585
;  :datatype-occurs-check   184
;  :datatype-splits         402
;  :decisions               571
;  :del-clause              248
;  :final-checks            77
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1404
;  :mk-clause               280
;  :num-allocs              4531114
;  :num-checks              271
;  :propagations            150
;  :quant-instantiations    102
;  :rlimit-count            183113)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3083
;  :arith-add-rows          18
;  :arith-assert-diseq      55
;  :arith-assert-lower      179
;  :arith-assert-upper      116
;  :arith-conflicts         17
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         23
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 585
;  :datatype-occurs-check   184
;  :datatype-splits         402
;  :decisions               571
;  :del-clause              248
;  :final-checks            77
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1404
;  :mk-clause               280
;  :num-allocs              4531114
;  :num-checks              272
;  :propagations            150
;  :quant-instantiations    102
;  :rlimit-count            183122)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3084
;  :arith-add-rows          18
;  :arith-assert-diseq      55
;  :arith-assert-lower      180
;  :arith-assert-upper      117
;  :arith-conflicts         18
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         23
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    187
;  :datatype-constructor-ax 585
;  :datatype-occurs-check   184
;  :datatype-splits         402
;  :decisions               571
;  :del-clause              248
;  :final-checks            77
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1404
;  :mk-clause               280
;  :num-allocs              4531114
;  :num-checks              273
;  :propagations            154
;  :quant-instantiations    102
;  :rlimit-count            183239)
(pop) ; 7
(push) ; 7
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3425
;  :arith-add-rows          22
;  :arith-assert-diseq      67
;  :arith-assert-lower      225
;  :arith-assert-upper      140
;  :arith-conflicts         18
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         31
;  :arith-pivots            48
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 663
;  :datatype-occurs-check   199
;  :datatype-splits         472
;  :decisions               652
;  :del-clause              351
;  :final-checks            82
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1575
;  :mk-clause               376
;  :num-allocs              4531114
;  :num-checks              274
;  :propagations            200
;  :quant-instantiations    122
;  :rlimit-count            185966
;  :time                    0.00)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      2)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3614
;  :arith-add-rows          23
;  :arith-assert-diseq      70
;  :arith-assert-lower      238
;  :arith-assert-upper      149
;  :arith-conflicts         18
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         33
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   210
;  :datatype-splits         509
;  :decisions               699
;  :del-clause              382
;  :final-checks            85
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1646
;  :mk-clause               407
;  :num-allocs              4531114
;  :num-checks              275
;  :propagations            214
;  :quant-instantiations    131
;  :rlimit-count            187764
;  :time                    0.00)
; [then-branch: 26 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[2]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[2] | live]
; [else-branch: 26 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[2]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[2]) | live]
(push) ; 7
; [then-branch: 26 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[2]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[2]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      2))))
; [eval] diz.Main_process_state[2] == -1
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3615
;  :arith-add-rows          23
;  :arith-assert-diseq      70
;  :arith-assert-lower      239
;  :arith-assert-upper      149
;  :arith-conflicts         18
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         33
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    193
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   210
;  :datatype-splits         509
;  :decisions               699
;  :del-clause              382
;  :final-checks            85
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1653
;  :mk-clause               414
;  :num-allocs              4531114
;  :num-checks              276
;  :propagations            214
;  :quant-instantiations    133
;  :rlimit-count            187972)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 26 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[2]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[2])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      2)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3621
;  :arith-add-rows          23
;  :arith-assert-diseq      70
;  :arith-assert-lower      239
;  :arith-assert-upper      149
;  :arith-conflicts         18
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         33
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   210
;  :datatype-splits         509
;  :decisions               699
;  :del-clause              389
;  :final-checks            85
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1658
;  :mk-clause               415
;  :num-allocs              4531114
;  :num-checks              277
;  :propagations            214
;  :quant-instantiations    133
;  :rlimit-count            188497)
(push) ; 6
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[0] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[0]) | live]
(push) ; 7
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3621
;  :arith-add-rows          23
;  :arith-assert-diseq      70
;  :arith-assert-lower      240
;  :arith-assert-upper      149
;  :arith-conflicts         18
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         33
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   210
;  :datatype-splits         509
;  :decisions               699
;  :del-clause              389
;  :final-checks            85
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1663
;  :mk-clause               422
;  :num-allocs              4531114
;  :num-checks              278
;  :propagations            214
;  :quant-instantiations    135
;  :rlimit-count            188626)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3621
;  :arith-add-rows          23
;  :arith-assert-diseq      70
;  :arith-assert-lower      240
;  :arith-assert-upper      149
;  :arith-conflicts         18
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         33
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   210
;  :datatype-splits         509
;  :decisions               699
;  :del-clause              389
;  :final-checks            85
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1663
;  :mk-clause               422
;  :num-allocs              4531114
;  :num-checks              279
;  :propagations            214
;  :quant-instantiations    135
;  :rlimit-count            188635)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3622
;  :arith-add-rows          23
;  :arith-assert-diseq      70
;  :arith-assert-lower      241
;  :arith-assert-upper      150
;  :arith-conflicts         19
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         33
;  :arith-pivots            52
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    194
;  :datatype-constructor-ax 708
;  :datatype-occurs-check   210
;  :datatype-splits         509
;  :decisions               699
;  :del-clause              389
;  :final-checks            85
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1663
;  :mk-clause               422
;  :num-allocs              4531114
;  :num-checks              280
;  :propagations            218
;  :quant-instantiations    135
;  :rlimit-count            188753)
(pop) ; 7
(push) ; 7
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      0)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3813
;  :arith-add-rows          25
;  :arith-assert-diseq      73
;  :arith-assert-lower      254
;  :arith-assert-upper      159
;  :arith-conflicts         19
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         35
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    196
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   221
;  :datatype-splits         546
;  :decisions               746
;  :del-clause              427
;  :final-checks            88
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1732
;  :mk-clause               453
;  :num-allocs              4531114
;  :num-checks              281
;  :propagations            232
;  :quant-instantiations    144
;  :rlimit-count            190576
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4089
;  :arith-add-rows          25
;  :arith-assert-diseq      75
;  :arith-assert-lower      263
;  :arith-assert-upper      166
;  :arith-conflicts         19
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         36
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 821
;  :datatype-occurs-check   235
;  :datatype-splits         587
;  :decisions               812
;  :del-clause              442
;  :final-checks            92
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1810
;  :mk-clause               468
;  :num-allocs              4531114
;  :num-checks              282
;  :propagations            241
;  :quant-instantiations    152
;  :rlimit-count            192597
;  :time                    0.00)
; [then-branch: 28 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[0]) | live]
; [else-branch: 28 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[0] | live]
(push) ; 7
; [then-branch: 28 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4089
;  :arith-add-rows          25
;  :arith-assert-diseq      75
;  :arith-assert-lower      263
;  :arith-assert-upper      166
;  :arith-conflicts         19
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         36
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 821
;  :datatype-occurs-check   235
;  :datatype-splits         587
;  :decisions               812
;  :del-clause              442
;  :final-checks            92
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1810
;  :mk-clause               469
;  :num-allocs              4531114
;  :num-checks              283
;  :propagations            241
;  :quant-instantiations    152
;  :rlimit-count            192796)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4089
;  :arith-add-rows          25
;  :arith-assert-diseq      75
;  :arith-assert-lower      263
;  :arith-assert-upper      166
;  :arith-conflicts         19
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         36
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 821
;  :datatype-occurs-check   235
;  :datatype-splits         587
;  :decisions               812
;  :del-clause              442
;  :final-checks            92
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1810
;  :mk-clause               469
;  :num-allocs              4531114
;  :num-checks              284
;  :propagations            241
;  :quant-instantiations    152
;  :rlimit-count            192811)
(pop) ; 7
(push) ; 7
; [else-branch: 28 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[0]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            0))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[1]) && old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4095
;  :arith-add-rows          25
;  :arith-assert-diseq      75
;  :arith-assert-lower      263
;  :arith-assert-upper      166
;  :arith-conflicts         19
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         36
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 821
;  :datatype-occurs-check   235
;  :datatype-splits         587
;  :decisions               812
;  :del-clause              443
;  :final-checks            92
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1814
;  :mk-clause               473
;  :num-allocs              4531114
;  :num-checks              285
;  :propagations            241
;  :quant-instantiations    152
;  :rlimit-count            193334)
(push) ; 6
; [then-branch: 29 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[1] | live]
; [else-branch: 29 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[1]) | live]
(push) ; 7
; [then-branch: 29 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4095
;  :arith-add-rows          25
;  :arith-assert-diseq      75
;  :arith-assert-lower      264
;  :arith-assert-upper      166
;  :arith-conflicts         19
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         36
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 821
;  :datatype-occurs-check   235
;  :datatype-splits         587
;  :decisions               812
;  :del-clause              443
;  :final-checks            92
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1819
;  :mk-clause               480
;  :num-allocs              4531114
;  :num-checks              286
;  :propagations            241
;  :quant-instantiations    154
;  :rlimit-count            193464)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4095
;  :arith-add-rows          25
;  :arith-assert-diseq      75
;  :arith-assert-lower      264
;  :arith-assert-upper      166
;  :arith-conflicts         19
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         36
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 821
;  :datatype-occurs-check   235
;  :datatype-splits         587
;  :decisions               812
;  :del-clause              443
;  :final-checks            92
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1819
;  :mk-clause               480
;  :num-allocs              4531114
;  :num-checks              287
;  :propagations            241
;  :quant-instantiations    154
;  :rlimit-count            193473)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4096
;  :arith-add-rows          25
;  :arith-assert-diseq      75
;  :arith-assert-lower      265
;  :arith-assert-upper      167
;  :arith-conflicts         20
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         36
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    201
;  :datatype-constructor-ax 821
;  :datatype-occurs-check   235
;  :datatype-splits         587
;  :decisions               812
;  :del-clause              443
;  :final-checks            92
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1819
;  :mk-clause               480
;  :num-allocs              4531114
;  :num-checks              288
;  :propagations            245
;  :quant-instantiations    154
;  :rlimit-count            193591)
(pop) ; 7
(push) ; 7
; [else-branch: 29 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4288
;  :arith-add-rows          27
;  :arith-assert-diseq      78
;  :arith-assert-lower      278
;  :arith-assert-upper      176
;  :arith-bound-prop        4
;  :arith-conflicts         20
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         38
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    203
;  :datatype-constructor-ax 866
;  :datatype-occurs-check   246
;  :datatype-splits         624
;  :decisions               859
;  :del-clause              486
;  :final-checks            95
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1896
;  :mk-clause               516
;  :num-allocs              4531114
;  :num-checks              289
;  :propagations            258
;  :quant-instantiations    163
;  :rlimit-count            195432
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4570
;  :arith-add-rows          28
;  :arith-assert-diseq      83
;  :arith-assert-lower      297
;  :arith-assert-upper      186
;  :arith-bound-prop        8
;  :arith-conflicts         20
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         41
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 934
;  :datatype-occurs-check   260
;  :datatype-splits         665
;  :decisions               926
;  :del-clause              530
;  :final-checks            99
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1999
;  :mk-clause               560
;  :num-allocs              4531114
;  :num-checks              290
;  :propagations            275
;  :quant-instantiations    174
;  :rlimit-count            197630
;  :time                    0.00)
; [then-branch: 30 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[1]) | live]
; [else-branch: 30 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[1] | live]
(push) ; 7
; [then-branch: 30 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[1])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          1))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4570
;  :arith-add-rows          28
;  :arith-assert-diseq      83
;  :arith-assert-lower      297
;  :arith-assert-upper      186
;  :arith-bound-prop        8
;  :arith-conflicts         20
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         41
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 934
;  :datatype-occurs-check   260
;  :datatype-splits         665
;  :decisions               926
;  :del-clause              530
;  :final-checks            99
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1999
;  :mk-clause               561
;  :num-allocs              4531114
;  :num-checks              291
;  :propagations            275
;  :quant-instantiations    174
;  :rlimit-count            197829)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4570
;  :arith-add-rows          28
;  :arith-assert-diseq      83
;  :arith-assert-lower      297
;  :arith-assert-upper      186
;  :arith-bound-prop        8
;  :arith-conflicts         20
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         41
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 934
;  :datatype-occurs-check   260
;  :datatype-splits         665
;  :decisions               926
;  :del-clause              530
;  :final-checks            99
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             1999
;  :mk-clause               561
;  :num-allocs              4531114
;  :num-checks              292
;  :propagations            275
;  :quant-instantiations    174
;  :rlimit-count            197844)
(pop) ; 7
(push) ; 7
; [else-branch: 30 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[1]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[1]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        1))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      1))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            1))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@02))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0) ==> diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] !(0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[2]) && old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4571
;  :arith-add-rows          28
;  :arith-assert-diseq      83
;  :arith-assert-lower      297
;  :arith-assert-upper      186
;  :arith-bound-prop        8
;  :arith-conflicts         20
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         41
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 934
;  :datatype-occurs-check   260
;  :datatype-splits         665
;  :decisions               926
;  :del-clause              531
;  :final-checks            99
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2002
;  :mk-clause               565
;  :num-allocs              4531114
;  :num-checks              293
;  :propagations            275
;  :quant-instantiations    174
;  :rlimit-count            198282)
(push) ; 6
; [then-branch: 31 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[2] | live]
; [else-branch: 31 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[2]) | live]
(push) ; 7
; [then-branch: 31 | 0 <= First:(Second:(Second:(Second:($t@70@02))))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4571
;  :arith-add-rows          28
;  :arith-assert-diseq      83
;  :arith-assert-lower      298
;  :arith-assert-upper      186
;  :arith-bound-prop        8
;  :arith-conflicts         20
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         41
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 934
;  :datatype-occurs-check   260
;  :datatype-splits         665
;  :decisions               926
;  :del-clause              531
;  :final-checks            99
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2007
;  :mk-clause               572
;  :num-allocs              4531114
;  :num-checks              294
;  :propagations            275
;  :quant-instantiations    176
;  :rlimit-count            198412)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4571
;  :arith-add-rows          28
;  :arith-assert-diseq      83
;  :arith-assert-lower      298
;  :arith-assert-upper      186
;  :arith-bound-prop        8
;  :arith-conflicts         20
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         41
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 934
;  :datatype-occurs-check   260
;  :datatype-splits         665
;  :decisions               926
;  :del-clause              531
;  :final-checks            99
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2007
;  :mk-clause               572
;  :num-allocs              4531114
;  :num-checks              295
;  :propagations            275
;  :quant-instantiations    176
;  :rlimit-count            198421)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4572
;  :arith-add-rows          28
;  :arith-assert-diseq      83
;  :arith-assert-lower      299
;  :arith-assert-upper      187
;  :arith-bound-prop        8
;  :arith-conflicts         21
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         41
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    207
;  :datatype-constructor-ax 934
;  :datatype-occurs-check   260
;  :datatype-splits         665
;  :decisions               926
;  :del-clause              531
;  :final-checks            99
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2007
;  :mk-clause               572
;  :num-allocs              4531114
;  :num-checks              296
;  :propagations            279
;  :quant-instantiations    176
;  :rlimit-count            198539)
(pop) ; 7
(push) ; 7
; [else-branch: 31 | !(0 <= First:(Second:(Second:(Second:($t@70@02))))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      2)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4766
;  :arith-add-rows          29
;  :arith-assert-diseq      86
;  :arith-assert-lower      313
;  :arith-assert-upper      197
;  :arith-bound-prop        14
;  :arith-conflicts         21
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         44
;  :arith-pivots            74
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 978
;  :datatype-occurs-check   271
;  :datatype-splits         701
;  :decisions               972
;  :del-clause              582
;  :final-checks            102
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2093
;  :mk-clause               616
;  :num-allocs              4531114
;  :num-checks              297
;  :propagations            295
;  :quant-instantiations    186
;  :rlimit-count            200408
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5052
;  :arith-add-rows          30
;  :arith-assert-diseq      91
;  :arith-assert-lower      334
;  :arith-assert-upper      209
;  :arith-bound-prop        20
;  :arith-conflicts         21
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         48
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 1045
;  :datatype-occurs-check   285
;  :datatype-splits         741
;  :decisions               1039
;  :del-clause              648
;  :final-checks            107
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2211
;  :mk-clause               682
;  :num-allocs              4531114
;  :num-checks              298
;  :propagations            319
;  :quant-instantiations    198
;  :rlimit-count            202675
;  :time                    0.00)
; [then-branch: 32 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[2]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[2]) | live]
; [else-branch: 32 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[2]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[2] | live]
(push) ; 7
; [then-branch: 32 | !(First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[2]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[2])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          2))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2)))))
; [eval] diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5052
;  :arith-add-rows          30
;  :arith-assert-diseq      91
;  :arith-assert-lower      334
;  :arith-assert-upper      209
;  :arith-bound-prop        20
;  :arith-conflicts         21
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         48
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 1045
;  :datatype-occurs-check   285
;  :datatype-splits         741
;  :decisions               1039
;  :del-clause              648
;  :final-checks            107
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2211
;  :mk-clause               683
;  :num-allocs              4531114
;  :num-checks              299
;  :propagations            319
;  :quant-instantiations    198
;  :rlimit-count            202874)
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5052
;  :arith-add-rows          30
;  :arith-assert-diseq      91
;  :arith-assert-lower      334
;  :arith-assert-upper      209
;  :arith-bound-prop        20
;  :arith-conflicts         21
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         48
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 1045
;  :datatype-occurs-check   285
;  :datatype-splits         741
;  :decisions               1039
;  :del-clause              648
;  :final-checks            107
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2211
;  :mk-clause               683
;  :num-allocs              4531114
;  :num-checks              300
;  :propagations            319
;  :quant-instantiations    198
;  :rlimit-count            202889)
(pop) ; 7
(push) ; 7
; [else-branch: 32 | First:(Second:(Second:(Second:(Second:(Second:($t@70@02))))))[First:(Second:(Second:(Second:($t@70@02))))[2]] == 0 && 0 <= First:(Second:(Second:(Second:($t@70@02))))[2]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
        2))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
            2))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
          2))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_events_no_delta_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@81@02 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 33 | 0 <= i@81@02 | live]
; [else-branch: 33 | !(0 <= i@81@02) | live]
(push) ; 8
; [then-branch: 33 | 0 <= i@81@02]
(assert (<= 0 i@81@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 33 | !(0 <= i@81@02)]
(assert (not (<= 0 i@81@02)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 34 | i@81@02 < |First:(Second:($t@79@02))| && 0 <= i@81@02 | live]
; [else-branch: 34 | !(i@81@02 < |First:(Second:($t@79@02))| && 0 <= i@81@02) | live]
(push) ; 8
; [then-branch: 34 | i@81@02 < |First:(Second:($t@79@02))| && 0 <= i@81@02]
(assert (and
  (<
    i@81@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))
  (<= 0 i@81@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@81@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5250
;  :arith-add-rows          30
;  :arith-assert-diseq      94
;  :arith-assert-lower      350
;  :arith-assert-upper      221
;  :arith-bound-prop        28
;  :arith-conflicts         21
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         52
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 1089
;  :datatype-occurs-check   296
;  :datatype-splits         777
;  :decisions               1085
;  :del-clause              702
;  :final-checks            110
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2311
;  :mk-clause               750
;  :num-allocs              4531114
;  :num-checks              302
;  :propagations            338
;  :quant-instantiations    209
;  :rlimit-count            205012)
; [eval] -1
(push) ; 9
; [then-branch: 35 | First:(Second:($t@79@02))[i@81@02] == -1 | live]
; [else-branch: 35 | First:(Second:($t@79@02))[i@81@02] != -1 | live]
(push) ; 10
; [then-branch: 35 | First:(Second:($t@79@02))[i@81@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
    i@81@02)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 35 | First:(Second:($t@79@02))[i@81@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      i@81@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@81@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5250
;  :arith-add-rows          30
;  :arith-assert-diseq      95
;  :arith-assert-lower      353
;  :arith-assert-upper      222
;  :arith-bound-prop        28
;  :arith-conflicts         21
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         52
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 1089
;  :datatype-occurs-check   296
;  :datatype-splits         777
;  :decisions               1085
;  :del-clause              702
;  :final-checks            110
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2317
;  :mk-clause               754
;  :num-allocs              4531114
;  :num-checks              303
;  :propagations            340
;  :quant-instantiations    210
;  :rlimit-count            205220)
(push) ; 11
; [then-branch: 36 | 0 <= First:(Second:($t@79@02))[i@81@02] | live]
; [else-branch: 36 | !(0 <= First:(Second:($t@79@02))[i@81@02]) | live]
(push) ; 12
; [then-branch: 36 | 0 <= First:(Second:($t@79@02))[i@81@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
    i@81@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@81@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5250
;  :arith-add-rows          30
;  :arith-assert-diseq      95
;  :arith-assert-lower      353
;  :arith-assert-upper      222
;  :arith-bound-prop        28
;  :arith-conflicts         21
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         52
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 1089
;  :datatype-occurs-check   296
;  :datatype-splits         777
;  :decisions               1085
;  :del-clause              702
;  :final-checks            110
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2317
;  :mk-clause               754
;  :num-allocs              4531114
;  :num-checks              304
;  :propagations            340
;  :quant-instantiations    210
;  :rlimit-count            205314)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 36 | !(0 <= First:(Second:($t@79@02))[i@81@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
      i@81@02))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 34 | !(i@81@02 < |First:(Second:($t@79@02))| && 0 <= i@81@02)]
(assert (not
  (and
    (<
      i@81@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))
    (<= 0 i@81@02))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@81@02 Int)) (!
  (implies
    (and
      (<
        i@81@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))
      (<= 0 i@81@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
          i@81@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
            i@81@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
            i@81@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
    i@81@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5250
;  :arith-add-rows          30
;  :arith-assert-diseq      96
;  :arith-assert-lower      354
;  :arith-assert-upper      223
;  :arith-bound-prop        28
;  :arith-conflicts         21
;  :arith-eq-adapter        177
;  :arith-fixed-eqs         52
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 1089
;  :datatype-occurs-check   296
;  :datatype-splits         777
;  :decisions               1085
;  :del-clause              718
;  :final-checks            110
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2325
;  :mk-clause               766
;  :num-allocs              4531114
;  :num-checks              305
;  :propagations            342
;  :quant-instantiations    211
;  :rlimit-count            205736)
(assert (forall ((i@81@02 Int)) (!
  (implies
    (and
      (<
        i@81@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))
      (<= 0 i@81@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
          i@81@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
            i@81@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
            i@81@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))
    i@81@02))
  :qid |prog.l<no position>|)))
(declare-const $t@82@02 $Snap)
(assert (= $t@82@02 ($Snap.combine ($Snap.first $t@82@02) ($Snap.second $t@82@02))))
(assert (=
  ($Snap.second $t@82@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@82@02))
    ($Snap.second ($Snap.second $t@82@02)))))
(assert (=
  ($Snap.second ($Snap.second $t@82@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@82@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@82@02))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@82@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@83@02 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 37 | 0 <= i@83@02 | live]
; [else-branch: 37 | !(0 <= i@83@02) | live]
(push) ; 8
; [then-branch: 37 | 0 <= i@83@02]
(assert (<= 0 i@83@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 37 | !(0 <= i@83@02)]
(assert (not (<= 0 i@83@02)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 38 | i@83@02 < |First:(Second:($t@82@02))| && 0 <= i@83@02 | live]
; [else-branch: 38 | !(i@83@02 < |First:(Second:($t@82@02))| && 0 <= i@83@02) | live]
(push) ; 8
; [then-branch: 38 | i@83@02 < |First:(Second:($t@82@02))| && 0 <= i@83@02]
(assert (and
  (<
    i@83@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
  (<= 0 i@83@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@83@02 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5287
;  :arith-add-rows          30
;  :arith-assert-diseq      96
;  :arith-assert-lower      359
;  :arith-assert-upper      226
;  :arith-bound-prop        28
;  :arith-conflicts         21
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         52
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 1089
;  :datatype-occurs-check   296
;  :datatype-splits         777
;  :decisions               1085
;  :del-clause              718
;  :final-checks            110
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2347
;  :mk-clause               766
;  :num-allocs              4531114
;  :num-checks              306
;  :propagations            342
;  :quant-instantiations    215
;  :rlimit-count            207123)
; [eval] -1
(push) ; 9
; [then-branch: 39 | First:(Second:($t@82@02))[i@83@02] == -1 | live]
; [else-branch: 39 | First:(Second:($t@82@02))[i@83@02] != -1 | live]
(push) ; 10
; [then-branch: 39 | First:(Second:($t@82@02))[i@83@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@83@02)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 39 | First:(Second:($t@82@02))[i@83@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      i@83@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@83@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5287
;  :arith-add-rows          30
;  :arith-assert-diseq      96
;  :arith-assert-lower      359
;  :arith-assert-upper      226
;  :arith-bound-prop        28
;  :arith-conflicts         21
;  :arith-eq-adapter        179
;  :arith-fixed-eqs         52
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 1089
;  :datatype-occurs-check   296
;  :datatype-splits         777
;  :decisions               1085
;  :del-clause              718
;  :final-checks            110
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2348
;  :mk-clause               766
;  :num-allocs              4531114
;  :num-checks              307
;  :propagations            342
;  :quant-instantiations    215
;  :rlimit-count            207274)
(push) ; 11
; [then-branch: 40 | 0 <= First:(Second:($t@82@02))[i@83@02] | live]
; [else-branch: 40 | !(0 <= First:(Second:($t@82@02))[i@83@02]) | live]
(push) ; 12
; [then-branch: 40 | 0 <= First:(Second:($t@82@02))[i@83@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@83@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@83@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5287
;  :arith-add-rows          30
;  :arith-assert-diseq      97
;  :arith-assert-lower      362
;  :arith-assert-upper      226
;  :arith-bound-prop        28
;  :arith-conflicts         21
;  :arith-eq-adapter        180
;  :arith-fixed-eqs         52
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 1089
;  :datatype-occurs-check   296
;  :datatype-splits         777
;  :decisions               1085
;  :del-clause              718
;  :final-checks            110
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2351
;  :mk-clause               767
;  :num-allocs              4531114
;  :num-checks              308
;  :propagations            342
;  :quant-instantiations    215
;  :rlimit-count            207377)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 40 | !(0 <= First:(Second:($t@82@02))[i@83@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      i@83@02))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 38 | !(i@83@02 < |First:(Second:($t@82@02))| && 0 <= i@83@02)]
(assert (not
  (and
    (<
      i@83@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
    (<= 0 i@83@02))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@83@02 Int)) (!
  (implies
    (and
      (<
        i@83@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
      (<= 0 i@83@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          i@83@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@83@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@83@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@83@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@02)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5305
;  :arith-add-rows          30
;  :arith-assert-diseq      97
;  :arith-assert-lower      363
;  :arith-assert-upper      227
;  :arith-bound-prop        28
;  :arith-conflicts         21
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         53
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1089
;  :datatype-occurs-check   296
;  :datatype-splits         777
;  :decisions               1085
;  :del-clause              719
;  :final-checks            110
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.62
;  :memory                  4.62
;  :mk-bool-var             2371
;  :mk-clause               777
;  :num-allocs              4531114
;  :num-checks              309
;  :propagations            346
;  :quant-instantiations    217
;  :rlimit-count            208392)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      0)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5649
;  :arith-add-rows          36
;  :arith-assert-diseq      102
;  :arith-assert-lower      388
;  :arith-assert-upper      244
;  :arith-bound-prop        40
;  :arith-conflicts         21
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         61
;  :arith-pivots            104
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 1169
;  :datatype-occurs-check   310
;  :datatype-splits         818
;  :decisions               1166
;  :del-clause              802
;  :final-checks            113
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2488
;  :mk-clause               860
;  :num-allocs              4906122
;  :num-checks              310
;  :propagations            381
;  :quant-instantiations    236
;  :rlimit-count            211165
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    0)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5992
;  :arith-add-rows          42
;  :arith-assert-diseq      107
;  :arith-assert-lower      413
;  :arith-assert-upper      261
;  :arith-bound-prop        52
;  :arith-conflicts         21
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         69
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1249
;  :datatype-occurs-check   324
;  :datatype-splits         859
;  :decisions               1247
;  :del-clause              885
;  :final-checks            116
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2605
;  :mk-clause               943
;  :num-allocs              5284186
;  :num-checks              311
;  :propagations            416
;  :quant-instantiations    255
;  :rlimit-count            213832
;  :time                    0.00)
; [then-branch: 41 | First:(Second:(Second:(Second:($t@79@02))))[0] == 0 | live]
; [else-branch: 41 | First:(Second:(Second:(Second:($t@79@02))))[0] != 0 | live]
(push) ; 7
; [then-branch: 41 | First:(Second:(Second:(Second:($t@79@02))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    0)
  0))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5993
;  :arith-add-rows          42
;  :arith-assert-diseq      107
;  :arith-assert-lower      413
;  :arith-assert-upper      261
;  :arith-bound-prop        52
;  :arith-conflicts         21
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         69
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 1249
;  :datatype-occurs-check   324
;  :datatype-splits         859
;  :decisions               1247
;  :del-clause              885
;  :final-checks            116
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2606
;  :mk-clause               943
;  :num-allocs              5284186
;  :num-checks              312
;  :propagations            416
;  :quant-instantiations    255
;  :rlimit-count            213960)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 41 | First:(Second:(Second:(Second:($t@79@02))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      0)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5999
;  :arith-add-rows          42
;  :arith-assert-diseq      107
;  :arith-assert-lower      413
;  :arith-assert-upper      261
;  :arith-bound-prop        52
;  :arith-conflicts         21
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         69
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1249
;  :datatype-occurs-check   324
;  :datatype-splits         859
;  :decisions               1247
;  :del-clause              885
;  :final-checks            116
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2610
;  :mk-clause               944
;  :num-allocs              5284186
;  :num-checks              313
;  :propagations            416
;  :quant-instantiations    255
;  :rlimit-count            214395)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6345
;  :arith-add-rows          48
;  :arith-assert-diseq      112
;  :arith-assert-lower      438
;  :arith-assert-upper      278
;  :arith-bound-prop        64
;  :arith-conflicts         21
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         77
;  :arith-pivots            122
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 1329
;  :datatype-occurs-check   338
;  :datatype-splits         900
;  :decisions               1329
;  :del-clause              968
;  :final-checks            119
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2727
;  :mk-clause               1027
;  :num-allocs              5284186
;  :num-checks              314
;  :propagations            451
;  :quant-instantiations    274
;  :rlimit-count            217081
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6690
;  :arith-add-rows          58
;  :arith-assert-diseq      117
;  :arith-assert-lower      463
;  :arith-assert-upper      295
;  :arith-bound-prop        76
;  :arith-conflicts         21
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         85
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 1409
;  :datatype-occurs-check   352
;  :datatype-splits         941
;  :decisions               1411
;  :del-clause              1051
;  :final-checks            122
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2844
;  :mk-clause               1110
;  :num-allocs              5284186
;  :num-checks              315
;  :propagations            486
;  :quant-instantiations    293
;  :rlimit-count            219822
;  :time                    0.00)
; [then-branch: 42 | First:(Second:(Second:(Second:($t@79@02))))[1] == 0 | live]
; [else-branch: 42 | First:(Second:(Second:(Second:($t@79@02))))[1] != 0 | live]
(push) ; 7
; [then-branch: 42 | First:(Second:(Second:(Second:($t@79@02))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    1)
  0))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6691
;  :arith-add-rows          58
;  :arith-assert-diseq      117
;  :arith-assert-lower      463
;  :arith-assert-upper      295
;  :arith-bound-prop        76
;  :arith-conflicts         21
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         85
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 1409
;  :datatype-occurs-check   352
;  :datatype-splits         941
;  :decisions               1411
;  :del-clause              1051
;  :final-checks            122
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2845
;  :mk-clause               1110
;  :num-allocs              5284186
;  :num-checks              316
;  :propagations            486
;  :quant-instantiations    293
;  :rlimit-count            219950)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 42 | First:(Second:(Second:(Second:($t@79@02))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      1)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6697
;  :arith-add-rows          58
;  :arith-assert-diseq      117
;  :arith-assert-lower      463
;  :arith-assert-upper      295
;  :arith-bound-prop        76
;  :arith-conflicts         21
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         85
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    237
;  :datatype-constructor-ax 1409
;  :datatype-occurs-check   352
;  :datatype-splits         941
;  :decisions               1411
;  :del-clause              1051
;  :final-checks            122
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2849
;  :mk-clause               1111
;  :num-allocs              5284186
;  :num-checks              317
;  :propagations            486
;  :quant-instantiations    293
;  :rlimit-count            220391)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      2)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7045
;  :arith-add-rows          68
;  :arith-assert-diseq      122
;  :arith-assert-lower      488
;  :arith-assert-upper      312
;  :arith-bound-prop        88
;  :arith-conflicts         21
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         93
;  :arith-pivots            140
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 1489
;  :datatype-occurs-check   366
;  :datatype-splits         982
;  :decisions               1494
;  :del-clause              1134
;  :final-checks            125
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             2966
;  :mk-clause               1194
;  :num-allocs              5284186
;  :num-checks              318
;  :propagations            521
;  :quant-instantiations    312
;  :rlimit-count            223151
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    2)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7392
;  :arith-add-rows          74
;  :arith-assert-diseq      127
;  :arith-assert-lower      513
;  :arith-assert-upper      329
;  :arith-bound-prop        100
;  :arith-conflicts         21
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         101
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    243
;  :datatype-constructor-ax 1569
;  :datatype-occurs-check   380
;  :datatype-splits         1023
;  :decisions               1577
;  :del-clause              1217
;  :final-checks            128
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3083
;  :mk-clause               1277
;  :num-allocs              5284186
;  :num-checks              319
;  :propagations            556
;  :quant-instantiations    331
;  :rlimit-count            225866
;  :time                    0.00)
; [then-branch: 43 | First:(Second:(Second:(Second:($t@79@02))))[2] == 0 | live]
; [else-branch: 43 | First:(Second:(Second:(Second:($t@79@02))))[2] != 0 | live]
(push) ; 7
; [then-branch: 43 | First:(Second:(Second:(Second:($t@79@02))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    2)
  0))
; [eval] diz.Main_event_state[2] == -2
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7393
;  :arith-add-rows          74
;  :arith-assert-diseq      127
;  :arith-assert-lower      513
;  :arith-assert-upper      329
;  :arith-bound-prop        100
;  :arith-conflicts         21
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         101
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    243
;  :datatype-constructor-ax 1569
;  :datatype-occurs-check   380
;  :datatype-splits         1023
;  :decisions               1577
;  :del-clause              1217
;  :final-checks            128
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3084
;  :mk-clause               1277
;  :num-allocs              5284186
;  :num-checks              320
;  :propagations            556
;  :quant-instantiations    331
;  :rlimit-count            225994)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 43 | First:(Second:(Second:(Second:($t@79@02))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      2)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      2)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[3]) == 0 ==> diz.Main_event_state[3] == -2
; [eval] old(diz.Main_event_state[3]) == 0
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 6
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7399
;  :arith-add-rows          74
;  :arith-assert-diseq      127
;  :arith-assert-lower      513
;  :arith-assert-upper      329
;  :arith-bound-prop        100
;  :arith-conflicts         21
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         101
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    244
;  :datatype-constructor-ax 1569
;  :datatype-occurs-check   380
;  :datatype-splits         1023
;  :decisions               1577
;  :del-clause              1217
;  :final-checks            128
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3088
;  :mk-clause               1278
;  :num-allocs              5284186
;  :num-checks              321
;  :propagations            556
;  :quant-instantiations    331
;  :rlimit-count            226445)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      3)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7749
;  :arith-add-rows          80
;  :arith-assert-diseq      132
;  :arith-assert-lower      538
;  :arith-assert-upper      346
;  :arith-bound-prop        112
;  :arith-conflicts         21
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         109
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 1649
;  :datatype-occurs-check   394
;  :datatype-splits         1064
;  :decisions               1661
;  :del-clause              1300
;  :final-checks            131
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3205
;  :mk-clause               1361
;  :num-allocs              5284186
;  :num-checks              322
;  :propagations            591
;  :quant-instantiations    350
;  :rlimit-count            229163
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    3)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8098
;  :arith-add-rows          90
;  :arith-assert-diseq      137
;  :arith-assert-lower      563
;  :arith-assert-upper      363
;  :arith-bound-prop        124
;  :arith-conflicts         21
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         117
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    250
;  :datatype-constructor-ax 1729
;  :datatype-occurs-check   408
;  :datatype-splits         1105
;  :decisions               1745
;  :del-clause              1383
;  :final-checks            134
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3322
;  :mk-clause               1444
;  :num-allocs              5284186
;  :num-checks              323
;  :propagations            626
;  :quant-instantiations    369
;  :rlimit-count            231944
;  :time                    0.00)
; [then-branch: 44 | First:(Second:(Second:(Second:($t@79@02))))[3] == 0 | live]
; [else-branch: 44 | First:(Second:(Second:(Second:($t@79@02))))[3] != 0 | live]
(push) ; 7
; [then-branch: 44 | First:(Second:(Second:(Second:($t@79@02))))[3] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    3)
  0))
; [eval] diz.Main_event_state[3] == -2
; [eval] diz.Main_event_state[3]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8099
;  :arith-add-rows          90
;  :arith-assert-diseq      137
;  :arith-assert-lower      563
;  :arith-assert-upper      363
;  :arith-bound-prop        124
;  :arith-conflicts         21
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         117
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    250
;  :datatype-constructor-ax 1729
;  :datatype-occurs-check   408
;  :datatype-splits         1105
;  :decisions               1745
;  :del-clause              1383
;  :final-checks            134
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3323
;  :mk-clause               1444
;  :num-allocs              5284186
;  :num-checks              324
;  :propagations            626
;  :quant-instantiations    369
;  :rlimit-count            232072)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 44 | First:(Second:(Second:(Second:($t@79@02))))[3] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      3)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      3)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[4]) == 0 ==> diz.Main_event_state[4] == -2
; [eval] old(diz.Main_event_state[4]) == 0
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 6
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8105
;  :arith-add-rows          90
;  :arith-assert-diseq      137
;  :arith-assert-lower      563
;  :arith-assert-upper      363
;  :arith-bound-prop        124
;  :arith-conflicts         21
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         117
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    251
;  :datatype-constructor-ax 1729
;  :datatype-occurs-check   408
;  :datatype-splits         1105
;  :decisions               1745
;  :del-clause              1383
;  :final-checks            134
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3327
;  :mk-clause               1445
;  :num-allocs              5284186
;  :num-checks              325
;  :propagations            626
;  :quant-instantiations    369
;  :rlimit-count            232533)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      4)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8461
;  :arith-add-rows          96
;  :arith-assert-diseq      142
;  :arith-assert-lower      588
;  :arith-assert-upper      380
;  :arith-bound-prop        136
;  :arith-conflicts         21
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         125
;  :arith-pivots            174
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 1809
;  :datatype-occurs-check   421
;  :datatype-splits         1146
;  :decisions               1830
;  :del-clause              1466
;  :final-checks            137
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3444
;  :mk-clause               1528
;  :num-allocs              5284186
;  :num-checks              326
;  :propagations            661
;  :quant-instantiations    388
;  :rlimit-count            235275
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    4)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8816
;  :arith-add-rows          102
;  :arith-assert-diseq      147
;  :arith-assert-lower      613
;  :arith-assert-upper      397
;  :arith-bound-prop        148
;  :arith-conflicts         21
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         133
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1889
;  :datatype-occurs-check   434
;  :datatype-splits         1187
;  :decisions               1915
;  :del-clause              1549
;  :final-checks            140
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3561
;  :mk-clause               1611
;  :num-allocs              5284186
;  :num-checks              327
;  :propagations            696
;  :quant-instantiations    407
;  :rlimit-count            238026
;  :time                    0.00)
; [then-branch: 45 | First:(Second:(Second:(Second:($t@79@02))))[4] == 0 | live]
; [else-branch: 45 | First:(Second:(Second:(Second:($t@79@02))))[4] != 0 | live]
(push) ; 7
; [then-branch: 45 | First:(Second:(Second:(Second:($t@79@02))))[4] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    4)
  0))
; [eval] diz.Main_event_state[4] == -2
; [eval] diz.Main_event_state[4]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8817
;  :arith-add-rows          102
;  :arith-assert-diseq      147
;  :arith-assert-lower      613
;  :arith-assert-upper      397
;  :arith-bound-prop        148
;  :arith-conflicts         21
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         133
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1889
;  :datatype-occurs-check   434
;  :datatype-splits         1187
;  :decisions               1915
;  :del-clause              1549
;  :final-checks            140
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3562
;  :mk-clause               1611
;  :num-allocs              5284186
;  :num-checks              328
;  :propagations            696
;  :quant-instantiations    407
;  :rlimit-count            238154)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 45 | First:(Second:(Second:(Second:($t@79@02))))[4] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      4)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      4)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[5]) == 0 ==> diz.Main_event_state[5] == -2
; [eval] old(diz.Main_event_state[5]) == 0
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 6
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8823
;  :arith-add-rows          102
;  :arith-assert-diseq      147
;  :arith-assert-lower      613
;  :arith-assert-upper      397
;  :arith-bound-prop        148
;  :arith-conflicts         21
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         133
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 1889
;  :datatype-occurs-check   434
;  :datatype-splits         1187
;  :decisions               1915
;  :del-clause              1549
;  :final-checks            140
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.82
;  :memory                  4.82
;  :mk-bool-var             3566
;  :mk-clause               1612
;  :num-allocs              5284186
;  :num-checks              329
;  :propagations            696
;  :quant-instantiations    407
;  :rlimit-count            238625)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      5)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9206
;  :arith-add-rows          110
;  :arith-assert-diseq      156
;  :arith-assert-lower      656
;  :arith-assert-upper      431
;  :arith-bound-prop        160
;  :arith-conflicts         21
;  :arith-eq-adapter        359
;  :arith-fixed-eqs         145
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    261
;  :datatype-constructor-ax 1969
;  :datatype-occurs-check   448
;  :datatype-splits         1228
;  :decisions               2011
;  :del-clause              1696
;  :final-checks            145
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.94
;  :mk-bool-var             3728
;  :mk-clause               1759
;  :num-allocs              5488741
;  :num-checks              330
;  :propagations            780
;  :quant-instantiations    436
;  :rlimit-count            241776
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    5)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9562
;  :arith-add-rows          116
;  :arith-assert-diseq      161
;  :arith-assert-lower      682
;  :arith-assert-upper      449
;  :arith-bound-prop        172
;  :arith-conflicts         21
;  :arith-eq-adapter        375
;  :arith-fixed-eqs         153
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 2049
;  :datatype-occurs-check   462
;  :datatype-splits         1269
;  :decisions               2098
;  :del-clause              1783
;  :final-checks            149
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.84
;  :mk-bool-var             3848
;  :mk-clause               1846
;  :num-allocs              5694048
;  :num-checks              331
;  :propagations            817
;  :quant-instantiations    455
;  :rlimit-count            244576
;  :time                    0.00)
; [then-branch: 46 | First:(Second:(Second:(Second:($t@79@02))))[5] == 0 | live]
; [else-branch: 46 | First:(Second:(Second:(Second:($t@79@02))))[5] != 0 | live]
(push) ; 7
; [then-branch: 46 | First:(Second:(Second:(Second:($t@79@02))))[5] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    5)
  0))
; [eval] diz.Main_event_state[5] == -2
; [eval] diz.Main_event_state[5]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9563
;  :arith-add-rows          116
;  :arith-assert-diseq      161
;  :arith-assert-lower      682
;  :arith-assert-upper      449
;  :arith-bound-prop        172
;  :arith-conflicts         21
;  :arith-eq-adapter        375
;  :arith-fixed-eqs         153
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    264
;  :datatype-constructor-ax 2049
;  :datatype-occurs-check   462
;  :datatype-splits         1269
;  :decisions               2098
;  :del-clause              1783
;  :final-checks            149
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.84
;  :mk-bool-var             3849
;  :mk-clause               1846
;  :num-allocs              5694048
;  :num-checks              332
;  :propagations            817
;  :quant-instantiations    455
;  :rlimit-count            244696)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 46 | First:(Second:(Second:(Second:($t@79@02))))[5] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      5)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      5)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[0]) == 0) ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] !(old(diz.Main_event_state[0]) == 0)
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9569
;  :arith-add-rows          116
;  :arith-assert-diseq      161
;  :arith-assert-lower      682
;  :arith-assert-upper      449
;  :arith-bound-prop        172
;  :arith-conflicts         21
;  :arith-eq-adapter        375
;  :arith-fixed-eqs         153
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    265
;  :datatype-constructor-ax 2049
;  :datatype-occurs-check   462
;  :datatype-splits         1269
;  :decisions               2098
;  :del-clause              1783
;  :final-checks            149
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.84
;  :mk-bool-var             3853
;  :mk-clause               1847
;  :num-allocs              5694048
;  :num-checks              333
;  :propagations            817
;  :quant-instantiations    455
;  :rlimit-count            245173)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    0)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9927
;  :arith-add-rows          122
;  :arith-assert-diseq      166
;  :arith-assert-lower      708
;  :arith-assert-upper      467
;  :arith-bound-prop        184
;  :arith-conflicts         21
;  :arith-eq-adapter        391
;  :arith-fixed-eqs         161
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 2129
;  :datatype-occurs-check   476
;  :datatype-splits         1310
;  :decisions               2185
;  :del-clause              1868
;  :final-checks            153
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.94
;  :mk-bool-var             3972
;  :mk-clause               1932
;  :num-allocs              5901961
;  :num-checks              334
;  :propagations            853
;  :quant-instantiations    474
;  :rlimit-count            247971
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      0)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10293
;  :arith-add-rows          128
;  :arith-assert-diseq      171
;  :arith-assert-lower      734
;  :arith-assert-upper      485
;  :arith-bound-prop        196
;  :arith-conflicts         21
;  :arith-eq-adapter        407
;  :arith-fixed-eqs         169
;  :arith-pivots            224
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 2212
;  :datatype-occurs-check   494
;  :datatype-splits         1353
;  :decisions               2274
;  :del-clause              1954
;  :final-checks            158
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.94
;  :mk-bool-var             4103
;  :mk-clause               2018
;  :num-allocs              6320151
;  :num-checks              335
;  :propagations            890
;  :quant-instantiations    493
;  :rlimit-count            250808
;  :time                    0.00)
; [then-branch: 47 | First:(Second:(Second:(Second:($t@79@02))))[0] != 0 | live]
; [else-branch: 47 | First:(Second:(Second:(Second:($t@79@02))))[0] == 0 | live]
(push) ; 7
; [then-branch: 47 | First:(Second:(Second:(Second:($t@79@02))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      0)
    0)))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10293
;  :arith-add-rows          128
;  :arith-assert-diseq      171
;  :arith-assert-lower      734
;  :arith-assert-upper      485
;  :arith-bound-prop        196
;  :arith-conflicts         21
;  :arith-eq-adapter        407
;  :arith-fixed-eqs         169
;  :arith-pivots            224
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 2212
;  :datatype-occurs-check   494
;  :datatype-splits         1353
;  :decisions               2274
;  :del-clause              1954
;  :final-checks            158
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.94
;  :mk-bool-var             4103
;  :mk-clause               2018
;  :num-allocs              6320151
;  :num-checks              336
;  :propagations            890
;  :quant-instantiations    493
;  :rlimit-count            250938)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10293
;  :arith-add-rows          128
;  :arith-assert-diseq      171
;  :arith-assert-lower      734
;  :arith-assert-upper      485
;  :arith-bound-prop        196
;  :arith-conflicts         21
;  :arith-eq-adapter        407
;  :arith-fixed-eqs         169
;  :arith-pivots            224
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 2212
;  :datatype-occurs-check   494
;  :datatype-splits         1353
;  :decisions               2274
;  :del-clause              1954
;  :final-checks            158
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.94
;  :mk-bool-var             4103
;  :mk-clause               2018
;  :num-allocs              6320151
;  :num-checks              337
;  :propagations            890
;  :quant-instantiations    493
;  :rlimit-count            250953)
(pop) ; 7
(push) ; 7
; [else-branch: 47 | First:(Second:(Second:(Second:($t@79@02))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    0)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
        0)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[1]) == 0) ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] !(old(diz.Main_event_state[1]) == 0)
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10299
;  :arith-add-rows          128
;  :arith-assert-diseq      171
;  :arith-assert-lower      734
;  :arith-assert-upper      485
;  :arith-bound-prop        196
;  :arith-conflicts         21
;  :arith-eq-adapter        407
;  :arith-fixed-eqs         169
;  :arith-pivots            224
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 2212
;  :datatype-occurs-check   494
;  :datatype-splits         1353
;  :decisions               2274
;  :del-clause              1954
;  :final-checks            158
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.94
;  :mk-bool-var             4106
;  :mk-clause               2019
;  :num-allocs              6320151
;  :num-checks              338
;  :propagations            890
;  :quant-instantiations    493
;  :rlimit-count            251402)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10658
;  :arith-add-rows          134
;  :arith-assert-diseq      176
;  :arith-assert-lower      760
;  :arith-assert-upper      503
;  :arith-bound-prop        208
;  :arith-conflicts         21
;  :arith-eq-adapter        423
;  :arith-fixed-eqs         177
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 2292
;  :datatype-occurs-check   508
;  :datatype-splits         1394
;  :decisions               2361
;  :del-clause              2041
;  :final-checks            162
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.94
;  :memory                  4.94
;  :mk-bool-var             4225
;  :mk-clause               2106
;  :num-allocs              6741985
;  :num-checks              339
;  :propagations            928
;  :quant-instantiations    512
;  :rlimit-count            254211
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11053
;  :arith-add-rows          142
;  :arith-assert-diseq      185
;  :arith-assert-lower      805
;  :arith-assert-upper      534
;  :arith-bound-prop        220
;  :arith-conflicts         21
;  :arith-eq-adapter        451
;  :arith-fixed-eqs         189
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 2375
;  :datatype-occurs-check   526
;  :datatype-splits         1437
;  :decisions               2460
;  :del-clause              2190
;  :final-checks            168
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4398
;  :mk-clause               2255
;  :num-allocs              7167313
;  :num-checks              340
;  :propagations            1015
;  :quant-instantiations    541
;  :rlimit-count            257435
;  :time                    0.00)
; [then-branch: 48 | First:(Second:(Second:(Second:($t@79@02))))[1] != 0 | live]
; [else-branch: 48 | First:(Second:(Second:(Second:($t@79@02))))[1] == 0 | live]
(push) ; 7
; [then-branch: 48 | First:(Second:(Second:(Second:($t@79@02))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      1)
    0)))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11053
;  :arith-add-rows          142
;  :arith-assert-diseq      185
;  :arith-assert-lower      805
;  :arith-assert-upper      534
;  :arith-bound-prop        220
;  :arith-conflicts         21
;  :arith-eq-adapter        451
;  :arith-fixed-eqs         189
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 2375
;  :datatype-occurs-check   526
;  :datatype-splits         1437
;  :decisions               2460
;  :del-clause              2190
;  :final-checks            168
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4398
;  :mk-clause               2255
;  :num-allocs              7167313
;  :num-checks              341
;  :propagations            1015
;  :quant-instantiations    541
;  :rlimit-count            257565)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11053
;  :arith-add-rows          142
;  :arith-assert-diseq      185
;  :arith-assert-lower      805
;  :arith-assert-upper      534
;  :arith-bound-prop        220
;  :arith-conflicts         21
;  :arith-eq-adapter        451
;  :arith-fixed-eqs         189
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 2375
;  :datatype-occurs-check   526
;  :datatype-splits         1437
;  :decisions               2460
;  :del-clause              2190
;  :final-checks            168
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4398
;  :mk-clause               2255
;  :num-allocs              7167313
;  :num-checks              342
;  :propagations            1015
;  :quant-instantiations    541
;  :rlimit-count            257580)
(pop) ; 7
(push) ; 7
; [else-branch: 48 | First:(Second:(Second:(Second:($t@79@02))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    1)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
        1)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[2]) == 0) ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] !(old(diz.Main_event_state[2]) == 0)
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 6
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11059
;  :arith-add-rows          142
;  :arith-assert-diseq      185
;  :arith-assert-lower      805
;  :arith-assert-upper      534
;  :arith-bound-prop        220
;  :arith-conflicts         21
;  :arith-eq-adapter        451
;  :arith-fixed-eqs         189
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    281
;  :datatype-constructor-ax 2375
;  :datatype-occurs-check   526
;  :datatype-splits         1437
;  :decisions               2460
;  :del-clause              2190
;  :final-checks            168
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4401
;  :mk-clause               2256
;  :num-allocs              7167313
;  :num-checks              343
;  :propagations            1015
;  :quant-instantiations    541
;  :rlimit-count            258039)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    2)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11419
;  :arith-add-rows          148
;  :arith-assert-diseq      190
;  :arith-assert-lower      831
;  :arith-assert-upper      552
;  :arith-bound-prop        232
;  :arith-conflicts         21
;  :arith-eq-adapter        467
;  :arith-fixed-eqs         197
;  :arith-pivots            258
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    284
;  :datatype-constructor-ax 2455
;  :datatype-occurs-check   540
;  :datatype-splits         1478
;  :decisions               2547
;  :del-clause              2277
;  :final-checks            172
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4520
;  :mk-clause               2343
;  :num-allocs              7596282
;  :num-checks              344
;  :propagations            1054
;  :quant-instantiations    560
;  :rlimit-count            260861
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      2)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11817
;  :arith-add-rows          156
;  :arith-assert-diseq      199
;  :arith-assert-lower      876
;  :arith-assert-upper      583
;  :arith-bound-prop        244
;  :arith-conflicts         21
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         209
;  :arith-pivots            272
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 2538
;  :datatype-occurs-check   558
;  :datatype-splits         1521
;  :decisions               2646
;  :del-clause              2424
;  :final-checks            178
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4693
;  :mk-clause               2490
;  :num-allocs              8028727
;  :num-checks              345
;  :propagations            1142
;  :quant-instantiations    589
;  :rlimit-count            264109
;  :time                    0.00)
; [then-branch: 49 | First:(Second:(Second:(Second:($t@79@02))))[2] != 0 | live]
; [else-branch: 49 | First:(Second:(Second:(Second:($t@79@02))))[2] == 0 | live]
(push) ; 7
; [then-branch: 49 | First:(Second:(Second:(Second:($t@79@02))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      2)
    0)))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11817
;  :arith-add-rows          156
;  :arith-assert-diseq      199
;  :arith-assert-lower      876
;  :arith-assert-upper      583
;  :arith-bound-prop        244
;  :arith-conflicts         21
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         209
;  :arith-pivots            272
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 2538
;  :datatype-occurs-check   558
;  :datatype-splits         1521
;  :decisions               2646
;  :del-clause              2424
;  :final-checks            178
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4693
;  :mk-clause               2490
;  :num-allocs              8028727
;  :num-checks              346
;  :propagations            1142
;  :quant-instantiations    589
;  :rlimit-count            264239)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11817
;  :arith-add-rows          156
;  :arith-assert-diseq      199
;  :arith-assert-lower      876
;  :arith-assert-upper      583
;  :arith-bound-prop        244
;  :arith-conflicts         21
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         209
;  :arith-pivots            272
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 2538
;  :datatype-occurs-check   558
;  :datatype-splits         1521
;  :decisions               2646
;  :del-clause              2424
;  :final-checks            178
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4693
;  :mk-clause               2490
;  :num-allocs              8028727
;  :num-checks              347
;  :propagations            1142
;  :quant-instantiations    589
;  :rlimit-count            264254)
(pop) ; 7
(push) ; 7
; [else-branch: 49 | First:(Second:(Second:(Second:($t@79@02))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    2)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
        2)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[3]) == 0) ==> diz.Main_event_state[3] == old(diz.Main_event_state[3])
; [eval] !(old(diz.Main_event_state[3]) == 0)
; [eval] old(diz.Main_event_state[3]) == 0
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 6
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11823
;  :arith-add-rows          156
;  :arith-assert-diseq      199
;  :arith-assert-lower      876
;  :arith-assert-upper      583
;  :arith-bound-prop        244
;  :arith-conflicts         21
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         209
;  :arith-pivots            272
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 2538
;  :datatype-occurs-check   558
;  :datatype-splits         1521
;  :decisions               2646
;  :del-clause              2424
;  :final-checks            178
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4696
;  :mk-clause               2491
;  :num-allocs              8028727
;  :num-checks              348
;  :propagations            1142
;  :quant-instantiations    589
;  :rlimit-count            264723)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    3)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12184
;  :arith-add-rows          162
;  :arith-assert-diseq      204
;  :arith-assert-lower      902
;  :arith-assert-upper      601
;  :arith-bound-prop        256
;  :arith-conflicts         21
;  :arith-eq-adapter        511
;  :arith-fixed-eqs         217
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 2618
;  :datatype-occurs-check   572
;  :datatype-splits         1562
;  :decisions               2733
;  :del-clause              2511
;  :final-checks            182
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4815
;  :mk-clause               2578
;  :num-allocs              8464817
;  :num-checks              349
;  :propagations            1182
;  :quant-instantiations    608
;  :rlimit-count            267546
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      3)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12556
;  :arith-add-rows          168
;  :arith-assert-diseq      209
;  :arith-assert-lower      928
;  :arith-assert-upper      619
;  :arith-bound-prop        268
;  :arith-conflicts         21
;  :arith-eq-adapter        527
;  :arith-fixed-eqs         225
;  :arith-pivots            292
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    296
;  :datatype-constructor-ax 2701
;  :datatype-occurs-check   590
;  :datatype-splits         1605
;  :decisions               2822
;  :del-clause              2599
;  :final-checks            187
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4946
;  :mk-clause               2666
;  :num-allocs              8904098
;  :num-checks              350
;  :propagations            1223
;  :quant-instantiations    627
;  :rlimit-count            270423
;  :time                    0.00)
; [then-branch: 50 | First:(Second:(Second:(Second:($t@79@02))))[3] != 0 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@79@02))))[3] == 0 | live]
(push) ; 7
; [then-branch: 50 | First:(Second:(Second:(Second:($t@79@02))))[3] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      3)
    0)))
; [eval] diz.Main_event_state[3] == old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12556
;  :arith-add-rows          168
;  :arith-assert-diseq      209
;  :arith-assert-lower      928
;  :arith-assert-upper      619
;  :arith-bound-prop        268
;  :arith-conflicts         21
;  :arith-eq-adapter        527
;  :arith-fixed-eqs         225
;  :arith-pivots            292
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    296
;  :datatype-constructor-ax 2701
;  :datatype-occurs-check   590
;  :datatype-splits         1605
;  :decisions               2822
;  :del-clause              2599
;  :final-checks            187
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4946
;  :mk-clause               2666
;  :num-allocs              8904098
;  :num-checks              351
;  :propagations            1223
;  :quant-instantiations    627
;  :rlimit-count            270553)
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12556
;  :arith-add-rows          168
;  :arith-assert-diseq      209
;  :arith-assert-lower      928
;  :arith-assert-upper      619
;  :arith-bound-prop        268
;  :arith-conflicts         21
;  :arith-eq-adapter        527
;  :arith-fixed-eqs         225
;  :arith-pivots            292
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    296
;  :datatype-constructor-ax 2701
;  :datatype-occurs-check   590
;  :datatype-splits         1605
;  :decisions               2822
;  :del-clause              2599
;  :final-checks            187
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4946
;  :mk-clause               2666
;  :num-allocs              8904098
;  :num-checks              352
;  :propagations            1223
;  :quant-instantiations    627
;  :rlimit-count            270568)
(pop) ; 7
(push) ; 7
; [else-branch: 50 | First:(Second:(Second:(Second:($t@79@02))))[3] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    3)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
        3)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      3)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      3))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[4]) == 0) ==> diz.Main_event_state[4] == old(diz.Main_event_state[4])
; [eval] !(old(diz.Main_event_state[4]) == 0)
; [eval] old(diz.Main_event_state[4]) == 0
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 6
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12562
;  :arith-add-rows          168
;  :arith-assert-diseq      209
;  :arith-assert-lower      928
;  :arith-assert-upper      619
;  :arith-bound-prop        268
;  :arith-conflicts         21
;  :arith-eq-adapter        527
;  :arith-fixed-eqs         225
;  :arith-pivots            292
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    297
;  :datatype-constructor-ax 2701
;  :datatype-occurs-check   590
;  :datatype-splits         1605
;  :decisions               2822
;  :del-clause              2599
;  :final-checks            187
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             4949
;  :mk-clause               2667
;  :num-allocs              8904098
;  :num-checks              353
;  :propagations            1223
;  :quant-instantiations    627
;  :rlimit-count            271047)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    4)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12924
;  :arith-add-rows          174
;  :arith-assert-diseq      214
;  :arith-assert-lower      954
;  :arith-assert-upper      637
;  :arith-bound-prop        280
;  :arith-conflicts         21
;  :arith-eq-adapter        543
;  :arith-fixed-eqs         233
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    300
;  :datatype-constructor-ax 2781
;  :datatype-occurs-check   604
;  :datatype-splits         1646
;  :decisions               2909
;  :del-clause              2686
;  :final-checks            191
;  :interface-eqs           17
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             5068
;  :mk-clause               2754
;  :num-allocs              9347021
;  :num-checks              354
;  :propagations            1264
;  :quant-instantiations    646
;  :rlimit-count            273877
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      4)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13298
;  :arith-add-rows          180
;  :arith-assert-diseq      219
;  :arith-assert-lower      979
;  :arith-assert-upper      655
;  :arith-bound-prop        292
;  :arith-conflicts         21
;  :arith-eq-adapter        559
;  :arith-fixed-eqs         241
;  :arith-pivots            310
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 2864
;  :datatype-occurs-check   622
;  :datatype-splits         1689
;  :decisions               2998
;  :del-clause              2772
;  :final-checks            196
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             5198
;  :mk-clause               2840
;  :num-allocs              9793109
;  :num-checks              355
;  :propagations            1305
;  :quant-instantiations    665
;  :rlimit-count            276747
;  :time                    0.00)
; [then-branch: 51 | First:(Second:(Second:(Second:($t@79@02))))[4] != 0 | live]
; [else-branch: 51 | First:(Second:(Second:(Second:($t@79@02))))[4] == 0 | live]
(push) ; 7
; [then-branch: 51 | First:(Second:(Second:(Second:($t@79@02))))[4] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      4)
    0)))
; [eval] diz.Main_event_state[4] == old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13298
;  :arith-add-rows          180
;  :arith-assert-diseq      219
;  :arith-assert-lower      979
;  :arith-assert-upper      655
;  :arith-bound-prop        292
;  :arith-conflicts         21
;  :arith-eq-adapter        559
;  :arith-fixed-eqs         241
;  :arith-pivots            310
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 2864
;  :datatype-occurs-check   622
;  :datatype-splits         1689
;  :decisions               2998
;  :del-clause              2772
;  :final-checks            196
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             5198
;  :mk-clause               2840
;  :num-allocs              9793109
;  :num-checks              356
;  :propagations            1305
;  :quant-instantiations    665
;  :rlimit-count            276877)
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13298
;  :arith-add-rows          180
;  :arith-assert-diseq      219
;  :arith-assert-lower      979
;  :arith-assert-upper      655
;  :arith-bound-prop        292
;  :arith-conflicts         21
;  :arith-eq-adapter        559
;  :arith-fixed-eqs         241
;  :arith-pivots            310
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 2864
;  :datatype-occurs-check   622
;  :datatype-splits         1689
;  :decisions               2998
;  :del-clause              2772
;  :final-checks            196
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             5198
;  :mk-clause               2840
;  :num-allocs              9793109
;  :num-checks              357
;  :propagations            1305
;  :quant-instantiations    665
;  :rlimit-count            276892)
(pop) ; 7
(push) ; 7
; [else-branch: 51 | First:(Second:(Second:(Second:($t@79@02))))[4] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    4)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
        4)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      4)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[5]) == 0) ==> diz.Main_event_state[5] == old(diz.Main_event_state[5])
; [eval] !(old(diz.Main_event_state[5]) == 0)
; [eval] old(diz.Main_event_state[5]) == 0
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 6
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13307
;  :arith-add-rows          180
;  :arith-assert-diseq      219
;  :arith-assert-lower      979
;  :arith-assert-upper      655
;  :arith-bound-prop        292
;  :arith-conflicts         21
;  :arith-eq-adapter        559
;  :arith-fixed-eqs         241
;  :arith-pivots            310
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 2864
;  :datatype-occurs-check   622
;  :datatype-splits         1689
;  :decisions               2998
;  :del-clause              2772
;  :final-checks            196
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             5200
;  :mk-clause               2841
;  :num-allocs              9793109
;  :num-checks              358
;  :propagations            1305
;  :quant-instantiations    665
;  :rlimit-count            277296)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    5)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13661
;  :arith-add-rows          186
;  :arith-assert-diseq      224
;  :arith-assert-lower      1005
;  :arith-assert-upper      673
;  :arith-bound-prop        304
;  :arith-conflicts         21
;  :arith-eq-adapter        575
;  :arith-fixed-eqs         249
;  :arith-pivots            320
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    307
;  :datatype-constructor-ax 2943
;  :datatype-occurs-check   638
;  :datatype-splits         1729
;  :decisions               3084
;  :del-clause              2859
;  :final-checks            200
;  :interface-eqs           19
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.86
;  :mk-bool-var             5318
;  :mk-clause               2928
;  :num-allocs              10017536
;  :num-checks              359
;  :propagations            1347
;  :quant-instantiations    684
;  :rlimit-count            280119
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      5)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14059
;  :arith-add-rows          194
;  :arith-assert-diseq      233
;  :arith-assert-lower      1048
;  :arith-assert-upper      707
;  :arith-bound-prop        316
;  :arith-conflicts         21
;  :arith-eq-adapter        603
;  :arith-fixed-eqs         261
;  :arith-pivots            334
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    311
;  :datatype-constructor-ax 3025
;  :datatype-occurs-check   659
;  :datatype-splits         1771
;  :decisions               3181
;  :del-clause              3007
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             5490
;  :mk-clause               3076
;  :num-allocs              10244527
;  :num-checks              360
;  :propagations            1442
;  :quant-instantiations    713
;  :rlimit-count            283358
;  :time                    0.00)
; [then-branch: 52 | First:(Second:(Second:(Second:($t@79@02))))[5] != 0 | live]
; [else-branch: 52 | First:(Second:(Second:(Second:($t@79@02))))[5] == 0 | live]
(push) ; 7
; [then-branch: 52 | First:(Second:(Second:(Second:($t@79@02))))[5] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      5)
    0)))
; [eval] diz.Main_event_state[5] == old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14059
;  :arith-add-rows          194
;  :arith-assert-diseq      233
;  :arith-assert-lower      1048
;  :arith-assert-upper      707
;  :arith-bound-prop        316
;  :arith-conflicts         21
;  :arith-eq-adapter        603
;  :arith-fixed-eqs         261
;  :arith-pivots            334
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    311
;  :datatype-constructor-ax 3025
;  :datatype-occurs-check   659
;  :datatype-splits         1771
;  :decisions               3181
;  :del-clause              3007
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             5490
;  :mk-clause               3076
;  :num-allocs              10244527
;  :num-checks              361
;  :propagations            1442
;  :quant-instantiations    713
;  :rlimit-count            283488)
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14059
;  :arith-add-rows          194
;  :arith-assert-diseq      233
;  :arith-assert-lower      1048
;  :arith-assert-upper      707
;  :arith-bound-prop        316
;  :arith-conflicts         21
;  :arith-eq-adapter        603
;  :arith-fixed-eqs         261
;  :arith-pivots            334
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    311
;  :datatype-constructor-ax 3025
;  :datatype-occurs-check   659
;  :datatype-splits         1771
;  :decisions               3181
;  :del-clause              3007
;  :final-checks            206
;  :interface-eqs           21
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             5490
;  :mk-clause               3076
;  :num-allocs              10244527
;  :num-checks              362
;  :propagations            1442
;  :quant-instantiations    713
;  :rlimit-count            283503)
(pop) ; 7
(push) ; 7
; [else-branch: 52 | First:(Second:(Second:(Second:($t@79@02))))[5] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
    5)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
        5)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      5)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@02)))))
      5))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1 && diz.Main_process_state[2] != -1
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14416
;  :arith-add-rows          200
;  :arith-assert-diseq      238
;  :arith-assert-lower      1074
;  :arith-assert-upper      725
;  :arith-bound-prop        328
;  :arith-conflicts         21
;  :arith-eq-adapter        622
;  :arith-fixed-eqs         269
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    314
;  :datatype-constructor-ax 3104
;  :datatype-occurs-check   675
;  :datatype-splits         1811
;  :decisions               3268
;  :del-clause              3091
;  :final-checks            210
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.86
;  :mk-bool-var             5614
;  :mk-clause               3174
;  :num-allocs              10472388
;  :num-checks              364
;  :propagations            1485
;  :quant-instantiations    732
;  :rlimit-count            286448)
; [eval] -1
(push) ; 6
; [then-branch: 53 | First:(Second:($t@82@02))[0] != -1 | live]
; [else-branch: 53 | First:(Second:($t@82@02))[0] == -1 | live]
(push) ; 7
; [then-branch: 53 | First:(Second:($t@82@02))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14419
;  :arith-add-rows          200
;  :arith-assert-diseq      240
;  :arith-assert-lower      1081
;  :arith-assert-upper      728
;  :arith-bound-prop        328
;  :arith-conflicts         21
;  :arith-eq-adapter        624
;  :arith-fixed-eqs         270
;  :arith-pivots            345
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    314
;  :datatype-constructor-ax 3104
;  :datatype-occurs-check   675
;  :datatype-splits         1811
;  :decisions               3268
;  :del-clause              3091
;  :final-checks            210
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.86
;  :mk-bool-var             5617
;  :mk-clause               3183
;  :num-allocs              10472388
;  :num-checks              365
;  :propagations            1493
;  :quant-instantiations    735
;  :rlimit-count            286624)
; [eval] -1
(push) ; 8
; [then-branch: 54 | First:(Second:($t@82@02))[1] != -1 | live]
; [else-branch: 54 | First:(Second:($t@82@02))[1] == -1 | live]
(push) ; 9
; [then-branch: 54 | First:(Second:($t@82@02))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[2] != -1
; [eval] diz.Main_process_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14422
;  :arith-add-rows          201
;  :arith-assert-diseq      242
;  :arith-assert-lower      1088
;  :arith-assert-upper      731
;  :arith-bound-prop        328
;  :arith-conflicts         21
;  :arith-eq-adapter        626
;  :arith-fixed-eqs         271
;  :arith-pivots            347
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    314
;  :datatype-constructor-ax 3104
;  :datatype-occurs-check   675
;  :datatype-splits         1811
;  :decisions               3268
;  :del-clause              3091
;  :final-checks            210
;  :interface-eqs           22
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.86
;  :mk-bool-var             5624
;  :mk-clause               3197
;  :num-allocs              10472388
;  :num-checks              366
;  :propagations            1499
;  :quant-instantiations    738
;  :rlimit-count            286820)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 54 | First:(Second:($t@82@02))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (- 0 1)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 53 | First:(Second:($t@82@02))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (- 0 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (and
    (and
      (not
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2)
          (- 0 1)))
      (not
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1)
          (- 0 1))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0)
        (- 0 1)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14667
;  :arith-add-rows          208
;  :arith-assert-diseq      254
;  :arith-assert-lower      1135
;  :arith-assert-upper      755
;  :arith-bound-prop        328
;  :arith-conflicts         21
;  :arith-eq-adapter        649
;  :arith-fixed-eqs         280
;  :arith-pivots            357
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 3152
;  :datatype-occurs-check   691
;  :datatype-splits         1851
;  :decisions               3325
;  :del-clause              3201
;  :final-checks            216
;  :interface-eqs           25
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             5735
;  :mk-clause               3284
;  :num-allocs              10703062
;  :num-checks              367
;  :propagations            1568
;  :quant-instantiations    759
;  :rlimit-count            289563
;  :time                    0.00)
(push) ; 6
(assert (not (and
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1)
        (- 0 1))))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14904
;  :arith-add-rows          208
;  :arith-assert-diseq      258
;  :arith-assert-lower      1159
;  :arith-assert-upper      773
;  :arith-bound-prop        332
;  :arith-conflicts         21
;  :arith-eq-adapter        662
;  :arith-fixed-eqs         287
;  :arith-pivots            359
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 3200
;  :datatype-occurs-check   707
;  :datatype-splits         1891
;  :decisions               3381
;  :del-clause              3276
;  :final-checks            220
;  :interface-eqs           26
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.87
;  :mk-bool-var             5815
;  :mk-clause               3359
;  :num-allocs              10934406
;  :num-checks              368
;  :propagations            1623
;  :quant-instantiations    776
;  :rlimit-count            291881
;  :time                    0.00)
; [then-branch: 55 | First:(Second:($t@82@02))[2] != -1 && First:(Second:($t@82@02))[1] != -1 && First:(Second:($t@82@02))[0] != -1 | live]
; [else-branch: 55 | !(First:(Second:($t@82@02))[2] != -1 && First:(Second:($t@82@02))[1] != -1 && First:(Second:($t@82@02))[0] != -1) | live]
(push) ; 6
; [then-branch: 55 | First:(Second:($t@82@02))[2] != -1 && First:(Second:($t@82@02))[1] != -1 && First:(Second:($t@82@02))[0] != -1]
(assert (and
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1)
        (- 0 1))))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)
      (- 0 1)))))
; [exec]
; min_advance__107 := Main_find_minimum_advance_Sequence$Integer$(diz, diz.Main_event_state)
; [eval] Main_find_minimum_advance_Sequence$Integer$(diz, diz.Main_event_state)
(push) ; 7
; [eval] diz != null
; [eval] |vals| == 6
; [eval] |vals|
(pop) ; 7
; Joined path conditions
(declare-const min_advance__107@84@02 Int)
(assert (=
  min_advance__107@84@02
  (Main_find_minimum_advance_Sequence$Integer$ ($Snap.combine
    $Snap.unit
    $Snap.unit) diz@31@02 ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02))))))))
; [eval] min_advance__107 == -1
; [eval] -1
(push) ; 7
(assert (not (not (= min_advance__107@84@02 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15173
;  :arith-add-rows          216
;  :arith-assert-diseq      302
;  :arith-assert-lower      1229
;  :arith-assert-upper      815
;  :arith-bound-prop        336
;  :arith-conflicts         22
;  :arith-eq-adapter        700
;  :arith-fixed-eqs         297
;  :arith-pivots            372
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 3248
;  :datatype-occurs-check   723
;  :datatype-splits         1931
;  :decisions               3451
;  :del-clause              3376
;  :final-checks            226
;  :interface-eqs           29
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6003
;  :mk-clause               3592
;  :num-allocs              11168803
;  :num-checks              369
;  :propagations            1738
;  :quant-instantiations    800
;  :rlimit-count            295338
;  :time                    0.00)
(push) ; 7
(assert (not (= min_advance__107@84@02 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15429
;  :arith-add-rows          216
;  :arith-assert-diseq      343
;  :arith-assert-lower      1281
;  :arith-assert-upper      850
;  :arith-bound-prop        345
;  :arith-conflicts         23
;  :arith-eq-adapter        725
;  :arith-fixed-eqs         304
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    327
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   739
;  :datatype-splits         1971
;  :decisions               3520
;  :del-clause              3486
;  :final-checks            232
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6129
;  :mk-clause               3702
;  :num-allocs              11168803
;  :num-checks              370
;  :propagations            1831
;  :quant-instantiations    812
;  :rlimit-count            297881
;  :time                    0.00)
; [then-branch: 56 | min_advance__107@84@02 == -1 | live]
; [else-branch: 56 | min_advance__107@84@02 != -1 | live]
(push) ; 7
; [then-branch: 56 | min_advance__107@84@02 == -1]
(assert (= min_advance__107@84@02 (- 0 1)))
; [exec]
; min_advance__107 := 0
; [exec]
; __flatten_100__106 := Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__107), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__107), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__107), (diz.Main_event_state[3] < -1 ? -3 : diz.Main_event_state[3] - min_advance__107), (diz.Main_event_state[4] < -1 ? -3 : diz.Main_event_state[4] - min_advance__107), (diz.Main_event_state[5] < -1 ? -3 : diz.Main_event_state[5] - min_advance__107))
; [eval] Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__107), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__107), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__107), (diz.Main_event_state[3] < -1 ? -3 : diz.Main_event_state[3] - min_advance__107), (diz.Main_event_state[4] < -1 ? -3 : diz.Main_event_state[4] - min_advance__107), (diz.Main_event_state[5] < -1 ? -3 : diz.Main_event_state[5] - min_advance__107))
; [eval] (diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__107)
; [eval] diz.Main_event_state[0] < -1
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15431
;  :arith-add-rows          216
;  :arith-assert-diseq      344
;  :arith-assert-lower      1282
;  :arith-assert-upper      853
;  :arith-bound-prop        345
;  :arith-conflicts         23
;  :arith-eq-adapter        726
;  :arith-fixed-eqs         304
;  :arith-pivots            379
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    327
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   739
;  :datatype-splits         1971
;  :decisions               3520
;  :del-clause              3486
;  :final-checks            232
;  :interface-eqs           32
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6133
;  :mk-clause               3702
;  :num-allocs              11168803
;  :num-checks              371
;  :propagations            1832
;  :quant-instantiations    812
;  :rlimit-count            297966)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15680
;  :arith-add-rows          216
;  :arith-assert-diseq      381
;  :arith-assert-lower      1325
;  :arith-assert-upper      888
;  :arith-bound-prop        349
;  :arith-conflicts         24
;  :arith-eq-adapter        750
;  :arith-fixed-eqs         311
;  :arith-pivots            386
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 3344
;  :datatype-occurs-check   755
;  :datatype-splits         2011
;  :decisions               3588
;  :del-clause              3571
;  :final-checks            238
;  :interface-eqs           35
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6250
;  :mk-clause               3787
;  :num-allocs              11168803
;  :num-checks              372
;  :propagations            1913
;  :quant-instantiations    824
;  :rlimit-count            300484
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15927
;  :arith-add-rows          216
;  :arith-assert-diseq      414
;  :arith-assert-lower      1365
;  :arith-assert-upper      918
;  :arith-bound-prop        353
;  :arith-conflicts         24
;  :arith-eq-adapter        773
;  :arith-fixed-eqs         318
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 3392
;  :datatype-occurs-check   771
;  :datatype-splits         2051
;  :decisions               3655
;  :del-clause              3661
;  :final-checks            244
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6365
;  :mk-clause               3877
;  :num-allocs              11168803
;  :num-checks              373
;  :propagations            1990
;  :quant-instantiations    836
;  :rlimit-count            302930
;  :time                    0.00)
; [then-branch: 57 | First:(Second:(Second:(Second:($t@82@02))))[0] < -1 | live]
; [else-branch: 57 | !(First:(Second:(Second:(Second:($t@82@02))))[0] < -1) | live]
(push) ; 9
; [then-branch: 57 | First:(Second:(Second:(Second:($t@82@02))))[0] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    0)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 57 | !(First:(Second:(Second:(Second:($t@82@02))))[0] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] - min_advance__107
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15927
;  :arith-add-rows          216
;  :arith-assert-diseq      414
;  :arith-assert-lower      1367
;  :arith-assert-upper      918
;  :arith-bound-prop        353
;  :arith-conflicts         24
;  :arith-eq-adapter        773
;  :arith-fixed-eqs         318
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 3392
;  :datatype-occurs-check   771
;  :datatype-splits         2051
;  :decisions               3655
;  :del-clause              3661
;  :final-checks            244
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6365
;  :mk-clause               3877
;  :num-allocs              11168803
;  :num-checks              374
;  :propagations            1992
;  :quant-instantiations    836
;  :rlimit-count            303093)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__107)
; [eval] diz.Main_event_state[1] < -1
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15927
;  :arith-add-rows          216
;  :arith-assert-diseq      414
;  :arith-assert-lower      1367
;  :arith-assert-upper      918
;  :arith-bound-prop        353
;  :arith-conflicts         24
;  :arith-eq-adapter        773
;  :arith-fixed-eqs         318
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    333
;  :datatype-constructor-ax 3392
;  :datatype-occurs-check   771
;  :datatype-splits         2051
;  :decisions               3655
;  :del-clause              3661
;  :final-checks            244
;  :interface-eqs           38
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6365
;  :mk-clause               3877
;  :num-allocs              11168803
;  :num-checks              375
;  :propagations            1992
;  :quant-instantiations    836
;  :rlimit-count            303108)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16176
;  :arith-add-rows          216
;  :arith-assert-diseq      451
;  :arith-assert-lower      1410
;  :arith-assert-upper      953
;  :arith-bound-prop        357
;  :arith-conflicts         25
;  :arith-eq-adapter        797
;  :arith-fixed-eqs         325
;  :arith-pivots            400
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 3440
;  :datatype-occurs-check   787
;  :datatype-splits         2091
;  :decisions               3723
;  :del-clause              3746
;  :final-checks            250
;  :interface-eqs           41
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6482
;  :mk-clause               3962
;  :num-allocs              11168803
;  :num-checks              376
;  :propagations            2073
;  :quant-instantiations    848
;  :rlimit-count            305638
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16422
;  :arith-add-rows          216
;  :arith-assert-diseq      484
;  :arith-assert-lower      1451
;  :arith-assert-upper      983
;  :arith-bound-prop        361
;  :arith-conflicts         25
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         332
;  :arith-pivots            406
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 3488
;  :datatype-occurs-check   803
;  :datatype-splits         2131
;  :decisions               3790
;  :del-clause              3836
;  :final-checks            256
;  :interface-eqs           44
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6598
;  :mk-clause               4052
;  :num-allocs              11168803
;  :num-checks              377
;  :propagations            2150
;  :quant-instantiations    860
;  :rlimit-count            308086
;  :time                    0.00)
; [then-branch: 58 | First:(Second:(Second:(Second:($t@82@02))))[1] < -1 | live]
; [else-branch: 58 | !(First:(Second:(Second:(Second:($t@82@02))))[1] < -1) | live]
(push) ; 9
; [then-branch: 58 | First:(Second:(Second:(Second:($t@82@02))))[1] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    1)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 58 | !(First:(Second:(Second:(Second:($t@82@02))))[1] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] - min_advance__107
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16422
;  :arith-add-rows          216
;  :arith-assert-diseq      484
;  :arith-assert-lower      1453
;  :arith-assert-upper      983
;  :arith-bound-prop        361
;  :arith-conflicts         25
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         332
;  :arith-pivots            406
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 3488
;  :datatype-occurs-check   803
;  :datatype-splits         2131
;  :decisions               3790
;  :del-clause              3836
;  :final-checks            256
;  :interface-eqs           44
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6598
;  :mk-clause               4052
;  :num-allocs              11168803
;  :num-checks              378
;  :propagations            2152
;  :quant-instantiations    860
;  :rlimit-count            308249)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__107)
; [eval] diz.Main_event_state[2] < -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16422
;  :arith-add-rows          216
;  :arith-assert-diseq      484
;  :arith-assert-lower      1453
;  :arith-assert-upper      983
;  :arith-bound-prop        361
;  :arith-conflicts         25
;  :arith-eq-adapter        820
;  :arith-fixed-eqs         332
;  :arith-pivots            406
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    339
;  :datatype-constructor-ax 3488
;  :datatype-occurs-check   803
;  :datatype-splits         2131
;  :decisions               3790
;  :del-clause              3836
;  :final-checks            256
;  :interface-eqs           44
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6598
;  :mk-clause               4052
;  :num-allocs              11168803
;  :num-checks              379
;  :propagations            2152
;  :quant-instantiations    860
;  :rlimit-count            308264)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16670
;  :arith-add-rows          216
;  :arith-assert-diseq      521
;  :arith-assert-lower      1501
;  :arith-assert-upper      1013
;  :arith-bound-prop        367
;  :arith-conflicts         26
;  :arith-eq-adapter        844
;  :arith-fixed-eqs         339
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 3536
;  :datatype-occurs-check   819
;  :datatype-splits         2171
;  :decisions               3858
;  :del-clause              3927
;  :final-checks            262
;  :interface-eqs           47
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6717
;  :mk-clause               4143
;  :num-allocs              11168803
;  :num-checks              380
;  :propagations            2233
;  :quant-instantiations    872
;  :rlimit-count            310791
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    2)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16917
;  :arith-add-rows          222
;  :arith-assert-diseq      555
;  :arith-assert-lower      1544
;  :arith-assert-upper      1040
;  :arith-bound-prop        373
;  :arith-conflicts         26
;  :arith-eq-adapter        867
;  :arith-fixed-eqs         347
;  :arith-pivots            422
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 3584
;  :datatype-occurs-check   835
;  :datatype-splits         2211
;  :decisions               3925
;  :del-clause              4019
;  :final-checks            268
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6834
;  :mk-clause               4235
;  :num-allocs              11168803
;  :num-checks              381
;  :propagations            2308
;  :quant-instantiations    884
;  :rlimit-count            313342
;  :time                    0.00)
; [then-branch: 59 | First:(Second:(Second:(Second:($t@82@02))))[2] < -1 | live]
; [else-branch: 59 | !(First:(Second:(Second:(Second:($t@82@02))))[2] < -1) | live]
(push) ; 9
; [then-branch: 59 | First:(Second:(Second:(Second:($t@82@02))))[2] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    2)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 59 | !(First:(Second:(Second:(Second:($t@82@02))))[2] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] - min_advance__107
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16917
;  :arith-add-rows          222
;  :arith-assert-diseq      555
;  :arith-assert-lower      1545
;  :arith-assert-upper      1041
;  :arith-bound-prop        373
;  :arith-conflicts         26
;  :arith-eq-adapter        867
;  :arith-fixed-eqs         347
;  :arith-pivots            422
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 3584
;  :datatype-occurs-check   835
;  :datatype-splits         2211
;  :decisions               3925
;  :del-clause              4019
;  :final-checks            268
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6834
;  :mk-clause               4235
;  :num-allocs              11168803
;  :num-checks              382
;  :propagations            2310
;  :quant-instantiations    884
;  :rlimit-count            313505)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[3] < -1 ? -3 : diz.Main_event_state[3] - min_advance__107)
; [eval] diz.Main_event_state[3] < -1
; [eval] diz.Main_event_state[3]
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16917
;  :arith-add-rows          222
;  :arith-assert-diseq      555
;  :arith-assert-lower      1545
;  :arith-assert-upper      1041
;  :arith-bound-prop        373
;  :arith-conflicts         26
;  :arith-eq-adapter        867
;  :arith-fixed-eqs         347
;  :arith-pivots            422
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    345
;  :datatype-constructor-ax 3584
;  :datatype-occurs-check   835
;  :datatype-splits         2211
;  :decisions               3925
;  :del-clause              4019
;  :final-checks            268
;  :interface-eqs           50
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6834
;  :mk-clause               4235
;  :num-allocs              11168803
;  :num-checks              383
;  :propagations            2310
;  :quant-instantiations    884
;  :rlimit-count            313520)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      3)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17165
;  :arith-add-rows          222
;  :arith-assert-diseq      592
;  :arith-assert-lower      1593
;  :arith-assert-upper      1071
;  :arith-bound-prop        379
;  :arith-conflicts         27
;  :arith-eq-adapter        891
;  :arith-fixed-eqs         354
;  :arith-pivots            428
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 3632
;  :datatype-occurs-check   851
;  :datatype-splits         2251
;  :decisions               3993
;  :del-clause              4108
;  :final-checks            274
;  :interface-eqs           53
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             6953
;  :mk-clause               4324
;  :num-allocs              11168803
;  :num-checks              384
;  :propagations            2390
;  :quant-instantiations    896
;  :rlimit-count            316038
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    3)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17411
;  :arith-add-rows          222
;  :arith-assert-diseq      626
;  :arith-assert-lower      1635
;  :arith-assert-upper      1098
;  :arith-bound-prop        385
;  :arith-conflicts         27
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         361
;  :arith-pivots            434
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 3680
;  :datatype-occurs-check   867
;  :datatype-splits         2291
;  :decisions               4060
;  :del-clause              4200
;  :final-checks            280
;  :interface-eqs           56
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7069
;  :mk-clause               4416
;  :num-allocs              11168803
;  :num-checks              385
;  :propagations            2465
;  :quant-instantiations    908
;  :rlimit-count            318481
;  :time                    0.00)
; [then-branch: 60 | First:(Second:(Second:(Second:($t@82@02))))[3] < -1 | live]
; [else-branch: 60 | !(First:(Second:(Second:(Second:($t@82@02))))[3] < -1) | live]
(push) ; 9
; [then-branch: 60 | First:(Second:(Second:(Second:($t@82@02))))[3] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    3)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 60 | !(First:(Second:(Second:(Second:($t@82@02))))[3] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      3)
    (- 0 1))))
; [eval] diz.Main_event_state[3] - min_advance__107
; [eval] diz.Main_event_state[3]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17411
;  :arith-add-rows          222
;  :arith-assert-diseq      626
;  :arith-assert-lower      1636
;  :arith-assert-upper      1099
;  :arith-bound-prop        385
;  :arith-conflicts         27
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         361
;  :arith-pivots            434
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 3680
;  :datatype-occurs-check   867
;  :datatype-splits         2291
;  :decisions               4060
;  :del-clause              4200
;  :final-checks            280
;  :interface-eqs           56
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7069
;  :mk-clause               4416
;  :num-allocs              11168803
;  :num-checks              386
;  :propagations            2467
;  :quant-instantiations    908
;  :rlimit-count            318644)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[4] < -1 ? -3 : diz.Main_event_state[4] - min_advance__107)
; [eval] diz.Main_event_state[4] < -1
; [eval] diz.Main_event_state[4]
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17411
;  :arith-add-rows          222
;  :arith-assert-diseq      626
;  :arith-assert-lower      1636
;  :arith-assert-upper      1099
;  :arith-bound-prop        385
;  :arith-conflicts         27
;  :arith-eq-adapter        914
;  :arith-fixed-eqs         361
;  :arith-pivots            434
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 3680
;  :datatype-occurs-check   867
;  :datatype-splits         2291
;  :decisions               4060
;  :del-clause              4200
;  :final-checks            280
;  :interface-eqs           56
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7069
;  :mk-clause               4416
;  :num-allocs              11168803
;  :num-checks              387
;  :propagations            2467
;  :quant-instantiations    908
;  :rlimit-count            318659)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      4)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17662
;  :arith-add-rows          222
;  :arith-assert-diseq      666
;  :arith-assert-lower      1683
;  :arith-assert-upper      1131
;  :arith-bound-prop        391
;  :arith-conflicts         28
;  :arith-eq-adapter        939
;  :arith-fixed-eqs         368
;  :arith-pivots            440
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 3728
;  :datatype-occurs-check   883
;  :datatype-splits         2331
;  :decisions               4129
;  :del-clause              4289
;  :final-checks            286
;  :interface-eqs           59
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7190
;  :mk-clause               4505
;  :num-allocs              11168803
;  :num-checks              388
;  :propagations            2548
;  :quant-instantiations    920
;  :rlimit-count            321215
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    4)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17907
;  :arith-add-rows          222
;  :arith-assert-diseq      700
;  :arith-assert-lower      1726
;  :arith-assert-upper      1158
;  :arith-bound-prop        397
;  :arith-conflicts         28
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         375
;  :arith-pivots            446
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 3776
;  :datatype-occurs-check   899
;  :datatype-splits         2371
;  :decisions               4196
;  :del-clause              4383
;  :final-checks            292
;  :interface-eqs           62
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7307
;  :mk-clause               4599
;  :num-allocs              11168803
;  :num-checks              389
;  :propagations            2624
;  :quant-instantiations    932
;  :rlimit-count            323672
;  :time                    0.00)
; [then-branch: 61 | First:(Second:(Second:(Second:($t@82@02))))[4] < -1 | live]
; [else-branch: 61 | !(First:(Second:(Second:(Second:($t@82@02))))[4] < -1) | live]
(push) ; 9
; [then-branch: 61 | First:(Second:(Second:(Second:($t@82@02))))[4] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    4)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 61 | !(First:(Second:(Second:(Second:($t@82@02))))[4] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      4)
    (- 0 1))))
; [eval] diz.Main_event_state[4] - min_advance__107
; [eval] diz.Main_event_state[4]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17907
;  :arith-add-rows          222
;  :arith-assert-diseq      700
;  :arith-assert-lower      1727
;  :arith-assert-upper      1159
;  :arith-bound-prop        397
;  :arith-conflicts         28
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         375
;  :arith-pivots            446
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 3776
;  :datatype-occurs-check   899
;  :datatype-splits         2371
;  :decisions               4196
;  :del-clause              4383
;  :final-checks            292
;  :interface-eqs           62
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7307
;  :mk-clause               4599
;  :num-allocs              11168803
;  :num-checks              390
;  :propagations            2626
;  :quant-instantiations    932
;  :rlimit-count            323835)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[5] < -1 ? -3 : diz.Main_event_state[5] - min_advance__107)
; [eval] diz.Main_event_state[5] < -1
; [eval] diz.Main_event_state[5]
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17907
;  :arith-add-rows          222
;  :arith-assert-diseq      700
;  :arith-assert-lower      1727
;  :arith-assert-upper      1159
;  :arith-bound-prop        397
;  :arith-conflicts         28
;  :arith-eq-adapter        962
;  :arith-fixed-eqs         375
;  :arith-pivots            446
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 3776
;  :datatype-occurs-check   899
;  :datatype-splits         2371
;  :decisions               4196
;  :del-clause              4383
;  :final-checks            292
;  :interface-eqs           62
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7307
;  :mk-clause               4599
;  :num-allocs              11168803
;  :num-checks              391
;  :propagations            2626
;  :quant-instantiations    932
;  :rlimit-count            323850)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      5)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18160
;  :arith-add-rows          233
;  :arith-assert-diseq      739
;  :arith-assert-lower      1774
;  :arith-assert-upper      1191
;  :arith-bound-prop        403
;  :arith-conflicts         29
;  :arith-eq-adapter        987
;  :arith-fixed-eqs         383
;  :arith-pivots            454
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3824
;  :datatype-occurs-check   915
;  :datatype-splits         2411
;  :decisions               4265
;  :del-clause              4470
;  :final-checks            298
;  :interface-eqs           65
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7428
;  :mk-clause               4686
;  :num-allocs              11168803
;  :num-checks              392
;  :propagations            2706
;  :quant-instantiations    944
;  :rlimit-count            326581
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    5)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18410
;  :arith-add-rows          241
;  :arith-assert-diseq      775
;  :arith-assert-lower      1821
;  :arith-assert-upper      1221
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1011
;  :arith-fixed-eqs         391
;  :arith-pivots            463
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4565
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7547
;  :mk-clause               4781
;  :num-allocs              11168803
;  :num-checks              393
;  :propagations            2789
;  :quant-instantiations    956
;  :rlimit-count            329222
;  :time                    0.00)
; [then-branch: 62 | First:(Second:(Second:(Second:($t@82@02))))[5] < -1 | live]
; [else-branch: 62 | !(First:(Second:(Second:(Second:($t@82@02))))[5] < -1) | live]
(push) ; 9
; [then-branch: 62 | First:(Second:(Second:(Second:($t@82@02))))[5] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    5)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 62 | !(First:(Second:(Second:(Second:($t@82@02))))[5] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      5)
    (- 0 1))))
; [eval] diz.Main_event_state[5] - min_advance__107
; [eval] diz.Main_event_state[5]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18410
;  :arith-add-rows          241
;  :arith-assert-diseq      775
;  :arith-assert-lower      1822
;  :arith-assert-upper      1222
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1011
;  :arith-fixed-eqs         391
;  :arith-pivots            463
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4565
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7547
;  :mk-clause               4781
;  :num-allocs              11168803
;  :num-checks              394
;  :propagations            2791
;  :quant-instantiations    956
;  :rlimit-count            329385)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_append
            (Seq_append
              (Seq_singleton (ite
                (<
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                    0)
                  (- 0 1))
                (- 0 3)
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  0)))
              (Seq_singleton (ite
                (<
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                    1)
                  (- 0 1))
                (- 0 3)
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  1))))
            (Seq_singleton (ite
              (<
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  2)
                (- 0 1))
              (- 0 3)
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                2))))
          (Seq_singleton (ite
            (<
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                3)
              (- 0 1))
            (- 0 3)
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
              3))))
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
              4)
            (- 0 1))
          (- 0 3)
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
            4))))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
            5)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
          5)))))
  6))
(declare-const __flatten_100__106@85@02 Seq<Int>)
(assert (Seq_equal
  __flatten_100__106@85@02
  (Seq_append
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_append
            (Seq_singleton (ite
              (<
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  0)
                (- 0 1))
              (- 0 3)
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                0)))
            (Seq_singleton (ite
              (<
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  1)
                (- 0 1))
              (- 0 3)
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                1))))
          (Seq_singleton (ite
            (<
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                2)
              (- 0 1))
            (- 0 3)
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
              2))))
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
              3)
            (- 0 1))
          (- 0 3)
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
            3))))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
            4)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
          4))))
    (Seq_singleton (ite
      (<
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
          5)
        (- 0 1))
      (- 0 3)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
        5))))))
; [exec]
; __flatten_99__105 := __flatten_100__106
; [exec]
; diz.Main_event_state := __flatten_99__105
; [exec]
; Main_wakeup_after_wait_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(push) ; 8
(assert (not (= (Seq_length __flatten_100__106@85@02) 6)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18416
;  :arith-add-rows          242
;  :arith-assert-diseq      775
;  :arith-assert-lower      1825
;  :arith-assert-upper      1224
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1015
;  :arith-fixed-eqs         392
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4565
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7585
;  :mk-clause               4811
;  :num-allocs              11168803
;  :num-checks              395
;  :propagations            2796
;  :quant-instantiations    960
;  :rlimit-count            330429)
(assert (= (Seq_length __flatten_100__106@85@02) 6))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@86@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 63 | 0 <= i@86@02 | live]
; [else-branch: 63 | !(0 <= i@86@02) | live]
(push) ; 10
; [then-branch: 63 | 0 <= i@86@02]
(assert (<= 0 i@86@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 63 | !(0 <= i@86@02)]
(assert (not (<= 0 i@86@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 64 | i@86@02 < |First:(Second:($t@82@02))| && 0 <= i@86@02 | live]
; [else-branch: 64 | !(i@86@02 < |First:(Second:($t@82@02))| && 0 <= i@86@02) | live]
(push) ; 10
; [then-branch: 64 | i@86@02 < |First:(Second:($t@82@02))| && 0 <= i@86@02]
(assert (and
  (<
    i@86@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
  (<= 0 i@86@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@86@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18417
;  :arith-add-rows          242
;  :arith-assert-diseq      775
;  :arith-assert-lower      1827
;  :arith-assert-upper      1226
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1016
;  :arith-fixed-eqs         392
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4565
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7590
;  :mk-clause               4811
;  :num-allocs              11168803
;  :num-checks              396
;  :propagations            2796
;  :quant-instantiations    960
;  :rlimit-count            330616)
; [eval] -1
(push) ; 11
; [then-branch: 65 | First:(Second:($t@82@02))[i@86@02] == -1 | live]
; [else-branch: 65 | First:(Second:($t@82@02))[i@86@02] != -1 | live]
(push) ; 12
; [then-branch: 65 | First:(Second:($t@82@02))[i@86@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@86@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 65 | First:(Second:($t@82@02))[i@86@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      i@86@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@86@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18421
;  :arith-add-rows          242
;  :arith-assert-diseq      777
;  :arith-assert-lower      1834
;  :arith-assert-upper      1229
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1019
;  :arith-fixed-eqs         393
;  :arith-pivots            465
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4565
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7605
;  :mk-clause               4822
;  :num-allocs              11168803
;  :num-checks              397
;  :propagations            2801
;  :quant-instantiations    963
;  :rlimit-count            330922)
(push) ; 13
; [then-branch: 66 | 0 <= First:(Second:($t@82@02))[i@86@02] | live]
; [else-branch: 66 | !(0 <= First:(Second:($t@82@02))[i@86@02]) | live]
(push) ; 14
; [then-branch: 66 | 0 <= First:(Second:($t@82@02))[i@86@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@86@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@86@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18421
;  :arith-add-rows          242
;  :arith-assert-diseq      777
;  :arith-assert-lower      1834
;  :arith-assert-upper      1229
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1019
;  :arith-fixed-eqs         393
;  :arith-pivots            465
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4565
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7605
;  :mk-clause               4822
;  :num-allocs              11168803
;  :num-checks              398
;  :propagations            2801
;  :quant-instantiations    963
;  :rlimit-count            331016)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 66 | !(0 <= First:(Second:($t@82@02))[i@86@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      i@86@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 64 | !(i@86@02 < |First:(Second:($t@82@02))| && 0 <= i@86@02)]
(assert (not
  (and
    (<
      i@86@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
    (<= 0 i@86@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@86@02 Int)) (!
  (implies
    (and
      (<
        i@86@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
      (<= 0 i@86@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          i@86@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@86@02)
          (Seq_length __flatten_100__106@85@02))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@86@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@86@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18421
;  :arith-add-rows          242
;  :arith-assert-diseq      779
;  :arith-assert-lower      1835
;  :arith-assert-upper      1230
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1020
;  :arith-fixed-eqs         393
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4596
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7617
;  :mk-clause               4842
;  :num-allocs              11168803
;  :num-checks              399
;  :propagations            2803
;  :quant-instantiations    966
;  :rlimit-count            331507)
(assert (forall ((i@86@02 Int)) (!
  (implies
    (and
      (<
        i@86@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
      (<= 0 i@86@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          i@86@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@86@02)
          (Seq_length __flatten_100__106@85@02))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@86@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@86@02))
  :qid |prog.l<no position>|)))
(declare-const $t@87@02 $Snap)
(assert (= $t@87@02 ($Snap.combine ($Snap.first $t@87@02) ($Snap.second $t@87@02))))
(assert (=
  ($Snap.second $t@87@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@87@02))
    ($Snap.second ($Snap.second $t@87@02)))))
(assert (=
  ($Snap.second ($Snap.second $t@87@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@87@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@87@02))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@87@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@88@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 67 | 0 <= i@88@02 | live]
; [else-branch: 67 | !(0 <= i@88@02) | live]
(push) ; 10
; [then-branch: 67 | 0 <= i@88@02]
(assert (<= 0 i@88@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 67 | !(0 <= i@88@02)]
(assert (not (<= 0 i@88@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 68 | i@88@02 < |First:(Second:($t@87@02))| && 0 <= i@88@02 | live]
; [else-branch: 68 | !(i@88@02 < |First:(Second:($t@87@02))| && 0 <= i@88@02) | live]
(push) ; 10
; [then-branch: 68 | i@88@02 < |First:(Second:($t@87@02))| && 0 <= i@88@02]
(assert (and
  (<
    i@88@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))
  (<= 0 i@88@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@88@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18458
;  :arith-add-rows          242
;  :arith-assert-diseq      779
;  :arith-assert-lower      1840
;  :arith-assert-upper      1233
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1022
;  :arith-fixed-eqs         393
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4596
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7639
;  :mk-clause               4842
;  :num-allocs              11168803
;  :num-checks              400
;  :propagations            2803
;  :quant-instantiations    973
;  :rlimit-count            332973)
; [eval] -1
(push) ; 11
; [then-branch: 69 | First:(Second:($t@87@02))[i@88@02] == -1 | live]
; [else-branch: 69 | First:(Second:($t@87@02))[i@88@02] != -1 | live]
(push) ; 12
; [then-branch: 69 | First:(Second:($t@87@02))[i@88@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
    i@88@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 69 | First:(Second:($t@87@02))[i@88@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      i@88@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@88@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18458
;  :arith-add-rows          242
;  :arith-assert-diseq      779
;  :arith-assert-lower      1840
;  :arith-assert-upper      1233
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1022
;  :arith-fixed-eqs         393
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4596
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7640
;  :mk-clause               4842
;  :num-allocs              11168803
;  :num-checks              401
;  :propagations            2803
;  :quant-instantiations    973
;  :rlimit-count            333124)
(push) ; 13
; [then-branch: 70 | 0 <= First:(Second:($t@87@02))[i@88@02] | live]
; [else-branch: 70 | !(0 <= First:(Second:($t@87@02))[i@88@02]) | live]
(push) ; 14
; [then-branch: 70 | 0 <= First:(Second:($t@87@02))[i@88@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
    i@88@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@88@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18458
;  :arith-add-rows          242
;  :arith-assert-diseq      780
;  :arith-assert-lower      1843
;  :arith-assert-upper      1233
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1023
;  :arith-fixed-eqs         393
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4596
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7643
;  :mk-clause               4843
;  :num-allocs              11168803
;  :num-checks              402
;  :propagations            2803
;  :quant-instantiations    973
;  :rlimit-count            333227)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 70 | !(0 <= First:(Second:($t@87@02))[i@88@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      i@88@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 68 | !(i@88@02 < |First:(Second:($t@87@02))| && 0 <= i@88@02)]
(assert (not
  (and
    (<
      i@88@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))
    (<= 0 i@88@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@88@02 Int)) (!
  (implies
    (and
      (<
        i@88@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))
      (<= 0 i@88@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
          i@88@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
            i@88@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
            i@88@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
    i@88@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
  __flatten_100__106@85@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18479
;  :arith-add-rows          242
;  :arith-assert-diseq      780
;  :arith-assert-lower      1844
;  :arith-assert-upper      1234
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1025
;  :arith-fixed-eqs         394
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4597
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7667
;  :mk-clause               4859
;  :num-allocs              11168803
;  :num-checks              403
;  :propagations            2809
;  :quant-instantiations    975
;  :rlimit-count            334292)
(push) ; 8
; [then-branch: 71 | 0 <= First:(Second:($t@82@02))[0] | live]
; [else-branch: 71 | !(0 <= First:(Second:($t@82@02))[0]) | live]
(push) ; 9
; [then-branch: 71 | 0 <= First:(Second:($t@82@02))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18479
;  :arith-add-rows          242
;  :arith-assert-diseq      780
;  :arith-assert-lower      1844
;  :arith-assert-upper      1234
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1025
;  :arith-fixed-eqs         394
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4597
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7667
;  :mk-clause               4859
;  :num-allocs              11168803
;  :num-checks              404
;  :propagations            2809
;  :quant-instantiations    975
;  :rlimit-count            334392)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18479
;  :arith-add-rows          242
;  :arith-assert-diseq      780
;  :arith-assert-lower      1844
;  :arith-assert-upper      1234
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1025
;  :arith-fixed-eqs         394
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4597
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7667
;  :mk-clause               4859
;  :num-allocs              11168803
;  :num-checks              405
;  :propagations            2809
;  :quant-instantiations    975
;  :rlimit-count            334401)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18479
;  :arith-add-rows          242
;  :arith-assert-diseq      780
;  :arith-assert-lower      1844
;  :arith-assert-upper      1234
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1025
;  :arith-fixed-eqs         394
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4597
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7667
;  :mk-clause               4859
;  :num-allocs              11168803
;  :num-checks              406
;  :propagations            2809
;  :quant-instantiations    975
;  :rlimit-count            334489)
(push) ; 10
; [then-branch: 72 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 | live]
; [else-branch: 72 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] != 0 | live]
(push) ; 11
; [then-branch: 72 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@85@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 72 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@85@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18480
;  :arith-add-rows          243
;  :arith-assert-diseq      780
;  :arith-assert-lower      1844
;  :arith-assert-upper      1234
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1025
;  :arith-fixed-eqs         394
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4597
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7672
;  :mk-clause               4864
;  :num-allocs              11168803
;  :num-checks              407
;  :propagations            2809
;  :quant-instantiations    976
;  :rlimit-count            334704)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18480
;  :arith-add-rows          243
;  :arith-assert-diseq      780
;  :arith-assert-lower      1844
;  :arith-assert-upper      1234
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1025
;  :arith-fixed-eqs         394
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4597
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7672
;  :mk-clause               4864
;  :num-allocs              11168803
;  :num-checks              408
;  :propagations            2809
;  :quant-instantiations    976
;  :rlimit-count            334713)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18480
;  :arith-add-rows          243
;  :arith-assert-diseq      780
;  :arith-assert-lower      1844
;  :arith-assert-upper      1234
;  :arith-bound-prop        407
;  :arith-conflicts         30
;  :arith-eq-adapter        1025
;  :arith-fixed-eqs         394
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    371
;  :datatype-constructor-ax 3872
;  :datatype-occurs-check   931
;  :datatype-splits         2451
;  :decisions               4335
;  :del-clause              4597
;  :final-checks            304
;  :interface-eqs           68
;  :max-generation          2
;  :max-memory              4.97
;  :memory                  4.97
;  :mk-bool-var             7672
;  :mk-clause               4864
;  :num-allocs              11168803
;  :num-checks              409
;  :propagations            2809
;  :quant-instantiations    976
;  :rlimit-count            334801)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 71 | !(0 <= First:(Second:($t@82@02))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19959
;  :arith-add-rows          522
;  :arith-assert-diseq      877
;  :arith-assert-lower      2062
;  :arith-assert-upper      1422
;  :arith-bound-prop        456
;  :arith-conflicts         34
;  :arith-eq-adapter        1153
;  :arith-fixed-eqs         456
;  :arith-offset-eqs        11
;  :arith-pivots            572
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 4138
;  :datatype-occurs-check   1010
;  :datatype-splits         2675
;  :decisions               4649
;  :del-clause              5343
;  :final-checks            323
;  :interface-eqs           79
;  :max-generation          11
;  :max-memory              5.50
;  :memory                  5.50
;  :minimized-lits          79
;  :mk-bool-var             8736
;  :mk-clause               5605
;  :num-allocs              12477311
;  :num-checks              410
;  :propagations            3164
;  :quant-instantiations    1111
;  :rlimit-count            350547
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21064
;  :arith-add-rows          774
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5904
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9511
;  :mk-clause               6166
;  :num-allocs              13012134
;  :num-checks              411
;  :propagations            3479
;  :quant-instantiations    1244
;  :rlimit-count            364632
;  :time                    0.01)
; [then-branch: 73 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0] | live]
; [else-branch: 73 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0]) | live]
(push) ; 9
; [then-branch: 73 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21064
;  :arith-add-rows          774
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5904
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9513
;  :mk-clause               6167
;  :num-allocs              13012134
;  :num-checks              412
;  :propagations            3479
;  :quant-instantiations    1244
;  :rlimit-count            364800)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 73 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1) ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21070
;  :arith-add-rows          774
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5905
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9519
;  :mk-clause               6171
;  :num-allocs              13012134
;  :num-checks              413
;  :propagations            3479
;  :quant-instantiations    1244
;  :rlimit-count            365279)
(push) ; 8
; [then-branch: 74 | 0 <= First:(Second:($t@82@02))[1] | live]
; [else-branch: 74 | !(0 <= First:(Second:($t@82@02))[1]) | live]
(push) ; 9
; [then-branch: 74 | 0 <= First:(Second:($t@82@02))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21070
;  :arith-add-rows          774
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5905
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9519
;  :mk-clause               6171
;  :num-allocs              13012134
;  :num-checks              414
;  :propagations            3479
;  :quant-instantiations    1244
;  :rlimit-count            365379)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21070
;  :arith-add-rows          774
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5905
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9519
;  :mk-clause               6171
;  :num-allocs              13012134
;  :num-checks              415
;  :propagations            3479
;  :quant-instantiations    1244
;  :rlimit-count            365388)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21070
;  :arith-add-rows          774
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5905
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9519
;  :mk-clause               6171
;  :num-allocs              13012134
;  :num-checks              416
;  :propagations            3479
;  :quant-instantiations    1244
;  :rlimit-count            365476)
(push) ; 10
; [then-branch: 75 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 | live]
; [else-branch: 75 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] != 0 | live]
(push) ; 11
; [then-branch: 75 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@85@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 75 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@85@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21071
;  :arith-add-rows          776
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5905
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9524
;  :mk-clause               6176
;  :num-allocs              13012134
;  :num-checks              417
;  :propagations            3479
;  :quant-instantiations    1245
;  :rlimit-count            365690)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21071
;  :arith-add-rows          776
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5905
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9524
;  :mk-clause               6176
;  :num-allocs              13012134
;  :num-checks              418
;  :propagations            3479
;  :quant-instantiations    1245
;  :rlimit-count            365699)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21071
;  :arith-add-rows          776
;  :arith-assert-diseq      952
;  :arith-assert-lower      2234
;  :arith-assert-upper      1590
;  :arith-bound-prop        489
;  :arith-conflicts         35
;  :arith-eq-adapter        1258
;  :arith-fixed-eqs         539
;  :arith-offset-eqs        58
;  :arith-pivots            631
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   1078
;  :datatype-splits         2767
;  :decisions               4846
;  :del-clause              5905
;  :final-checks            339
;  :interface-eqs           90
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          82
;  :mk-bool-var             9524
;  :mk-clause               6176
;  :num-allocs              13012134
;  :num-checks              419
;  :propagations            3479
;  :quant-instantiations    1245
;  :rlimit-count            365787)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 74 | !(0 <= First:(Second:($t@82@02))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22967
;  :arith-add-rows          1155
;  :arith-assert-diseq      1074
;  :arith-assert-lower      2508
;  :arith-assert-upper      1847
;  :arith-bound-prop        528
;  :arith-conflicts         40
;  :arith-eq-adapter        1420
;  :arith-fixed-eqs         647
;  :arith-offset-eqs        134
;  :arith-pivots            734
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    428
;  :datatype-constructor-ax 4556
;  :datatype-occurs-check   1128
;  :datatype-splits         3011
;  :decisions               5230
;  :del-clause              6869
;  :final-checks            355
;  :interface-eqs           98
;  :max-generation          11
;  :max-memory              5.70
;  :memory                  5.70
;  :minimized-lits          133
;  :mk-bool-var             10882
;  :mk-clause               7135
;  :num-allocs              13012134
;  :num-checks              420
;  :propagations            3968
;  :quant-instantiations    1458
;  :rlimit-count            384112
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24134
;  :arith-add-rows          1388
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    436
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7474
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11702
;  :mk-clause               7740
;  :num-allocs              13290649
;  :num-checks              421
;  :propagations            4299
;  :quant-instantiations    1605
;  :rlimit-count            396710
;  :time                    0.01)
; [then-branch: 76 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1] | live]
; [else-branch: 76 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1]) | live]
(push) ; 9
; [then-branch: 76 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24134
;  :arith-add-rows          1388
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    436
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7474
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11704
;  :mk-clause               7741
;  :num-allocs              13290649
;  :num-checks              422
;  :propagations            4299
;  :quant-instantiations    1605
;  :rlimit-count            396878)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 76 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1) ==> diz.Main_process_state[2] == -1
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24140
;  :arith-add-rows          1388
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    437
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7475
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11710
;  :mk-clause               7745
;  :num-allocs              13290649
;  :num-checks              423
;  :propagations            4299
;  :quant-instantiations    1605
;  :rlimit-count            397367)
(push) ; 8
; [then-branch: 77 | 0 <= First:(Second:($t@82@02))[2] | live]
; [else-branch: 77 | !(0 <= First:(Second:($t@82@02))[2]) | live]
(push) ; 9
; [then-branch: 77 | 0 <= First:(Second:($t@82@02))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24140
;  :arith-add-rows          1388
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    437
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7475
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11710
;  :mk-clause               7745
;  :num-allocs              13290649
;  :num-checks              424
;  :propagations            4299
;  :quant-instantiations    1605
;  :rlimit-count            397467)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24140
;  :arith-add-rows          1388
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    437
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7475
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11710
;  :mk-clause               7745
;  :num-allocs              13290649
;  :num-checks              425
;  :propagations            4299
;  :quant-instantiations    1605
;  :rlimit-count            397476)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24140
;  :arith-add-rows          1388
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    437
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7475
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11710
;  :mk-clause               7745
;  :num-allocs              13290649
;  :num-checks              426
;  :propagations            4299
;  :quant-instantiations    1605
;  :rlimit-count            397564)
(push) ; 10
; [then-branch: 78 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 | live]
; [else-branch: 78 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] != 0 | live]
(push) ; 11
; [then-branch: 78 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@85@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 78 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@85@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 12
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24141
;  :arith-add-rows          1390
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    437
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7475
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11715
;  :mk-clause               7750
;  :num-allocs              13290649
;  :num-checks              427
;  :propagations            4299
;  :quant-instantiations    1606
;  :rlimit-count            397738)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24141
;  :arith-add-rows          1390
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    437
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7475
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11715
;  :mk-clause               7750
;  :num-allocs              13290649
;  :num-checks              428
;  :propagations            4299
;  :quant-instantiations    1606
;  :rlimit-count            397747)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24141
;  :arith-add-rows          1390
;  :arith-assert-diseq      1149
;  :arith-assert-lower      2675
;  :arith-assert-upper      2023
;  :arith-bound-prop        561
;  :arith-conflicts         41
;  :arith-eq-adapter        1523
;  :arith-fixed-eqs         733
;  :arith-offset-eqs        188
;  :arith-pivots            784
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    437
;  :datatype-constructor-ax 4689
;  :datatype-occurs-check   1184
;  :datatype-splits         3103
;  :decisions               5441
;  :del-clause              7475
;  :final-checks            369
;  :interface-eqs           107
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.80
;  :minimized-lits          136
;  :mk-bool-var             11715
;  :mk-clause               7750
;  :num-allocs              13290649
;  :num-checks              429
;  :propagations            4299
;  :quant-instantiations    1606
;  :rlimit-count            397835)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 77 | !(0 <= First:(Second:($t@82@02))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26506
;  :arith-add-rows          1908
;  :arith-assert-diseq      1269
;  :arith-assert-lower      2884
;  :arith-assert-upper      2245
;  :arith-bound-prop        616
;  :arith-conflicts         47
;  :arith-eq-adapter        1661
;  :arith-fixed-eqs         835
;  :arith-offset-eqs        270
;  :arith-pivots            854
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    492
;  :datatype-constructor-ax 5114
;  :datatype-occurs-check   1363
;  :datatype-splits         3463
;  :decisions               5926
;  :del-clause              8379
;  :final-checks            402
;  :interface-eqs           127
;  :max-generation          11
;  :max-memory              5.80
;  :memory                  5.70
;  :minimized-lits          234
;  :mk-bool-var             13134
;  :mk-clause               8649
;  :num-allocs              13570555
;  :num-checks              430
;  :propagations            4773
;  :quant-instantiations    1788
;  :rlimit-count            419710
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27746
;  :arith-add-rows          2175
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    505
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8933
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13900
;  :mk-clause               9203
;  :num-allocs              13858883
;  :num-checks              431
;  :propagations            5088
;  :quant-instantiations    1921
;  :rlimit-count            433842
;  :time                    0.01)
; [then-branch: 79 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2] | live]
; [else-branch: 79 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2]) | live]
(push) ; 9
; [then-branch: 79 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
; [eval] diz.Main_process_state[2] == -1
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27746
;  :arith-add-rows          2175
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    505
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8933
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13902
;  :mk-clause               9204
;  :num-allocs              13858883
;  :num-checks              432
;  :propagations            5088
;  :quant-instantiations    1921
;  :rlimit-count            434010)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 79 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      2)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27752
;  :arith-add-rows          2175
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8934
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13908
;  :mk-clause               9208
;  :num-allocs              13858883
;  :num-checks              433
;  :propagations            5088
;  :quant-instantiations    1921
;  :rlimit-count            434509)
(push) ; 8
; [then-branch: 80 | 0 <= First:(Second:($t@82@02))[0] | live]
; [else-branch: 80 | !(0 <= First:(Second:($t@82@02))[0]) | live]
(push) ; 9
; [then-branch: 80 | 0 <= First:(Second:($t@82@02))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27752
;  :arith-add-rows          2175
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8934
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13908
;  :mk-clause               9208
;  :num-allocs              13858883
;  :num-checks              434
;  :propagations            5088
;  :quant-instantiations    1921
;  :rlimit-count            434609)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27752
;  :arith-add-rows          2175
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8934
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13908
;  :mk-clause               9208
;  :num-allocs              13858883
;  :num-checks              435
;  :propagations            5088
;  :quant-instantiations    1921
;  :rlimit-count            434618)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27752
;  :arith-add-rows          2175
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8934
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13908
;  :mk-clause               9208
;  :num-allocs              13858883
;  :num-checks              436
;  :propagations            5088
;  :quant-instantiations    1921
;  :rlimit-count            434706)
(push) ; 10
; [then-branch: 81 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 | live]
; [else-branch: 81 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] != 0 | live]
(push) ; 11
; [then-branch: 81 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@85@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 81 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@85@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27753
;  :arith-add-rows          2177
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8934
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13912
;  :mk-clause               9213
;  :num-allocs              13858883
;  :num-checks              437
;  :propagations            5088
;  :quant-instantiations    1922
;  :rlimit-count            434860)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27753
;  :arith-add-rows          2177
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8934
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13912
;  :mk-clause               9213
;  :num-allocs              13858883
;  :num-checks              438
;  :propagations            5088
;  :quant-instantiations    1922
;  :rlimit-count            434869)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27753
;  :arith-add-rows          2177
;  :arith-assert-diseq      1340
;  :arith-assert-lower      3023
;  :arith-assert-upper      2404
;  :arith-bound-prop        650
;  :arith-conflicts         48
;  :arith-eq-adapter        1752
;  :arith-fixed-eqs         917
;  :arith-offset-eqs        319
;  :arith-pivots            908
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    506
;  :datatype-constructor-ax 5275
;  :datatype-occurs-check   1448
;  :datatype-splits         3561
;  :decisions               6163
;  :del-clause              8934
;  :final-checks            420
;  :interface-eqs           140
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          237
;  :mk-bool-var             13912
;  :mk-clause               9213
;  :num-allocs              13858883
;  :num-checks              439
;  :propagations            5088
;  :quant-instantiations    1922
;  :rlimit-count            434957)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 80 | !(0 <= First:(Second:($t@82@02))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28978
;  :arith-add-rows          2393
;  :arith-assert-diseq      1414
;  :arith-assert-lower      3159
;  :arith-assert-upper      2555
;  :arith-bound-prop        684
;  :arith-conflicts         49
;  :arith-eq-adapter        1840
;  :arith-fixed-eqs         999
;  :arith-offset-eqs        373
;  :arith-pivots            956
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 5436
;  :datatype-occurs-check   1509
;  :datatype-splits         3659
;  :decisions               6391
;  :del-clause              9442
;  :final-checks            434
;  :interface-eqs           149
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          240
;  :mk-bool-var             14629
;  :mk-clause               9716
;  :num-allocs              13858883
;  :num-checks              440
;  :propagations            5381
;  :quant-instantiations    2046
;  :rlimit-count            447640
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31315
;  :arith-add-rows          2921
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10408
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16027
;  :mk-clause               10682
;  :num-allocs              13858883
;  :num-checks              441
;  :propagations            5841
;  :quant-instantiations    2255
;  :rlimit-count            473036
;  :time                    0.01)
; [then-branch: 82 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0]) | live]
; [else-branch: 82 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0] | live]
(push) ; 9
; [then-branch: 82 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31316
;  :arith-add-rows          2923
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10408
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16031
;  :mk-clause               10687
;  :num-allocs              13858883
;  :num-checks              442
;  :propagations            5843
;  :quant-instantiations    2256
;  :rlimit-count            473220)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31316
;  :arith-add-rows          2923
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    567
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10408
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16031
;  :mk-clause               10687
;  :num-allocs              13858883
;  :num-checks              443
;  :propagations            5843
;  :quant-instantiations    2256
;  :rlimit-count            473235)
(pop) ; 9
(push) ; 9
; [else-branch: 82 | __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_100__106@85@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              0))
          0)
        (=
          (Seq_index
            __flatten_100__106@85@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31322
;  :arith-add-rows          2923
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10413
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16035
;  :mk-clause               10690
;  :num-allocs              13858883
;  :num-checks              444
;  :propagations            5843
;  :quant-instantiations    2256
;  :rlimit-count            473722)
(push) ; 8
; [then-branch: 83 | 0 <= First:(Second:($t@82@02))[1] | live]
; [else-branch: 83 | !(0 <= First:(Second:($t@82@02))[1]) | live]
(push) ; 9
; [then-branch: 83 | 0 <= First:(Second:($t@82@02))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31322
;  :arith-add-rows          2923
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10413
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16035
;  :mk-clause               10690
;  :num-allocs              13858883
;  :num-checks              445
;  :propagations            5843
;  :quant-instantiations    2256
;  :rlimit-count            473822)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31322
;  :arith-add-rows          2923
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10413
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16035
;  :mk-clause               10690
;  :num-allocs              13858883
;  :num-checks              446
;  :propagations            5843
;  :quant-instantiations    2256
;  :rlimit-count            473831)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31322
;  :arith-add-rows          2923
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10413
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16035
;  :mk-clause               10690
;  :num-allocs              13858883
;  :num-checks              447
;  :propagations            5843
;  :quant-instantiations    2256
;  :rlimit-count            473919)
(push) ; 10
; [then-branch: 84 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 | live]
; [else-branch: 84 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] != 0 | live]
(push) ; 11
; [then-branch: 84 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@85@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 84 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@85@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31323
;  :arith-add-rows          2925
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10413
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16039
;  :mk-clause               10695
;  :num-allocs              13858883
;  :num-checks              448
;  :propagations            5843
;  :quant-instantiations    2257
;  :rlimit-count            474077)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31323
;  :arith-add-rows          2925
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10413
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16039
;  :mk-clause               10695
;  :num-allocs              13858883
;  :num-checks              449
;  :propagations            5843
;  :quant-instantiations    2257
;  :rlimit-count            474086)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31323
;  :arith-add-rows          2925
;  :arith-assert-diseq      1505
;  :arith-assert-lower      3367
;  :arith-assert-upper      2771
;  :arith-bound-prop        746
;  :arith-conflicts         54
;  :arith-eq-adapter        1958
;  :arith-fixed-eqs         1103
;  :arith-offset-eqs        427
;  :arith-pivots            1066
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    568
;  :datatype-constructor-ax 5839
;  :datatype-occurs-check   1628
;  :datatype-splits         3997
;  :decisions               6871
;  :del-clause              10413
;  :final-checks            456
;  :interface-eqs           161
;  :max-generation          11
;  :max-memory              5.81
;  :memory                  5.81
;  :minimized-lits          323
;  :mk-bool-var             16039
;  :mk-clause               10695
;  :num-allocs              13858883
;  :num-checks              450
;  :propagations            5843
;  :quant-instantiations    2257
;  :rlimit-count            474174)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 83 | !(0 <= First:(Second:($t@82@02))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               32627
;  :arith-add-rows          3195
;  :arith-assert-diseq      1579
;  :arith-assert-lower      3525
;  :arith-assert-upper      2942
;  :arith-bound-prop        780
;  :arith-conflicts         55
;  :arith-eq-adapter        2056
;  :arith-fixed-eqs         1195
;  :arith-offset-eqs        486
;  :arith-pivots            1127
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    581
;  :datatype-constructor-ax 6000
;  :datatype-occurs-check   1689
;  :datatype-splits         4095
;  :decisions               7109
;  :del-clause              11003
;  :final-checks            470
;  :interface-eqs           170
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          326
;  :mk-bool-var             16855
;  :mk-clause               11280
;  :num-allocs              14466475
;  :num-checks              451
;  :propagations            6178
;  :quant-instantiations    2401
;  :rlimit-count            488162
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34874
;  :arith-add-rows          3746
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12013
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18297
;  :mk-clause               12290
;  :num-allocs              14466475
;  :num-checks              452
;  :propagations            6684
;  :quant-instantiations    2641
;  :rlimit-count            510721
;  :time                    0.01)
; [then-branch: 85 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1]) | live]
; [else-branch: 85 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1] | live]
(push) ; 9
; [then-branch: 85 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34875
;  :arith-add-rows          3748
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12013
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18301
;  :mk-clause               12295
;  :num-allocs              14466475
;  :num-checks              453
;  :propagations            6686
;  :quant-instantiations    2642
;  :rlimit-count            510909)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34875
;  :arith-add-rows          3748
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12013
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18301
;  :mk-clause               12295
;  :num-allocs              14466475
;  :num-checks              454
;  :propagations            6686
;  :quant-instantiations    2642
;  :rlimit-count            510924)
(pop) ; 9
(push) ; 9
; [else-branch: 85 | __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_100__106@85@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              1))
          0)
        (=
          (Seq_index
            __flatten_100__106@85@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              1))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@02))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)) ==> diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] !(0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34884
;  :arith-add-rows          3748
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12018
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18304
;  :mk-clause               12298
;  :num-allocs              14466475
;  :num-checks              455
;  :propagations            6686
;  :quant-instantiations    2642
;  :rlimit-count            511336)
(push) ; 8
; [then-branch: 86 | 0 <= First:(Second:($t@82@02))[2] | live]
; [else-branch: 86 | !(0 <= First:(Second:($t@82@02))[2]) | live]
(push) ; 9
; [then-branch: 86 | 0 <= First:(Second:($t@82@02))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34884
;  :arith-add-rows          3748
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12018
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18304
;  :mk-clause               12298
;  :num-allocs              14466475
;  :num-checks              456
;  :propagations            6686
;  :quant-instantiations    2642
;  :rlimit-count            511436)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34884
;  :arith-add-rows          3748
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12018
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18304
;  :mk-clause               12298
;  :num-allocs              14466475
;  :num-checks              457
;  :propagations            6686
;  :quant-instantiations    2642
;  :rlimit-count            511445)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34884
;  :arith-add-rows          3748
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12018
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18304
;  :mk-clause               12298
;  :num-allocs              14466475
;  :num-checks              458
;  :propagations            6686
;  :quant-instantiations    2642
;  :rlimit-count            511533)
(push) ; 10
; [then-branch: 87 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 | live]
; [else-branch: 87 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] != 0 | live]
(push) ; 11
; [then-branch: 87 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@85@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 87 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@85@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 12
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34885
;  :arith-add-rows          3750
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12018
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18308
;  :mk-clause               12303
;  :num-allocs              14466475
;  :num-checks              459
;  :propagations            6686
;  :quant-instantiations    2643
;  :rlimit-count            511691)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34885
;  :arith-add-rows          3750
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12018
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18308
;  :mk-clause               12303
;  :num-allocs              14466475
;  :num-checks              460
;  :propagations            6686
;  :quant-instantiations    2643
;  :rlimit-count            511700)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  (Seq_length __flatten_100__106@85@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34885
;  :arith-add-rows          3750
;  :arith-assert-diseq      1690
;  :arith-assert-lower      3765
;  :arith-assert-upper      3195
;  :arith-bound-prop        834
;  :arith-conflicts         59
;  :arith-eq-adapter        2197
;  :arith-fixed-eqs         1337
;  :arith-offset-eqs        598
;  :arith-pivots            1206
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    616
;  :datatype-constructor-ax 6325
;  :datatype-occurs-check   1756
;  :datatype-splits         4357
;  :decisions               7540
;  :del-clause              12018
;  :final-checks            487
;  :interface-eqs           179
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          399
;  :mk-bool-var             18308
;  :mk-clause               12303
;  :num-allocs              14466475
;  :num-checks              461
;  :propagations            6686
;  :quant-instantiations    2643
;  :rlimit-count            511788)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 86 | !(0 <= First:(Second:($t@82@02))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2)))))
(check-sat)
; unknown
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               36939
;  :arith-add-rows          4253
;  :arith-assert-diseq      1804
;  :arith-assert-lower      3986
;  :arith-assert-upper      3448
;  :arith-bound-prop        881
;  :arith-conflicts         63
;  :arith-eq-adapter        2329
;  :arith-fixed-eqs         1438
;  :arith-offset-eqs        685
;  :arith-pivots            1287
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    651
;  :datatype-constructor-ax 6642
;  :datatype-occurs-check   1823
;  :datatype-splits         4613
;  :decisions               7974
;  :del-clause              13004
;  :final-checks            503
;  :interface-eqs           187
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          446
;  :mk-bool-var             19660
;  :mk-clause               13284
;  :num-allocs              14466475
;  :num-checks              462
;  :propagations            7198
;  :quant-instantiations    2871
;  :rlimit-count            532991
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38664
;  :arith-add-rows          4724
;  :arith-assert-diseq      1915
;  :arith-assert-lower      4174
;  :arith-assert-upper      3657
;  :arith-bound-prop        927
;  :arith-conflicts         68
;  :arith-eq-adapter        2447
;  :arith-fixed-eqs         1519
;  :arith-offset-eqs        736
;  :arith-pivots            1365
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    684
;  :datatype-constructor-ax 6924
;  :datatype-occurs-check   1882
;  :datatype-splits         4830
;  :decisions               8346
;  :del-clause              13804
;  :final-checks            518
;  :interface-eqs           195
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          524
;  :mk-bool-var             20828
;  :mk-clause               14084
;  :num-allocs              14466475
;  :num-checks              463
;  :propagations            7637
;  :quant-instantiations    3046
;  :rlimit-count            551858
;  :time                    0.01)
; [then-branch: 88 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2]) | live]
; [else-branch: 88 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2] | live]
(push) ; 9
; [then-branch: 88 | !(__flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@85@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2)))))
; [eval] diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38665
;  :arith-add-rows          4726
;  :arith-assert-diseq      1915
;  :arith-assert-lower      4174
;  :arith-assert-upper      3657
;  :arith-bound-prop        927
;  :arith-conflicts         68
;  :arith-eq-adapter        2447
;  :arith-fixed-eqs         1519
;  :arith-offset-eqs        736
;  :arith-pivots            1365
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    684
;  :datatype-constructor-ax 6924
;  :datatype-occurs-check   1882
;  :datatype-splits         4830
;  :decisions               8346
;  :del-clause              13804
;  :final-checks            518
;  :interface-eqs           195
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          524
;  :mk-bool-var             20832
;  :mk-clause               14089
;  :num-allocs              14466475
;  :num-checks              464
;  :propagations            7639
;  :quant-instantiations    3047
;  :rlimit-count            552142)
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               38665
;  :arith-add-rows          4726
;  :arith-assert-diseq      1915
;  :arith-assert-lower      4174
;  :arith-assert-upper      3657
;  :arith-bound-prop        927
;  :arith-conflicts         68
;  :arith-eq-adapter        2447
;  :arith-fixed-eqs         1519
;  :arith-offset-eqs        736
;  :arith-pivots            1365
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    684
;  :datatype-constructor-ax 6924
;  :datatype-occurs-check   1882
;  :datatype-splits         4830
;  :decisions               8346
;  :del-clause              13804
;  :final-checks            518
;  :interface-eqs           195
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.82
;  :minimized-lits          524
;  :mk-bool-var             20832
;  :mk-clause               14089
;  :num-allocs              14466475
;  :num-checks              465
;  :propagations            7639
;  :quant-instantiations    3047
;  :rlimit-count            552157)
(pop) ; 9
(push) ; 9
; [else-branch: 88 | __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@85@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      0)
    (=
      (Seq_index
        __flatten_100__106@85@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_100__106@85@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              2))
          0)
        (=
          (Seq_index
            __flatten_100__106@85@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              2))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_all_events_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@89@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 89 | 0 <= i@89@02 | live]
; [else-branch: 89 | !(0 <= i@89@02) | live]
(push) ; 10
; [then-branch: 89 | 0 <= i@89@02]
(assert (<= 0 i@89@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 89 | !(0 <= i@89@02)]
(assert (not (<= 0 i@89@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 90 | i@89@02 < |First:(Second:($t@87@02))| && 0 <= i@89@02 | live]
; [else-branch: 90 | !(i@89@02 < |First:(Second:($t@87@02))| && 0 <= i@89@02) | live]
(push) ; 10
; [then-branch: 90 | i@89@02 < |First:(Second:($t@87@02))| && 0 <= i@89@02]
(assert (and
  (<
    i@89@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))
  (<= 0 i@89@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@89@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42152
;  :arith-add-rows          5524
;  :arith-assert-diseq      2066
;  :arith-assert-lower      4540
;  :arith-assert-upper      4026
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2647
;  :arith-fixed-eqs         1773
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    737
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15255
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             22985
;  :mk-clause               15694
;  :num-allocs              14793601
;  :num-checks              467
;  :propagations            8409
;  :quant-instantiations    3427
;  :rlimit-count            584358)
; [eval] -1
(push) ; 11
; [then-branch: 91 | First:(Second:($t@87@02))[i@89@02] == -1 | live]
; [else-branch: 91 | First:(Second:($t@87@02))[i@89@02] != -1 | live]
(push) ; 12
; [then-branch: 91 | First:(Second:($t@87@02))[i@89@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
    i@89@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 91 | First:(Second:($t@87@02))[i@89@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      i@89@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@89@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42152
;  :arith-add-rows          5524
;  :arith-assert-diseq      2067
;  :arith-assert-lower      4543
;  :arith-assert-upper      4027
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2648
;  :arith-fixed-eqs         1773
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    737
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15255
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             22991
;  :mk-clause               15698
;  :num-allocs              14793601
;  :num-checks              468
;  :propagations            8411
;  :quant-instantiations    3428
;  :rlimit-count            584566)
(push) ; 13
; [then-branch: 92 | 0 <= First:(Second:($t@87@02))[i@89@02] | live]
; [else-branch: 92 | !(0 <= First:(Second:($t@87@02))[i@89@02]) | live]
(push) ; 14
; [then-branch: 92 | 0 <= First:(Second:($t@87@02))[i@89@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
    i@89@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@89@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42152
;  :arith-add-rows          5524
;  :arith-assert-diseq      2067
;  :arith-assert-lower      4543
;  :arith-assert-upper      4027
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2648
;  :arith-fixed-eqs         1773
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    737
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15255
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             22991
;  :mk-clause               15698
;  :num-allocs              14793601
;  :num-checks              469
;  :propagations            8411
;  :quant-instantiations    3428
;  :rlimit-count            584660)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 92 | !(0 <= First:(Second:($t@87@02))[i@89@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
      i@89@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 90 | !(i@89@02 < |First:(Second:($t@87@02))| && 0 <= i@89@02)]
(assert (not
  (and
    (<
      i@89@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))
    (<= 0 i@89@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@89@02 Int)) (!
  (implies
    (and
      (<
        i@89@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))
      (<= 0 i@89@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
          i@89@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
            i@89@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
            i@89@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
    i@89@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42152
;  :arith-add-rows          5524
;  :arith-assert-diseq      2068
;  :arith-assert-lower      4544
;  :arith-assert-upper      4028
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2649
;  :arith-fixed-eqs         1773
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    737
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15271
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             22999
;  :mk-clause               15710
;  :num-allocs              14793601
;  :num-checks              470
;  :propagations            8413
;  :quant-instantiations    3429
;  :rlimit-count            585082)
(assert (forall ((i@89@02 Int)) (!
  (implies
    (and
      (<
        i@89@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))
      (<= 0 i@89@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
          i@89@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
            i@89@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
            i@89@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))
    i@89@02))
  :qid |prog.l<no position>|)))
(declare-const $t@90@02 $Snap)
(assert (= $t@90@02 ($Snap.combine ($Snap.first $t@90@02) ($Snap.second $t@90@02))))
(assert (=
  ($Snap.second $t@90@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@90@02))
    ($Snap.second ($Snap.second $t@90@02)))))
(assert (=
  ($Snap.second ($Snap.second $t@90@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@90@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@90@02))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@90@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@91@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 93 | 0 <= i@91@02 | live]
; [else-branch: 93 | !(0 <= i@91@02) | live]
(push) ; 10
; [then-branch: 93 | 0 <= i@91@02]
(assert (<= 0 i@91@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 93 | !(0 <= i@91@02)]
(assert (not (<= 0 i@91@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 94 | i@91@02 < |First:(Second:($t@90@02))| && 0 <= i@91@02 | live]
; [else-branch: 94 | !(i@91@02 < |First:(Second:($t@90@02))| && 0 <= i@91@02) | live]
(push) ; 10
; [then-branch: 94 | i@91@02 < |First:(Second:($t@90@02))| && 0 <= i@91@02]
(assert (and
  (<
    i@91@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))))
  (<= 0 i@91@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@91@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42189
;  :arith-add-rows          5524
;  :arith-assert-diseq      2068
;  :arith-assert-lower      4549
;  :arith-assert-upper      4031
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2651
;  :arith-fixed-eqs         1773
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    743
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15271
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             23021
;  :mk-clause               15710
;  :num-allocs              14793601
;  :num-checks              471
;  :propagations            8413
;  :quant-instantiations    3433
;  :rlimit-count            586470)
; [eval] -1
(push) ; 11
; [then-branch: 95 | First:(Second:($t@90@02))[i@91@02] == -1 | live]
; [else-branch: 95 | First:(Second:($t@90@02))[i@91@02] != -1 | live]
(push) ; 12
; [then-branch: 95 | First:(Second:($t@90@02))[i@91@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
    i@91@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 95 | First:(Second:($t@90@02))[i@91@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
      i@91@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@91@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42189
;  :arith-add-rows          5524
;  :arith-assert-diseq      2068
;  :arith-assert-lower      4549
;  :arith-assert-upper      4031
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2651
;  :arith-fixed-eqs         1773
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    743
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15271
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             23022
;  :mk-clause               15710
;  :num-allocs              14793601
;  :num-checks              472
;  :propagations            8413
;  :quant-instantiations    3433
;  :rlimit-count            586621)
(push) ; 13
; [then-branch: 96 | 0 <= First:(Second:($t@90@02))[i@91@02] | live]
; [else-branch: 96 | !(0 <= First:(Second:($t@90@02))[i@91@02]) | live]
(push) ; 14
; [then-branch: 96 | 0 <= First:(Second:($t@90@02))[i@91@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
    i@91@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@91@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42189
;  :arith-add-rows          5524
;  :arith-assert-diseq      2069
;  :arith-assert-lower      4552
;  :arith-assert-upper      4031
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2652
;  :arith-fixed-eqs         1773
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    743
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15271
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             23025
;  :mk-clause               15711
;  :num-allocs              14793601
;  :num-checks              473
;  :propagations            8413
;  :quant-instantiations    3433
;  :rlimit-count            586724)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 96 | !(0 <= First:(Second:($t@90@02))[i@91@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
      i@91@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 94 | !(i@91@02 < |First:(Second:($t@90@02))| && 0 <= i@91@02)]
(assert (not
  (and
    (<
      i@91@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))))
    (<= 0 i@91@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@91@02 Int)) (!
  (implies
    (and
      (<
        i@91@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))))
      (<= 0 i@91@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
          i@91@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
            i@91@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
            i@91@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
    i@91@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@87@02)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42207
;  :arith-add-rows          5524
;  :arith-assert-diseq      2069
;  :arith-assert-lower      4553
;  :arith-assert-upper      4032
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2653
;  :arith-fixed-eqs         1774
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    745
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15272
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             23045
;  :mk-clause               15721
;  :num-allocs              14793601
;  :num-checks              474
;  :propagations            8417
;  :quant-instantiations    3435
;  :rlimit-count            587741)
(push) ; 8
; [then-branch: 97 | First:(Second:(Second:(Second:($t@87@02))))[0] == 0 | live]
; [else-branch: 97 | First:(Second:(Second:(Second:($t@87@02))))[0] != 0 | live]
(push) ; 9
; [then-branch: 97 | First:(Second:(Second:(Second:($t@87@02))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 97 | First:(Second:(Second:(Second:($t@87@02))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               42208
;  :arith-add-rows          5525
;  :arith-assert-diseq      2069
;  :arith-assert-lower      4553
;  :arith-assert-upper      4032
;  :arith-bound-prop        990
;  :arith-conflicts         75
;  :arith-eq-adapter        2653
;  :arith-fixed-eqs         1774
;  :arith-offset-eqs        977
;  :arith-pivots            1472
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    745
;  :datatype-constructor-ax 7386
;  :datatype-occurs-check   2009
;  :datatype-splits         5229
;  :decisions               8953
;  :del-clause              15272
;  :final-checks            546
;  :interface-eqs           209
;  :max-generation          11
;  :max-memory              5.91
;  :memory                  5.91
;  :minimized-lits          605
;  :mk-bool-var             23050
;  :mk-clause               15727
;  :num-allocs              14793601
;  :num-checks              475
;  :propagations            8417
;  :quant-instantiations    3436
;  :rlimit-count            587954)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               43493
;  :arith-add-rows          6301
;  :arith-assert-diseq      2182
;  :arith-assert-lower      4752
;  :arith-assert-upper      4235
;  :arith-bound-prop        1046
;  :arith-conflicts         79
;  :arith-eq-adapter        2768
;  :arith-fixed-eqs         1871
;  :arith-offset-eqs        1066
;  :arith-pivots            1560
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    754
;  :datatype-constructor-ax 7484
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9185
;  :del-clause              16064
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          634
;  :mk-bool-var             23958
;  :mk-clause               16513
;  :num-allocs              15127125
;  :num-checks              476
;  :propagations            8961
;  :quant-instantiations    3652
;  :rlimit-count            619697
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44551
;  :arith-add-rows          7207
;  :arith-assert-diseq      2341
;  :arith-assert-lower      5030
;  :arith-assert-upper      4485
;  :arith-bound-prop        1117
;  :arith-conflicts         85
;  :arith-eq-adapter        2948
;  :arith-fixed-eqs         1983
;  :arith-offset-eqs        1163
;  :arith-pivots            1675
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    754
;  :datatype-constructor-ax 7492
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9340
;  :del-clause              16989
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          676
;  :mk-bool-var             24939
;  :mk-clause               17438
;  :num-allocs              15127125
;  :num-checks              477
;  :propagations            9681
;  :quant-instantiations    3922
;  :rlimit-count            653933
;  :time                    0.01)
; [then-branch: 98 | First:(Second:(Second:(Second:($t@87@02))))[0] == 0 || First:(Second:(Second:(Second:($t@87@02))))[0] == -1 | live]
; [else-branch: 98 | !(First:(Second:(Second:(Second:($t@87@02))))[0] == 0 || First:(Second:(Second:(Second:($t@87@02))))[0] == -1) | live]
(push) ; 9
; [then-branch: 98 | First:(Second:(Second:(Second:($t@87@02))))[0] == 0 || First:(Second:(Second:(Second:($t@87@02))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44551
;  :arith-add-rows          7207
;  :arith-assert-diseq      2341
;  :arith-assert-lower      5030
;  :arith-assert-upper      4485
;  :arith-bound-prop        1117
;  :arith-conflicts         85
;  :arith-eq-adapter        2948
;  :arith-fixed-eqs         1983
;  :arith-offset-eqs        1163
;  :arith-pivots            1675
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    754
;  :datatype-constructor-ax 7492
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9340
;  :del-clause              16989
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          676
;  :mk-bool-var             24941
;  :mk-clause               17439
;  :num-allocs              15127125
;  :num-checks              478
;  :propagations            9681
;  :quant-instantiations    3922
;  :rlimit-count            654082)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 98 | !(First:(Second:(Second:(Second:($t@87@02))))[0] == 0 || First:(Second:(Second:(Second:($t@87@02))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44557
;  :arith-add-rows          7207
;  :arith-assert-diseq      2341
;  :arith-assert-lower      5030
;  :arith-assert-upper      4485
;  :arith-bound-prop        1117
;  :arith-conflicts         85
;  :arith-eq-adapter        2948
;  :arith-fixed-eqs         1983
;  :arith-offset-eqs        1163
;  :arith-pivots            1675
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 7492
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9340
;  :del-clause              16990
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          676
;  :mk-bool-var             24947
;  :mk-clause               17443
;  :num-allocs              15127125
;  :num-checks              479
;  :propagations            9681
;  :quant-instantiations    3922
;  :rlimit-count            654565)
(push) ; 8
; [then-branch: 99 | First:(Second:(Second:(Second:($t@87@02))))[1] == 0 | live]
; [else-branch: 99 | First:(Second:(Second:(Second:($t@87@02))))[1] != 0 | live]
(push) ; 9
; [then-branch: 99 | First:(Second:(Second:(Second:($t@87@02))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 99 | First:(Second:(Second:(Second:($t@87@02))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               44558
;  :arith-add-rows          7208
;  :arith-assert-diseq      2341
;  :arith-assert-lower      5030
;  :arith-assert-upper      4485
;  :arith-bound-prop        1117
;  :arith-conflicts         85
;  :arith-eq-adapter        2948
;  :arith-fixed-eqs         1983
;  :arith-offset-eqs        1163
;  :arith-pivots            1675
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 7492
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9340
;  :del-clause              16990
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          676
;  :mk-bool-var             24952
;  :mk-clause               17449
;  :num-allocs              15127125
;  :num-checks              480
;  :propagations            9681
;  :quant-instantiations    3923
;  :rlimit-count            654866)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               45755
;  :arith-add-rows          8226
;  :arith-assert-diseq      2497
;  :arith-assert-lower      5339
;  :arith-assert-upper      4738
;  :arith-bound-prop        1211
;  :arith-conflicts         88
;  :arith-eq-adapter        3125
;  :arith-fixed-eqs         2112
;  :arith-offset-eqs        1269
;  :arith-pivots            1797
;  :binary-propagations     22
;  :conflicts               617
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 7500
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9501
;  :del-clause              18093
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          716
;  :mk-bool-var             26041
;  :mk-clause               18546
;  :num-allocs              15127125
;  :num-checks              481
;  :propagations            10486
;  :quant-instantiations    4210
;  :rlimit-count            690786
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46965
;  :arith-add-rows          9147
;  :arith-assert-diseq      2652
;  :arith-assert-lower      5634
;  :arith-assert-upper      4982
;  :arith-bound-prop        1299
;  :arith-conflicts         92
;  :arith-eq-adapter        3305
;  :arith-fixed-eqs         2240
;  :arith-offset-eqs        1401
;  :arith-pivots            1908
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 7508
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9655
;  :del-clause              19252
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          759
;  :mk-bool-var             27108
;  :mk-clause               19705
;  :num-allocs              15127125
;  :num-checks              482
;  :propagations            11294
;  :quant-instantiations    4505
;  :rlimit-count            723108
;  :time                    0.01)
; [then-branch: 100 | First:(Second:(Second:(Second:($t@87@02))))[1] == 0 || First:(Second:(Second:(Second:($t@87@02))))[1] == -1 | live]
; [else-branch: 100 | !(First:(Second:(Second:(Second:($t@87@02))))[1] == 0 || First:(Second:(Second:(Second:($t@87@02))))[1] == -1) | live]
(push) ; 9
; [then-branch: 100 | First:(Second:(Second:(Second:($t@87@02))))[1] == 0 || First:(Second:(Second:(Second:($t@87@02))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46965
;  :arith-add-rows          9147
;  :arith-assert-diseq      2652
;  :arith-assert-lower      5634
;  :arith-assert-upper      4982
;  :arith-bound-prop        1299
;  :arith-conflicts         92
;  :arith-eq-adapter        3305
;  :arith-fixed-eqs         2240
;  :arith-offset-eqs        1401
;  :arith-pivots            1908
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 7508
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9655
;  :del-clause              19252
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          759
;  :mk-bool-var             27110
;  :mk-clause               19706
;  :num-allocs              15127125
;  :num-checks              483
;  :propagations            11294
;  :quant-instantiations    4505
;  :rlimit-count            723257)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 100 | !(First:(Second:(Second:(Second:($t@87@02))))[1] == 0 || First:(Second:(Second:(Second:($t@87@02))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46971
;  :arith-add-rows          9147
;  :arith-assert-diseq      2652
;  :arith-assert-lower      5634
;  :arith-assert-upper      4982
;  :arith-bound-prop        1299
;  :arith-conflicts         92
;  :arith-eq-adapter        3305
;  :arith-fixed-eqs         2240
;  :arith-offset-eqs        1401
;  :arith-pivots            1908
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 7508
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9655
;  :del-clause              19253
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          759
;  :mk-bool-var             27116
;  :mk-clause               19710
;  :num-allocs              15127125
;  :num-checks              484
;  :propagations            11294
;  :quant-instantiations    4505
;  :rlimit-count            723746)
(push) ; 8
; [then-branch: 101 | First:(Second:(Second:(Second:($t@87@02))))[2] == 0 | live]
; [else-branch: 101 | First:(Second:(Second:(Second:($t@87@02))))[2] != 0 | live]
(push) ; 9
; [then-branch: 101 | First:(Second:(Second:(Second:($t@87@02))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    2)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 101 | First:(Second:(Second:(Second:($t@87@02))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46972
;  :arith-add-rows          9148
;  :arith-assert-diseq      2652
;  :arith-assert-lower      5634
;  :arith-assert-upper      4982
;  :arith-bound-prop        1299
;  :arith-conflicts         92
;  :arith-eq-adapter        3305
;  :arith-fixed-eqs         2240
;  :arith-offset-eqs        1401
;  :arith-pivots            1908
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 7508
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9655
;  :del-clause              19253
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          759
;  :mk-bool-var             27120
;  :mk-clause               19715
;  :num-allocs              15127125
;  :num-checks              485
;  :propagations            11294
;  :quant-instantiations    4506
;  :rlimit-count            723971)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               48089
;  :arith-add-rows          10241
;  :arith-assert-diseq      2793
;  :arith-assert-lower      5915
;  :arith-assert-upper      5200
;  :arith-bound-prop        1403
;  :arith-conflicts         96
;  :arith-eq-adapter        3467
;  :arith-fixed-eqs         2380
;  :arith-offset-eqs        1513
;  :arith-pivots            2016
;  :binary-propagations     22
;  :conflicts               662
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 7516
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9822
;  :del-clause              20339
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          790
;  :mk-bool-var             28182
;  :mk-clause               20796
;  :num-allocs              15127125
;  :num-checks              486
;  :propagations            12012
;  :quant-instantiations    4778
;  :rlimit-count            762505
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               49265
;  :arith-add-rows          11053
;  :arith-assert-diseq      2941
;  :arith-assert-lower      6193
;  :arith-assert-upper      5430
;  :arith-bound-prop        1472
;  :arith-conflicts         103
;  :arith-eq-adapter        3645
;  :arith-fixed-eqs         2500
;  :arith-offset-eqs        1612
;  :arith-pivots            2117
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 7524
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9991
;  :del-clause              21537
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          842
;  :mk-bool-var             29350
;  :mk-clause               21994
;  :num-allocs              15127125
;  :num-checks              487
;  :propagations            12774
;  :quant-instantiations    5083
;  :rlimit-count            791100
;  :time                    0.01)
; [then-branch: 102 | First:(Second:(Second:(Second:($t@87@02))))[2] == 0 || First:(Second:(Second:(Second:($t@87@02))))[2] == -1 | live]
; [else-branch: 102 | !(First:(Second:(Second:(Second:($t@87@02))))[2] == 0 || First:(Second:(Second:(Second:($t@87@02))))[2] == -1) | live]
(push) ; 9
; [then-branch: 102 | First:(Second:(Second:(Second:($t@87@02))))[2] == 0 || First:(Second:(Second:(Second:($t@87@02))))[2] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] == -2
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               49265
;  :arith-add-rows          11053
;  :arith-assert-diseq      2941
;  :arith-assert-lower      6193
;  :arith-assert-upper      5430
;  :arith-bound-prop        1472
;  :arith-conflicts         103
;  :arith-eq-adapter        3645
;  :arith-fixed-eqs         2500
;  :arith-offset-eqs        1612
;  :arith-pivots            2117
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 7524
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9991
;  :del-clause              21537
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          842
;  :mk-bool-var             29352
;  :mk-clause               21995
;  :num-allocs              15127125
;  :num-checks              488
;  :propagations            12774
;  :quant-instantiations    5083
;  :rlimit-count            791249)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 102 | !(First:(Second:(Second:(Second:($t@87@02))))[2] == 0 || First:(Second:(Second:(Second:($t@87@02))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      2)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1 ==> diz.Main_event_state[3] == -2
; [eval] old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1
; [eval] old(diz.Main_event_state[3]) == 0
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               49271
;  :arith-add-rows          11053
;  :arith-assert-diseq      2941
;  :arith-assert-lower      6193
;  :arith-assert-upper      5430
;  :arith-bound-prop        1472
;  :arith-conflicts         103
;  :arith-eq-adapter        3645
;  :arith-fixed-eqs         2500
;  :arith-offset-eqs        1612
;  :arith-pivots            2117
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 7524
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9991
;  :del-clause              21538
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          842
;  :mk-bool-var             29358
;  :mk-clause               21999
;  :num-allocs              15127125
;  :num-checks              489
;  :propagations            12774
;  :quant-instantiations    5083
;  :rlimit-count            791748)
(push) ; 8
; [then-branch: 103 | First:(Second:(Second:(Second:($t@87@02))))[3] == 0 | live]
; [else-branch: 103 | First:(Second:(Second:(Second:($t@87@02))))[3] != 0 | live]
(push) ; 9
; [then-branch: 103 | First:(Second:(Second:(Second:($t@87@02))))[3] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    3)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 103 | First:(Second:(Second:(Second:($t@87@02))))[3] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    0)))
; [eval] old(diz.Main_event_state[3]) == -1
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               49272
;  :arith-add-rows          11054
;  :arith-assert-diseq      2941
;  :arith-assert-lower      6193
;  :arith-assert-upper      5430
;  :arith-bound-prop        1472
;  :arith-conflicts         103
;  :arith-eq-adapter        3645
;  :arith-fixed-eqs         2500
;  :arith-offset-eqs        1612
;  :arith-pivots            2117
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 7524
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               9991
;  :del-clause              21538
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          842
;  :mk-bool-var             29361
;  :mk-clause               22004
;  :num-allocs              15127125
;  :num-checks              490
;  :propagations            12774
;  :quant-instantiations    5084
;  :rlimit-count            791970)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               50501
;  :arith-add-rows          11715
;  :arith-assert-diseq      3088
;  :arith-assert-lower      6503
;  :arith-assert-upper      5642
;  :arith-bound-prop        1532
;  :arith-conflicts         105
;  :arith-eq-adapter        3809
;  :arith-fixed-eqs         2621
;  :arith-offset-eqs        1709
;  :arith-pivots            2208
;  :binary-propagations     22
;  :conflicts               710
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 7532
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10145
;  :del-clause              22761
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          862
;  :mk-bool-var             30517
;  :mk-clause               23222
;  :num-allocs              15127125
;  :num-checks              491
;  :propagations            13544
;  :quant-instantiations    5409
;  :rlimit-count            815812
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               51815
;  :arith-add-rows          12419
;  :arith-assert-diseq      3244
;  :arith-assert-lower      6833
;  :arith-assert-upper      5890
;  :arith-bound-prop        1596
;  :arith-conflicts         108
;  :arith-eq-adapter        3982
;  :arith-fixed-eqs         2755
;  :arith-offset-eqs        1814
;  :arith-pivots            2313
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 7540
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10322
;  :del-clause              24100
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          895
;  :mk-bool-var             31796
;  :mk-clause               24561
;  :num-allocs              15127125
;  :num-checks              492
;  :propagations            14378
;  :quant-instantiations    5764
;  :rlimit-count            842322
;  :time                    0.01)
; [then-branch: 104 | First:(Second:(Second:(Second:($t@87@02))))[3] == 0 || First:(Second:(Second:(Second:($t@87@02))))[3] == -1 | live]
; [else-branch: 104 | !(First:(Second:(Second:(Second:($t@87@02))))[3] == 0 || First:(Second:(Second:(Second:($t@87@02))))[3] == -1) | live]
(push) ; 9
; [then-branch: 104 | First:(Second:(Second:(Second:($t@87@02))))[3] == 0 || First:(Second:(Second:(Second:($t@87@02))))[3] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    (- 0 1))))
; [eval] diz.Main_event_state[3] == -2
; [eval] diz.Main_event_state[3]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               51816
;  :arith-add-rows          12419
;  :arith-assert-diseq      3244
;  :arith-assert-lower      6833
;  :arith-assert-upper      5890
;  :arith-bound-prop        1596
;  :arith-conflicts         108
;  :arith-eq-adapter        3982
;  :arith-fixed-eqs         2755
;  :arith-offset-eqs        1814
;  :arith-pivots            2313
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 7540
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10322
;  :del-clause              24100
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          895
;  :mk-bool-var             31798
;  :mk-clause               24562
;  :num-allocs              15127125
;  :num-checks              493
;  :propagations            14378
;  :quant-instantiations    5764
;  :rlimit-count            842472)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 104 | !(First:(Second:(Second:(Second:($t@87@02))))[3] == 0 || First:(Second:(Second:(Second:($t@87@02))))[3] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      3)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1 ==> diz.Main_event_state[4] == -2
; [eval] old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1
; [eval] old(diz.Main_event_state[4]) == 0
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               51823
;  :arith-add-rows          12419
;  :arith-assert-diseq      3244
;  :arith-assert-lower      6833
;  :arith-assert-upper      5890
;  :arith-bound-prop        1596
;  :arith-conflicts         108
;  :arith-eq-adapter        3982
;  :arith-fixed-eqs         2755
;  :arith-offset-eqs        1814
;  :arith-pivots            2313
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 7540
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10322
;  :del-clause              24101
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          895
;  :mk-bool-var             31804
;  :mk-clause               24566
;  :num-allocs              15127125
;  :num-checks              494
;  :propagations            14378
;  :quant-instantiations    5764
;  :rlimit-count            842982)
(push) ; 8
; [then-branch: 105 | First:(Second:(Second:(Second:($t@87@02))))[4] == 0 | live]
; [else-branch: 105 | First:(Second:(Second:(Second:($t@87@02))))[4] != 0 | live]
(push) ; 9
; [then-branch: 105 | First:(Second:(Second:(Second:($t@87@02))))[4] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    4)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 105 | First:(Second:(Second:(Second:($t@87@02))))[4] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    0)))
; [eval] old(diz.Main_event_state[4]) == -1
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               51824
;  :arith-add-rows          12420
;  :arith-assert-diseq      3244
;  :arith-assert-lower      6833
;  :arith-assert-upper      5890
;  :arith-bound-prop        1596
;  :arith-conflicts         108
;  :arith-eq-adapter        3982
;  :arith-fixed-eqs         2755
;  :arith-offset-eqs        1814
;  :arith-pivots            2313
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 7540
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10322
;  :del-clause              24101
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          895
;  :mk-bool-var             31807
;  :mk-clause               24571
;  :num-allocs              15127125
;  :num-checks              495
;  :propagations            14378
;  :quant-instantiations    5765
;  :rlimit-count            843204)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               53362
;  :arith-add-rows          13224
;  :arith-assert-diseq      3416
;  :arith-assert-lower      7197
;  :arith-assert-upper      6109
;  :arith-bound-prop        1652
;  :arith-conflicts         112
;  :arith-eq-adapter        4155
;  :arith-fixed-eqs         2968
;  :arith-offset-eqs        1941
;  :arith-pivots            2428
;  :binary-propagations     22
;  :conflicts               757
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 7548
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10505
;  :del-clause              25388
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          927
;  :mk-bool-var             33054
;  :mk-clause               25853
;  :num-allocs              15127125
;  :num-checks              496
;  :propagations            15255
;  :quant-instantiations    6098
;  :rlimit-count            870840
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               54645
;  :arith-add-rows          13931
;  :arith-assert-diseq      3567
;  :arith-assert-lower      7499
;  :arith-assert-upper      6337
;  :arith-bound-prop        1735
;  :arith-conflicts         117
;  :arith-eq-adapter        4320
;  :arith-fixed-eqs         3132
;  :arith-offset-eqs        2046
;  :arith-pivots            2524
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 7556
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10661
;  :del-clause              26592
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          940
;  :mk-bool-var             34214
;  :mk-clause               27057
;  :num-allocs              15127125
;  :num-checks              497
;  :propagations            16039
;  :quant-instantiations    6406
;  :rlimit-count            895252
;  :time                    0.01)
; [then-branch: 106 | First:(Second:(Second:(Second:($t@87@02))))[4] == 0 || First:(Second:(Second:(Second:($t@87@02))))[4] == -1 | live]
; [else-branch: 106 | !(First:(Second:(Second:(Second:($t@87@02))))[4] == 0 || First:(Second:(Second:(Second:($t@87@02))))[4] == -1) | live]
(push) ; 9
; [then-branch: 106 | First:(Second:(Second:(Second:($t@87@02))))[4] == 0 || First:(Second:(Second:(Second:($t@87@02))))[4] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    (- 0 1))))
; [eval] diz.Main_event_state[4] == -2
; [eval] diz.Main_event_state[4]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               54646
;  :arith-add-rows          13931
;  :arith-assert-diseq      3567
;  :arith-assert-lower      7499
;  :arith-assert-upper      6337
;  :arith-bound-prop        1735
;  :arith-conflicts         117
;  :arith-eq-adapter        4320
;  :arith-fixed-eqs         3132
;  :arith-offset-eqs        2046
;  :arith-pivots            2524
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 7556
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10661
;  :del-clause              26592
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          940
;  :mk-bool-var             34216
;  :mk-clause               27058
;  :num-allocs              15127125
;  :num-checks              498
;  :propagations            16039
;  :quant-instantiations    6406
;  :rlimit-count            895402)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 106 | !(First:(Second:(Second:(Second:($t@87@02))))[4] == 0 || First:(Second:(Second:(Second:($t@87@02))))[4] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      4)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1 ==> diz.Main_event_state[5] == -2
; [eval] old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1
; [eval] old(diz.Main_event_state[5]) == 0
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               54653
;  :arith-add-rows          13931
;  :arith-assert-diseq      3567
;  :arith-assert-lower      7499
;  :arith-assert-upper      6337
;  :arith-bound-prop        1735
;  :arith-conflicts         117
;  :arith-eq-adapter        4320
;  :arith-fixed-eqs         3132
;  :arith-offset-eqs        2046
;  :arith-pivots            2524
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    759
;  :datatype-constructor-ax 7556
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10661
;  :del-clause              26593
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          940
;  :mk-bool-var             34222
;  :mk-clause               27062
;  :num-allocs              15127125
;  :num-checks              499
;  :propagations            16039
;  :quant-instantiations    6406
;  :rlimit-count            895922)
(push) ; 8
; [then-branch: 107 | First:(Second:(Second:(Second:($t@87@02))))[5] == 0 | live]
; [else-branch: 107 | First:(Second:(Second:(Second:($t@87@02))))[5] != 0 | live]
(push) ; 9
; [then-branch: 107 | First:(Second:(Second:(Second:($t@87@02))))[5] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    5)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 107 | First:(Second:(Second:(Second:($t@87@02))))[5] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    0)))
; [eval] old(diz.Main_event_state[5]) == -1
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               54654
;  :arith-add-rows          13931
;  :arith-assert-diseq      3567
;  :arith-assert-lower      7499
;  :arith-assert-upper      6337
;  :arith-bound-prop        1735
;  :arith-conflicts         117
;  :arith-eq-adapter        4320
;  :arith-fixed-eqs         3132
;  :arith-offset-eqs        2046
;  :arith-pivots            2524
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    759
;  :datatype-constructor-ax 7556
;  :datatype-occurs-check   2024
;  :datatype-splits         5277
;  :decisions               10661
;  :del-clause              26593
;  :final-checks            548
;  :interface-eqs           210
;  :max-generation          11
;  :max-memory              6.01
;  :memory                  6.01
;  :minimized-lits          940
;  :mk-bool-var             34226
;  :mk-clause               27067
;  :num-allocs              15127125
;  :num-checks              500
;  :propagations            16039
;  :quant-instantiations    6407
;  :rlimit-count            896146)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               56057
;  :arith-add-rows          14205
;  :arith-assert-diseq      3678
;  :arith-assert-lower      7706
;  :arith-assert-upper      6487
;  :arith-bound-prop        1788
;  :arith-conflicts         118
;  :arith-eq-adapter        4423
;  :arith-fixed-eqs         3281
;  :arith-offset-eqs        2181
;  :arith-pivots            2567
;  :binary-propagations     22
;  :conflicts               788
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 7668
;  :datatype-occurs-check   2053
;  :datatype-splits         5331
;  :decisions               10865
;  :del-clause              27235
;  :final-checks            553
;  :interface-eqs           212
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          941
;  :mk-bool-var             34855
;  :mk-clause               27704
;  :num-allocs              15877708
;  :num-checks              501
;  :propagations            16504
;  :quant-instantiations    6557
;  :rlimit-count            910186
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               56938
;  :arith-add-rows          14630
;  :arith-assert-diseq      3799
;  :arith-assert-lower      7922
;  :arith-assert-upper      6662
;  :arith-bound-prop        1831
;  :arith-conflicts         120
;  :arith-eq-adapter        4543
;  :arith-fixed-eqs         3376
;  :arith-offset-eqs        2244
;  :arith-pivots            2637
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 7676
;  :datatype-occurs-check   2053
;  :datatype-splits         5331
;  :decisions               10998
;  :del-clause              28153
;  :final-checks            553
;  :interface-eqs           212
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          958
;  :mk-bool-var             35701
;  :mk-clause               28622
;  :num-allocs              15877708
;  :num-checks              502
;  :propagations            17055
;  :quant-instantiations    6787
;  :rlimit-count            926114
;  :time                    0.01)
; [then-branch: 108 | First:(Second:(Second:(Second:($t@87@02))))[5] == 0 || First:(Second:(Second:(Second:($t@87@02))))[5] == -1 | live]
; [else-branch: 108 | !(First:(Second:(Second:(Second:($t@87@02))))[5] == 0 || First:(Second:(Second:(Second:($t@87@02))))[5] == -1) | live]
(push) ; 9
; [then-branch: 108 | First:(Second:(Second:(Second:($t@87@02))))[5] == 0 || First:(Second:(Second:(Second:($t@87@02))))[5] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    (- 0 1))))
; [eval] diz.Main_event_state[5] == -2
; [eval] diz.Main_event_state[5]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               56938
;  :arith-add-rows          14630
;  :arith-assert-diseq      3799
;  :arith-assert-lower      7922
;  :arith-assert-upper      6662
;  :arith-bound-prop        1831
;  :arith-conflicts         120
;  :arith-eq-adapter        4543
;  :arith-fixed-eqs         3376
;  :arith-offset-eqs        2244
;  :arith-pivots            2637
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 7676
;  :datatype-occurs-check   2053
;  :datatype-splits         5331
;  :decisions               10998
;  :del-clause              28153
;  :final-checks            553
;  :interface-eqs           212
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          958
;  :mk-bool-var             35703
;  :mk-clause               28623
;  :num-allocs              15877708
;  :num-checks              503
;  :propagations            17055
;  :quant-instantiations    6787
;  :rlimit-count            926263)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 108 | !(First:(Second:(Second:(Second:($t@87@02))))[5] == 0 || First:(Second:(Second:(Second:($t@87@02))))[5] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      5)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1) ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1)
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               56944
;  :arith-add-rows          14630
;  :arith-assert-diseq      3799
;  :arith-assert-lower      7922
;  :arith-assert-upper      6662
;  :arith-bound-prop        1831
;  :arith-conflicts         120
;  :arith-eq-adapter        4543
;  :arith-fixed-eqs         3376
;  :arith-offset-eqs        2244
;  :arith-pivots            2637
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    769
;  :datatype-constructor-ax 7676
;  :datatype-occurs-check   2053
;  :datatype-splits         5331
;  :decisions               10998
;  :del-clause              28154
;  :final-checks            553
;  :interface-eqs           212
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          958
;  :mk-bool-var             35709
;  :mk-clause               28627
;  :num-allocs              15877708
;  :num-checks              504
;  :propagations            17055
;  :quant-instantiations    6787
;  :rlimit-count            926792)
(push) ; 8
; [then-branch: 109 | First:(Second:(Second:(Second:($t@87@02))))[0] == 0 | live]
; [else-branch: 109 | First:(Second:(Second:(Second:($t@87@02))))[0] != 0 | live]
(push) ; 9
; [then-branch: 109 | First:(Second:(Second:(Second:($t@87@02))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 109 | First:(Second:(Second:(Second:($t@87@02))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               56945
;  :arith-add-rows          14630
;  :arith-assert-diseq      3799
;  :arith-assert-lower      7922
;  :arith-assert-upper      6662
;  :arith-bound-prop        1831
;  :arith-conflicts         120
;  :arith-eq-adapter        4543
;  :arith-fixed-eqs         3376
;  :arith-offset-eqs        2244
;  :arith-pivots            2637
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    769
;  :datatype-constructor-ax 7676
;  :datatype-occurs-check   2053
;  :datatype-splits         5331
;  :decisions               10998
;  :del-clause              28154
;  :final-checks            553
;  :interface-eqs           212
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          958
;  :mk-bool-var             35713
;  :mk-clause               28633
;  :num-allocs              15877708
;  :num-checks              505
;  :propagations            17055
;  :quant-instantiations    6788
;  :rlimit-count            926960)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               57799
;  :arith-add-rows          15090
;  :arith-assert-diseq      3920
;  :arith-assert-lower      8141
;  :arith-assert-upper      6834
;  :arith-bound-prop        1901
;  :arith-conflicts         121
;  :arith-eq-adapter        4658
;  :arith-fixed-eqs         3480
;  :arith-offset-eqs        2318
;  :arith-pivots            2699
;  :binary-propagations     22
;  :conflicts               815
;  :datatype-accessor-ax    769
;  :datatype-constructor-ax 7684
;  :datatype-occurs-check   2053
;  :datatype-splits         5331
;  :decisions               11117
;  :del-clause              29034
;  :final-checks            553
;  :interface-eqs           212
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          975
;  :mk-bool-var             36512
;  :mk-clause               29507
;  :num-allocs              15877708
;  :num-checks              506
;  :propagations            17590
;  :quant-instantiations    7001
;  :rlimit-count            943056
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               59942
;  :arith-add-rows          15415
;  :arith-assert-diseq      4034
;  :arith-assert-lower      8422
;  :arith-assert-upper      7057
;  :arith-bound-prop        1947
;  :arith-conflicts         123
;  :arith-eq-adapter        4829
;  :arith-fixed-eqs         3675
;  :arith-offset-eqs        2510
;  :arith-pivots            2776
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    791
;  :datatype-constructor-ax 7896
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11432
;  :del-clause              29930
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          1000
;  :mk-bool-var             37602
;  :mk-clause               30403
;  :num-allocs              15877708
;  :num-checks              507
;  :propagations            18203
;  :quant-instantiations    7223
;  :rlimit-count            960896
;  :time                    0.01)
; [then-branch: 110 | !(First:(Second:(Second:(Second:($t@87@02))))[0] == 0 || First:(Second:(Second:(Second:($t@87@02))))[0] == -1) | live]
; [else-branch: 110 | First:(Second:(Second:(Second:($t@87@02))))[0] == 0 || First:(Second:(Second:(Second:($t@87@02))))[0] == -1 | live]
(push) ; 9
; [then-branch: 110 | !(First:(Second:(Second:(Second:($t@87@02))))[0] == 0 || First:(Second:(Second:(Second:($t@87@02))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        0)
      (- 0 1)))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               59943
;  :arith-add-rows          15415
;  :arith-assert-diseq      4034
;  :arith-assert-lower      8422
;  :arith-assert-upper      7057
;  :arith-bound-prop        1947
;  :arith-conflicts         123
;  :arith-eq-adapter        4829
;  :arith-fixed-eqs         3675
;  :arith-offset-eqs        2510
;  :arith-pivots            2776
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    791
;  :datatype-constructor-ax 7896
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11432
;  :del-clause              29930
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          1000
;  :mk-bool-var             37606
;  :mk-clause               30409
;  :num-allocs              15877708
;  :num-checks              508
;  :propagations            18204
;  :quant-instantiations    7224
;  :rlimit-count            961085)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               59943
;  :arith-add-rows          15415
;  :arith-assert-diseq      4034
;  :arith-assert-lower      8422
;  :arith-assert-upper      7057
;  :arith-bound-prop        1947
;  :arith-conflicts         123
;  :arith-eq-adapter        4829
;  :arith-fixed-eqs         3675
;  :arith-offset-eqs        2510
;  :arith-pivots            2776
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    791
;  :datatype-constructor-ax 7896
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11432
;  :del-clause              29930
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          1000
;  :mk-bool-var             37606
;  :mk-clause               30409
;  :num-allocs              15877708
;  :num-checks              509
;  :propagations            18204
;  :quant-instantiations    7224
;  :rlimit-count            961100)
(pop) ; 9
(push) ; 9
; [else-branch: 110 | First:(Second:(Second:(Second:($t@87@02))))[0] == 0 || First:(Second:(Second:(Second:($t@87@02))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          0)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          0)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1) ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1)
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               59949
;  :arith-add-rows          15415
;  :arith-assert-diseq      4034
;  :arith-assert-lower      8422
;  :arith-assert-upper      7057
;  :arith-bound-prop        1947
;  :arith-conflicts         123
;  :arith-eq-adapter        4829
;  :arith-fixed-eqs         3675
;  :arith-offset-eqs        2510
;  :arith-pivots            2776
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 7896
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11432
;  :del-clause              29936
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          1000
;  :mk-bool-var             37609
;  :mk-clause               30410
;  :num-allocs              15877708
;  :num-checks              510
;  :propagations            18204
;  :quant-instantiations    7224
;  :rlimit-count            961579)
(push) ; 8
; [then-branch: 111 | First:(Second:(Second:(Second:($t@87@02))))[1] == 0 | live]
; [else-branch: 111 | First:(Second:(Second:(Second:($t@87@02))))[1] != 0 | live]
(push) ; 9
; [then-branch: 111 | First:(Second:(Second:(Second:($t@87@02))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 111 | First:(Second:(Second:(Second:($t@87@02))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               59950
;  :arith-add-rows          15415
;  :arith-assert-diseq      4034
;  :arith-assert-lower      8422
;  :arith-assert-upper      7057
;  :arith-bound-prop        1947
;  :arith-conflicts         123
;  :arith-eq-adapter        4829
;  :arith-fixed-eqs         3675
;  :arith-offset-eqs        2510
;  :arith-pivots            2776
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 7896
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11432
;  :del-clause              29936
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          1000
;  :mk-bool-var             37613
;  :mk-clause               30416
;  :num-allocs              15877708
;  :num-checks              511
;  :propagations            18204
;  :quant-instantiations    7225
;  :rlimit-count            961747)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               61208
;  :arith-add-rows          15986
;  :arith-assert-diseq      4181
;  :arith-assert-lower      8698
;  :arith-assert-upper      7289
;  :arith-bound-prop        2009
;  :arith-conflicts         128
;  :arith-eq-adapter        4983
;  :arith-fixed-eqs         3821
;  :arith-offset-eqs        2620
;  :arith-pivots            2877
;  :binary-propagations     22
;  :conflicts               861
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 7904
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11580
;  :del-clause              31165
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.21
;  :minimized-lits          1033
;  :mk-bool-var             38736
;  :mk-clause               31639
;  :num-allocs              15877708
;  :num-checks              512
;  :propagations            18959
;  :quant-instantiations    7528
;  :rlimit-count            983758
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               62222
;  :arith-add-rows          16490
;  :arith-assert-diseq      4304
;  :arith-assert-lower      8931
;  :arith-assert-upper      7469
;  :arith-bound-prop        2086
;  :arith-conflicts         129
;  :arith-eq-adapter        5111
;  :arith-fixed-eqs         3939
;  :arith-offset-eqs        2716
;  :arith-pivots            2947
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 7912
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11703
;  :del-clause              32153
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1050
;  :mk-bool-var             39654
;  :mk-clause               32627
;  :num-allocs              16273229
;  :num-checks              513
;  :propagations            19544
;  :quant-instantiations    7777
;  :rlimit-count            1001776
;  :time                    0.01)
; [then-branch: 112 | !(First:(Second:(Second:(Second:($t@87@02))))[1] == 0 || First:(Second:(Second:(Second:($t@87@02))))[1] == -1) | live]
; [else-branch: 112 | First:(Second:(Second:(Second:($t@87@02))))[1] == 0 || First:(Second:(Second:(Second:($t@87@02))))[1] == -1 | live]
(push) ; 9
; [then-branch: 112 | !(First:(Second:(Second:(Second:($t@87@02))))[1] == 0 || First:(Second:(Second:(Second:($t@87@02))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        1)
      (- 0 1)))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               62223
;  :arith-add-rows          16490
;  :arith-assert-diseq      4304
;  :arith-assert-lower      8931
;  :arith-assert-upper      7469
;  :arith-bound-prop        2086
;  :arith-conflicts         129
;  :arith-eq-adapter        5111
;  :arith-fixed-eqs         3939
;  :arith-offset-eqs        2716
;  :arith-pivots            2947
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 7912
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11703
;  :del-clause              32153
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1050
;  :mk-bool-var             39658
;  :mk-clause               32633
;  :num-allocs              16273229
;  :num-checks              514
;  :propagations            19545
;  :quant-instantiations    7778
;  :rlimit-count            1002053)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               62223
;  :arith-add-rows          16490
;  :arith-assert-diseq      4304
;  :arith-assert-lower      8931
;  :arith-assert-upper      7469
;  :arith-bound-prop        2086
;  :arith-conflicts         129
;  :arith-eq-adapter        5111
;  :arith-fixed-eqs         3939
;  :arith-offset-eqs        2716
;  :arith-pivots            2947
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 7912
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11703
;  :del-clause              32153
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1050
;  :mk-bool-var             39658
;  :mk-clause               32633
;  :num-allocs              16273229
;  :num-checks              515
;  :propagations            19545
;  :quant-instantiations    7778
;  :rlimit-count            1002068)
(pop) ; 9
(push) ; 9
; [else-branch: 112 | First:(Second:(Second:(Second:($t@87@02))))[1] == 0 || First:(Second:(Second:(Second:($t@87@02))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          1)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          1)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1) ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] !(old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1)
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               62229
;  :arith-add-rows          16490
;  :arith-assert-diseq      4304
;  :arith-assert-lower      8931
;  :arith-assert-upper      7469
;  :arith-bound-prop        2086
;  :arith-conflicts         129
;  :arith-eq-adapter        5111
;  :arith-fixed-eqs         3939
;  :arith-offset-eqs        2716
;  :arith-pivots            2947
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 7912
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11703
;  :del-clause              32159
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1050
;  :mk-bool-var             39661
;  :mk-clause               32634
;  :num-allocs              16273229
;  :num-checks              516
;  :propagations            19545
;  :quant-instantiations    7778
;  :rlimit-count            1002557)
(push) ; 8
; [then-branch: 113 | First:(Second:(Second:(Second:($t@87@02))))[2] == 0 | live]
; [else-branch: 113 | First:(Second:(Second:(Second:($t@87@02))))[2] != 0 | live]
(push) ; 9
; [then-branch: 113 | First:(Second:(Second:(Second:($t@87@02))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    2)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 113 | First:(Second:(Second:(Second:($t@87@02))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               62230
;  :arith-add-rows          16490
;  :arith-assert-diseq      4304
;  :arith-assert-lower      8931
;  :arith-assert-upper      7469
;  :arith-bound-prop        2086
;  :arith-conflicts         129
;  :arith-eq-adapter        5111
;  :arith-fixed-eqs         3939
;  :arith-offset-eqs        2716
;  :arith-pivots            2947
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 7912
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11703
;  :del-clause              32159
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1050
;  :mk-bool-var             39664
;  :mk-clause               32639
;  :num-allocs              16273229
;  :num-checks              517
;  :propagations            19545
;  :quant-instantiations    7779
;  :rlimit-count            1002737)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               63769
;  :arith-add-rows          17226
;  :arith-assert-diseq      4460
;  :arith-assert-lower      9273
;  :arith-assert-upper      7709
;  :arith-bound-prop        2190
;  :arith-conflicts         131
;  :arith-eq-adapter        5288
;  :arith-fixed-eqs         4137
;  :arith-offset-eqs        2896
;  :arith-pivots            3039
;  :binary-propagations     22
;  :conflicts               897
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 7920
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11848
;  :del-clause              33533
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1077
;  :mk-bool-var             40980
;  :mk-clause               34008
;  :num-allocs              17074192
;  :num-checks              518
;  :propagations            20464
;  :quant-instantiations    8123
;  :rlimit-count            1028479
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               64943
;  :arith-add-rows          17749
;  :arith-assert-diseq      4613
;  :arith-assert-lower      9537
;  :arith-assert-upper      7922
;  :arith-bound-prop        2242
;  :arith-conflicts         132
;  :arith-eq-adapter        5443
;  :arith-fixed-eqs         4265
;  :arith-offset-eqs        2991
;  :arith-pivots            3121
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 7928
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11999
;  :del-clause              34657
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1093
;  :mk-bool-var             41984
;  :mk-clause               35132
;  :num-allocs              17074192
;  :num-checks              519
;  :propagations            21192
;  :quant-instantiations    8406
;  :rlimit-count            1050046
;  :time                    0.01)
; [then-branch: 114 | !(First:(Second:(Second:(Second:($t@87@02))))[2] == 0 || First:(Second:(Second:(Second:($t@87@02))))[2] == -1) | live]
; [else-branch: 114 | First:(Second:(Second:(Second:($t@87@02))))[2] == 0 || First:(Second:(Second:(Second:($t@87@02))))[2] == -1 | live]
(push) ; 9
; [then-branch: 114 | !(First:(Second:(Second:(Second:($t@87@02))))[2] == 0 || First:(Second:(Second:(Second:($t@87@02))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        2)
      (- 0 1)))))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               64944
;  :arith-add-rows          17749
;  :arith-assert-diseq      4613
;  :arith-assert-lower      9537
;  :arith-assert-upper      7922
;  :arith-bound-prop        2242
;  :arith-conflicts         132
;  :arith-eq-adapter        5443
;  :arith-fixed-eqs         4265
;  :arith-offset-eqs        2991
;  :arith-pivots            3121
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 7928
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11999
;  :del-clause              34657
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1093
;  :mk-bool-var             41987
;  :mk-clause               35137
;  :num-allocs              17074192
;  :num-checks              520
;  :propagations            21193
;  :quant-instantiations    8407
;  :rlimit-count            1050323)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               64944
;  :arith-add-rows          17749
;  :arith-assert-diseq      4613
;  :arith-assert-lower      9537
;  :arith-assert-upper      7922
;  :arith-bound-prop        2242
;  :arith-conflicts         132
;  :arith-eq-adapter        5443
;  :arith-fixed-eqs         4265
;  :arith-offset-eqs        2991
;  :arith-pivots            3121
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 7928
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11999
;  :del-clause              34657
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1093
;  :mk-bool-var             41987
;  :mk-clause               35137
;  :num-allocs              17074192
;  :num-checks              521
;  :propagations            21193
;  :quant-instantiations    8407
;  :rlimit-count            1050338)
(pop) ; 9
(push) ; 9
; [else-branch: 114 | First:(Second:(Second:(Second:($t@87@02))))[2] == 0 || First:(Second:(Second:(Second:($t@87@02))))[2] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          2)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          2)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1) ==> diz.Main_event_state[3] == old(diz.Main_event_state[3])
; [eval] !(old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1)
; [eval] old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1
; [eval] old(diz.Main_event_state[3]) == 0
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               64950
;  :arith-add-rows          17749
;  :arith-assert-diseq      4613
;  :arith-assert-lower      9537
;  :arith-assert-upper      7922
;  :arith-bound-prop        2242
;  :arith-conflicts         132
;  :arith-eq-adapter        5443
;  :arith-fixed-eqs         4265
;  :arith-offset-eqs        2991
;  :arith-pivots            3121
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 7928
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11999
;  :del-clause              34662
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1093
;  :mk-bool-var             41990
;  :mk-clause               35138
;  :num-allocs              17074192
;  :num-checks              522
;  :propagations            21193
;  :quant-instantiations    8407
;  :rlimit-count            1050837)
(push) ; 8
; [then-branch: 115 | First:(Second:(Second:(Second:($t@87@02))))[3] == 0 | live]
; [else-branch: 115 | First:(Second:(Second:(Second:($t@87@02))))[3] != 0 | live]
(push) ; 9
; [then-branch: 115 | First:(Second:(Second:(Second:($t@87@02))))[3] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    3)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 115 | First:(Second:(Second:(Second:($t@87@02))))[3] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    0)))
; [eval] old(diz.Main_event_state[3]) == -1
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               64950
;  :arith-add-rows          17749
;  :arith-assert-diseq      4613
;  :arith-assert-lower      9537
;  :arith-assert-upper      7922
;  :arith-bound-prop        2242
;  :arith-conflicts         132
;  :arith-eq-adapter        5443
;  :arith-fixed-eqs         4265
;  :arith-offset-eqs        2991
;  :arith-pivots            3121
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 7928
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               11999
;  :del-clause              34662
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1093
;  :mk-bool-var             41992
;  :mk-clause               35143
;  :num-allocs              17074192
;  :num-checks              523
;  :propagations            21193
;  :quant-instantiations    8408
;  :rlimit-count            1051013)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               66143
;  :arith-add-rows          18321
;  :arith-assert-diseq      4753
;  :arith-assert-lower      9798
;  :arith-assert-upper      8144
;  :arith-bound-prop        2301
;  :arith-conflicts         138
;  :arith-eq-adapter        5588
;  :arith-fixed-eqs         4403
;  :arith-offset-eqs        3094
;  :arith-pivots            3219
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 7936
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12153
;  :del-clause              35819
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.08
;  :minimized-lits          1118
;  :mk-bool-var             43034
;  :mk-clause               36295
;  :num-allocs              17074192
;  :num-checks              524
;  :propagations            21922
;  :quant-instantiations    8689
;  :rlimit-count            1074021
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               67373
;  :arith-add-rows          18849
;  :arith-assert-diseq      4912
;  :arith-assert-lower      10086
;  :arith-assert-upper      8358
;  :arith-bound-prop        2351
;  :arith-conflicts         138
;  :arith-eq-adapter        5758
;  :arith-fixed-eqs         4540
;  :arith-offset-eqs        3201
;  :arith-pivots            3302
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 7944
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12294
;  :del-clause              36969
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1137
;  :mk-bool-var             44080
;  :mk-clause               37445
;  :num-allocs              17485143
;  :num-checks              525
;  :propagations            22703
;  :quant-instantiations    8986
;  :rlimit-count            1095230
;  :time                    0.01)
; [then-branch: 116 | !(First:(Second:(Second:(Second:($t@87@02))))[3] == 0 || First:(Second:(Second:(Second:($t@87@02))))[3] == -1) | live]
; [else-branch: 116 | First:(Second:(Second:(Second:($t@87@02))))[3] == 0 || First:(Second:(Second:(Second:($t@87@02))))[3] == -1 | live]
(push) ; 9
; [then-branch: 116 | !(First:(Second:(Second:(Second:($t@87@02))))[3] == 0 || First:(Second:(Second:(Second:($t@87@02))))[3] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        3)
      (- 0 1)))))
; [eval] diz.Main_event_state[3] == old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               67373
;  :arith-add-rows          18849
;  :arith-assert-diseq      4912
;  :arith-assert-lower      10086
;  :arith-assert-upper      8358
;  :arith-bound-prop        2351
;  :arith-conflicts         138
;  :arith-eq-adapter        5758
;  :arith-fixed-eqs         4540
;  :arith-offset-eqs        3201
;  :arith-pivots            3302
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 7944
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12294
;  :del-clause              36969
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1137
;  :mk-bool-var             44082
;  :mk-clause               37450
;  :num-allocs              17485143
;  :num-checks              526
;  :propagations            22704
;  :quant-instantiations    8987
;  :rlimit-count            1095415)
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               67373
;  :arith-add-rows          18849
;  :arith-assert-diseq      4912
;  :arith-assert-lower      10086
;  :arith-assert-upper      8358
;  :arith-bound-prop        2351
;  :arith-conflicts         138
;  :arith-eq-adapter        5758
;  :arith-fixed-eqs         4540
;  :arith-offset-eqs        3201
;  :arith-pivots            3302
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 7944
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12294
;  :del-clause              36969
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1137
;  :mk-bool-var             44082
;  :mk-clause               37450
;  :num-allocs              17485143
;  :num-checks              527
;  :propagations            22704
;  :quant-instantiations    8987
;  :rlimit-count            1095430)
(pop) ; 9
(push) ; 9
; [else-branch: 116 | First:(Second:(Second:(Second:($t@87@02))))[3] == 0 || First:(Second:(Second:(Second:($t@87@02))))[3] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          3)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          3)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      3)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      3))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1) ==> diz.Main_event_state[4] == old(diz.Main_event_state[4])
; [eval] !(old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1)
; [eval] old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1
; [eval] old(diz.Main_event_state[4]) == 0
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               67379
;  :arith-add-rows          18849
;  :arith-assert-diseq      4912
;  :arith-assert-lower      10086
;  :arith-assert-upper      8358
;  :arith-bound-prop        2351
;  :arith-conflicts         138
;  :arith-eq-adapter        5758
;  :arith-fixed-eqs         4540
;  :arith-offset-eqs        3201
;  :arith-pivots            3302
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7944
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12294
;  :del-clause              36974
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1137
;  :mk-bool-var             44085
;  :mk-clause               37451
;  :num-allocs              17485143
;  :num-checks              528
;  :propagations            22704
;  :quant-instantiations    8987
;  :rlimit-count            1095939)
(push) ; 8
; [then-branch: 117 | First:(Second:(Second:(Second:($t@87@02))))[4] == 0 | live]
; [else-branch: 117 | First:(Second:(Second:(Second:($t@87@02))))[4] != 0 | live]
(push) ; 9
; [then-branch: 117 | First:(Second:(Second:(Second:($t@87@02))))[4] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    4)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 117 | First:(Second:(Second:(Second:($t@87@02))))[4] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    0)))
; [eval] old(diz.Main_event_state[4]) == -1
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               67379
;  :arith-add-rows          18849
;  :arith-assert-diseq      4912
;  :arith-assert-lower      10086
;  :arith-assert-upper      8358
;  :arith-bound-prop        2351
;  :arith-conflicts         138
;  :arith-eq-adapter        5758
;  :arith-fixed-eqs         4540
;  :arith-offset-eqs        3201
;  :arith-pivots            3302
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7944
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12294
;  :del-clause              36974
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1137
;  :mk-bool-var             44087
;  :mk-clause               37456
;  :num-allocs              17485143
;  :num-checks              529
;  :propagations            22704
;  :quant-instantiations    8988
;  :rlimit-count            1096103)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               68556
;  :arith-add-rows          19407
;  :arith-assert-diseq      5048
;  :arith-assert-lower      10338
;  :arith-assert-upper      8568
;  :arith-bound-prop        2403
;  :arith-conflicts         144
;  :arith-eq-adapter        5903
;  :arith-fixed-eqs         4670
;  :arith-offset-eqs        3299
;  :arith-pivots            3394
;  :binary-propagations     22
;  :conflicts               978
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7952
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12442
;  :del-clause              38110
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1162
;  :mk-bool-var             45106
;  :mk-clause               38587
;  :num-allocs              17485143
;  :num-checks              530
;  :propagations            23407
;  :quant-instantiations    9265
;  :rlimit-count            1117440
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               70028
;  :arith-add-rows          20013
;  :arith-assert-diseq      5219
;  :arith-assert-lower      10652
;  :arith-assert-upper      8862
;  :arith-bound-prop        2477
;  :arith-conflicts         145
;  :arith-eq-adapter        6083
;  :arith-fixed-eqs         4830
;  :arith-offset-eqs        3428
;  :arith-pivots            3506
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7960
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12651
;  :del-clause              39451
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1212
;  :mk-bool-var             46390
;  :mk-clause               39928
;  :num-allocs              17485143
;  :num-checks              531
;  :propagations            24352
;  :quant-instantiations    9605
;  :rlimit-count            1142647
;  :time                    0.01)
; [then-branch: 118 | !(First:(Second:(Second:(Second:($t@87@02))))[4] == 0 || First:(Second:(Second:(Second:($t@87@02))))[4] == -1) | live]
; [else-branch: 118 | First:(Second:(Second:(Second:($t@87@02))))[4] == 0 || First:(Second:(Second:(Second:($t@87@02))))[4] == -1 | live]
(push) ; 9
; [then-branch: 118 | !(First:(Second:(Second:(Second:($t@87@02))))[4] == 0 || First:(Second:(Second:(Second:($t@87@02))))[4] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        4)
      (- 0 1)))))
; [eval] diz.Main_event_state[4] == old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               70028
;  :arith-add-rows          20014
;  :arith-assert-diseq      5219
;  :arith-assert-lower      10652
;  :arith-assert-upper      8862
;  :arith-bound-prop        2477
;  :arith-conflicts         145
;  :arith-eq-adapter        6083
;  :arith-fixed-eqs         4830
;  :arith-offset-eqs        3428
;  :arith-pivots            3506
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7960
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12651
;  :del-clause              39451
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1212
;  :mk-bool-var             46392
;  :mk-clause               39933
;  :num-allocs              17485143
;  :num-checks              532
;  :propagations            24353
;  :quant-instantiations    9606
;  :rlimit-count            1142833)
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               70028
;  :arith-add-rows          20014
;  :arith-assert-diseq      5219
;  :arith-assert-lower      10652
;  :arith-assert-upper      8862
;  :arith-bound-prop        2477
;  :arith-conflicts         145
;  :arith-eq-adapter        6083
;  :arith-fixed-eqs         4830
;  :arith-offset-eqs        3428
;  :arith-pivots            3506
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7960
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12651
;  :del-clause              39451
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1212
;  :mk-bool-var             46392
;  :mk-clause               39933
;  :num-allocs              17485143
;  :num-checks              533
;  :propagations            24353
;  :quant-instantiations    9606
;  :rlimit-count            1142848)
(pop) ; 9
(push) ; 9
; [else-branch: 118 | First:(Second:(Second:(Second:($t@87@02))))[4] == 0 || First:(Second:(Second:(Second:($t@87@02))))[4] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          4)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          4)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      4)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@90@02))))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1) ==> diz.Main_event_state[5] == old(diz.Main_event_state[5])
; [eval] !(old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1)
; [eval] old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1
; [eval] old(diz.Main_event_state[5]) == 0
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               70043
;  :arith-add-rows          20014
;  :arith-assert-diseq      5219
;  :arith-assert-lower      10652
;  :arith-assert-upper      8862
;  :arith-bound-prop        2477
;  :arith-conflicts         145
;  :arith-eq-adapter        6083
;  :arith-fixed-eqs         4830
;  :arith-offset-eqs        3428
;  :arith-pivots            3506
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7960
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12651
;  :del-clause              39456
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1212
;  :mk-bool-var             46394
;  :mk-clause               39934
;  :num-allocs              17485143
;  :num-checks              534
;  :propagations            24353
;  :quant-instantiations    9606
;  :rlimit-count            1143288)
(push) ; 8
; [then-branch: 119 | First:(Second:(Second:(Second:($t@87@02))))[5] == 0 | live]
; [else-branch: 119 | First:(Second:(Second:(Second:($t@87@02))))[5] != 0 | live]
(push) ; 9
; [then-branch: 119 | First:(Second:(Second:(Second:($t@87@02))))[5] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
    5)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 119 | First:(Second:(Second:(Second:($t@87@02))))[5] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    0)))
; [eval] old(diz.Main_event_state[5]) == -1
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               70044
;  :arith-add-rows          20015
;  :arith-assert-diseq      5219
;  :arith-assert-lower      10652
;  :arith-assert-upper      8862
;  :arith-bound-prop        2477
;  :arith-conflicts         145
;  :arith-eq-adapter        6083
;  :arith-fixed-eqs         4830
;  :arith-offset-eqs        3428
;  :arith-pivots            3506
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7960
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12651
;  :del-clause              39456
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1212
;  :mk-bool-var             46397
;  :mk-clause               39939
;  :num-allocs              17485143
;  :num-checks              535
;  :propagations            24353
;  :quant-instantiations    9607
;  :rlimit-count            1143457)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               71296
;  :arith-add-rows          20724
;  :arith-assert-diseq      5354
;  :arith-assert-lower      10923
;  :arith-assert-upper      9073
;  :arith-bound-prop        2588
;  :arith-conflicts         147
;  :arith-eq-adapter        6232
;  :arith-fixed-eqs         4992
;  :arith-offset-eqs        3573
;  :arith-pivots            3597
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 7968
;  :datatype-occurs-check   2149
;  :datatype-splits         5485
;  :decisions               12787
;  :del-clause              40571
;  :final-checks            569
;  :interface-eqs           222
;  :max-generation          11
;  :max-memory              6.21
;  :memory                  6.19
;  :minimized-lits          1231
;  :mk-bool-var             47440
;  :mk-clause               41049
;  :num-allocs              17485143
;  :num-checks              536
;  :propagations            25067
;  :quant-instantiations    9873
;  :rlimit-count            1168035
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               72508
;  :arith-add-rows          20949
;  :arith-assert-diseq      5435
;  :arith-assert-lower      11100
;  :arith-assert-upper      9209
;  :arith-bound-prop        2649
;  :arith-conflicts         148
;  :arith-eq-adapter        6318
;  :arith-fixed-eqs         5123
;  :arith-offset-eqs        3688
;  :arith-pivots            3642
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8074
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               12973
;  :del-clause              41183
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.30
;  :memory                  6.20
;  :minimized-lits          1237
;  :mk-bool-var             48022
;  :mk-clause               41661
;  :num-allocs              18341004
;  :num-checks              537
;  :propagations            25457
;  :quant-instantiations    9994
;  :rlimit-count            1180477
;  :time                    0.01)
; [then-branch: 120 | !(First:(Second:(Second:(Second:($t@87@02))))[5] == 0 || First:(Second:(Second:(Second:($t@87@02))))[5] == -1) | live]
; [else-branch: 120 | First:(Second:(Second:(Second:($t@87@02))))[5] == 0 || First:(Second:(Second:(Second:($t@87@02))))[5] == -1 | live]
(push) ; 9
; [then-branch: 120 | !(First:(Second:(Second:(Second:($t@87@02))))[5] == 0 || First:(Second:(Second:(Second:($t@87@02))))[5] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
        5)
      (- 0 1)))))
; [eval] diz.Main_event_state[5] == old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               72509
;  :arith-add-rows          20949
;  :arith-assert-diseq      5435
;  :arith-assert-lower      11100
;  :arith-assert-upper      9209
;  :arith-bound-prop        2649
;  :arith-conflicts         148
;  :arith-eq-adapter        6318
;  :arith-fixed-eqs         5123
;  :arith-offset-eqs        3688
;  :arith-pivots            3642
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8074
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               12973
;  :del-clause              41183
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.30
;  :memory                  6.20
;  :minimized-lits          1237
;  :mk-bool-var             48025
;  :mk-clause               41666
;  :num-allocs              18341004
;  :num-checks              538
;  :propagations            25458
;  :quant-instantiations    9995
;  :rlimit-count            1180666)
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               72509
;  :arith-add-rows          20949
;  :arith-assert-diseq      5435
;  :arith-assert-lower      11100
;  :arith-assert-upper      9209
;  :arith-bound-prop        2649
;  :arith-conflicts         148
;  :arith-eq-adapter        6318
;  :arith-fixed-eqs         5123
;  :arith-offset-eqs        3688
;  :arith-pivots            3642
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8074
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               12973
;  :del-clause              41183
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.30
;  :memory                  6.20
;  :minimized-lits          1237
;  :mk-bool-var             48025
;  :mk-clause               41666
;  :num-allocs              18341004
;  :num-checks              539
;  :propagations            25458
;  :quant-instantiations    9995
;  :rlimit-count            1180681)
(pop) ; 9
(push) ; 9
; [else-branch: 120 | First:(Second:(Second:(Second:($t@87@02))))[5] == 0 || First:(Second:(Second:(Second:($t@87@02))))[5] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          5)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
          5)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))
      5)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@02)))))
      5))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@92@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 121 | 0 <= i@92@02 | live]
; [else-branch: 121 | !(0 <= i@92@02) | live]
(push) ; 10
; [then-branch: 121 | 0 <= i@92@02]
(assert (<= 0 i@92@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 121 | !(0 <= i@92@02)]
(assert (not (<= 0 i@92@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 122 | i@92@02 < |First:(Second:($t@90@02))| && 0 <= i@92@02 | live]
; [else-branch: 122 | !(i@92@02 < |First:(Second:($t@90@02))| && 0 <= i@92@02) | live]
(push) ; 10
; [then-branch: 122 | i@92@02 < |First:(Second:($t@90@02))| && 0 <= i@92@02]
(assert (and
  (<
    i@92@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))))
  (<= 0 i@92@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@92@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78920
;  :arith-add-rows          24631
;  :arith-assert-diseq      6025
;  :arith-assert-lower      12409
;  :arith-assert-upper      10244
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7079
;  :arith-fixed-eqs         6058
;  :arith-offset-eqs        4568
;  :arith-pivots            4066
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45842
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53027
;  :mk-clause               46947
;  :num-allocs              19222286
;  :num-checks              541
;  :propagations            29211
;  :quant-instantiations    11225
;  :rlimit-count            1292827)
; [eval] -1
(push) ; 11
; [then-branch: 123 | First:(Second:($t@90@02))[i@92@02] == -1 | live]
; [else-branch: 123 | First:(Second:($t@90@02))[i@92@02] != -1 | live]
(push) ; 12
; [then-branch: 123 | First:(Second:($t@90@02))[i@92@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
    i@92@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 123 | First:(Second:($t@90@02))[i@92@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
      i@92@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@92@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6027
;  :arith-assert-lower      12416
;  :arith-assert-upper      10247
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7082
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4067
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45842
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53042
;  :mk-clause               46958
;  :num-allocs              19222286
;  :num-checks              542
;  :propagations            29216
;  :quant-instantiations    11228
;  :rlimit-count            1293133)
(push) ; 13
; [then-branch: 124 | 0 <= First:(Second:($t@90@02))[i@92@02] | live]
; [else-branch: 124 | !(0 <= First:(Second:($t@90@02))[i@92@02]) | live]
(push) ; 14
; [then-branch: 124 | 0 <= First:(Second:($t@90@02))[i@92@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
    i@92@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@92@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6027
;  :arith-assert-lower      12416
;  :arith-assert-upper      10247
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7082
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4067
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45842
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53042
;  :mk-clause               46958
;  :num-allocs              19222286
;  :num-checks              543
;  :propagations            29216
;  :quant-instantiations    11228
;  :rlimit-count            1293227)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 124 | !(0 <= First:(Second:($t@90@02))[i@92@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
      i@92@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 122 | !(i@92@02 < |First:(Second:($t@90@02))| && 0 <= i@92@02)]
(assert (not
  (and
    (<
      i@92@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))))
    (<= 0 i@92@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@92@02 Int)) (!
  (implies
    (and
      (<
        i@92@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))))
      (<= 0 i@92@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
          i@92@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
            i@92@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
            i@92@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
    i@92@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6029
;  :arith-assert-lower      12417
;  :arith-assert-upper      10248
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7084
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4068
;  :binary-propagations     22
;  :conflicts               1112
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53056
;  :mk-clause               46985
;  :num-allocs              19222286
;  :num-checks              544
;  :propagations            29218
;  :quant-instantiations    11231
;  :rlimit-count            1293718)
(assert (forall ((i@92@02 Int)) (!
  (implies
    (and
      (<
        i@92@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))))
      (<= 0 i@92@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
          i@92@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
            i@92@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
            i@92@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@90@02)))
    i@92@02))
  :qid |prog.l<no position>|)))
(declare-const $k@93@02 $Perm)
(assert ($Perm.isReadVar $k@93@02 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@93@02 $Perm.No) (< $Perm.No $k@93@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12419
;  :arith-assert-upper      10249
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4068
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53061
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              545
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294243)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@72@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12419
;  :arith-assert-upper      10249
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4068
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53061
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              546
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294254)
(assert (< $k@93@02 $k@72@02))
(assert (<= $Perm.No (- $k@72@02 $k@93@02)))
(assert (<= (- $k@72@02 $k@93@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@72@02 $k@93@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1114
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              547
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294468)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1115
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              548
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294516)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1116
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              549
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294564)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1117
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              550
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294612)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1118
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              551
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294660)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1119
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              552
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294708)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1120
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              553
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294756)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1121
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              554
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294804)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1122
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              555
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294852)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6030
;  :arith-assert-lower      12421
;  :arith-assert-upper      10250
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7085
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1123
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53064
;  :mk-clause               46987
;  :num-allocs              19222286
;  :num-checks              556
;  :propagations            29219
;  :quant-instantiations    11231
;  :rlimit-count            1294900)
(declare-const $k@94@02 $Perm)
(assert ($Perm.isReadVar $k@94@02 $Perm.Write))
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6031
;  :arith-assert-lower      12423
;  :arith-assert-upper      10251
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7086
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1124
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53068
;  :mk-clause               46989
;  :num-allocs              19222286
;  :num-checks              557
;  :propagations            29220
;  :quant-instantiations    11231
;  :rlimit-count            1295096)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@94@02 $Perm.No) (< $Perm.No $k@94@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6031
;  :arith-assert-lower      12423
;  :arith-assert-upper      10251
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7086
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53068
;  :mk-clause               46989
;  :num-allocs              19222286
;  :num-checks              558
;  :propagations            29220
;  :quant-instantiations    11231
;  :rlimit-count            1295146)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@73@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6031
;  :arith-assert-lower      12423
;  :arith-assert-upper      10251
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7086
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4069
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53068
;  :mk-clause               46989
;  :num-allocs              19222286
;  :num-checks              559
;  :propagations            29220
;  :quant-instantiations    11231
;  :rlimit-count            1295157)
(assert (< $k@94@02 $k@73@02))
(assert (<= $Perm.No (- $k@73@02 $k@94@02)))
(assert (<= (- $k@73@02 $k@94@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@73@02 $k@94@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6031
;  :arith-assert-lower      12425
;  :arith-assert-upper      10252
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7086
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4071
;  :binary-propagations     22
;  :conflicts               1126
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53071
;  :mk-clause               46989
;  :num-allocs              19222286
;  :num-checks              560
;  :propagations            29220
;  :quant-instantiations    11231
;  :rlimit-count            1295377)
(push) ; 8
(assert (not (< $Perm.No $k@73@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6031
;  :arith-assert-lower      12425
;  :arith-assert-upper      10252
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7086
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4071
;  :binary-propagations     22
;  :conflicts               1127
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53071
;  :mk-clause               46989
;  :num-allocs              19222286
;  :num-checks              561
;  :propagations            29220
;  :quant-instantiations    11231
;  :rlimit-count            1295425)
(declare-const $k@95@02 $Perm)
(assert ($Perm.isReadVar $k@95@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@95@02 $Perm.No) (< $Perm.No $k@95@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6032
;  :arith-assert-lower      12427
;  :arith-assert-upper      10253
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7087
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4071
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53075
;  :mk-clause               46991
;  :num-allocs              19222286
;  :num-checks              562
;  :propagations            29221
;  :quant-instantiations    11231
;  :rlimit-count            1295623)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@74@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6032
;  :arith-assert-lower      12427
;  :arith-assert-upper      10253
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7087
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4071
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53075
;  :mk-clause               46991
;  :num-allocs              19222286
;  :num-checks              563
;  :propagations            29221
;  :quant-instantiations    11231
;  :rlimit-count            1295634)
(assert (< $k@95@02 $k@74@02))
(assert (<= $Perm.No (- $k@74@02 $k@95@02)))
(assert (<= (- $k@74@02 $k@95@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@74@02 $k@95@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 8
(assert (not (< $Perm.No $k@74@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6032
;  :arith-assert-lower      12429
;  :arith-assert-upper      10254
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7087
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4073
;  :binary-propagations     22
;  :conflicts               1129
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53078
;  :mk-clause               46991
;  :num-allocs              19222286
;  :num-checks              564
;  :propagations            29221
;  :quant-instantiations    11231
;  :rlimit-count            1295854)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6032
;  :arith-assert-lower      12429
;  :arith-assert-upper      10254
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7087
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4073
;  :binary-propagations     22
;  :conflicts               1129
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53078
;  :mk-clause               46991
;  :num-allocs              19222286
;  :num-checks              565
;  :propagations            29221
;  :quant-instantiations    11231
;  :rlimit-count            1295867)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@74@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6032
;  :arith-assert-lower      12429
;  :arith-assert-upper      10254
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7087
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4073
;  :binary-propagations     22
;  :conflicts               1130
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53078
;  :mk-clause               46991
;  :num-allocs              19222286
;  :num-checks              566
;  :propagations            29221
;  :quant-instantiations    11231
;  :rlimit-count            1295915)
(declare-const $k@96@02 $Perm)
(assert ($Perm.isReadVar $k@96@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@96@02 $Perm.No) (< $Perm.No $k@96@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6033
;  :arith-assert-lower      12431
;  :arith-assert-upper      10255
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7088
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4073
;  :binary-propagations     22
;  :conflicts               1131
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53082
;  :mk-clause               46993
;  :num-allocs              19222286
;  :num-checks              567
;  :propagations            29222
;  :quant-instantiations    11231
;  :rlimit-count            1296113)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@75@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6033
;  :arith-assert-lower      12431
;  :arith-assert-upper      10255
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7088
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4073
;  :binary-propagations     22
;  :conflicts               1131
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53082
;  :mk-clause               46993
;  :num-allocs              19222286
;  :num-checks              568
;  :propagations            29222
;  :quant-instantiations    11231
;  :rlimit-count            1296124)
(assert (< $k@96@02 $k@75@02))
(assert (<= $Perm.No (- $k@75@02 $k@96@02)))
(assert (<= (- $k@75@02 $k@96@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@75@02 $k@96@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 8
(assert (not (< $Perm.No $k@75@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6033
;  :arith-assert-lower      12433
;  :arith-assert-upper      10256
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7088
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4074
;  :binary-propagations     22
;  :conflicts               1132
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53085
;  :mk-clause               46993
;  :num-allocs              19222286
;  :num-checks              569
;  :propagations            29222
;  :quant-instantiations    11231
;  :rlimit-count            1296338)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6033
;  :arith-assert-lower      12433
;  :arith-assert-upper      10256
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7088
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4074
;  :binary-propagations     22
;  :conflicts               1132
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53085
;  :mk-clause               46993
;  :num-allocs              19222286
;  :num-checks              570
;  :propagations            29222
;  :quant-instantiations    11231
;  :rlimit-count            1296351)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@75@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6033
;  :arith-assert-lower      12433
;  :arith-assert-upper      10256
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7088
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4074
;  :binary-propagations     22
;  :conflicts               1133
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53085
;  :mk-clause               46993
;  :num-allocs              19222286
;  :num-checks              571
;  :propagations            29222
;  :quant-instantiations    11231
;  :rlimit-count            1296399)
(declare-const $k@97@02 $Perm)
(assert ($Perm.isReadVar $k@97@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@97@02 $Perm.No) (< $Perm.No $k@97@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6034
;  :arith-assert-lower      12435
;  :arith-assert-upper      10257
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7089
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4074
;  :binary-propagations     22
;  :conflicts               1134
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53089
;  :mk-clause               46995
;  :num-allocs              19222286
;  :num-checks              572
;  :propagations            29223
;  :quant-instantiations    11231
;  :rlimit-count            1296597)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@76@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6034
;  :arith-assert-lower      12435
;  :arith-assert-upper      10257
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7089
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4074
;  :binary-propagations     22
;  :conflicts               1134
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53089
;  :mk-clause               46995
;  :num-allocs              19222286
;  :num-checks              573
;  :propagations            29223
;  :quant-instantiations    11231
;  :rlimit-count            1296608)
(assert (< $k@97@02 $k@76@02))
(assert (<= $Perm.No (- $k@76@02 $k@97@02)))
(assert (<= (- $k@76@02 $k@97@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@76@02 $k@97@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 8
(assert (not (< $Perm.No $k@76@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6034
;  :arith-assert-lower      12437
;  :arith-assert-upper      10258
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7089
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4075
;  :binary-propagations     22
;  :conflicts               1135
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53092
;  :mk-clause               46995
;  :num-allocs              19222286
;  :num-checks              574
;  :propagations            29223
;  :quant-instantiations    11231
;  :rlimit-count            1296822)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6034
;  :arith-assert-lower      12437
;  :arith-assert-upper      10258
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7089
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4075
;  :binary-propagations     22
;  :conflicts               1135
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53092
;  :mk-clause               46995
;  :num-allocs              19222286
;  :num-checks              575
;  :propagations            29223
;  :quant-instantiations    11231
;  :rlimit-count            1296835)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@76@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               78924
;  :arith-add-rows          24631
;  :arith-assert-diseq      6034
;  :arith-assert-lower      12437
;  :arith-assert-upper      10258
;  :arith-bound-prop        3124
;  :arith-conflicts         159
;  :arith-eq-adapter        7089
;  :arith-fixed-eqs         6059
;  :arith-offset-eqs        4568
;  :arith-pivots            4075
;  :binary-propagations     22
;  :conflicts               1136
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 8114
;  :datatype-occurs-check   2194
;  :datatype-splits         5540
;  :decisions               13529
;  :del-clause              45880
;  :final-checks            579
;  :interface-eqs           228
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.51
;  :minimized-lits          1388
;  :mk-bool-var             53092
;  :mk-clause               46995
;  :num-allocs              19222286
;  :num-checks              576
;  :propagations            29223
;  :quant-instantiations    11231
;  :rlimit-count            1296883)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@90@02))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@90@02))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) diz@31@02 globals@32@02))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 7
(push) ; 7
; [else-branch: 56 | min_advance__107@84@02 != -1]
(assert (not (= min_advance__107@84@02 (- 0 1))))
(pop) ; 7
; [eval] !(min_advance__107 == -1)
; [eval] min_advance__107 == -1
; [eval] -1
(push) ; 7
(assert (not (= min_advance__107@84@02 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79179
;  :arith-add-rows          24633
;  :arith-assert-diseq      6075
;  :arith-assert-lower      12489
;  :arith-assert-upper      10293
;  :arith-bound-prop        3133
;  :arith-conflicts         160
;  :arith-eq-adapter        7114
;  :arith-fixed-eqs         6066
;  :arith-offset-eqs        4568
;  :arith-pivots            4093
;  :binary-propagations     22
;  :conflicts               1139
;  :datatype-accessor-ax    808
;  :datatype-constructor-ax 8162
;  :datatype-occurs-check   2210
;  :datatype-splits         5580
;  :decisions               13598
;  :del-clause              46898
;  :final-checks            585
;  :interface-eqs           231
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53218
;  :mk-clause               47114
;  :num-allocs              19672829
;  :num-checks              577
;  :propagations            29319
;  :quant-instantiations    11243
;  :rlimit-count            1299682
;  :time                    0.00)
(push) ; 7
(assert (not (not (= min_advance__107@84@02 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79430
;  :arith-add-rows          24633
;  :arith-assert-diseq      6113
;  :arith-assert-lower      12538
;  :arith-assert-upper      10326
;  :arith-bound-prop        3137
;  :arith-conflicts         161
;  :arith-eq-adapter        7139
;  :arith-fixed-eqs         6073
;  :arith-offset-eqs        4568
;  :arith-pivots            4101
;  :binary-propagations     22
;  :conflicts               1142
;  :datatype-accessor-ax    811
;  :datatype-constructor-ax 8210
;  :datatype-occurs-check   2226
;  :datatype-splits         5620
;  :decisions               13668
;  :del-clause              47005
;  :final-checks            591
;  :interface-eqs           234
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53341
;  :mk-clause               47221
;  :num-allocs              19672829
;  :num-checks              578
;  :propagations            29408
;  :quant-instantiations    11255
;  :rlimit-count            1302169
;  :time                    0.00)
; [then-branch: 125 | min_advance__107@84@02 != -1 | live]
; [else-branch: 125 | min_advance__107@84@02 == -1 | live]
(push) ; 7
; [then-branch: 125 | min_advance__107@84@02 != -1]
(assert (not (= min_advance__107@84@02 (- 0 1))))
; [exec]
; __flatten_100__106 := Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__107), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__107), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__107), (diz.Main_event_state[3] < -1 ? -3 : diz.Main_event_state[3] - min_advance__107), (diz.Main_event_state[4] < -1 ? -3 : diz.Main_event_state[4] - min_advance__107), (diz.Main_event_state[5] < -1 ? -3 : diz.Main_event_state[5] - min_advance__107))
; [eval] Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__107), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__107), (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__107), (diz.Main_event_state[3] < -1 ? -3 : diz.Main_event_state[3] - min_advance__107), (diz.Main_event_state[4] < -1 ? -3 : diz.Main_event_state[4] - min_advance__107), (diz.Main_event_state[5] < -1 ? -3 : diz.Main_event_state[5] - min_advance__107))
; [eval] (diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__107)
; [eval] diz.Main_event_state[0] < -1
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79431
;  :arith-add-rows          24633
;  :arith-assert-diseq      6115
;  :arith-assert-lower      12538
;  :arith-assert-upper      10326
;  :arith-bound-prop        3137
;  :arith-conflicts         161
;  :arith-eq-adapter        7140
;  :arith-fixed-eqs         6073
;  :arith-offset-eqs        4568
;  :arith-pivots            4101
;  :binary-propagations     22
;  :conflicts               1142
;  :datatype-accessor-ax    811
;  :datatype-constructor-ax 8210
;  :datatype-occurs-check   2226
;  :datatype-splits         5620
;  :decisions               13668
;  :del-clause              47005
;  :final-checks            591
;  :interface-eqs           234
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53345
;  :mk-clause               47230
;  :num-allocs              19672829
;  :num-checks              579
;  :propagations            29408
;  :quant-instantiations    11255
;  :rlimit-count            1302259)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79685
;  :arith-add-rows          24633
;  :arith-assert-diseq      6154
;  :arith-assert-lower      12585
;  :arith-assert-upper      10363
;  :arith-bound-prop        3145
;  :arith-conflicts         162
;  :arith-eq-adapter        7164
;  :arith-fixed-eqs         6080
;  :arith-offset-eqs        4568
;  :arith-pivots            4108
;  :binary-propagations     22
;  :conflicts               1145
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 8258
;  :datatype-occurs-check   2242
;  :datatype-splits         5660
;  :decisions               13735
;  :del-clause              47105
;  :final-checks            597
;  :interface-eqs           237
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53466
;  :mk-clause               47330
;  :num-allocs              19672829
;  :num-checks              580
;  :propagations            29499
;  :quant-instantiations    11267
;  :rlimit-count            1304816
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79933
;  :arith-add-rows          24648
;  :arith-assert-diseq      6187
;  :arith-assert-lower      12631
;  :arith-assert-upper      10391
;  :arith-bound-prop        3150
;  :arith-conflicts         162
;  :arith-eq-adapter        7187
;  :arith-fixed-eqs         6088
;  :arith-offset-eqs        4568
;  :arith-pivots            4119
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 8306
;  :datatype-occurs-check   2258
;  :datatype-splits         5700
;  :decisions               13802
;  :del-clause              47203
;  :final-checks            603
;  :interface-eqs           240
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53581
;  :mk-clause               47428
;  :num-allocs              19672829
;  :num-checks              581
;  :propagations            29581
;  :quant-instantiations    11279
;  :rlimit-count            1307519
;  :time                    0.00)
; [then-branch: 126 | First:(Second:(Second:(Second:($t@82@02))))[0] < -1 | live]
; [else-branch: 126 | !(First:(Second:(Second:(Second:($t@82@02))))[0] < -1) | live]
(push) ; 9
; [then-branch: 126 | First:(Second:(Second:(Second:($t@82@02))))[0] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    0)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 126 | !(First:(Second:(Second:(Second:($t@82@02))))[0] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] - min_advance__107
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79933
;  :arith-add-rows          24648
;  :arith-assert-diseq      6187
;  :arith-assert-lower      12633
;  :arith-assert-upper      10391
;  :arith-bound-prop        3150
;  :arith-conflicts         162
;  :arith-eq-adapter        7187
;  :arith-fixed-eqs         6088
;  :arith-offset-eqs        4568
;  :arith-pivots            4119
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 8306
;  :datatype-occurs-check   2258
;  :datatype-splits         5700
;  :decisions               13802
;  :del-clause              47203
;  :final-checks            603
;  :interface-eqs           240
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53581
;  :mk-clause               47428
;  :num-allocs              19672829
;  :num-checks              582
;  :propagations            29583
;  :quant-instantiations    11279
;  :rlimit-count            1307682)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__107)
; [eval] diz.Main_event_state[1] < -1
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               79933
;  :arith-add-rows          24648
;  :arith-assert-diseq      6187
;  :arith-assert-lower      12633
;  :arith-assert-upper      10391
;  :arith-bound-prop        3150
;  :arith-conflicts         162
;  :arith-eq-adapter        7187
;  :arith-fixed-eqs         6088
;  :arith-offset-eqs        4568
;  :arith-pivots            4119
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 8306
;  :datatype-occurs-check   2258
;  :datatype-splits         5700
;  :decisions               13802
;  :del-clause              47203
;  :final-checks            603
;  :interface-eqs           240
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53581
;  :mk-clause               47428
;  :num-allocs              19672829
;  :num-checks              583
;  :propagations            29583
;  :quant-instantiations    11279
;  :rlimit-count            1307697)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80187
;  :arith-add-rows          24648
;  :arith-assert-diseq      6226
;  :arith-assert-lower      12681
;  :arith-assert-upper      10428
;  :arith-bound-prop        3158
;  :arith-conflicts         163
;  :arith-eq-adapter        7211
;  :arith-fixed-eqs         6095
;  :arith-offset-eqs        4568
;  :arith-pivots            4127
;  :binary-propagations     22
;  :conflicts               1150
;  :datatype-accessor-ax    820
;  :datatype-constructor-ax 8354
;  :datatype-occurs-check   2274
;  :datatype-splits         5740
;  :decisions               13869
;  :del-clause              47305
;  :final-checks            609
;  :interface-eqs           243
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53703
;  :mk-clause               47530
;  :num-allocs              19672829
;  :num-checks              584
;  :propagations            29675
;  :quant-instantiations    11291
;  :rlimit-count            1310247
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80433
;  :arith-add-rows          24658
;  :arith-assert-diseq      6260
;  :arith-assert-lower      12728
;  :arith-assert-upper      10456
;  :arith-bound-prop        3163
;  :arith-conflicts         163
;  :arith-eq-adapter        7234
;  :arith-fixed-eqs         6102
;  :arith-offset-eqs        4568
;  :arith-pivots            4136
;  :binary-propagations     22
;  :conflicts               1152
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 8402
;  :datatype-occurs-check   2290
;  :datatype-splits         5780
;  :decisions               13936
;  :del-clause              47403
;  :final-checks            615
;  :interface-eqs           246
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53819
;  :mk-clause               47628
;  :num-allocs              19672829
;  :num-checks              585
;  :propagations            29757
;  :quant-instantiations    11303
;  :rlimit-count            1312870
;  :time                    0.00)
; [then-branch: 127 | First:(Second:(Second:(Second:($t@82@02))))[1] < -1 | live]
; [else-branch: 127 | !(First:(Second:(Second:(Second:($t@82@02))))[1] < -1) | live]
(push) ; 9
; [then-branch: 127 | First:(Second:(Second:(Second:($t@82@02))))[1] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    1)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 127 | !(First:(Second:(Second:(Second:($t@82@02))))[1] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] - min_advance__107
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80433
;  :arith-add-rows          24658
;  :arith-assert-diseq      6260
;  :arith-assert-lower      12730
;  :arith-assert-upper      10456
;  :arith-bound-prop        3163
;  :arith-conflicts         163
;  :arith-eq-adapter        7234
;  :arith-fixed-eqs         6102
;  :arith-offset-eqs        4568
;  :arith-pivots            4136
;  :binary-propagations     22
;  :conflicts               1152
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 8402
;  :datatype-occurs-check   2290
;  :datatype-splits         5780
;  :decisions               13936
;  :del-clause              47403
;  :final-checks            615
;  :interface-eqs           246
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53819
;  :mk-clause               47628
;  :num-allocs              19672829
;  :num-checks              586
;  :propagations            29759
;  :quant-instantiations    11303
;  :rlimit-count            1313033)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[2] < -1 ? -3 : diz.Main_event_state[2] - min_advance__107)
; [eval] diz.Main_event_state[2] < -1
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80433
;  :arith-add-rows          24658
;  :arith-assert-diseq      6260
;  :arith-assert-lower      12730
;  :arith-assert-upper      10456
;  :arith-bound-prop        3163
;  :arith-conflicts         163
;  :arith-eq-adapter        7234
;  :arith-fixed-eqs         6102
;  :arith-offset-eqs        4568
;  :arith-pivots            4136
;  :binary-propagations     22
;  :conflicts               1152
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 8402
;  :datatype-occurs-check   2290
;  :datatype-splits         5780
;  :decisions               13936
;  :del-clause              47403
;  :final-checks            615
;  :interface-eqs           246
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53819
;  :mk-clause               47628
;  :num-allocs              19672829
;  :num-checks              587
;  :propagations            29759
;  :quant-instantiations    11303
;  :rlimit-count            1313048)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80689
;  :arith-add-rows          24664
;  :arith-assert-diseq      6299
;  :arith-assert-lower      12782
;  :arith-assert-upper      10491
;  :arith-bound-prop        3174
;  :arith-conflicts         164
;  :arith-eq-adapter        7258
;  :arith-fixed-eqs         6110
;  :arith-offset-eqs        4568
;  :arith-pivots            4145
;  :binary-propagations     22
;  :conflicts               1155
;  :datatype-accessor-ax    826
;  :datatype-constructor-ax 8450
;  :datatype-occurs-check   2306
;  :datatype-splits         5820
;  :decisions               14003
;  :del-clause              47510
;  :final-checks            621
;  :interface-eqs           249
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             53943
;  :mk-clause               47735
;  :num-allocs              19672829
;  :num-checks              588
;  :propagations            29852
;  :quant-instantiations    11315
;  :rlimit-count            1315691
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    2)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80935
;  :arith-add-rows          24674
;  :arith-assert-diseq      6334
;  :arith-assert-lower      12829
;  :arith-assert-upper      10516
;  :arith-bound-prop        3181
;  :arith-conflicts         164
;  :arith-eq-adapter        7281
;  :arith-fixed-eqs         6117
;  :arith-offset-eqs        4568
;  :arith-pivots            4154
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 8498
;  :datatype-occurs-check   2322
;  :datatype-splits         5860
;  :decisions               14070
;  :del-clause              47608
;  :final-checks            627
;  :interface-eqs           252
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54058
;  :mk-clause               47833
;  :num-allocs              19672829
;  :num-checks              589
;  :propagations            29931
;  :quant-instantiations    11327
;  :rlimit-count            1318307
;  :time                    0.00)
; [then-branch: 128 | First:(Second:(Second:(Second:($t@82@02))))[2] < -1 | live]
; [else-branch: 128 | !(First:(Second:(Second:(Second:($t@82@02))))[2] < -1) | live]
(push) ; 9
; [then-branch: 128 | First:(Second:(Second:(Second:($t@82@02))))[2] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    2)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 128 | !(First:(Second:(Second:(Second:($t@82@02))))[2] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] - min_advance__107
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80935
;  :arith-add-rows          24674
;  :arith-assert-diseq      6334
;  :arith-assert-lower      12830
;  :arith-assert-upper      10517
;  :arith-bound-prop        3181
;  :arith-conflicts         164
;  :arith-eq-adapter        7281
;  :arith-fixed-eqs         6117
;  :arith-offset-eqs        4568
;  :arith-pivots            4154
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 8498
;  :datatype-occurs-check   2322
;  :datatype-splits         5860
;  :decisions               14070
;  :del-clause              47608
;  :final-checks            627
;  :interface-eqs           252
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54058
;  :mk-clause               47833
;  :num-allocs              19672829
;  :num-checks              590
;  :propagations            29933
;  :quant-instantiations    11327
;  :rlimit-count            1318470)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[3] < -1 ? -3 : diz.Main_event_state[3] - min_advance__107)
; [eval] diz.Main_event_state[3] < -1
; [eval] diz.Main_event_state[3]
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               80935
;  :arith-add-rows          24674
;  :arith-assert-diseq      6334
;  :arith-assert-lower      12830
;  :arith-assert-upper      10517
;  :arith-bound-prop        3181
;  :arith-conflicts         164
;  :arith-eq-adapter        7281
;  :arith-fixed-eqs         6117
;  :arith-offset-eqs        4568
;  :arith-pivots            4154
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 8498
;  :datatype-occurs-check   2322
;  :datatype-splits         5860
;  :decisions               14070
;  :del-clause              47608
;  :final-checks            627
;  :interface-eqs           252
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54058
;  :mk-clause               47833
;  :num-allocs              19672829
;  :num-checks              591
;  :propagations            29933
;  :quant-instantiations    11327
;  :rlimit-count            1318485)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      3)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81189
;  :arith-add-rows          24684
;  :arith-assert-diseq      6373
;  :arith-assert-lower      12881
;  :arith-assert-upper      10552
;  :arith-bound-prop        3192
;  :arith-conflicts         165
;  :arith-eq-adapter        7305
;  :arith-fixed-eqs         6124
;  :arith-offset-eqs        4568
;  :arith-pivots            4163
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    832
;  :datatype-constructor-ax 8546
;  :datatype-occurs-check   2338
;  :datatype-splits         5900
;  :decisions               14137
;  :del-clause              47713
;  :final-checks            633
;  :interface-eqs           255
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54181
;  :mk-clause               47938
;  :num-allocs              19672829
;  :num-checks              592
;  :propagations            30025
;  :quant-instantiations    11339
;  :rlimit-count            1321190
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    3)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81438
;  :arith-add-rows          24706
;  :arith-assert-diseq      6408
;  :arith-assert-lower      12930
;  :arith-assert-upper      10577
;  :arith-bound-prop        3199
;  :arith-conflicts         165
;  :arith-eq-adapter        7328
;  :arith-fixed-eqs         6133
;  :arith-offset-eqs        4568
;  :arith-pivots            4176
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    835
;  :datatype-constructor-ax 8594
;  :datatype-occurs-check   2354
;  :datatype-splits         5940
;  :decisions               14204
;  :del-clause              47815
;  :final-checks            639
;  :interface-eqs           258
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54298
;  :mk-clause               48040
;  :num-allocs              19672829
;  :num-checks              593
;  :propagations            30106
;  :quant-instantiations    11351
;  :rlimit-count            1324001
;  :time                    0.00)
; [then-branch: 129 | First:(Second:(Second:(Second:($t@82@02))))[3] < -1 | live]
; [else-branch: 129 | !(First:(Second:(Second:(Second:($t@82@02))))[3] < -1) | live]
(push) ; 9
; [then-branch: 129 | First:(Second:(Second:(Second:($t@82@02))))[3] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    3)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 129 | !(First:(Second:(Second:(Second:($t@82@02))))[3] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      3)
    (- 0 1))))
; [eval] diz.Main_event_state[3] - min_advance__107
; [eval] diz.Main_event_state[3]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81438
;  :arith-add-rows          24706
;  :arith-assert-diseq      6408
;  :arith-assert-lower      12931
;  :arith-assert-upper      10578
;  :arith-bound-prop        3199
;  :arith-conflicts         165
;  :arith-eq-adapter        7328
;  :arith-fixed-eqs         6133
;  :arith-offset-eqs        4568
;  :arith-pivots            4176
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    835
;  :datatype-constructor-ax 8594
;  :datatype-occurs-check   2354
;  :datatype-splits         5940
;  :decisions               14204
;  :del-clause              47815
;  :final-checks            639
;  :interface-eqs           258
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54298
;  :mk-clause               48040
;  :num-allocs              19672829
;  :num-checks              594
;  :propagations            30108
;  :quant-instantiations    11351
;  :rlimit-count            1324164)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[4] < -1 ? -3 : diz.Main_event_state[4] - min_advance__107)
; [eval] diz.Main_event_state[4] < -1
; [eval] diz.Main_event_state[4]
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81438
;  :arith-add-rows          24706
;  :arith-assert-diseq      6408
;  :arith-assert-lower      12931
;  :arith-assert-upper      10578
;  :arith-bound-prop        3199
;  :arith-conflicts         165
;  :arith-eq-adapter        7328
;  :arith-fixed-eqs         6133
;  :arith-offset-eqs        4568
;  :arith-pivots            4176
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    835
;  :datatype-constructor-ax 8594
;  :datatype-occurs-check   2354
;  :datatype-splits         5940
;  :decisions               14204
;  :del-clause              47815
;  :final-checks            639
;  :interface-eqs           258
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54298
;  :mk-clause               48040
;  :num-allocs              19672829
;  :num-checks              595
;  :propagations            30108
;  :quant-instantiations    11351
;  :rlimit-count            1324179)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      4)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81696
;  :arith-add-rows          24712
;  :arith-assert-diseq      6450
;  :arith-assert-lower      12982
;  :arith-assert-upper      10615
;  :arith-bound-prop        3210
;  :arith-conflicts         166
;  :arith-eq-adapter        7353
;  :arith-fixed-eqs         6141
;  :arith-offset-eqs        4568
;  :arith-pivots            4186
;  :binary-propagations     22
;  :conflicts               1165
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 8642
;  :datatype-occurs-check   2370
;  :datatype-splits         5980
;  :decisions               14272
;  :del-clause              47920
;  :final-checks            645
;  :interface-eqs           261
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54422
;  :mk-clause               48145
;  :num-allocs              19672829
;  :num-checks              596
;  :propagations            30201
;  :quant-instantiations    11363
;  :rlimit-count            1326853
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    4)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81942
;  :arith-add-rows          24722
;  :arith-assert-diseq      6485
;  :arith-assert-lower      13029
;  :arith-assert-upper      10640
;  :arith-bound-prop        3217
;  :arith-conflicts         166
;  :arith-eq-adapter        7376
;  :arith-fixed-eqs         6148
;  :arith-offset-eqs        4568
;  :arith-pivots            4195
;  :binary-propagations     22
;  :conflicts               1167
;  :datatype-accessor-ax    841
;  :datatype-constructor-ax 8690
;  :datatype-occurs-check   2386
;  :datatype-splits         6020
;  :decisions               14339
;  :del-clause              48018
;  :final-checks            651
;  :interface-eqs           264
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54537
;  :mk-clause               48243
;  :num-allocs              19672829
;  :num-checks              597
;  :propagations            30280
;  :quant-instantiations    11375
;  :rlimit-count            1329475
;  :time                    0.00)
; [then-branch: 130 | First:(Second:(Second:(Second:($t@82@02))))[4] < -1 | live]
; [else-branch: 130 | !(First:(Second:(Second:(Second:($t@82@02))))[4] < -1) | live]
(push) ; 9
; [then-branch: 130 | First:(Second:(Second:(Second:($t@82@02))))[4] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    4)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 130 | !(First:(Second:(Second:(Second:($t@82@02))))[4] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      4)
    (- 0 1))))
; [eval] diz.Main_event_state[4] - min_advance__107
; [eval] diz.Main_event_state[4]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81942
;  :arith-add-rows          24722
;  :arith-assert-diseq      6485
;  :arith-assert-lower      13030
;  :arith-assert-upper      10641
;  :arith-bound-prop        3217
;  :arith-conflicts         166
;  :arith-eq-adapter        7376
;  :arith-fixed-eqs         6148
;  :arith-offset-eqs        4568
;  :arith-pivots            4195
;  :binary-propagations     22
;  :conflicts               1167
;  :datatype-accessor-ax    841
;  :datatype-constructor-ax 8690
;  :datatype-occurs-check   2386
;  :datatype-splits         6020
;  :decisions               14339
;  :del-clause              48018
;  :final-checks            651
;  :interface-eqs           264
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54537
;  :mk-clause               48243
;  :num-allocs              19672829
;  :num-checks              598
;  :propagations            30282
;  :quant-instantiations    11375
;  :rlimit-count            1329638)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[5] < -1 ? -3 : diz.Main_event_state[5] - min_advance__107)
; [eval] diz.Main_event_state[5] < -1
; [eval] diz.Main_event_state[5]
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               81942
;  :arith-add-rows          24722
;  :arith-assert-diseq      6485
;  :arith-assert-lower      13030
;  :arith-assert-upper      10641
;  :arith-bound-prop        3217
;  :arith-conflicts         166
;  :arith-eq-adapter        7376
;  :arith-fixed-eqs         6148
;  :arith-offset-eqs        4568
;  :arith-pivots            4195
;  :binary-propagations     22
;  :conflicts               1167
;  :datatype-accessor-ax    841
;  :datatype-constructor-ax 8690
;  :datatype-occurs-check   2386
;  :datatype-splits         6020
;  :decisions               14339
;  :del-clause              48018
;  :final-checks            651
;  :interface-eqs           264
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54537
;  :mk-clause               48243
;  :num-allocs              19672829
;  :num-checks              599
;  :propagations            30282
;  :quant-instantiations    11375
;  :rlimit-count            1329653)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      5)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82195
;  :arith-add-rows          24722
;  :arith-assert-diseq      6524
;  :arith-assert-lower      13082
;  :arith-assert-upper      10676
;  :arith-bound-prop        3228
;  :arith-conflicts         167
;  :arith-eq-adapter        7400
;  :arith-fixed-eqs         6155
;  :arith-offset-eqs        4568
;  :arith-pivots            4203
;  :binary-propagations     22
;  :conflicts               1170
;  :datatype-accessor-ax    844
;  :datatype-constructor-ax 8738
;  :datatype-occurs-check   2402
;  :datatype-splits         6060
;  :decisions               14406
;  :del-clause              48123
;  :final-checks            657
;  :interface-eqs           267
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54659
;  :mk-clause               48348
;  :num-allocs              19672829
;  :num-checks              600
;  :propagations            30374
;  :quant-instantiations    11387
;  :rlimit-count            1332200
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    5)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82441
;  :arith-add-rows          24732
;  :arith-assert-diseq      6559
;  :arith-assert-lower      13129
;  :arith-assert-upper      10701
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7423
;  :arith-fixed-eqs         6162
;  :arith-offset-eqs        4568
;  :arith-pivots            4212
;  :binary-propagations     22
;  :conflicts               1172
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48221
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54774
;  :mk-clause               48446
;  :num-allocs              19672829
;  :num-checks              601
;  :propagations            30453
;  :quant-instantiations    11399
;  :rlimit-count            1334819
;  :time                    0.00)
; [then-branch: 131 | First:(Second:(Second:(Second:($t@82@02))))[5] < -1 | live]
; [else-branch: 131 | !(First:(Second:(Second:(Second:($t@82@02))))[5] < -1) | live]
(push) ; 9
; [then-branch: 131 | First:(Second:(Second:(Second:($t@82@02))))[5] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
    5)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 131 | !(First:(Second:(Second:(Second:($t@82@02))))[5] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
      5)
    (- 0 1))))
; [eval] diz.Main_event_state[5] - min_advance__107
; [eval] diz.Main_event_state[5]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82441
;  :arith-add-rows          24732
;  :arith-assert-diseq      6559
;  :arith-assert-lower      13130
;  :arith-assert-upper      10702
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7423
;  :arith-fixed-eqs         6162
;  :arith-offset-eqs        4568
;  :arith-pivots            4212
;  :binary-propagations     22
;  :conflicts               1172
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48221
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54774
;  :mk-clause               48446
;  :num-allocs              19672829
;  :num-checks              602
;  :propagations            30455
;  :quant-instantiations    11399
;  :rlimit-count            1334982)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_append
            (Seq_append
              (Seq_singleton (ite
                (<
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                    0)
                  (- 0 1))
                (- 0 3)
                (-
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                    0)
                  min_advance__107@84@02)))
              (Seq_singleton (ite
                (<
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                    1)
                  (- 0 1))
                (- 0 3)
                (-
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                    1)
                  min_advance__107@84@02))))
            (Seq_singleton (ite
              (<
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  2)
                (- 0 1))
              (- 0 3)
              (-
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  2)
                min_advance__107@84@02))))
          (Seq_singleton (ite
            (<
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                3)
              (- 0 1))
            (- 0 3)
            (-
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                3)
              min_advance__107@84@02))))
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
              4)
            (- 0 1))
          (- 0 3)
          (-
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
              4)
            min_advance__107@84@02))))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
            5)
          (- 0 1))
        (- 0 3)
        (-
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
            5)
          min_advance__107@84@02)))))
  6))
(declare-const __flatten_100__106@98@02 Seq<Int>)
(assert (Seq_equal
  __flatten_100__106@98@02
  (Seq_append
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_append
            (Seq_singleton (ite
              (<
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  0)
                (- 0 1))
              (- 0 3)
              (-
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  0)
                min_advance__107@84@02)))
            (Seq_singleton (ite
              (<
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  1)
                (- 0 1))
              (- 0 3)
              (-
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                  1)
                min_advance__107@84@02))))
          (Seq_singleton (ite
            (<
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                2)
              (- 0 1))
            (- 0 3)
            (-
              (Seq_index
                ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
                2)
              min_advance__107@84@02))))
        (Seq_singleton (ite
          (<
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
              3)
            (- 0 1))
          (- 0 3)
          (-
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
              3)
            min_advance__107@84@02))))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
            4)
          (- 0 1))
        (- 0 3)
        (-
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
            4)
          min_advance__107@84@02))))
    (Seq_singleton (ite
      (<
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
          5)
        (- 0 1))
      (- 0 3)
      (-
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))
          5)
        min_advance__107@84@02))))))
; [exec]
; __flatten_99__105 := __flatten_100__106
; [exec]
; diz.Main_event_state := __flatten_99__105
; [exec]
; Main_wakeup_after_wait_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(push) ; 8
(assert (not (= (Seq_length __flatten_100__106@98@02) 6)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82451
;  :arith-add-rows          24742
;  :arith-assert-diseq      6559
;  :arith-assert-lower      13134
;  :arith-assert-upper      10705
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7428
;  :arith-fixed-eqs         6164
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48221
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54815
;  :mk-clause               48479
;  :num-allocs              19672829
;  :num-checks              603
;  :propagations            30462
;  :quant-instantiations    11403
;  :rlimit-count            1336278)
(assert (= (Seq_length __flatten_100__106@98@02) 6))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@99@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 132 | 0 <= i@99@02 | live]
; [else-branch: 132 | !(0 <= i@99@02) | live]
(push) ; 10
; [then-branch: 132 | 0 <= i@99@02]
(assert (<= 0 i@99@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 132 | !(0 <= i@99@02)]
(assert (not (<= 0 i@99@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 133 | i@99@02 < |First:(Second:($t@82@02))| && 0 <= i@99@02 | live]
; [else-branch: 133 | !(i@99@02 < |First:(Second:($t@82@02))| && 0 <= i@99@02) | live]
(push) ; 10
; [then-branch: 133 | i@99@02 < |First:(Second:($t@82@02))| && 0 <= i@99@02]
(assert (and
  (<
    i@99@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
  (<= 0 i@99@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@99@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82452
;  :arith-add-rows          24742
;  :arith-assert-diseq      6559
;  :arith-assert-lower      13136
;  :arith-assert-upper      10707
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7429
;  :arith-fixed-eqs         6164
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48221
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54820
;  :mk-clause               48479
;  :num-allocs              19672829
;  :num-checks              604
;  :propagations            30462
;  :quant-instantiations    11403
;  :rlimit-count            1336465)
; [eval] -1
(push) ; 11
; [then-branch: 134 | First:(Second:($t@82@02))[i@99@02] == -1 | live]
; [else-branch: 134 | First:(Second:($t@82@02))[i@99@02] != -1 | live]
(push) ; 12
; [then-branch: 134 | First:(Second:($t@82@02))[i@99@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@99@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 134 | First:(Second:($t@82@02))[i@99@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      i@99@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@99@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82456
;  :arith-add-rows          24742
;  :arith-assert-diseq      6561
;  :arith-assert-lower      13143
;  :arith-assert-upper      10710
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7432
;  :arith-fixed-eqs         6165
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48221
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54835
;  :mk-clause               48496
;  :num-allocs              19672829
;  :num-checks              605
;  :propagations            30469
;  :quant-instantiations    11406
;  :rlimit-count            1336772)
(push) ; 13
; [then-branch: 135 | 0 <= First:(Second:($t@82@02))[i@99@02] | live]
; [else-branch: 135 | !(0 <= First:(Second:($t@82@02))[i@99@02]) | live]
(push) ; 14
; [then-branch: 135 | 0 <= First:(Second:($t@82@02))[i@99@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@99@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@99@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82456
;  :arith-add-rows          24742
;  :arith-assert-diseq      6561
;  :arith-assert-lower      13143
;  :arith-assert-upper      10710
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7432
;  :arith-fixed-eqs         6165
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48221
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54835
;  :mk-clause               48496
;  :num-allocs              19672829
;  :num-checks              606
;  :propagations            30469
;  :quant-instantiations    11406
;  :rlimit-count            1336866)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 135 | !(0 <= First:(Second:($t@82@02))[i@99@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      i@99@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 133 | !(i@99@02 < |First:(Second:($t@82@02))| && 0 <= i@99@02)]
(assert (not
  (and
    (<
      i@99@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
    (<= 0 i@99@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@99@02 Int)) (!
  (implies
    (and
      (<
        i@99@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
      (<= 0 i@99@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          i@99@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@99@02)
          (Seq_length __flatten_100__106@98@02))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@99@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@99@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82456
;  :arith-add-rows          24742
;  :arith-assert-diseq      6563
;  :arith-assert-lower      13144
;  :arith-assert-upper      10711
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7433
;  :arith-fixed-eqs         6165
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48258
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54847
;  :mk-clause               48516
;  :num-allocs              19672829
;  :num-checks              607
;  :propagations            30471
;  :quant-instantiations    11409
;  :rlimit-count            1337354)
(assert (forall ((i@99@02 Int)) (!
  (implies
    (and
      (<
        i@99@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
      (<= 0 i@99@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          i@99@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@99@02)
          (Seq_length __flatten_100__106@98@02))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@99@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@99@02))
  :qid |prog.l<no position>|)))
(declare-const $t@100@02 $Snap)
(assert (= $t@100@02 ($Snap.combine ($Snap.first $t@100@02) ($Snap.second $t@100@02))))
(assert (=
  ($Snap.second $t@100@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@100@02))
    ($Snap.second ($Snap.second $t@100@02)))))
(assert (=
  ($Snap.second ($Snap.second $t@100@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@100@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@100@02))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@100@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@101@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 136 | 0 <= i@101@02 | live]
; [else-branch: 136 | !(0 <= i@101@02) | live]
(push) ; 10
; [then-branch: 136 | 0 <= i@101@02]
(assert (<= 0 i@101@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 136 | !(0 <= i@101@02)]
(assert (not (<= 0 i@101@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 137 | i@101@02 < |First:(Second:($t@100@02))| && 0 <= i@101@02 | live]
; [else-branch: 137 | !(i@101@02 < |First:(Second:($t@100@02))| && 0 <= i@101@02) | live]
(push) ; 10
; [then-branch: 137 | i@101@02 < |First:(Second:($t@100@02))| && 0 <= i@101@02]
(assert (and
  (<
    i@101@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))
  (<= 0 i@101@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@101@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82493
;  :arith-add-rows          24742
;  :arith-assert-diseq      6563
;  :arith-assert-lower      13149
;  :arith-assert-upper      10714
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7435
;  :arith-fixed-eqs         6165
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    853
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48258
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54869
;  :mk-clause               48516
;  :num-allocs              19672829
;  :num-checks              608
;  :propagations            30471
;  :quant-instantiations    11416
;  :rlimit-count            1338862)
; [eval] -1
(push) ; 11
; [then-branch: 138 | First:(Second:($t@100@02))[i@101@02] == -1 | live]
; [else-branch: 138 | First:(Second:($t@100@02))[i@101@02] != -1 | live]
(push) ; 12
; [then-branch: 138 | First:(Second:($t@100@02))[i@101@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
    i@101@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 138 | First:(Second:($t@100@02))[i@101@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      i@101@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@101@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82493
;  :arith-add-rows          24742
;  :arith-assert-diseq      6563
;  :arith-assert-lower      13149
;  :arith-assert-upper      10714
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7435
;  :arith-fixed-eqs         6165
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    853
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48258
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54870
;  :mk-clause               48516
;  :num-allocs              19672829
;  :num-checks              609
;  :propagations            30471
;  :quant-instantiations    11416
;  :rlimit-count            1339013)
(push) ; 13
; [then-branch: 139 | 0 <= First:(Second:($t@100@02))[i@101@02] | live]
; [else-branch: 139 | !(0 <= First:(Second:($t@100@02))[i@101@02]) | live]
(push) ; 14
; [then-branch: 139 | 0 <= First:(Second:($t@100@02))[i@101@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
    i@101@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@101@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82493
;  :arith-add-rows          24742
;  :arith-assert-diseq      6564
;  :arith-assert-lower      13152
;  :arith-assert-upper      10714
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7436
;  :arith-fixed-eqs         6165
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    853
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48258
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54873
;  :mk-clause               48517
;  :num-allocs              19672829
;  :num-checks              610
;  :propagations            30471
;  :quant-instantiations    11416
;  :rlimit-count            1339117)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 139 | !(0 <= First:(Second:($t@100@02))[i@101@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      i@101@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 137 | !(i@101@02 < |First:(Second:($t@100@02))| && 0 <= i@101@02)]
(assert (not
  (and
    (<
      i@101@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))
    (<= 0 i@101@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@101@02 Int)) (!
  (implies
    (and
      (<
        i@101@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))
      (<= 0 i@101@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
          i@101@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
            i@101@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
            i@101@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
    i@101@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
  __flatten_100__106@98@02))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82513
;  :arith-add-rows          24742
;  :arith-assert-diseq      6564
;  :arith-assert-lower      13153
;  :arith-assert-upper      10715
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7438
;  :arith-fixed-eqs         6166
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48259
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54896
;  :mk-clause               48533
;  :num-allocs              19672829
;  :num-checks              611
;  :propagations            30477
;  :quant-instantiations    11418
;  :rlimit-count            1340194)
(push) ; 8
; [then-branch: 140 | 0 <= First:(Second:($t@82@02))[0] | live]
; [else-branch: 140 | !(0 <= First:(Second:($t@82@02))[0]) | live]
(push) ; 9
; [then-branch: 140 | 0 <= First:(Second:($t@82@02))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82513
;  :arith-add-rows          24742
;  :arith-assert-diseq      6564
;  :arith-assert-lower      13153
;  :arith-assert-upper      10715
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7438
;  :arith-fixed-eqs         6166
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48259
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54896
;  :mk-clause               48533
;  :num-allocs              19672829
;  :num-checks              612
;  :propagations            30477
;  :quant-instantiations    11418
;  :rlimit-count            1340294)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82513
;  :arith-add-rows          24742
;  :arith-assert-diseq      6564
;  :arith-assert-lower      13153
;  :arith-assert-upper      10715
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7438
;  :arith-fixed-eqs         6166
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48259
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54896
;  :mk-clause               48533
;  :num-allocs              19672829
;  :num-checks              613
;  :propagations            30477
;  :quant-instantiations    11418
;  :rlimit-count            1340303)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82513
;  :arith-add-rows          24742
;  :arith-assert-diseq      6564
;  :arith-assert-lower      13153
;  :arith-assert-upper      10715
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7438
;  :arith-fixed-eqs         6166
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1175
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48259
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54896
;  :mk-clause               48533
;  :num-allocs              19672829
;  :num-checks              614
;  :propagations            30477
;  :quant-instantiations    11418
;  :rlimit-count            1340391)
(push) ; 10
; [then-branch: 141 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 | live]
; [else-branch: 141 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] != 0 | live]
(push) ; 11
; [then-branch: 141 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@98@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 141 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@98@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82514
;  :arith-add-rows          24743
;  :arith-assert-diseq      6564
;  :arith-assert-lower      13153
;  :arith-assert-upper      10715
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7438
;  :arith-fixed-eqs         6166
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1175
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48259
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54901
;  :mk-clause               48538
;  :num-allocs              19672829
;  :num-checks              615
;  :propagations            30477
;  :quant-instantiations    11419
;  :rlimit-count            1340606)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82514
;  :arith-add-rows          24743
;  :arith-assert-diseq      6564
;  :arith-assert-lower      13153
;  :arith-assert-upper      10715
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7438
;  :arith-fixed-eqs         6166
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1175
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48259
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54901
;  :mk-clause               48538
;  :num-allocs              19672829
;  :num-checks              616
;  :propagations            30477
;  :quant-instantiations    11419
;  :rlimit-count            1340615)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82514
;  :arith-add-rows          24743
;  :arith-assert-diseq      6564
;  :arith-assert-lower      13153
;  :arith-assert-upper      10715
;  :arith-bound-prop        3235
;  :arith-conflicts         167
;  :arith-eq-adapter        7438
;  :arith-fixed-eqs         6166
;  :arith-offset-eqs        4570
;  :arith-pivots            4214
;  :binary-propagations     22
;  :conflicts               1176
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 8786
;  :datatype-occurs-check   2418
;  :datatype-splits         6100
;  :decisions               14473
;  :del-clause              48259
;  :final-checks            663
;  :interface-eqs           270
;  :max-generation          11
;  :max-memory              6.51
;  :memory                  6.41
;  :minimized-lits          1388
;  :mk-bool-var             54901
;  :mk-clause               48538
;  :num-allocs              19672829
;  :num-checks              617
;  :propagations            30477
;  :quant-instantiations    11419
;  :rlimit-count            1340703)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 140 | !(0 <= First:(Second:($t@82@02))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               83918
;  :arith-add-rows          24990
;  :arith-assert-diseq      6662
;  :arith-assert-lower      13380
;  :arith-assert-upper      10898
;  :arith-bound-prop        3283
;  :arith-conflicts         171
;  :arith-eq-adapter        7564
;  :arith-fixed-eqs         6229
;  :arith-offset-eqs        4591
;  :arith-pivots            4320
;  :binary-propagations     22
;  :conflicts               1200
;  :datatype-accessor-ax    877
;  :datatype-constructor-ax 9036
;  :datatype-occurs-check   2479
;  :datatype-splits         6308
;  :decisions               14773
;  :del-clause              49082
;  :final-checks            680
;  :interface-eqs           279
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1453
;  :mk-bool-var             55891
;  :mk-clause               49356
;  :num-allocs              20636374
;  :num-checks              618
;  :propagations            30862
;  :quant-instantiations    11551
;  :rlimit-count            1356039
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84566
;  :arith-add-rows          25094
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    882
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49479
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56360
;  :mk-clause               49753
;  :num-allocs              20636374
;  :num-checks              619
;  :propagations            31112
;  :quant-instantiations    11637
;  :rlimit-count            1364176
;  :time                    0.01)
; [then-branch: 142 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0] | live]
; [else-branch: 142 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0]) | live]
(push) ; 9
; [then-branch: 142 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84566
;  :arith-add-rows          25094
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    882
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49479
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56362
;  :mk-clause               49754
;  :num-allocs              20636374
;  :num-checks              620
;  :propagations            31112
;  :quant-instantiations    11637
;  :rlimit-count            1364344)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 142 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1) ==> diz.Main_process_state[1] == -1
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84572
;  :arith-add-rows          25094
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    883
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49480
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56368
;  :mk-clause               49758
;  :num-allocs              20636374
;  :num-checks              621
;  :propagations            31112
;  :quant-instantiations    11637
;  :rlimit-count            1364823)
(push) ; 8
; [then-branch: 143 | 0 <= First:(Second:($t@82@02))[1] | live]
; [else-branch: 143 | !(0 <= First:(Second:($t@82@02))[1]) | live]
(push) ; 9
; [then-branch: 143 | 0 <= First:(Second:($t@82@02))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84572
;  :arith-add-rows          25094
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    883
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49480
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56368
;  :mk-clause               49758
;  :num-allocs              20636374
;  :num-checks              622
;  :propagations            31112
;  :quant-instantiations    11637
;  :rlimit-count            1364923)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84572
;  :arith-add-rows          25094
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    883
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49480
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56368
;  :mk-clause               49758
;  :num-allocs              20636374
;  :num-checks              623
;  :propagations            31112
;  :quant-instantiations    11637
;  :rlimit-count            1364932)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84572
;  :arith-add-rows          25094
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1213
;  :datatype-accessor-ax    883
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49480
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56368
;  :mk-clause               49758
;  :num-allocs              20636374
;  :num-checks              624
;  :propagations            31112
;  :quant-instantiations    11637
;  :rlimit-count            1365020)
(push) ; 10
; [then-branch: 144 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 | live]
; [else-branch: 144 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] != 0 | live]
(push) ; 11
; [then-branch: 144 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@98@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 144 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@98@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84573
;  :arith-add-rows          25096
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1213
;  :datatype-accessor-ax    883
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49480
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56373
;  :mk-clause               49763
;  :num-allocs              20636374
;  :num-checks              625
;  :propagations            31112
;  :quant-instantiations    11638
;  :rlimit-count            1365234)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84573
;  :arith-add-rows          25096
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1213
;  :datatype-accessor-ax    883
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49480
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56373
;  :mk-clause               49763
;  :num-allocs              20636374
;  :num-checks              626
;  :propagations            31112
;  :quant-instantiations    11638
;  :rlimit-count            1365243)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               84573
;  :arith-add-rows          25096
;  :arith-assert-diseq      6728
;  :arith-assert-lower      13504
;  :arith-assert-upper      11015
;  :arith-bound-prop        3302
;  :arith-conflicts         171
;  :arith-eq-adapter        7640
;  :arith-fixed-eqs         6266
;  :arith-offset-eqs        4600
;  :arith-pivots            4364
;  :binary-propagations     22
;  :conflicts               1214
;  :datatype-accessor-ax    883
;  :datatype-constructor-ax 9126
;  :datatype-occurs-check   2504
;  :datatype-splits         6356
;  :decisions               14908
;  :del-clause              49480
;  :final-checks            688
;  :interface-eqs           283
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1467
;  :mk-bool-var             56373
;  :mk-clause               49763
;  :num-allocs              20636374
;  :num-checks              627
;  :propagations            31112
;  :quant-instantiations    11638
;  :rlimit-count            1365331)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 143 | !(0 <= First:(Second:($t@82@02))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               86491
;  :arith-add-rows          25564
;  :arith-assert-diseq      6860
;  :arith-assert-lower      13782
;  :arith-assert-upper      11262
;  :arith-bound-prop        3355
;  :arith-conflicts         177
;  :arith-eq-adapter        7798
;  :arith-fixed-eqs         6380
;  :arith-offset-eqs        4679
;  :arith-pivots            4469
;  :binary-propagations     22
;  :conflicts               1242
;  :datatype-accessor-ax    911
;  :datatype-constructor-ax 9430
;  :datatype-occurs-check   2589
;  :datatype-splits         6662
;  :decisions               15293
;  :del-clause              50502
;  :final-checks            708
;  :interface-eqs           293
;  :max-generation          11
;  :max-memory              6.52
;  :memory                  6.43
;  :minimized-lits          1552
;  :mk-bool-var             57742
;  :mk-clause               50780
;  :num-allocs              20636374
;  :num-checks              628
;  :propagations            31618
;  :quant-instantiations    11834
;  :rlimit-count            1385928
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87180
;  :arith-add-rows          25705
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    916
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50934
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58254
;  :mk-clause               51212
;  :num-allocs              21623854
;  :num-checks              629
;  :propagations            31885
;  :quant-instantiations    11929
;  :rlimit-count            1395020
;  :time                    0.00)
; [then-branch: 145 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1] | live]
; [else-branch: 145 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1]) | live]
(push) ; 9
; [then-branch: 145 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
; [eval] diz.Main_process_state[1] == -1
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87180
;  :arith-add-rows          25705
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    916
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50934
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58256
;  :mk-clause               51213
;  :num-allocs              21623854
;  :num-checks              630
;  :propagations            31885
;  :quant-instantiations    11929
;  :rlimit-count            1395188)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 145 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      1)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1) ==> diz.Main_process_state[2] == -1
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87186
;  :arith-add-rows          25705
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50935
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58262
;  :mk-clause               51217
;  :num-allocs              21623854
;  :num-checks              631
;  :propagations            31885
;  :quant-instantiations    11929
;  :rlimit-count            1395677)
(push) ; 8
; [then-branch: 146 | 0 <= First:(Second:($t@82@02))[2] | live]
; [else-branch: 146 | !(0 <= First:(Second:($t@82@02))[2]) | live]
(push) ; 9
; [then-branch: 146 | 0 <= First:(Second:($t@82@02))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87186
;  :arith-add-rows          25705
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50935
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58262
;  :mk-clause               51217
;  :num-allocs              21623854
;  :num-checks              632
;  :propagations            31885
;  :quant-instantiations    11929
;  :rlimit-count            1395777)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87186
;  :arith-add-rows          25705
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50935
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58262
;  :mk-clause               51217
;  :num-allocs              21623854
;  :num-checks              633
;  :propagations            31885
;  :quant-instantiations    11929
;  :rlimit-count            1395786)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87186
;  :arith-add-rows          25705
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1255
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50935
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58262
;  :mk-clause               51217
;  :num-allocs              21623854
;  :num-checks              634
;  :propagations            31885
;  :quant-instantiations    11929
;  :rlimit-count            1395874)
(push) ; 10
; [then-branch: 147 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 | live]
; [else-branch: 147 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] != 0 | live]
(push) ; 11
; [then-branch: 147 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@98@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 147 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@98@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 12
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87187
;  :arith-add-rows          25707
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1255
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50935
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58267
;  :mk-clause               51222
;  :num-allocs              21623854
;  :num-checks              635
;  :propagations            31885
;  :quant-instantiations    11930
;  :rlimit-count            1396048)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87187
;  :arith-add-rows          25707
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1255
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50935
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58267
;  :mk-clause               51222
;  :num-allocs              21623854
;  :num-checks              636
;  :propagations            31885
;  :quant-instantiations    11930
;  :rlimit-count            1396057)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               87187
;  :arith-add-rows          25707
;  :arith-assert-diseq      6926
;  :arith-assert-lower      13908
;  :arith-assert-upper      11388
;  :arith-bound-prop        3375
;  :arith-conflicts         177
;  :arith-eq-adapter        7878
;  :arith-fixed-eqs         6417
;  :arith-offset-eqs        4692
;  :arith-pivots            4512
;  :binary-propagations     22
;  :conflicts               1256
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 9520
;  :datatype-occurs-check   2638
;  :datatype-splits         6710
;  :decisions               15443
;  :del-clause              50935
;  :final-checks            720
;  :interface-eqs           301
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1566
;  :mk-bool-var             58267
;  :mk-clause               51222
;  :num-allocs              21623854
;  :num-checks              637
;  :propagations            31885
;  :quant-instantiations    11930
;  :rlimit-count            1396145)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 146 | !(0 <= First:(Second:($t@82@02))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               89545
;  :arith-add-rows          26174
;  :arith-assert-diseq      7049
;  :arith-assert-lower      14130
;  :arith-assert-upper      11607
;  :arith-bound-prop        3431
;  :arith-conflicts         183
;  :arith-eq-adapter        8009
;  :arith-fixed-eqs         6523
;  :arith-offset-eqs        4770
;  :arith-pivots            4594
;  :binary-propagations     22
;  :conflicts               1288
;  :datatype-accessor-ax    971
;  :datatype-constructor-ax 9939
;  :datatype-occurs-check   2791
;  :datatype-splits         7066
;  :decisions               15931
;  :del-clause              51908
;  :final-checks            750
;  :interface-eqs           317
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.43
;  :minimized-lits          1659
;  :mk-bool-var             59674
;  :mk-clause               52190
;  :num-allocs              21623854
;  :num-checks              638
;  :propagations            32382
;  :quant-instantiations    12124
;  :rlimit-count            1418373
;  :time                    0.01)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90340
;  :arith-add-rows          26321
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    981
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52290
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60154
;  :mk-clause               52572
;  :num-allocs              22629422
;  :num-checks              639
;  :propagations            32630
;  :quant-instantiations    12211
;  :rlimit-count            1427990
;  :time                    0.00)
; [then-branch: 148 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2] | live]
; [else-branch: 148 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2]) | live]
(push) ; 9
; [then-branch: 148 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
; [eval] diz.Main_process_state[2] == -1
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90340
;  :arith-add-rows          26321
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    981
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52290
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60156
;  :mk-clause               52573
;  :num-allocs              22629422
;  :num-checks              640
;  :propagations            32630
;  :quant-instantiations    12211
;  :rlimit-count            1428158)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 148 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      2)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90346
;  :arith-add-rows          26321
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    982
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52291
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60162
;  :mk-clause               52577
;  :num-allocs              22629422
;  :num-checks              641
;  :propagations            32630
;  :quant-instantiations    12211
;  :rlimit-count            1428657)
(push) ; 8
; [then-branch: 149 | 0 <= First:(Second:($t@82@02))[0] | live]
; [else-branch: 149 | !(0 <= First:(Second:($t@82@02))[0]) | live]
(push) ; 9
; [then-branch: 149 | 0 <= First:(Second:($t@82@02))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90346
;  :arith-add-rows          26321
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    982
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52291
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60162
;  :mk-clause               52577
;  :num-allocs              22629422
;  :num-checks              642
;  :propagations            32630
;  :quant-instantiations    12211
;  :rlimit-count            1428757)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90346
;  :arith-add-rows          26321
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    982
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52291
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60162
;  :mk-clause               52577
;  :num-allocs              22629422
;  :num-checks              643
;  :propagations            32630
;  :quant-instantiations    12211
;  :rlimit-count            1428766)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90346
;  :arith-add-rows          26321
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    982
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52291
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60162
;  :mk-clause               52577
;  :num-allocs              22629422
;  :num-checks              644
;  :propagations            32630
;  :quant-instantiations    12211
;  :rlimit-count            1428854)
(push) ; 10
; [then-branch: 150 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 | live]
; [else-branch: 150 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] != 0 | live]
(push) ; 11
; [then-branch: 150 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@98@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 150 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@98@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90347
;  :arith-add-rows          26323
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    982
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52291
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60166
;  :mk-clause               52582
;  :num-allocs              22629422
;  :num-checks              645
;  :propagations            32630
;  :quant-instantiations    12212
;  :rlimit-count            1429012)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90347
;  :arith-add-rows          26323
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    982
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52291
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60166
;  :mk-clause               52582
;  :num-allocs              22629422
;  :num-checks              646
;  :propagations            32630
;  :quant-instantiations    12212
;  :rlimit-count            1429021)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               90347
;  :arith-add-rows          26323
;  :arith-assert-diseq      7110
;  :arith-assert-lower      14234
;  :arith-assert-upper      11720
;  :arith-bound-prop        3452
;  :arith-conflicts         183
;  :arith-eq-adapter        8077
;  :arith-fixed-eqs         6558
;  :arith-offset-eqs        4782
;  :arith-pivots            4633
;  :binary-propagations     22
;  :conflicts               1305
;  :datatype-accessor-ax    982
;  :datatype-constructor-ax 10060
;  :datatype-occurs-check   2840
;  :datatype-splits         7120
;  :decisions               16110
;  :del-clause              52291
;  :final-checks            763
;  :interface-eqs           325
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1673
;  :mk-bool-var             60166
;  :mk-clause               52582
;  :num-allocs              22629422
;  :num-checks              647
;  :propagations            32630
;  :quant-instantiations    12212
;  :rlimit-count            1429109)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 149 | !(0 <= First:(Second:($t@82@02))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               91150
;  :arith-add-rows          26413
;  :arith-assert-diseq      7170
;  :arith-assert-lower      14333
;  :arith-assert-upper      11829
;  :arith-bound-prop        3473
;  :arith-conflicts         183
;  :arith-eq-adapter        8140
;  :arith-fixed-eqs         6594
;  :arith-offset-eqs        4802
;  :arith-pivots            4662
;  :binary-propagations     22
;  :conflicts               1320
;  :datatype-accessor-ax    992
;  :datatype-constructor-ax 10181
;  :datatype-occurs-check   2871
;  :datatype-splits         7174
;  :decisions               16285
;  :del-clause              52663
;  :final-checks            771
;  :interface-eqs           328
;  :max-generation          11
;  :max-memory              6.53
;  :memory                  6.44
;  :minimized-lits          1687
;  :mk-bool-var             60635
;  :mk-clause               52949
;  :num-allocs              22629422
;  :num-checks              648
;  :propagations            32869
;  :quant-instantiations    12301
;  :rlimit-count            1437106
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93112
;  :arith-add-rows          26793
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    1036
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53513
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61795
;  :mk-clause               53799
;  :num-allocs              23653818
;  :num-checks              649
;  :propagations            33274
;  :quant-instantiations    12461
;  :rlimit-count            1455341
;  :time                    0.01)
; [then-branch: 151 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0]) | live]
; [else-branch: 151 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0] | live]
(push) ; 9
; [then-branch: 151 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93113
;  :arith-add-rows          26795
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    1036
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53513
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61799
;  :mk-clause               53804
;  :num-allocs              23653818
;  :num-checks              650
;  :propagations            33276
;  :quant-instantiations    12462
;  :rlimit-count            1455529)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93113
;  :arith-add-rows          26795
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    1036
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53513
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61799
;  :mk-clause               53804
;  :num-allocs              23653818
;  :num-checks              651
;  :propagations            33276
;  :quant-instantiations    12462
;  :rlimit-count            1455544)
(pop) ; 9
(push) ; 9
; [else-branch: 151 | __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[0]] == -1 && 0 <= First:(Second:($t@82@02))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_100__106@98@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              0))
          0)
        (=
          (Seq_index
            __flatten_100__106@98@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)) ==> diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] !(0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[1]) && (old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[1])
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93119
;  :arith-add-rows          26795
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    1037
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53518
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61803
;  :mk-clause               53807
;  :num-allocs              23653818
;  :num-checks              652
;  :propagations            33276
;  :quant-instantiations    12462
;  :rlimit-count            1456031)
(push) ; 8
; [then-branch: 152 | 0 <= First:(Second:($t@82@02))[1] | live]
; [else-branch: 152 | !(0 <= First:(Second:($t@82@02))[1]) | live]
(push) ; 9
; [then-branch: 152 | 0 <= First:(Second:($t@82@02))[1]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93119
;  :arith-add-rows          26795
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    1037
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53518
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61803
;  :mk-clause               53807
;  :num-allocs              23653818
;  :num-checks              653
;  :propagations            33276
;  :quant-instantiations    12462
;  :rlimit-count            1456131)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93119
;  :arith-add-rows          26795
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    1037
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53518
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61803
;  :mk-clause               53807
;  :num-allocs              23653818
;  :num-checks              654
;  :propagations            33276
;  :quant-instantiations    12462
;  :rlimit-count            1456140)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93119
;  :arith-add-rows          26795
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    1037
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53518
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61803
;  :mk-clause               53807
;  :num-allocs              23653818
;  :num-checks              655
;  :propagations            33276
;  :quant-instantiations    12462
;  :rlimit-count            1456228)
(push) ; 10
; [then-branch: 153 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 | live]
; [else-branch: 153 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] != 0 | live]
(push) ; 11
; [then-branch: 153 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@98@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 153 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@98@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[1])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[1])]
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93120
;  :arith-add-rows          26797
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    1037
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53518
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61807
;  :mk-clause               53812
;  :num-allocs              23653818
;  :num-checks              656
;  :propagations            33276
;  :quant-instantiations    12463
;  :rlimit-count            1456414)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93120
;  :arith-add-rows          26797
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    1037
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53518
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61807
;  :mk-clause               53812
;  :num-allocs              23653818
;  :num-checks              657
;  :propagations            33276
;  :quant-instantiations    12463
;  :rlimit-count            1456423)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93120
;  :arith-add-rows          26797
;  :arith-assert-diseq      7266
;  :arith-assert-lower      14516
;  :arith-assert-upper      12025
;  :arith-bound-prop        3534
;  :arith-conflicts         187
;  :arith-eq-adapter        8248
;  :arith-fixed-eqs         6672
;  :arith-offset-eqs        4850
;  :arith-pivots            4735
;  :binary-propagations     22
;  :conflicts               1351
;  :datatype-accessor-ax    1037
;  :datatype-constructor-ax 10540
;  :datatype-occurs-check   3002
;  :datatype-splits         7468
;  :decisions               16717
;  :del-clause              53518
;  :final-checks            798
;  :interface-eqs           343
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1758
;  :mk-bool-var             61807
;  :mk-clause               53812
;  :num-allocs              23653818
;  :num-checks              658
;  :propagations            33276
;  :quant-instantiations    12463
;  :rlimit-count            1456511)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 152 | !(0 <= First:(Second:($t@82@02))[1])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               93872
;  :arith-add-rows          27019
;  :arith-assert-diseq      7335
;  :arith-assert-lower      14659
;  :arith-assert-upper      12165
;  :arith-bound-prop        3555
;  :arith-conflicts         187
;  :arith-eq-adapter        8338
;  :arith-fixed-eqs         6720
;  :arith-offset-eqs        4863
;  :arith-pivots            4788
;  :binary-propagations     22
;  :conflicts               1363
;  :datatype-accessor-ax    1042
;  :datatype-constructor-ax 10630
;  :datatype-occurs-check   3075
;  :datatype-splits         7516
;  :decisions               16879
;  :del-clause              53994
;  :final-checks            814
;  :interface-eqs           355
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1772
;  :mk-bool-var             62381
;  :mk-clause               54283
;  :num-allocs              24687090
;  :num-checks              659
;  :propagations            33572
;  :quant-instantiations    12568
;  :rlimit-count            1467604
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96017
;  :arith-add-rows          27541
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54983
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63753
;  :mk-clause               55272
;  :num-allocs              24687090
;  :num-checks              660
;  :propagations            34084
;  :quant-instantiations    12772
;  :rlimit-count            1489527
;  :time                    0.01)
; [then-branch: 154 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1]) | live]
; [else-branch: 154 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1] | live]
(push) ; 9
; [then-branch: 154 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        1)))))
; [eval] diz.Main_process_state[1] == old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96018
;  :arith-add-rows          27543
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54983
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63757
;  :mk-clause               55277
;  :num-allocs              24687090
;  :num-checks              661
;  :propagations            34086
;  :quant-instantiations    12773
;  :rlimit-count            1489715)
; [eval] old(diz.Main_process_state[1])
; [eval] diz.Main_process_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96018
;  :arith-add-rows          27543
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54983
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63757
;  :mk-clause               55277
;  :num-allocs              24687090
;  :num-checks              662
;  :propagations            34086
;  :quant-instantiations    12773
;  :rlimit-count            1489730)
(pop) ; 9
(push) ; 9
; [else-branch: 154 | __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[1]] == -1 && 0 <= First:(Second:($t@82@02))[1]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_100__106@98@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              1))
          0)
        (=
          (Seq_index
            __flatten_100__106@98@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              1))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@100@02))))))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)) ==> diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] !(0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[2]) && (old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[2])
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96027
;  :arith-add-rows          27543
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54988
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63760
;  :mk-clause               55280
;  :num-allocs              24687090
;  :num-checks              663
;  :propagations            34086
;  :quant-instantiations    12773
;  :rlimit-count            1490142)
(push) ; 8
; [then-branch: 155 | 0 <= First:(Second:($t@82@02))[2] | live]
; [else-branch: 155 | !(0 <= First:(Second:($t@82@02))[2]) | live]
(push) ; 9
; [then-branch: 155 | 0 <= First:(Second:($t@82@02))[2]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96027
;  :arith-add-rows          27543
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54988
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63760
;  :mk-clause               55280
;  :num-allocs              24687090
;  :num-checks              664
;  :propagations            34086
;  :quant-instantiations    12773
;  :rlimit-count            1490242)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96027
;  :arith-add-rows          27543
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54988
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63760
;  :mk-clause               55280
;  :num-allocs              24687090
;  :num-checks              665
;  :propagations            34086
;  :quant-instantiations    12773
;  :rlimit-count            1490251)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96027
;  :arith-add-rows          27543
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1395
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54988
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63760
;  :mk-clause               55280
;  :num-allocs              24687090
;  :num-checks              666
;  :propagations            34086
;  :quant-instantiations    12773
;  :rlimit-count            1490339)
(push) ; 10
; [then-branch: 156 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 | live]
; [else-branch: 156 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] != 0 | live]
(push) ; 11
; [then-branch: 156 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0]
(assert (=
  (Seq_index
    __flatten_100__106@98@02
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 156 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_100__106@98@02
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[2])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[2])]
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 12
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96028
;  :arith-add-rows          27545
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1395
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54988
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63764
;  :mk-clause               55285
;  :num-allocs              24687090
;  :num-checks              667
;  :propagations            34086
;  :quant-instantiations    12774
;  :rlimit-count            1490497)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96028
;  :arith-add-rows          27545
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1395
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54988
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63764
;  :mk-clause               55285
;  :num-allocs              24687090
;  :num-checks              668
;  :propagations            34086
;  :quant-instantiations    12774
;  :rlimit-count            1490506)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    2)
  (Seq_length __flatten_100__106@98@02))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               96028
;  :arith-add-rows          27545
;  :arith-assert-diseq      7453
;  :arith-assert-lower      14886
;  :arith-assert-upper      12408
;  :arith-bound-prop        3610
;  :arith-conflicts         192
;  :arith-eq-adapter        8470
;  :arith-fixed-eqs         6825
;  :arith-offset-eqs        4943
;  :arith-pivots            4871
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    1088
;  :datatype-constructor-ax 10988
;  :datatype-occurs-check   3182
;  :datatype-splits         7842
;  :decisions               17329
;  :del-clause              54988
;  :final-checks            835
;  :interface-eqs           366
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1863
;  :mk-bool-var             63764
;  :mk-clause               55285
;  :num-allocs              24687090
;  :num-checks              669
;  :propagations            34086
;  :quant-instantiations    12774
;  :rlimit-count            1490594)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 155 | !(0 <= First:(Second:($t@82@02))[2])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               98307
;  :arith-add-rows          28107
;  :arith-assert-diseq      7580
;  :arith-assert-lower      15118
;  :arith-assert-upper      12657
;  :arith-bound-prop        3668
;  :arith-conflicts         197
;  :arith-eq-adapter        8606
;  :arith-fixed-eqs         6929
;  :arith-offset-eqs        5033
;  :arith-pivots            4964
;  :binary-propagations     22
;  :conflicts               1426
;  :datatype-accessor-ax    1137
;  :datatype-constructor-ax 11376
;  :datatype-occurs-check   3301
;  :datatype-splits         8165
;  :decisions               17812
;  :del-clause              55999
;  :final-checks            860
;  :interface-eqs           380
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          1954
;  :mk-bool-var             65148
;  :mk-clause               56291
;  :num-allocs              24687090
;  :num-checks              670
;  :propagations            34608
;  :quant-instantiations    12980
;  :rlimit-count            1514870
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               100308
;  :arith-add-rows          28645
;  :arith-assert-diseq      7702
;  :arith-assert-lower      15334
;  :arith-assert-upper      12884
;  :arith-bound-prop        3715
;  :arith-conflicts         202
;  :arith-eq-adapter        8736
;  :arith-fixed-eqs         7032
;  :arith-offset-eqs        5095
;  :arith-pivots            5055
;  :binary-propagations     22
;  :conflicts               1457
;  :datatype-accessor-ax    1178
;  :datatype-constructor-ax 11711
;  :datatype-occurs-check   3384
;  :datatype-splits         8435
;  :decisions               18244
;  :del-clause              56940
;  :final-checks            879
;  :interface-eqs           390
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          2039
;  :mk-bool-var             66441
;  :mk-clause               57232
;  :num-allocs              24687090
;  :num-checks              671
;  :propagations            35097
;  :quant-instantiations    13174
;  :rlimit-count            1536720
;  :time                    0.01)
; [then-branch: 157 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2]) | live]
; [else-branch: 157 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2] | live]
(push) ; 9
; [then-branch: 157 | !(__flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        0)
      (=
        (Seq_index
          __flatten_100__106@98@02
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        2)))))
; [eval] diz.Main_process_state[2] == old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               100309
;  :arith-add-rows          28647
;  :arith-assert-diseq      7702
;  :arith-assert-lower      15334
;  :arith-assert-upper      12884
;  :arith-bound-prop        3715
;  :arith-conflicts         202
;  :arith-eq-adapter        8736
;  :arith-fixed-eqs         7032
;  :arith-offset-eqs        5095
;  :arith-pivots            5055
;  :binary-propagations     22
;  :conflicts               1457
;  :datatype-accessor-ax    1178
;  :datatype-constructor-ax 11711
;  :datatype-occurs-check   3384
;  :datatype-splits         8435
;  :decisions               18244
;  :del-clause              56940
;  :final-checks            879
;  :interface-eqs           390
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          2039
;  :mk-bool-var             66445
;  :mk-clause               57237
;  :num-allocs              24687090
;  :num-checks              672
;  :propagations            35099
;  :quant-instantiations    13175
;  :rlimit-count            1536908)
; [eval] old(diz.Main_process_state[2])
; [eval] diz.Main_process_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               100309
;  :arith-add-rows          28647
;  :arith-assert-diseq      7702
;  :arith-assert-lower      15334
;  :arith-assert-upper      12884
;  :arith-bound-prop        3715
;  :arith-conflicts         202
;  :arith-eq-adapter        8736
;  :arith-fixed-eqs         7032
;  :arith-offset-eqs        5095
;  :arith-pivots            5055
;  :binary-propagations     22
;  :conflicts               1457
;  :datatype-accessor-ax    1178
;  :datatype-constructor-ax 11711
;  :datatype-occurs-check   3384
;  :datatype-splits         8435
;  :decisions               18244
;  :del-clause              56940
;  :final-checks            879
;  :interface-eqs           390
;  :max-generation          11
;  :max-memory              6.54
;  :memory                  6.44
;  :minimized-lits          2039
;  :mk-bool-var             66445
;  :mk-clause               57237
;  :num-allocs              24687090
;  :num-checks              673
;  :propagations            35099
;  :quant-instantiations    13175
;  :rlimit-count            1536923)
(pop) ; 9
(push) ; 9
; [else-branch: 157 | __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == 0 || __flatten_100__106@98@02[First:(Second:($t@82@02))[2]] == -1 && 0 <= First:(Second:($t@82@02))[2]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      0)
    (=
      (Seq_index
        __flatten_100__106@98@02
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_100__106@98@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              2))
          0)
        (=
          (Seq_index
            __flatten_100__106@98@02
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
              2))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      2))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_all_events_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@102@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 158 | 0 <= i@102@02 | live]
; [else-branch: 158 | !(0 <= i@102@02) | live]
(push) ; 10
; [then-branch: 158 | 0 <= i@102@02]
(assert (<= 0 i@102@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 158 | !(0 <= i@102@02)]
(assert (not (<= 0 i@102@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 159 | i@102@02 < |First:(Second:($t@100@02))| && 0 <= i@102@02 | live]
; [else-branch: 159 | !(i@102@02 < |First:(Second:($t@100@02))| && 0 <= i@102@02) | live]
(push) ; 10
; [then-branch: 159 | i@102@02 < |First:(Second:($t@100@02))| && 0 <= i@102@02]
(assert (and
  (<
    i@102@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))
  (<= 0 i@102@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@102@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108536
;  :arith-add-rows          32817
;  :arith-assert-diseq      8287
;  :arith-assert-lower      16426
;  :arith-assert-upper      13877
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9230
;  :arith-fixed-eqs         7572
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1562
;  :datatype-accessor-ax    1339
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60460
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71434
;  :mk-clause               61548
;  :num-allocs              25781086
;  :num-checks              675
;  :propagations            38392
;  :quant-instantiations    14013
;  :restarts                1
;  :rlimit-count            1687249)
; [eval] -1
(push) ; 11
; [then-branch: 160 | First:(Second:($t@100@02))[i@102@02] == -1 | live]
; [else-branch: 160 | First:(Second:($t@100@02))[i@102@02] != -1 | live]
(push) ; 12
; [then-branch: 160 | First:(Second:($t@100@02))[i@102@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
    i@102@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 160 | First:(Second:($t@100@02))[i@102@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      i@102@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@102@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108536
;  :arith-add-rows          32817
;  :arith-assert-diseq      8288
;  :arith-assert-lower      16429
;  :arith-assert-upper      13878
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9231
;  :arith-fixed-eqs         7572
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1562
;  :datatype-accessor-ax    1339
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60460
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71440
;  :mk-clause               61552
;  :num-allocs              25781086
;  :num-checks              676
;  :propagations            38394
;  :quant-instantiations    14014
;  :restarts                1
;  :rlimit-count            1687463)
(push) ; 13
; [then-branch: 161 | 0 <= First:(Second:($t@100@02))[i@102@02] | live]
; [else-branch: 161 | !(0 <= First:(Second:($t@100@02))[i@102@02]) | live]
(push) ; 14
; [then-branch: 161 | 0 <= First:(Second:($t@100@02))[i@102@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
    i@102@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@102@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108536
;  :arith-add-rows          32817
;  :arith-assert-diseq      8288
;  :arith-assert-lower      16429
;  :arith-assert-upper      13878
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9231
;  :arith-fixed-eqs         7572
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1562
;  :datatype-accessor-ax    1339
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60460
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71440
;  :mk-clause               61552
;  :num-allocs              25781086
;  :num-checks              677
;  :propagations            38394
;  :quant-instantiations    14014
;  :restarts                1
;  :rlimit-count            1687557)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 161 | !(0 <= First:(Second:($t@100@02))[i@102@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
      i@102@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 159 | !(i@102@02 < |First:(Second:($t@100@02))| && 0 <= i@102@02)]
(assert (not
  (and
    (<
      i@102@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))
    (<= 0 i@102@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@102@02 Int)) (!
  (implies
    (and
      (<
        i@102@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))
      (<= 0 i@102@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
          i@102@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
            i@102@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
            i@102@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
    i@102@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108536
;  :arith-add-rows          32817
;  :arith-assert-diseq      8289
;  :arith-assert-lower      16430
;  :arith-assert-upper      13879
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9232
;  :arith-fixed-eqs         7572
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    1339
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60476
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71448
;  :mk-clause               61564
;  :num-allocs              25781086
;  :num-checks              678
;  :propagations            38396
;  :quant-instantiations    14015
;  :restarts                1
;  :rlimit-count            1687979)
(assert (forall ((i@102@02 Int)) (!
  (implies
    (and
      (<
        i@102@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))
      (<= 0 i@102@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
          i@102@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
            i@102@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
            i@102@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))
    i@102@02))
  :qid |prog.l<no position>|)))
(declare-const $t@103@02 $Snap)
(assert (= $t@103@02 ($Snap.combine ($Snap.first $t@103@02) ($Snap.second $t@103@02))))
(assert (=
  ($Snap.second $t@103@02)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@103@02))
    ($Snap.second ($Snap.second $t@103@02)))))
(assert (=
  ($Snap.second ($Snap.second $t@103@02))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@103@02)))
    ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@103@02))) $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@103@02)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@104@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 162 | 0 <= i@104@02 | live]
; [else-branch: 162 | !(0 <= i@104@02) | live]
(push) ; 10
; [then-branch: 162 | 0 <= i@104@02]
(assert (<= 0 i@104@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 162 | !(0 <= i@104@02)]
(assert (not (<= 0 i@104@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 163 | i@104@02 < |First:(Second:($t@103@02))| && 0 <= i@104@02 | live]
; [else-branch: 163 | !(i@104@02 < |First:(Second:($t@103@02))| && 0 <= i@104@02) | live]
(push) ; 10
; [then-branch: 163 | i@104@02 < |First:(Second:($t@103@02))| && 0 <= i@104@02]
(assert (and
  (<
    i@104@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))))
  (<= 0 i@104@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@104@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108573
;  :arith-add-rows          32817
;  :arith-assert-diseq      8289
;  :arith-assert-lower      16435
;  :arith-assert-upper      13882
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9234
;  :arith-fixed-eqs         7572
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    1345
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60476
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71470
;  :mk-clause               61564
;  :num-allocs              25781086
;  :num-checks              679
;  :propagations            38396
;  :quant-instantiations    14019
;  :restarts                1
;  :rlimit-count            1689367)
; [eval] -1
(push) ; 11
; [then-branch: 164 | First:(Second:($t@103@02))[i@104@02] == -1 | live]
; [else-branch: 164 | First:(Second:($t@103@02))[i@104@02] != -1 | live]
(push) ; 12
; [then-branch: 164 | First:(Second:($t@103@02))[i@104@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
    i@104@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 164 | First:(Second:($t@103@02))[i@104@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
      i@104@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@104@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108573
;  :arith-add-rows          32817
;  :arith-assert-diseq      8289
;  :arith-assert-lower      16435
;  :arith-assert-upper      13882
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9234
;  :arith-fixed-eqs         7572
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    1345
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60476
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71471
;  :mk-clause               61564
;  :num-allocs              25781086
;  :num-checks              680
;  :propagations            38396
;  :quant-instantiations    14019
;  :restarts                1
;  :rlimit-count            1689518)
(push) ; 13
; [then-branch: 165 | 0 <= First:(Second:($t@103@02))[i@104@02] | live]
; [else-branch: 165 | !(0 <= First:(Second:($t@103@02))[i@104@02]) | live]
(push) ; 14
; [then-branch: 165 | 0 <= First:(Second:($t@103@02))[i@104@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
    i@104@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@104@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108573
;  :arith-add-rows          32817
;  :arith-assert-diseq      8290
;  :arith-assert-lower      16438
;  :arith-assert-upper      13882
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9235
;  :arith-fixed-eqs         7572
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    1345
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60476
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71474
;  :mk-clause               61565
;  :num-allocs              25781086
;  :num-checks              681
;  :propagations            38396
;  :quant-instantiations    14019
;  :restarts                1
;  :rlimit-count            1689622)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 165 | !(0 <= First:(Second:($t@103@02))[i@104@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
      i@104@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 163 | !(i@104@02 < |First:(Second:($t@103@02))| && 0 <= i@104@02)]
(assert (not
  (and
    (<
      i@104@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))))
    (<= 0 i@104@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@104@02 Int)) (!
  (implies
    (and
      (<
        i@104@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))))
      (<= 0 i@104@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
          i@104@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
            i@104@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
            i@104@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
    i@104@02))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@100@02)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108591
;  :arith-add-rows          32817
;  :arith-assert-diseq      8290
;  :arith-assert-lower      16439
;  :arith-assert-upper      13883
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9236
;  :arith-fixed-eqs         7573
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    1347
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60477
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71494
;  :mk-clause               61575
;  :num-allocs              25781086
;  :num-checks              682
;  :propagations            38400
;  :quant-instantiations    14021
;  :restarts                1
;  :rlimit-count            1690640)
(push) ; 8
; [then-branch: 166 | First:(Second:(Second:(Second:($t@100@02))))[0] == 0 | live]
; [else-branch: 166 | First:(Second:(Second:(Second:($t@100@02))))[0] != 0 | live]
(push) ; 9
; [then-branch: 166 | First:(Second:(Second:(Second:($t@100@02))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 166 | First:(Second:(Second:(Second:($t@100@02))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               108592
;  :arith-add-rows          32818
;  :arith-assert-diseq      8290
;  :arith-assert-lower      16439
;  :arith-assert-upper      13883
;  :arith-bound-prop        4072
;  :arith-conflicts         229
;  :arith-eq-adapter        9236
;  :arith-fixed-eqs         7573
;  :arith-offset-eqs        6020
;  :arith-pivots            5428
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    1347
;  :datatype-constructor-ax 12833
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19781
;  :del-clause              60477
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.51
;  :minimized-lits          2454
;  :mk-bool-var             71498
;  :mk-clause               61580
;  :num-allocs              25781086
;  :num-checks              683
;  :propagations            38400
;  :quant-instantiations    14022
;  :restarts                1
;  :rlimit-count            1690955)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               110044
;  :arith-add-rows          33783
;  :arith-assert-diseq      8451
;  :arith-assert-lower      16686
;  :arith-assert-upper      14127
;  :arith-bound-prop        4196
;  :arith-conflicts         232
;  :arith-eq-adapter        9318
;  :arith-fixed-eqs         7877
;  :arith-offset-eqs        6417
;  :arith-pivots            5490
;  :binary-propagations     22
;  :conflicts               1578
;  :datatype-accessor-ax    1347
;  :datatype-constructor-ax 12841
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               19873
;  :del-clause              61097
;  :final-checks            956
;  :interface-eqs           432
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2582
;  :mk-bool-var             72031
;  :mk-clause               62195
;  :num-allocs              26335382
;  :num-checks              684
;  :propagations            39352
;  :quant-instantiations    14172
;  :restarts                1
;  :rlimit-count            1732852
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               112152
;  :arith-add-rows          34282
;  :arith-assert-diseq      8697
;  :arith-assert-lower      17090
;  :arith-assert-upper      14407
;  :arith-bound-prop        4309
;  :arith-conflicts         236
;  :arith-eq-adapter        9431
;  :arith-fixed-eqs         8322
;  :arith-offset-eqs        6933
;  :arith-pivots            5546
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    1347
;  :datatype-constructor-ax 12857
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20034
;  :del-clause              61908
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2701
;  :mk-bool-var             72760
;  :mk-clause               63006
;  :num-allocs              26335382
;  :num-checks              685
;  :propagations            40559
;  :quant-instantiations    14395
;  :restarts                1
;  :rlimit-count            1759481
;  :time                    0.01)
; [then-branch: 167 | First:(Second:(Second:(Second:($t@100@02))))[0] == 0 || First:(Second:(Second:(Second:($t@100@02))))[0] == -1 | live]
; [else-branch: 167 | !(First:(Second:(Second:(Second:($t@100@02))))[0] == 0 || First:(Second:(Second:(Second:($t@100@02))))[0] == -1) | live]
(push) ; 9
; [then-branch: 167 | First:(Second:(Second:(Second:($t@100@02))))[0] == 0 || First:(Second:(Second:(Second:($t@100@02))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               112152
;  :arith-add-rows          34282
;  :arith-assert-diseq      8697
;  :arith-assert-lower      17090
;  :arith-assert-upper      14407
;  :arith-bound-prop        4309
;  :arith-conflicts         236
;  :arith-eq-adapter        9431
;  :arith-fixed-eqs         8322
;  :arith-offset-eqs        6933
;  :arith-pivots            5546
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    1347
;  :datatype-constructor-ax 12857
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20034
;  :del-clause              61908
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2701
;  :mk-bool-var             72762
;  :mk-clause               63007
;  :num-allocs              26335382
;  :num-checks              686
;  :propagations            40559
;  :quant-instantiations    14395
;  :restarts                1
;  :rlimit-count            1759630)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 167 | !(First:(Second:(Second:(Second:($t@100@02))))[0] == 0 || First:(Second:(Second:(Second:($t@100@02))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               112158
;  :arith-add-rows          34282
;  :arith-assert-diseq      8697
;  :arith-assert-lower      17090
;  :arith-assert-upper      14407
;  :arith-bound-prop        4309
;  :arith-conflicts         236
;  :arith-eq-adapter        9431
;  :arith-fixed-eqs         8322
;  :arith-offset-eqs        6933
;  :arith-pivots            5546
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    1348
;  :datatype-constructor-ax 12857
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20034
;  :del-clause              61909
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2701
;  :mk-bool-var             72768
;  :mk-clause               63011
;  :num-allocs              26335382
;  :num-checks              687
;  :propagations            40559
;  :quant-instantiations    14395
;  :restarts                1
;  :rlimit-count            1760113)
(push) ; 8
; [then-branch: 168 | First:(Second:(Second:(Second:($t@100@02))))[1] == 0 | live]
; [else-branch: 168 | First:(Second:(Second:(Second:($t@100@02))))[1] != 0 | live]
(push) ; 9
; [then-branch: 168 | First:(Second:(Second:(Second:($t@100@02))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 168 | First:(Second:(Second:(Second:($t@100@02))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               112159
;  :arith-add-rows          34283
;  :arith-assert-diseq      8697
;  :arith-assert-lower      17090
;  :arith-assert-upper      14407
;  :arith-bound-prop        4309
;  :arith-conflicts         236
;  :arith-eq-adapter        9431
;  :arith-fixed-eqs         8322
;  :arith-offset-eqs        6933
;  :arith-pivots            5546
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    1348
;  :datatype-constructor-ax 12857
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20034
;  :del-clause              61909
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2701
;  :mk-bool-var             72773
;  :mk-clause               63018
;  :num-allocs              26335382
;  :num-checks              688
;  :propagations            40559
;  :quant-instantiations    14396
;  :restarts                1
;  :rlimit-count            1760338)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               113899
;  :arith-add-rows          35008
;  :arith-assert-diseq      8874
;  :arith-assert-lower      17357
;  :arith-assert-upper      14659
;  :arith-bound-prop        4468
;  :arith-conflicts         240
;  :arith-eq-adapter        9512
;  :arith-fixed-eqs         8622
;  :arith-offset-eqs        7375
;  :arith-pivots            5598
;  :binary-propagations     22
;  :conflicts               1612
;  :datatype-accessor-ax    1348
;  :datatype-constructor-ax 12865
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20139
;  :del-clause              62634
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2860
;  :mk-bool-var             73373
;  :mk-clause               63736
;  :num-allocs              26335382
;  :num-checks              689
;  :propagations            41485
;  :quant-instantiations    14567
;  :restarts                1
;  :rlimit-count            1796726
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               115304
;  :arith-add-rows          35472
;  :arith-assert-diseq      9058
;  :arith-assert-lower      17655
;  :arith-assert-upper      14891
;  :arith-bound-prop        4585
;  :arith-conflicts         242
;  :arith-eq-adapter        9603
;  :arith-fixed-eqs         8845
;  :arith-offset-eqs        7647
;  :arith-pivots            5637
;  :binary-propagations     22
;  :conflicts               1622
;  :datatype-accessor-ax    1348
;  :datatype-constructor-ax 12881
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20240
;  :del-clause              63297
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2914
;  :mk-bool-var             73952
;  :mk-clause               64399
;  :num-allocs              26335382
;  :num-checks              690
;  :propagations            42384
;  :quant-instantiations    14742
;  :restarts                1
;  :rlimit-count            1820540
;  :time                    0.01)
; [then-branch: 169 | First:(Second:(Second:(Second:($t@100@02))))[1] == 0 || First:(Second:(Second:(Second:($t@100@02))))[1] == -1 | live]
; [else-branch: 169 | !(First:(Second:(Second:(Second:($t@100@02))))[1] == 0 || First:(Second:(Second:(Second:($t@100@02))))[1] == -1) | live]
(push) ; 9
; [then-branch: 169 | First:(Second:(Second:(Second:($t@100@02))))[1] == 0 || First:(Second:(Second:(Second:($t@100@02))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               115304
;  :arith-add-rows          35472
;  :arith-assert-diseq      9058
;  :arith-assert-lower      17655
;  :arith-assert-upper      14891
;  :arith-bound-prop        4585
;  :arith-conflicts         242
;  :arith-eq-adapter        9603
;  :arith-fixed-eqs         8845
;  :arith-offset-eqs        7647
;  :arith-pivots            5637
;  :binary-propagations     22
;  :conflicts               1622
;  :datatype-accessor-ax    1348
;  :datatype-constructor-ax 12881
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20240
;  :del-clause              63297
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2914
;  :mk-bool-var             73954
;  :mk-clause               64400
;  :num-allocs              26335382
;  :num-checks              691
;  :propagations            42384
;  :quant-instantiations    14742
;  :restarts                1
;  :rlimit-count            1820689)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 169 | !(First:(Second:(Second:(Second:($t@100@02))))[1] == 0 || First:(Second:(Second:(Second:($t@100@02))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1 ==> diz.Main_event_state[2] == -2
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               115310
;  :arith-add-rows          35472
;  :arith-assert-diseq      9058
;  :arith-assert-lower      17655
;  :arith-assert-upper      14891
;  :arith-bound-prop        4585
;  :arith-conflicts         242
;  :arith-eq-adapter        9603
;  :arith-fixed-eqs         8845
;  :arith-offset-eqs        7647
;  :arith-pivots            5637
;  :binary-propagations     22
;  :conflicts               1622
;  :datatype-accessor-ax    1349
;  :datatype-constructor-ax 12881
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20240
;  :del-clause              63298
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2914
;  :mk-bool-var             73960
;  :mk-clause               64404
;  :num-allocs              26335382
;  :num-checks              692
;  :propagations            42384
;  :quant-instantiations    14742
;  :restarts                1
;  :rlimit-count            1821178)
(push) ; 8
; [then-branch: 170 | First:(Second:(Second:(Second:($t@100@02))))[2] == 0 | live]
; [else-branch: 170 | First:(Second:(Second:(Second:($t@100@02))))[2] != 0 | live]
(push) ; 9
; [then-branch: 170 | First:(Second:(Second:(Second:($t@100@02))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    2)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 170 | First:(Second:(Second:(Second:($t@100@02))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               115311
;  :arith-add-rows          35473
;  :arith-assert-diseq      9058
;  :arith-assert-lower      17655
;  :arith-assert-upper      14891
;  :arith-bound-prop        4585
;  :arith-conflicts         242
;  :arith-eq-adapter        9603
;  :arith-fixed-eqs         8845
;  :arith-offset-eqs        7647
;  :arith-pivots            5637
;  :binary-propagations     22
;  :conflicts               1622
;  :datatype-accessor-ax    1349
;  :datatype-constructor-ax 12881
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20240
;  :del-clause              63298
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          2914
;  :mk-bool-var             73965
;  :mk-clause               64411
;  :num-allocs              26335382
;  :num-checks              693
;  :propagations            42384
;  :quant-instantiations    14743
;  :restarts                1
;  :rlimit-count            1821403)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               117173
;  :arith-add-rows          36495
;  :arith-assert-diseq      9243
;  :arith-assert-lower      17925
;  :arith-assert-upper      15168
;  :arith-bound-prop        4723
;  :arith-conflicts         247
;  :arith-eq-adapter        9691
;  :arith-fixed-eqs         9176
;  :arith-offset-eqs        8121
;  :arith-pivots            5703
;  :binary-propagations     22
;  :conflicts               1641
;  :datatype-accessor-ax    1349
;  :datatype-constructor-ax 12889
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20350
;  :del-clause              64090
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.63
;  :memory                  6.62
;  :minimized-lits          3088
;  :mk-bool-var             74634
;  :mk-clause               65196
;  :num-allocs              26335382
;  :num-checks              694
;  :propagations            43476
;  :quant-instantiations    14928
;  :restarts                1
;  :rlimit-count            1869430
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               118980
;  :arith-add-rows          37163
;  :arith-assert-diseq      9478
;  :arith-assert-lower      18304
;  :arith-assert-upper      15415
;  :arith-bound-prop        4854
;  :arith-conflicts         251
;  :arith-eq-adapter        9805
;  :arith-fixed-eqs         9506
;  :arith-offset-eqs        8532
;  :arith-pivots            5774
;  :binary-propagations     22
;  :conflicts               1658
;  :datatype-accessor-ax    1349
;  :datatype-constructor-ax 12905
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20485
;  :del-clause              64942
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3178
;  :mk-bool-var             75368
;  :mk-clause               66048
;  :num-allocs              27469152
;  :num-checks              695
;  :propagations            44570
;  :quant-instantiations    15143
;  :restarts                1
;  :rlimit-count            1902002
;  :time                    0.01)
; [then-branch: 171 | First:(Second:(Second:(Second:($t@100@02))))[2] == 0 || First:(Second:(Second:(Second:($t@100@02))))[2] == -1 | live]
; [else-branch: 171 | !(First:(Second:(Second:(Second:($t@100@02))))[2] == 0 || First:(Second:(Second:(Second:($t@100@02))))[2] == -1) | live]
(push) ; 9
; [then-branch: 171 | First:(Second:(Second:(Second:($t@100@02))))[2] == 0 || First:(Second:(Second:(Second:($t@100@02))))[2] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    (- 0 1))))
; [eval] diz.Main_event_state[2] == -2
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               118980
;  :arith-add-rows          37163
;  :arith-assert-diseq      9478
;  :arith-assert-lower      18304
;  :arith-assert-upper      15415
;  :arith-bound-prop        4854
;  :arith-conflicts         251
;  :arith-eq-adapter        9805
;  :arith-fixed-eqs         9506
;  :arith-offset-eqs        8532
;  :arith-pivots            5774
;  :binary-propagations     22
;  :conflicts               1658
;  :datatype-accessor-ax    1349
;  :datatype-constructor-ax 12905
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20485
;  :del-clause              64942
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3178
;  :mk-bool-var             75370
;  :mk-clause               66049
;  :num-allocs              27469152
;  :num-checks              696
;  :propagations            44570
;  :quant-instantiations    15143
;  :restarts                1
;  :rlimit-count            1902151)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 171 | !(First:(Second:(Second:(Second:($t@100@02))))[2] == 0 || First:(Second:(Second:(Second:($t@100@02))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      2)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1 ==> diz.Main_event_state[3] == -2
; [eval] old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1
; [eval] old(diz.Main_event_state[3]) == 0
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               118986
;  :arith-add-rows          37163
;  :arith-assert-diseq      9478
;  :arith-assert-lower      18304
;  :arith-assert-upper      15415
;  :arith-bound-prop        4854
;  :arith-conflicts         251
;  :arith-eq-adapter        9805
;  :arith-fixed-eqs         9506
;  :arith-offset-eqs        8532
;  :arith-pivots            5774
;  :binary-propagations     22
;  :conflicts               1658
;  :datatype-accessor-ax    1350
;  :datatype-constructor-ax 12905
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20485
;  :del-clause              64943
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3178
;  :mk-bool-var             75376
;  :mk-clause               66053
;  :num-allocs              27469152
;  :num-checks              697
;  :propagations            44570
;  :quant-instantiations    15143
;  :restarts                1
;  :rlimit-count            1902650)
(push) ; 8
; [then-branch: 172 | First:(Second:(Second:(Second:($t@100@02))))[3] == 0 | live]
; [else-branch: 172 | First:(Second:(Second:(Second:($t@100@02))))[3] != 0 | live]
(push) ; 9
; [then-branch: 172 | First:(Second:(Second:(Second:($t@100@02))))[3] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    3)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 172 | First:(Second:(Second:(Second:($t@100@02))))[3] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    0)))
; [eval] old(diz.Main_event_state[3]) == -1
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               118987
;  :arith-add-rows          37164
;  :arith-assert-diseq      9478
;  :arith-assert-lower      18304
;  :arith-assert-upper      15415
;  :arith-bound-prop        4854
;  :arith-conflicts         251
;  :arith-eq-adapter        9805
;  :arith-fixed-eqs         9506
;  :arith-offset-eqs        8532
;  :arith-pivots            5774
;  :binary-propagations     22
;  :conflicts               1658
;  :datatype-accessor-ax    1350
;  :datatype-constructor-ax 12905
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20485
;  :del-clause              64943
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3178
;  :mk-bool-var             75381
;  :mk-clause               66060
;  :num-allocs              27469152
;  :num-checks              698
;  :propagations            44570
;  :quant-instantiations    15144
;  :restarts                1
;  :rlimit-count            1902965)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               120566
;  :arith-add-rows          37792
;  :arith-assert-diseq      9675
;  :arith-assert-lower      18608
;  :arith-assert-upper      15701
;  :arith-bound-prop        5005
;  :arith-conflicts         251
;  :arith-eq-adapter        9916
;  :arith-fixed-eqs         9760
;  :arith-offset-eqs        8847
;  :arith-pivots            5832
;  :binary-propagations     22
;  :conflicts               1674
;  :datatype-accessor-ax    1350
;  :datatype-constructor-ax 12921
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20588
;  :del-clause              65847
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3274
;  :mk-bool-var             76190
;  :mk-clause               66957
;  :num-allocs              27469152
;  :num-checks              699
;  :propagations            45584
;  :quant-instantiations    15357
;  :restarts                1
;  :rlimit-count            1931844
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               122780
;  :arith-add-rows          38306
;  :arith-assert-diseq      9895
;  :arith-assert-lower      18985
;  :arith-assert-upper      15994
;  :arith-bound-prop        5150
;  :arith-conflicts         252
;  :arith-eq-adapter        10044
;  :arith-fixed-eqs         10187
;  :arith-offset-eqs        9396
;  :arith-pivots            5895
;  :binary-propagations     22
;  :conflicts               1689
;  :datatype-accessor-ax    1350
;  :datatype-constructor-ax 12937
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20702
;  :del-clause              66817
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3377
;  :mk-bool-var             77041
;  :mk-clause               67927
;  :num-allocs              27469152
;  :num-checks              700
;  :propagations            46913
;  :quant-instantiations    15599
;  :restarts                1
;  :rlimit-count            1959573
;  :time                    0.01)
; [then-branch: 173 | First:(Second:(Second:(Second:($t@100@02))))[3] == 0 || First:(Second:(Second:(Second:($t@100@02))))[3] == -1 | live]
; [else-branch: 173 | !(First:(Second:(Second:(Second:($t@100@02))))[3] == 0 || First:(Second:(Second:(Second:($t@100@02))))[3] == -1) | live]
(push) ; 9
; [then-branch: 173 | First:(Second:(Second:(Second:($t@100@02))))[3] == 0 || First:(Second:(Second:(Second:($t@100@02))))[3] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    (- 0 1))))
; [eval] diz.Main_event_state[3] == -2
; [eval] diz.Main_event_state[3]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               122780
;  :arith-add-rows          38306
;  :arith-assert-diseq      9895
;  :arith-assert-lower      18985
;  :arith-assert-upper      15994
;  :arith-bound-prop        5150
;  :arith-conflicts         252
;  :arith-eq-adapter        10044
;  :arith-fixed-eqs         10187
;  :arith-offset-eqs        9396
;  :arith-pivots            5895
;  :binary-propagations     22
;  :conflicts               1689
;  :datatype-accessor-ax    1350
;  :datatype-constructor-ax 12937
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20702
;  :del-clause              66817
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3377
;  :mk-bool-var             77043
;  :mk-clause               67928
;  :num-allocs              27469152
;  :num-checks              701
;  :propagations            46913
;  :quant-instantiations    15599
;  :restarts                1
;  :rlimit-count            1959722)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 173 | !(First:(Second:(Second:(Second:($t@100@02))))[3] == 0 || First:(Second:(Second:(Second:($t@100@02))))[3] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      3)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1 ==> diz.Main_event_state[4] == -2
; [eval] old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1
; [eval] old(diz.Main_event_state[4]) == 0
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               122786
;  :arith-add-rows          38306
;  :arith-assert-diseq      9895
;  :arith-assert-lower      18985
;  :arith-assert-upper      15994
;  :arith-bound-prop        5150
;  :arith-conflicts         252
;  :arith-eq-adapter        10044
;  :arith-fixed-eqs         10187
;  :arith-offset-eqs        9396
;  :arith-pivots            5895
;  :binary-propagations     22
;  :conflicts               1689
;  :datatype-accessor-ax    1351
;  :datatype-constructor-ax 12937
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20702
;  :del-clause              66818
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3377
;  :mk-bool-var             77049
;  :mk-clause               67932
;  :num-allocs              27469152
;  :num-checks              702
;  :propagations            46913
;  :quant-instantiations    15599
;  :restarts                1
;  :rlimit-count            1960231)
(push) ; 8
; [then-branch: 174 | First:(Second:(Second:(Second:($t@100@02))))[4] == 0 | live]
; [else-branch: 174 | First:(Second:(Second:(Second:($t@100@02))))[4] != 0 | live]
(push) ; 9
; [then-branch: 174 | First:(Second:(Second:(Second:($t@100@02))))[4] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    4)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 174 | First:(Second:(Second:(Second:($t@100@02))))[4] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    0)))
; [eval] old(diz.Main_event_state[4]) == -1
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               122787
;  :arith-add-rows          38307
;  :arith-assert-diseq      9895
;  :arith-assert-lower      18985
;  :arith-assert-upper      15994
;  :arith-bound-prop        5150
;  :arith-conflicts         252
;  :arith-eq-adapter        10044
;  :arith-fixed-eqs         10187
;  :arith-offset-eqs        9396
;  :arith-pivots            5895
;  :binary-propagations     22
;  :conflicts               1689
;  :datatype-accessor-ax    1351
;  :datatype-constructor-ax 12937
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20702
;  :del-clause              66818
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.74
;  :memory                  6.63
;  :minimized-lits          3377
;  :mk-bool-var             77054
;  :mk-clause               67939
;  :num-allocs              27469152
;  :num-checks              703
;  :propagations            46913
;  :quant-instantiations    15600
;  :restarts                1
;  :rlimit-count            1960456)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               124103
;  :arith-add-rows          38658
;  :arith-assert-diseq      10069
;  :arith-assert-lower      19261
;  :arith-assert-upper      16204
;  :arith-bound-prop        5285
;  :arith-conflicts         252
;  :arith-eq-adapter        10134
;  :arith-fixed-eqs         10433
;  :arith-offset-eqs        9698
;  :arith-pivots            5935
;  :binary-propagations     22
;  :conflicts               1697
;  :datatype-accessor-ax    1351
;  :datatype-constructor-ax 12953
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20798
;  :del-clause              67523
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3444
;  :mk-bool-var             77636
;  :mk-clause               68637
;  :num-allocs              28044485
;  :num-checks              704
;  :propagations            47797
;  :quant-instantiations    15776
;  :restarts                1
;  :rlimit-count            1980836
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               125727
;  :arith-add-rows          39573
;  :arith-assert-diseq      10264
;  :arith-assert-lower      19576
;  :arith-assert-upper      16463
;  :arith-bound-prop        5429
;  :arith-conflicts         255
;  :arith-eq-adapter        10245
;  :arith-fixed-eqs         10723
;  :arith-offset-eqs        10057
;  :arith-pivots            6003
;  :binary-propagations     22
;  :conflicts               1712
;  :datatype-accessor-ax    1351
;  :datatype-constructor-ax 12969
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20909
;  :del-clause              68424
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3526
;  :mk-bool-var             78387
;  :mk-clause               69538
;  :num-allocs              28044485
;  :num-checks              705
;  :propagations            48819
;  :quant-instantiations    15994
;  :restarts                1
;  :rlimit-count            2023769
;  :time                    0.01)
; [then-branch: 175 | First:(Second:(Second:(Second:($t@100@02))))[4] == 0 || First:(Second:(Second:(Second:($t@100@02))))[4] == -1 | live]
; [else-branch: 175 | !(First:(Second:(Second:(Second:($t@100@02))))[4] == 0 || First:(Second:(Second:(Second:($t@100@02))))[4] == -1) | live]
(push) ; 9
; [then-branch: 175 | First:(Second:(Second:(Second:($t@100@02))))[4] == 0 || First:(Second:(Second:(Second:($t@100@02))))[4] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    (- 0 1))))
; [eval] diz.Main_event_state[4] == -2
; [eval] diz.Main_event_state[4]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               125727
;  :arith-add-rows          39573
;  :arith-assert-diseq      10264
;  :arith-assert-lower      19576
;  :arith-assert-upper      16463
;  :arith-bound-prop        5429
;  :arith-conflicts         255
;  :arith-eq-adapter        10245
;  :arith-fixed-eqs         10723
;  :arith-offset-eqs        10057
;  :arith-pivots            6003
;  :binary-propagations     22
;  :conflicts               1712
;  :datatype-accessor-ax    1351
;  :datatype-constructor-ax 12969
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20909
;  :del-clause              68424
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3526
;  :mk-bool-var             78389
;  :mk-clause               69539
;  :num-allocs              28044485
;  :num-checks              706
;  :propagations            48819
;  :quant-instantiations    15994
;  :restarts                1
;  :rlimit-count            2023918)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 175 | !(First:(Second:(Second:(Second:($t@100@02))))[4] == 0 || First:(Second:(Second:(Second:($t@100@02))))[4] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      4)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1 ==> diz.Main_event_state[5] == -2
; [eval] old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1
; [eval] old(diz.Main_event_state[5]) == 0
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               125733
;  :arith-add-rows          39573
;  :arith-assert-diseq      10264
;  :arith-assert-lower      19576
;  :arith-assert-upper      16463
;  :arith-bound-prop        5429
;  :arith-conflicts         255
;  :arith-eq-adapter        10245
;  :arith-fixed-eqs         10723
;  :arith-offset-eqs        10057
;  :arith-pivots            6003
;  :binary-propagations     22
;  :conflicts               1712
;  :datatype-accessor-ax    1352
;  :datatype-constructor-ax 12969
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20909
;  :del-clause              68425
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3526
;  :mk-bool-var             78395
;  :mk-clause               69543
;  :num-allocs              28044485
;  :num-checks              707
;  :propagations            48819
;  :quant-instantiations    15994
;  :restarts                1
;  :rlimit-count            2024437)
(push) ; 8
; [then-branch: 176 | First:(Second:(Second:(Second:($t@100@02))))[5] == 0 | live]
; [else-branch: 176 | First:(Second:(Second:(Second:($t@100@02))))[5] != 0 | live]
(push) ; 9
; [then-branch: 176 | First:(Second:(Second:(Second:($t@100@02))))[5] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    5)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 176 | First:(Second:(Second:(Second:($t@100@02))))[5] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    0)))
; [eval] old(diz.Main_event_state[5]) == -1
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               125734
;  :arith-add-rows          39574
;  :arith-assert-diseq      10264
;  :arith-assert-lower      19576
;  :arith-assert-upper      16463
;  :arith-bound-prop        5429
;  :arith-conflicts         255
;  :arith-eq-adapter        10245
;  :arith-fixed-eqs         10723
;  :arith-offset-eqs        10057
;  :arith-pivots            6003
;  :binary-propagations     22
;  :conflicts               1712
;  :datatype-accessor-ax    1352
;  :datatype-constructor-ax 12969
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               20909
;  :del-clause              68425
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3526
;  :mk-bool-var             78400
;  :mk-clause               69550
;  :num-allocs              28044485
;  :num-checks              708
;  :propagations            48819
;  :quant-instantiations    15995
;  :restarts                1
;  :rlimit-count            2024622)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               127421
;  :arith-add-rows          40489
;  :arith-assert-diseq      10472
;  :arith-assert-lower      19920
;  :arith-assert-upper      16704
;  :arith-bound-prop        5590
;  :arith-conflicts         260
;  :arith-eq-adapter        10355
;  :arith-fixed-eqs         11016
;  :arith-offset-eqs        10412
;  :arith-pivots            6074
;  :binary-propagations     22
;  :conflicts               1729
;  :datatype-accessor-ax    1352
;  :datatype-constructor-ax 12985
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21038
;  :del-clause              69284
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3618
;  :mk-bool-var             79113
;  :mk-clause               70402
;  :num-allocs              28044485
;  :num-checks              709
;  :propagations            49791
;  :quant-instantiations    16202
;  :restarts                1
;  :rlimit-count            2070675
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               128961
;  :arith-add-rows          41778
;  :arith-assert-diseq      10681
;  :arith-assert-lower      20197
;  :arith-assert-upper      16989
;  :arith-bound-prop        5684
;  :arith-conflicts         264
;  :arith-eq-adapter        10442
;  :arith-fixed-eqs         11281
;  :arith-offset-eqs        10669
;  :arith-pivots            6143
;  :binary-propagations     22
;  :conflicts               1748
;  :datatype-accessor-ax    1352
;  :datatype-constructor-ax 12993
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21195
;  :del-clause              70139
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3654
;  :mk-bool-var             79964
;  :mk-clause               71257
;  :num-allocs              28044485
;  :num-checks              710
;  :propagations            50828
;  :quant-instantiations    16425
;  :restarts                1
;  :rlimit-count            2119568
;  :time                    0.01)
; [then-branch: 177 | First:(Second:(Second:(Second:($t@100@02))))[5] == 0 || First:(Second:(Second:(Second:($t@100@02))))[5] == -1 | live]
; [else-branch: 177 | !(First:(Second:(Second:(Second:($t@100@02))))[5] == 0 || First:(Second:(Second:(Second:($t@100@02))))[5] == -1) | live]
(push) ; 9
; [then-branch: 177 | First:(Second:(Second:(Second:($t@100@02))))[5] == 0 || First:(Second:(Second:(Second:($t@100@02))))[5] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    (- 0 1))))
; [eval] diz.Main_event_state[5] == -2
; [eval] diz.Main_event_state[5]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               128961
;  :arith-add-rows          41778
;  :arith-assert-diseq      10681
;  :arith-assert-lower      20197
;  :arith-assert-upper      16989
;  :arith-bound-prop        5684
;  :arith-conflicts         264
;  :arith-eq-adapter        10442
;  :arith-fixed-eqs         11281
;  :arith-offset-eqs        10669
;  :arith-pivots            6143
;  :binary-propagations     22
;  :conflicts               1748
;  :datatype-accessor-ax    1352
;  :datatype-constructor-ax 12993
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21195
;  :del-clause              70139
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3654
;  :mk-bool-var             79966
;  :mk-clause               71258
;  :num-allocs              28044485
;  :num-checks              711
;  :propagations            50828
;  :quant-instantiations    16425
;  :restarts                1
;  :rlimit-count            2119717)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 177 | !(First:(Second:(Second:(Second:($t@100@02))))[5] == 0 || First:(Second:(Second:(Second:($t@100@02))))[5] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      5)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1) ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1)
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               128967
;  :arith-add-rows          41778
;  :arith-assert-diseq      10681
;  :arith-assert-lower      20197
;  :arith-assert-upper      16989
;  :arith-bound-prop        5684
;  :arith-conflicts         264
;  :arith-eq-adapter        10442
;  :arith-fixed-eqs         11281
;  :arith-offset-eqs        10669
;  :arith-pivots            6143
;  :binary-propagations     22
;  :conflicts               1748
;  :datatype-accessor-ax    1353
;  :datatype-constructor-ax 12993
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21195
;  :del-clause              70140
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3654
;  :mk-bool-var             79972
;  :mk-clause               71262
;  :num-allocs              28044485
;  :num-checks              712
;  :propagations            50828
;  :quant-instantiations    16425
;  :restarts                1
;  :rlimit-count            2120246)
(push) ; 8
; [then-branch: 178 | First:(Second:(Second:(Second:($t@100@02))))[0] == 0 | live]
; [else-branch: 178 | First:(Second:(Second:(Second:($t@100@02))))[0] != 0 | live]
(push) ; 9
; [then-branch: 178 | First:(Second:(Second:(Second:($t@100@02))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 178 | First:(Second:(Second:(Second:($t@100@02))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               128968
;  :arith-add-rows          41778
;  :arith-assert-diseq      10681
;  :arith-assert-lower      20197
;  :arith-assert-upper      16989
;  :arith-bound-prop        5684
;  :arith-conflicts         264
;  :arith-eq-adapter        10442
;  :arith-fixed-eqs         11281
;  :arith-offset-eqs        10669
;  :arith-pivots            6143
;  :binary-propagations     22
;  :conflicts               1748
;  :datatype-accessor-ax    1353
;  :datatype-constructor-ax 12993
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21195
;  :del-clause              70140
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3654
;  :mk-bool-var             79975
;  :mk-clause               71267
;  :num-allocs              28044485
;  :num-checks              713
;  :propagations            50828
;  :quant-instantiations    16426
;  :restarts                1
;  :rlimit-count            2120442)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               130459
;  :arith-add-rows          42743
;  :arith-assert-diseq      10979
;  :arith-assert-lower      20655
;  :arith-assert-upper      17268
;  :arith-bound-prop        5772
;  :arith-conflicts         267
;  :arith-eq-adapter        10571
;  :arith-fixed-eqs         11491
;  :arith-offset-eqs        10814
;  :arith-pivots            6200
;  :binary-propagations     22
;  :conflicts               1759
;  :datatype-accessor-ax    1353
;  :datatype-constructor-ax 13017
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21355
;  :del-clause              71041
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3690
;  :mk-bool-var             80736
;  :mk-clause               72163
;  :num-allocs              28044485
;  :num-checks              714
;  :propagations            52034
;  :quant-instantiations    16664
;  :restarts                1
;  :rlimit-count            2163232
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132232
;  :arith-add-rows          43335
;  :arith-assert-diseq      11205
;  :arith-assert-lower      21069
;  :arith-assert-upper      17542
;  :arith-bound-prop        5885
;  :arith-conflicts         270
;  :arith-eq-adapter        10691
;  :arith-fixed-eqs         11767
;  :arith-offset-eqs        11126
;  :arith-pivots            6268
;  :binary-propagations     22
;  :conflicts               1773
;  :datatype-accessor-ax    1353
;  :datatype-constructor-ax 13033
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21525
;  :del-clause              71980
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3745
;  :mk-bool-var             81636
;  :mk-clause               73102
;  :num-allocs              28044485
;  :num-checks              715
;  :propagations            53214
;  :quant-instantiations    16910
;  :restarts                1
;  :rlimit-count            2194123
;  :time                    0.01)
; [then-branch: 179 | !(First:(Second:(Second:(Second:($t@100@02))))[0] == 0 || First:(Second:(Second:(Second:($t@100@02))))[0] == -1) | live]
; [else-branch: 179 | First:(Second:(Second:(Second:($t@100@02))))[0] == 0 || First:(Second:(Second:(Second:($t@100@02))))[0] == -1 | live]
(push) ; 9
; [then-branch: 179 | !(First:(Second:(Second:(Second:($t@100@02))))[0] == 0 || First:(Second:(Second:(Second:($t@100@02))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        0)
      (- 0 1)))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132233
;  :arith-add-rows          43336
;  :arith-assert-diseq      11205
;  :arith-assert-lower      21069
;  :arith-assert-upper      17542
;  :arith-bound-prop        5885
;  :arith-conflicts         270
;  :arith-eq-adapter        10691
;  :arith-fixed-eqs         11767
;  :arith-offset-eqs        11126
;  :arith-pivots            6268
;  :binary-propagations     22
;  :conflicts               1773
;  :datatype-accessor-ax    1353
;  :datatype-constructor-ax 13033
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21525
;  :del-clause              71980
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3745
;  :mk-bool-var             81639
;  :mk-clause               73107
;  :num-allocs              28044485
;  :num-checks              716
;  :propagations            53215
;  :quant-instantiations    16911
;  :restarts                1
;  :rlimit-count            2194341)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132233
;  :arith-add-rows          43336
;  :arith-assert-diseq      11205
;  :arith-assert-lower      21069
;  :arith-assert-upper      17542
;  :arith-bound-prop        5885
;  :arith-conflicts         270
;  :arith-eq-adapter        10691
;  :arith-fixed-eqs         11767
;  :arith-offset-eqs        11126
;  :arith-pivots            6268
;  :binary-propagations     22
;  :conflicts               1773
;  :datatype-accessor-ax    1353
;  :datatype-constructor-ax 13033
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21525
;  :del-clause              71980
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3745
;  :mk-bool-var             81639
;  :mk-clause               73107
;  :num-allocs              28044485
;  :num-checks              717
;  :propagations            53215
;  :quant-instantiations    16911
;  :restarts                1
;  :rlimit-count            2194356)
(pop) ; 9
(push) ; 9
; [else-branch: 179 | First:(Second:(Second:(Second:($t@100@02))))[0] == 0 || First:(Second:(Second:(Second:($t@100@02))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          0)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          0)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1) ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1)
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132239
;  :arith-add-rows          43336
;  :arith-assert-diseq      11205
;  :arith-assert-lower      21069
;  :arith-assert-upper      17542
;  :arith-bound-prop        5885
;  :arith-conflicts         270
;  :arith-eq-adapter        10691
;  :arith-fixed-eqs         11767
;  :arith-offset-eqs        11126
;  :arith-pivots            6268
;  :binary-propagations     22
;  :conflicts               1773
;  :datatype-accessor-ax    1354
;  :datatype-constructor-ax 13033
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21525
;  :del-clause              71985
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3745
;  :mk-bool-var             81642
;  :mk-clause               73108
;  :num-allocs              28044485
;  :num-checks              718
;  :propagations            53215
;  :quant-instantiations    16911
;  :restarts                1
;  :rlimit-count            2194835)
(push) ; 8
; [then-branch: 180 | First:(Second:(Second:(Second:($t@100@02))))[1] == 0 | live]
; [else-branch: 180 | First:(Second:(Second:(Second:($t@100@02))))[1] != 0 | live]
(push) ; 9
; [then-branch: 180 | First:(Second:(Second:(Second:($t@100@02))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 180 | First:(Second:(Second:(Second:($t@100@02))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132240
;  :arith-add-rows          43337
;  :arith-assert-diseq      11205
;  :arith-assert-lower      21069
;  :arith-assert-upper      17542
;  :arith-bound-prop        5885
;  :arith-conflicts         270
;  :arith-eq-adapter        10691
;  :arith-fixed-eqs         11767
;  :arith-offset-eqs        11126
;  :arith-pivots            6268
;  :binary-propagations     22
;  :conflicts               1773
;  :datatype-accessor-ax    1354
;  :datatype-constructor-ax 13033
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21525
;  :del-clause              71985
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3745
;  :mk-bool-var             81646
;  :mk-clause               73115
;  :num-allocs              28044485
;  :num-checks              719
;  :propagations            53215
;  :quant-instantiations    16912
;  :restarts                1
;  :rlimit-count            2195032)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               133954
;  :arith-add-rows          43911
;  :arith-assert-diseq      11407
;  :arith-assert-lower      21427
;  :arith-assert-upper      17775
;  :arith-bound-prop        6043
;  :arith-conflicts         271
;  :arith-eq-adapter        10802
;  :arith-fixed-eqs         12099
;  :arith-offset-eqs        11523
;  :arith-pivots            6328
;  :binary-propagations     22
;  :conflicts               1786
;  :datatype-accessor-ax    1354
;  :datatype-constructor-ax 13049
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21634
;  :del-clause              72872
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3818
;  :mk-bool-var             82429
;  :mk-clause               73995
;  :num-allocs              28044485
;  :num-checks              720
;  :propagations            54265
;  :quant-instantiations    17131
;  :restarts                1
;  :rlimit-count            2221890
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               135705
;  :arith-add-rows          44925
;  :arith-assert-diseq      11632
;  :arith-assert-lower      21805
;  :arith-assert-upper      18025
;  :arith-bound-prop        6197
;  :arith-conflicts         276
;  :arith-eq-adapter        10930
;  :arith-fixed-eqs         12418
;  :arith-offset-eqs        11876
;  :arith-pivots            6403
;  :binary-propagations     22
;  :conflicts               1805
;  :datatype-accessor-ax    1354
;  :datatype-constructor-ax 13065
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21773
;  :del-clause              73767
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3924
;  :mk-bool-var             83209
;  :mk-clause               74890
;  :num-allocs              28044485
;  :num-checks              721
;  :propagations            55393
;  :quant-instantiations    17358
;  :restarts                1
;  :rlimit-count            2267297
;  :time                    0.01)
; [then-branch: 181 | !(First:(Second:(Second:(Second:($t@100@02))))[1] == 0 || First:(Second:(Second:(Second:($t@100@02))))[1] == -1) | live]
; [else-branch: 181 | First:(Second:(Second:(Second:($t@100@02))))[1] == 0 || First:(Second:(Second:(Second:($t@100@02))))[1] == -1 | live]
(push) ; 9
; [then-branch: 181 | !(First:(Second:(Second:(Second:($t@100@02))))[1] == 0 || First:(Second:(Second:(Second:($t@100@02))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        1)
      (- 0 1)))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               135706
;  :arith-add-rows          44926
;  :arith-assert-diseq      11632
;  :arith-assert-lower      21805
;  :arith-assert-upper      18025
;  :arith-bound-prop        6197
;  :arith-conflicts         276
;  :arith-eq-adapter        10930
;  :arith-fixed-eqs         12418
;  :arith-offset-eqs        11876
;  :arith-pivots            6403
;  :binary-propagations     22
;  :conflicts               1805
;  :datatype-accessor-ax    1354
;  :datatype-constructor-ax 13065
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21773
;  :del-clause              73767
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3924
;  :mk-bool-var             83213
;  :mk-clause               74897
;  :num-allocs              28044485
;  :num-checks              722
;  :propagations            55394
;  :quant-instantiations    17359
;  :restarts                1
;  :rlimit-count            2267515)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               135706
;  :arith-add-rows          44926
;  :arith-assert-diseq      11632
;  :arith-assert-lower      21805
;  :arith-assert-upper      18025
;  :arith-bound-prop        6197
;  :arith-conflicts         276
;  :arith-eq-adapter        10930
;  :arith-fixed-eqs         12418
;  :arith-offset-eqs        11876
;  :arith-pivots            6403
;  :binary-propagations     22
;  :conflicts               1805
;  :datatype-accessor-ax    1354
;  :datatype-constructor-ax 13065
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21773
;  :del-clause              73767
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3924
;  :mk-bool-var             83213
;  :mk-clause               74897
;  :num-allocs              28044485
;  :num-checks              723
;  :propagations            55394
;  :quant-instantiations    17359
;  :restarts                1
;  :rlimit-count            2267530)
(pop) ; 9
(push) ; 9
; [else-branch: 181 | First:(Second:(Second:(Second:($t@100@02))))[1] == 0 || First:(Second:(Second:(Second:($t@100@02))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          1)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          1)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1) ==> diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] !(old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1)
; [eval] old(diz.Main_event_state[2]) == 0 || old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2]) == 0
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 8
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               135712
;  :arith-add-rows          44926
;  :arith-assert-diseq      11632
;  :arith-assert-lower      21805
;  :arith-assert-upper      18025
;  :arith-bound-prop        6197
;  :arith-conflicts         276
;  :arith-eq-adapter        10930
;  :arith-fixed-eqs         12418
;  :arith-offset-eqs        11876
;  :arith-pivots            6403
;  :binary-propagations     22
;  :conflicts               1805
;  :datatype-accessor-ax    1355
;  :datatype-constructor-ax 13065
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21773
;  :del-clause              73774
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3924
;  :mk-bool-var             83216
;  :mk-clause               74898
;  :num-allocs              28044485
;  :num-checks              724
;  :propagations            55394
;  :quant-instantiations    17359
;  :restarts                1
;  :rlimit-count            2268019)
(push) ; 8
; [then-branch: 182 | First:(Second:(Second:(Second:($t@100@02))))[2] == 0 | live]
; [else-branch: 182 | First:(Second:(Second:(Second:($t@100@02))))[2] != 0 | live]
(push) ; 9
; [then-branch: 182 | First:(Second:(Second:(Second:($t@100@02))))[2] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    2)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 182 | First:(Second:(Second:(Second:($t@100@02))))[2] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    0)))
; [eval] old(diz.Main_event_state[2]) == -1
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               135713
;  :arith-add-rows          44927
;  :arith-assert-diseq      11632
;  :arith-assert-lower      21805
;  :arith-assert-upper      18025
;  :arith-bound-prop        6197
;  :arith-conflicts         276
;  :arith-eq-adapter        10930
;  :arith-fixed-eqs         12418
;  :arith-offset-eqs        11876
;  :arith-pivots            6403
;  :binary-propagations     22
;  :conflicts               1805
;  :datatype-accessor-ax    1355
;  :datatype-constructor-ax 13065
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21773
;  :del-clause              73774
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          3924
;  :mk-bool-var             83220
;  :mk-clause               74905
;  :num-allocs              28044485
;  :num-checks              725
;  :propagations            55394
;  :quant-instantiations    17360
;  :restarts                1
;  :rlimit-count            2268188)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               137648
;  :arith-add-rows          45723
;  :arith-assert-diseq      11882
;  :arith-assert-lower      22207
;  :arith-assert-upper      18281
;  :arith-bound-prop        6329
;  :arith-conflicts         281
;  :arith-eq-adapter        11049
;  :arith-fixed-eqs         12763
;  :arith-offset-eqs        12289
;  :arith-pivots            6475
;  :binary-propagations     22
;  :conflicts               1823
;  :datatype-accessor-ax    1355
;  :datatype-constructor-ax 13081
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               21923
;  :del-clause              74679
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4023
;  :mk-bool-var             84001
;  :mk-clause               75803
;  :num-allocs              28044485
;  :num-checks              726
;  :propagations            56574
;  :quant-instantiations    17588
;  :restarts                1
;  :rlimit-count            2305958
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               138992
;  :arith-add-rows          46405
;  :arith-assert-diseq      12019
;  :arith-assert-lower      22427
;  :arith-assert-upper      18473
;  :arith-bound-prop        6459
;  :arith-conflicts         284
;  :arith-eq-adapter        11121
;  :arith-fixed-eqs         12987
;  :arith-offset-eqs        12580
;  :arith-pivots            6519
;  :binary-propagations     22
;  :conflicts               1838
;  :datatype-accessor-ax    1355
;  :datatype-constructor-ax 13089
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22027
;  :del-clause              75332
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4099
;  :mk-bool-var             84592
;  :mk-clause               76456
;  :num-allocs              28044485
;  :num-checks              727
;  :propagations            57280
;  :quant-instantiations    17753
;  :restarts                1
;  :rlimit-count            2340460
;  :time                    0.01)
; [then-branch: 183 | !(First:(Second:(Second:(Second:($t@100@02))))[2] == 0 || First:(Second:(Second:(Second:($t@100@02))))[2] == -1) | live]
; [else-branch: 183 | First:(Second:(Second:(Second:($t@100@02))))[2] == 0 || First:(Second:(Second:(Second:($t@100@02))))[2] == -1 | live]
(push) ; 9
; [then-branch: 183 | !(First:(Second:(Second:(Second:($t@100@02))))[2] == 0 || First:(Second:(Second:(Second:($t@100@02))))[2] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        2)
      (- 0 1)))))
; [eval] diz.Main_event_state[2] == old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               138993
;  :arith-add-rows          46406
;  :arith-assert-diseq      12019
;  :arith-assert-lower      22427
;  :arith-assert-upper      18473
;  :arith-bound-prop        6459
;  :arith-conflicts         284
;  :arith-eq-adapter        11121
;  :arith-fixed-eqs         12987
;  :arith-offset-eqs        12580
;  :arith-pivots            6519
;  :binary-propagations     22
;  :conflicts               1838
;  :datatype-accessor-ax    1355
;  :datatype-constructor-ax 13089
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22027
;  :del-clause              75332
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4099
;  :mk-bool-var             84596
;  :mk-clause               76463
;  :num-allocs              28044485
;  :num-checks              728
;  :propagations            57281
;  :quant-instantiations    17754
;  :restarts                1
;  :rlimit-count            2340780)
; [eval] old(diz.Main_event_state[2])
; [eval] diz.Main_event_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               138993
;  :arith-add-rows          46406
;  :arith-assert-diseq      12019
;  :arith-assert-lower      22427
;  :arith-assert-upper      18473
;  :arith-bound-prop        6459
;  :arith-conflicts         284
;  :arith-eq-adapter        11121
;  :arith-fixed-eqs         12987
;  :arith-offset-eqs        12580
;  :arith-pivots            6519
;  :binary-propagations     22
;  :conflicts               1838
;  :datatype-accessor-ax    1355
;  :datatype-constructor-ax 13089
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22027
;  :del-clause              75332
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4099
;  :mk-bool-var             84596
;  :mk-clause               76463
;  :num-allocs              28044485
;  :num-checks              729
;  :propagations            57281
;  :quant-instantiations    17754
;  :restarts                1
;  :rlimit-count            2340795)
(pop) ; 9
(push) ; 9
; [else-branch: 183 | First:(Second:(Second:(Second:($t@100@02))))[2] == 0 || First:(Second:(Second:(Second:($t@100@02))))[2] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          2)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          2)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      2)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1) ==> diz.Main_event_state[3] == old(diz.Main_event_state[3])
; [eval] !(old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1)
; [eval] old(diz.Main_event_state[3]) == 0 || old(diz.Main_event_state[3]) == -1
; [eval] old(diz.Main_event_state[3]) == 0
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 8
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               138999
;  :arith-add-rows          46406
;  :arith-assert-diseq      12019
;  :arith-assert-lower      22427
;  :arith-assert-upper      18473
;  :arith-bound-prop        6459
;  :arith-conflicts         284
;  :arith-eq-adapter        11121
;  :arith-fixed-eqs         12987
;  :arith-offset-eqs        12580
;  :arith-pivots            6519
;  :binary-propagations     22
;  :conflicts               1838
;  :datatype-accessor-ax    1356
;  :datatype-constructor-ax 13089
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22027
;  :del-clause              75339
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4099
;  :mk-bool-var             84599
;  :mk-clause               76464
;  :num-allocs              28044485
;  :num-checks              730
;  :propagations            57281
;  :quant-instantiations    17754
;  :restarts                1
;  :rlimit-count            2341294)
(push) ; 8
; [then-branch: 184 | First:(Second:(Second:(Second:($t@100@02))))[3] == 0 | live]
; [else-branch: 184 | First:(Second:(Second:(Second:($t@100@02))))[3] != 0 | live]
(push) ; 9
; [then-branch: 184 | First:(Second:(Second:(Second:($t@100@02))))[3] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    3)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 184 | First:(Second:(Second:(Second:($t@100@02))))[3] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    0)))
; [eval] old(diz.Main_event_state[3]) == -1
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               139000
;  :arith-add-rows          46407
;  :arith-assert-diseq      12019
;  :arith-assert-lower      22427
;  :arith-assert-upper      18473
;  :arith-bound-prop        6459
;  :arith-conflicts         284
;  :arith-eq-adapter        11121
;  :arith-fixed-eqs         12987
;  :arith-offset-eqs        12580
;  :arith-pivots            6519
;  :binary-propagations     22
;  :conflicts               1838
;  :datatype-accessor-ax    1356
;  :datatype-constructor-ax 13089
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22027
;  :del-clause              75339
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4099
;  :mk-bool-var             84603
;  :mk-clause               76471
;  :num-allocs              28044485
;  :num-checks              731
;  :propagations            57281
;  :quant-instantiations    17755
;  :restarts                1
;  :rlimit-count            2341503)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               140669
;  :arith-add-rows          47186
;  :arith-assert-diseq      12220
;  :arith-assert-lower      22782
;  :arith-assert-upper      18736
;  :arith-bound-prop        6610
;  :arith-conflicts         286
;  :arith-eq-adapter        11243
;  :arith-fixed-eqs         13281
;  :arith-offset-eqs        12897
;  :arith-pivots            6589
;  :binary-propagations     22
;  :conflicts               1848
;  :datatype-accessor-ax    1356
;  :datatype-constructor-ax 13105
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22131
;  :del-clause              76252
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4164
;  :mk-bool-var             85379
;  :mk-clause               77377
;  :num-allocs              28044485
;  :num-checks              732
;  :propagations            58367
;  :quant-instantiations    17977
;  :restarts                1
;  :rlimit-count            2378438
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               142251
;  :arith-add-rows          47756
;  :arith-assert-diseq      12411
;  :arith-assert-lower      23096
;  :arith-assert-upper      18961
;  :arith-bound-prop        6765
;  :arith-conflicts         287
;  :arith-eq-adapter        11360
;  :arith-fixed-eqs         13604
;  :arith-offset-eqs        13283
;  :arith-pivots            6654
;  :binary-propagations     22
;  :conflicts               1862
;  :datatype-accessor-ax    1356
;  :datatype-constructor-ax 13121
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22240
;  :del-clause              77031
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4235
;  :mk-bool-var             86055
;  :mk-clause               78156
;  :num-allocs              28044485
;  :num-checks              733
;  :propagations            59299
;  :quant-instantiations    18162
;  :restarts                1
;  :rlimit-count            2406503
;  :time                    0.01)
; [then-branch: 185 | !(First:(Second:(Second:(Second:($t@100@02))))[3] == 0 || First:(Second:(Second:(Second:($t@100@02))))[3] == -1) | live]
; [else-branch: 185 | First:(Second:(Second:(Second:($t@100@02))))[3] == 0 || First:(Second:(Second:(Second:($t@100@02))))[3] == -1 | live]
(push) ; 9
; [then-branch: 185 | !(First:(Second:(Second:(Second:($t@100@02))))[3] == 0 || First:(Second:(Second:(Second:($t@100@02))))[3] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        3)
      (- 0 1)))))
; [eval] diz.Main_event_state[3] == old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               142252
;  :arith-add-rows          47757
;  :arith-assert-diseq      12411
;  :arith-assert-lower      23096
;  :arith-assert-upper      18961
;  :arith-bound-prop        6765
;  :arith-conflicts         287
;  :arith-eq-adapter        11360
;  :arith-fixed-eqs         13604
;  :arith-offset-eqs        13283
;  :arith-pivots            6654
;  :binary-propagations     22
;  :conflicts               1862
;  :datatype-accessor-ax    1356
;  :datatype-constructor-ax 13121
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22240
;  :del-clause              77031
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4235
;  :mk-bool-var             86059
;  :mk-clause               78163
;  :num-allocs              28044485
;  :num-checks              734
;  :propagations            59300
;  :quant-instantiations    18163
;  :restarts                1
;  :rlimit-count            2406721)
; [eval] old(diz.Main_event_state[3])
; [eval] diz.Main_event_state[3]
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               142252
;  :arith-add-rows          47757
;  :arith-assert-diseq      12411
;  :arith-assert-lower      23096
;  :arith-assert-upper      18961
;  :arith-bound-prop        6765
;  :arith-conflicts         287
;  :arith-eq-adapter        11360
;  :arith-fixed-eqs         13604
;  :arith-offset-eqs        13283
;  :arith-pivots            6654
;  :binary-propagations     22
;  :conflicts               1862
;  :datatype-accessor-ax    1356
;  :datatype-constructor-ax 13121
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22240
;  :del-clause              77031
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4235
;  :mk-bool-var             86059
;  :mk-clause               78163
;  :num-allocs              28044485
;  :num-checks              735
;  :propagations            59300
;  :quant-instantiations    18163
;  :restarts                1
;  :rlimit-count            2406736)
(pop) ; 9
(push) ; 9
; [else-branch: 185 | First:(Second:(Second:(Second:($t@100@02))))[3] == 0 || First:(Second:(Second:(Second:($t@100@02))))[3] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          3)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          3)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      3)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      3))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1) ==> diz.Main_event_state[4] == old(diz.Main_event_state[4])
; [eval] !(old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1)
; [eval] old(diz.Main_event_state[4]) == 0 || old(diz.Main_event_state[4]) == -1
; [eval] old(diz.Main_event_state[4]) == 0
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 8
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               142258
;  :arith-add-rows          47757
;  :arith-assert-diseq      12411
;  :arith-assert-lower      23096
;  :arith-assert-upper      18961
;  :arith-bound-prop        6765
;  :arith-conflicts         287
;  :arith-eq-adapter        11360
;  :arith-fixed-eqs         13604
;  :arith-offset-eqs        13283
;  :arith-pivots            6654
;  :binary-propagations     22
;  :conflicts               1862
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13121
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22240
;  :del-clause              77038
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4235
;  :mk-bool-var             86062
;  :mk-clause               78164
;  :num-allocs              28044485
;  :num-checks              736
;  :propagations            59300
;  :quant-instantiations    18163
;  :restarts                1
;  :rlimit-count            2407245)
(push) ; 8
; [then-branch: 186 | First:(Second:(Second:(Second:($t@100@02))))[4] == 0 | live]
; [else-branch: 186 | First:(Second:(Second:(Second:($t@100@02))))[4] != 0 | live]
(push) ; 9
; [then-branch: 186 | First:(Second:(Second:(Second:($t@100@02))))[4] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    4)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 186 | First:(Second:(Second:(Second:($t@100@02))))[4] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    0)))
; [eval] old(diz.Main_event_state[4]) == -1
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               142259
;  :arith-add-rows          47758
;  :arith-assert-diseq      12411
;  :arith-assert-lower      23096
;  :arith-assert-upper      18961
;  :arith-bound-prop        6765
;  :arith-conflicts         287
;  :arith-eq-adapter        11360
;  :arith-fixed-eqs         13604
;  :arith-offset-eqs        13283
;  :arith-pivots            6654
;  :binary-propagations     22
;  :conflicts               1862
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13121
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22240
;  :del-clause              77038
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4235
;  :mk-bool-var             86066
;  :mk-clause               78171
;  :num-allocs              28044485
;  :num-checks              737
;  :propagations            59300
;  :quant-instantiations    18164
;  :restarts                1
;  :rlimit-count            2407454)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               144183
;  :arith-add-rows          48266
;  :arith-assert-diseq      12642
;  :arith-assert-lower      23429
;  :arith-assert-upper      19244
;  :arith-bound-prop        6891
;  :arith-conflicts         289
;  :arith-eq-adapter        11460
;  :arith-fixed-eqs         13900
;  :arith-offset-eqs        13664
;  :arith-pivots            6701
;  :binary-propagations     22
;  :conflicts               1879
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13137
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22364
;  :del-clause              77891
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4379
;  :mk-bool-var             86859
;  :mk-clause               79017
;  :num-allocs              28044485
;  :num-checks              738
;  :propagations            60445
;  :quant-instantiations    18396
;  :restarts                1
;  :rlimit-count            2435176
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               145800
;  :arith-add-rows          48921
;  :arith-assert-diseq      12811
;  :arith-assert-lower      23707
;  :arith-assert-upper      19475
;  :arith-bound-prop        7042
;  :arith-conflicts         290
;  :arith-eq-adapter        11558
;  :arith-fixed-eqs         14175
;  :arith-offset-eqs        14019
;  :arith-pivots            6749
;  :binary-propagations     22
;  :conflicts               1896
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13153
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22462
;  :del-clause              78697
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4516
;  :mk-bool-var             87537
;  :mk-clause               79823
;  :num-allocs              28044485
;  :num-checks              739
;  :propagations            61400
;  :quant-instantiations    18597
;  :restarts                1
;  :rlimit-count            2468782
;  :time                    0.01)
; [then-branch: 187 | !(First:(Second:(Second:(Second:($t@100@02))))[4] == 0 || First:(Second:(Second:(Second:($t@100@02))))[4] == -1) | live]
; [else-branch: 187 | First:(Second:(Second:(Second:($t@100@02))))[4] == 0 || First:(Second:(Second:(Second:($t@100@02))))[4] == -1 | live]
(push) ; 9
; [then-branch: 187 | !(First:(Second:(Second:(Second:($t@100@02))))[4] == 0 || First:(Second:(Second:(Second:($t@100@02))))[4] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        4)
      (- 0 1)))))
; [eval] diz.Main_event_state[4] == old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               145801
;  :arith-add-rows          48922
;  :arith-assert-diseq      12811
;  :arith-assert-lower      23707
;  :arith-assert-upper      19475
;  :arith-bound-prop        7042
;  :arith-conflicts         290
;  :arith-eq-adapter        11558
;  :arith-fixed-eqs         14175
;  :arith-offset-eqs        14019
;  :arith-pivots            6749
;  :binary-propagations     22
;  :conflicts               1896
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13153
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22462
;  :del-clause              78697
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4516
;  :mk-bool-var             87541
;  :mk-clause               79830
;  :num-allocs              28044485
;  :num-checks              740
;  :propagations            61401
;  :quant-instantiations    18598
;  :restarts                1
;  :rlimit-count            2468972)
; [eval] old(diz.Main_event_state[4])
; [eval] diz.Main_event_state[4]
(push) ; 10
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               145801
;  :arith-add-rows          48922
;  :arith-assert-diseq      12811
;  :arith-assert-lower      23707
;  :arith-assert-upper      19475
;  :arith-bound-prop        7042
;  :arith-conflicts         290
;  :arith-eq-adapter        11558
;  :arith-fixed-eqs         14175
;  :arith-offset-eqs        14019
;  :arith-pivots            6749
;  :binary-propagations     22
;  :conflicts               1896
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13153
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22462
;  :del-clause              78697
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4516
;  :mk-bool-var             87541
;  :mk-clause               79830
;  :num-allocs              28044485
;  :num-checks              741
;  :propagations            61401
;  :quant-instantiations    18598
;  :restarts                1
;  :rlimit-count            2468987)
(pop) ; 9
(push) ; 9
; [else-branch: 187 | First:(Second:(Second:(Second:($t@100@02))))[4] == 0 || First:(Second:(Second:(Second:($t@100@02))))[4] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          4)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          4)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      4)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      4))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@02))))))))))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1) ==> diz.Main_event_state[5] == old(diz.Main_event_state[5])
; [eval] !(old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1)
; [eval] old(diz.Main_event_state[5]) == 0 || old(diz.Main_event_state[5]) == -1
; [eval] old(diz.Main_event_state[5]) == 0
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 8
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               145816
;  :arith-add-rows          48922
;  :arith-assert-diseq      12811
;  :arith-assert-lower      23707
;  :arith-assert-upper      19475
;  :arith-bound-prop        7042
;  :arith-conflicts         290
;  :arith-eq-adapter        11558
;  :arith-fixed-eqs         14175
;  :arith-offset-eqs        14019
;  :arith-pivots            6749
;  :binary-propagations     22
;  :conflicts               1896
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13153
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22462
;  :del-clause              78704
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4516
;  :mk-bool-var             87543
;  :mk-clause               79831
;  :num-allocs              28044485
;  :num-checks              742
;  :propagations            61401
;  :quant-instantiations    18598
;  :restarts                1
;  :rlimit-count            2469427)
(push) ; 8
; [then-branch: 188 | First:(Second:(Second:(Second:($t@100@02))))[5] == 0 | live]
; [else-branch: 188 | First:(Second:(Second:(Second:($t@100@02))))[5] != 0 | live]
(push) ; 9
; [then-branch: 188 | First:(Second:(Second:(Second:($t@100@02))))[5] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
    5)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 188 | First:(Second:(Second:(Second:($t@100@02))))[5] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    0)))
; [eval] old(diz.Main_event_state[5]) == -1
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               145817
;  :arith-add-rows          48923
;  :arith-assert-diseq      12811
;  :arith-assert-lower      23707
;  :arith-assert-upper      19475
;  :arith-bound-prop        7042
;  :arith-conflicts         290
;  :arith-eq-adapter        11558
;  :arith-fixed-eqs         14175
;  :arith-offset-eqs        14019
;  :arith-pivots            6749
;  :binary-propagations     22
;  :conflicts               1896
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13153
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22462
;  :del-clause              78704
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.77
;  :memory                  6.77
;  :minimized-lits          4516
;  :mk-bool-var             87547
;  :mk-clause               79838
;  :num-allocs              28044485
;  :num-checks              743
;  :propagations            61401
;  :quant-instantiations    18599
;  :restarts                1
;  :rlimit-count            2469594)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               147663
;  :arith-add-rows          50597
;  :arith-assert-diseq      13046
;  :arith-assert-lower      24042
;  :arith-assert-upper      19777
;  :arith-bound-prop        7205
;  :arith-conflicts         294
;  :arith-eq-adapter        11657
;  :arith-fixed-eqs         14468
;  :arith-offset-eqs        14388
;  :arith-pivots            6827
;  :binary-propagations     22
;  :conflicts               1916
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13169
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22607
;  :del-clause              79662
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.87
;  :memory                  6.87
;  :minimized-lits          4631
;  :mk-bool-var             88407
;  :mk-clause               80789
;  :num-allocs              28660423
;  :num-checks              744
;  :propagations            62513
;  :quant-instantiations    18827
;  :restarts                1
;  :rlimit-count            2536114
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               149589
;  :arith-add-rows          51711
;  :arith-assert-diseq      13288
;  :arith-assert-lower      24486
;  :arith-assert-upper      20084
;  :arith-bound-prop        7342
;  :arith-conflicts         299
;  :arith-eq-adapter        11795
;  :arith-fixed-eqs         14794
;  :arith-offset-eqs        14741
;  :arith-pivots            6918
;  :binary-propagations     22
;  :conflicts               1939
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13185
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22742
;  :del-clause              80672
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.87
;  :memory                  6.87
;  :minimized-lits          4763
;  :mk-bool-var             89346
;  :mk-clause               81799
;  :num-allocs              28660423
;  :num-checks              745
;  :propagations            63920
;  :quant-instantiations    19100
;  :restarts                1
;  :rlimit-count            2588180
;  :time                    0.01)
; [then-branch: 189 | !(First:(Second:(Second:(Second:($t@100@02))))[5] == 0 || First:(Second:(Second:(Second:($t@100@02))))[5] == -1) | live]
; [else-branch: 189 | First:(Second:(Second:(Second:($t@100@02))))[5] == 0 || First:(Second:(Second:(Second:($t@100@02))))[5] == -1 | live]
(push) ; 9
; [then-branch: 189 | !(First:(Second:(Second:(Second:($t@100@02))))[5] == 0 || First:(Second:(Second:(Second:($t@100@02))))[5] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
        5)
      (- 0 1)))))
; [eval] diz.Main_event_state[5] == old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               149590
;  :arith-add-rows          51712
;  :arith-assert-diseq      13288
;  :arith-assert-lower      24486
;  :arith-assert-upper      20084
;  :arith-bound-prop        7342
;  :arith-conflicts         299
;  :arith-eq-adapter        11795
;  :arith-fixed-eqs         14794
;  :arith-offset-eqs        14741
;  :arith-pivots            6918
;  :binary-propagations     22
;  :conflicts               1939
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13185
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22742
;  :del-clause              80672
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.87
;  :memory                  6.87
;  :minimized-lits          4763
;  :mk-bool-var             89350
;  :mk-clause               81806
;  :num-allocs              28660423
;  :num-checks              746
;  :propagations            63921
;  :quant-instantiations    19101
;  :restarts                1
;  :rlimit-count            2588368)
; [eval] old(diz.Main_event_state[5])
; [eval] diz.Main_event_state[5]
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               149590
;  :arith-add-rows          51712
;  :arith-assert-diseq      13288
;  :arith-assert-lower      24486
;  :arith-assert-upper      20084
;  :arith-bound-prop        7342
;  :arith-conflicts         299
;  :arith-eq-adapter        11795
;  :arith-fixed-eqs         14794
;  :arith-offset-eqs        14741
;  :arith-pivots            6918
;  :binary-propagations     22
;  :conflicts               1939
;  :datatype-accessor-ax    1357
;  :datatype-constructor-ax 13185
;  :datatype-occurs-check   3839
;  :datatype-splits         9484
;  :decisions               22742
;  :del-clause              80672
;  :final-checks            957
;  :interface-eqs           433
;  :max-generation          13
;  :max-memory              6.87
;  :memory                  6.87
;  :minimized-lits          4763
;  :mk-bool-var             89350
;  :mk-clause               81806
;  :num-allocs              28660423
;  :num-checks              747
;  :propagations            63921
;  :quant-instantiations    19101
;  :restarts                1
;  :rlimit-count            2588383)
(pop) ; 9
(push) ; 9
; [else-branch: 189 | First:(Second:(Second:(Second:($t@100@02))))[5] == 0 || First:(Second:(Second:(Second:($t@100@02))))[5] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          5)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
          5)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))
      5)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@100@02)))))
      5))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@105@02 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 190 | 0 <= i@105@02 | live]
; [else-branch: 190 | !(0 <= i@105@02) | live]
(push) ; 10
; [then-branch: 190 | 0 <= i@105@02]
(assert (<= 0 i@105@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 190 | !(0 <= i@105@02)]
(assert (not (<= 0 i@105@02)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 191 | i@105@02 < |First:(Second:($t@103@02))| && 0 <= i@105@02 | live]
; [else-branch: 191 | !(i@105@02 < |First:(Second:($t@103@02))| && 0 <= i@105@02) | live]
(push) ; 10
; [then-branch: 191 | i@105@02 < |First:(Second:($t@103@02))| && 0 <= i@105@02]
(assert (and
  (<
    i@105@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))))
  (<= 0 i@105@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@105@02 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161219
;  :arith-add-rows          57331
;  :arith-assert-diseq      14436
;  :arith-assert-lower      26520
;  :arith-assert-upper      21622
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12462
;  :arith-fixed-eqs         16699
;  :arith-offset-eqs        17260
;  :arith-pivots            7324
;  :binary-propagations     22
;  :conflicts               2053
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85077
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94657
;  :mk-clause               87248
;  :num-allocs              30553591
;  :num-checks              749
;  :propagations            71071
;  :quant-instantiations    20399
;  :restarts                2
;  :rlimit-count            2807006)
; [eval] -1
(push) ; 11
; [then-branch: 192 | First:(Second:($t@103@02))[i@105@02] == -1 | live]
; [else-branch: 192 | First:(Second:($t@103@02))[i@105@02] != -1 | live]
(push) ; 12
; [then-branch: 192 | First:(Second:($t@103@02))[i@105@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
    i@105@02)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 192 | First:(Second:($t@103@02))[i@105@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
      i@105@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@105@02 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14438
;  :arith-assert-lower      26527
;  :arith-assert-upper      21625
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12465
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7324
;  :binary-propagations     22
;  :conflicts               2053
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85077
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94672
;  :mk-clause               87259
;  :num-allocs              30553591
;  :num-checks              750
;  :propagations            71076
;  :quant-instantiations    20402
;  :restarts                2
;  :rlimit-count            2807307)
(push) ; 13
; [then-branch: 193 | 0 <= First:(Second:($t@103@02))[i@105@02] | live]
; [else-branch: 193 | !(0 <= First:(Second:($t@103@02))[i@105@02]) | live]
(push) ; 14
; [then-branch: 193 | 0 <= First:(Second:($t@103@02))[i@105@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
    i@105@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@105@02 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14438
;  :arith-assert-lower      26527
;  :arith-assert-upper      21625
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12465
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7324
;  :binary-propagations     22
;  :conflicts               2053
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85077
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94672
;  :mk-clause               87259
;  :num-allocs              30553591
;  :num-checks              751
;  :propagations            71076
;  :quant-instantiations    20402
;  :restarts                2
;  :rlimit-count            2807401)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 193 | !(0 <= First:(Second:($t@103@02))[i@105@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
      i@105@02))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 191 | !(i@105@02 < |First:(Second:($t@103@02))| && 0 <= i@105@02)]
(assert (not
  (and
    (<
      i@105@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))))
    (<= 0 i@105@02))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@105@02 Int)) (!
  (implies
    (and
      (<
        i@105@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))))
      (<= 0 i@105@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
          i@105@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
            i@105@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
            i@105@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
    i@105@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14440
;  :arith-assert-lower      26528
;  :arith-assert-upper      21626
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12467
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7324
;  :binary-propagations     22
;  :conflicts               2054
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94686
;  :mk-clause               87286
;  :num-allocs              30553591
;  :num-checks              752
;  :propagations            71078
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2807889)
(assert (forall ((i@105@02 Int)) (!
  (implies
    (and
      (<
        i@105@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))))
      (<= 0 i@105@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
          i@105@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
            i@105@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
            i@105@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@103@02)))
    i@105@02))
  :qid |prog.l<no position>|)))
(declare-const $k@106@02 $Perm)
(assert ($Perm.isReadVar $k@106@02 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@106@02 $Perm.No) (< $Perm.No $k@106@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26530
;  :arith-assert-upper      21627
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7324
;  :binary-propagations     22
;  :conflicts               2055
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94691
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              753
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808413)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@72@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26530
;  :arith-assert-upper      21627
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7324
;  :binary-propagations     22
;  :conflicts               2055
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94691
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              754
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808424)
(assert (< $k@106@02 $k@72@02))
(assert (<= $Perm.No (- $k@72@02 $k@106@02)))
(assert (<= (- $k@72@02 $k@106@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@72@02 $k@106@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2056
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              755
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808638)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2057
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              756
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808686)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2058
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              757
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808734)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2059
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              758
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808782)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2060
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              759
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808830)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2061
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              760
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808878)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2062
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              761
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808926)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2063
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              762
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2808974)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2064
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              763
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809022)
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14441
;  :arith-assert-lower      26532
;  :arith-assert-upper      21628
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12468
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2065
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94694
;  :mk-clause               87288
;  :num-allocs              30553591
;  :num-checks              764
;  :propagations            71079
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809070)
(declare-const $k@107@02 $Perm)
(assert ($Perm.isReadVar $k@107@02 $Perm.Write))
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14442
;  :arith-assert-lower      26534
;  :arith-assert-upper      21629
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12469
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2066
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94698
;  :mk-clause               87290
;  :num-allocs              30553591
;  :num-checks              765
;  :propagations            71080
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809266)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@107@02 $Perm.No) (< $Perm.No $k@107@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14442
;  :arith-assert-lower      26534
;  :arith-assert-upper      21629
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12469
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2067
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94698
;  :mk-clause               87290
;  :num-allocs              30553591
;  :num-checks              766
;  :propagations            71080
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809316)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@73@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14442
;  :arith-assert-lower      26534
;  :arith-assert-upper      21629
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12469
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7325
;  :binary-propagations     22
;  :conflicts               2067
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94698
;  :mk-clause               87290
;  :num-allocs              30553591
;  :num-checks              767
;  :propagations            71080
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809327)
(assert (< $k@107@02 $k@73@02))
(assert (<= $Perm.No (- $k@73@02 $k@107@02)))
(assert (<= (- $k@73@02 $k@107@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@73@02 $k@107@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 8
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14442
;  :arith-assert-lower      26536
;  :arith-assert-upper      21630
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12469
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2068
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94701
;  :mk-clause               87290
;  :num-allocs              30553591
;  :num-checks              768
;  :propagations            71080
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809541)
(push) ; 8
(assert (not (< $Perm.No $k@73@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14442
;  :arith-assert-lower      26536
;  :arith-assert-upper      21630
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12469
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2069
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94701
;  :mk-clause               87290
;  :num-allocs              30553591
;  :num-checks              769
;  :propagations            71080
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809589)
(declare-const $k@108@02 $Perm)
(assert ($Perm.isReadVar $k@108@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@108@02 $Perm.No) (< $Perm.No $k@108@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14443
;  :arith-assert-lower      26538
;  :arith-assert-upper      21631
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12470
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2070
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94705
;  :mk-clause               87292
;  :num-allocs              30553591
;  :num-checks              770
;  :propagations            71081
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809788)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@74@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14443
;  :arith-assert-lower      26538
;  :arith-assert-upper      21631
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12470
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2070
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94705
;  :mk-clause               87292
;  :num-allocs              30553591
;  :num-checks              771
;  :propagations            71081
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2809799)
(assert (< $k@108@02 $k@74@02))
(assert (<= $Perm.No (- $k@74@02 $k@108@02)))
(assert (<= (- $k@74@02 $k@108@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@74@02 $k@108@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 8
(assert (not (< $Perm.No $k@74@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14443
;  :arith-assert-lower      26540
;  :arith-assert-upper      21632
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12470
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2071
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94708
;  :mk-clause               87292
;  :num-allocs              30553591
;  :num-checks              772
;  :propagations            71081
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810007)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14443
;  :arith-assert-lower      26540
;  :arith-assert-upper      21632
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12470
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2071
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94708
;  :mk-clause               87292
;  :num-allocs              30553591
;  :num-checks              773
;  :propagations            71081
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810020)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@74@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14443
;  :arith-assert-lower      26540
;  :arith-assert-upper      21632
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12470
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2072
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94708
;  :mk-clause               87292
;  :num-allocs              30553591
;  :num-checks              774
;  :propagations            71081
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810068)
(declare-const $k@109@02 $Perm)
(assert ($Perm.isReadVar $k@109@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@109@02 $Perm.No) (< $Perm.No $k@109@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14444
;  :arith-assert-lower      26542
;  :arith-assert-upper      21633
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12471
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2073
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94712
;  :mk-clause               87294
;  :num-allocs              30553591
;  :num-checks              775
;  :propagations            71082
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810267)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@75@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14444
;  :arith-assert-lower      26542
;  :arith-assert-upper      21633
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12471
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2073
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94712
;  :mk-clause               87294
;  :num-allocs              30553591
;  :num-checks              776
;  :propagations            71082
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810278)
(assert (< $k@109@02 $k@75@02))
(assert (<= $Perm.No (- $k@75@02 $k@109@02)))
(assert (<= (- $k@75@02 $k@109@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@75@02 $k@109@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 8
(assert (not (< $Perm.No $k@75@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14444
;  :arith-assert-lower      26544
;  :arith-assert-upper      21634
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12471
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2074
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94715
;  :mk-clause               87294
;  :num-allocs              30553591
;  :num-checks              777
;  :propagations            71082
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810486)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14444
;  :arith-assert-lower      26544
;  :arith-assert-upper      21634
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12471
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2074
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94715
;  :mk-clause               87294
;  :num-allocs              30553591
;  :num-checks              778
;  :propagations            71082
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810499)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@75@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14444
;  :arith-assert-lower      26544
;  :arith-assert-upper      21634
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12471
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2075
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94715
;  :mk-clause               87294
;  :num-allocs              30553591
;  :num-checks              779
;  :propagations            71082
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810547)
(declare-const $k@110@02 $Perm)
(assert ($Perm.isReadVar $k@110@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@110@02 $Perm.No) (< $Perm.No $k@110@02))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14445
;  :arith-assert-lower      26546
;  :arith-assert-upper      21635
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12472
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2076
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94719
;  :mk-clause               87296
;  :num-allocs              30553591
;  :num-checks              780
;  :propagations            71083
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810746)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@76@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14445
;  :arith-assert-lower      26546
;  :arith-assert-upper      21635
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12472
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2076
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94719
;  :mk-clause               87296
;  :num-allocs              30553591
;  :num-checks              781
;  :propagations            71083
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810757)
(assert (< $k@110@02 $k@76@02))
(assert (<= $Perm.No (- $k@76@02 $k@110@02)))
(assert (<= (- $k@76@02 $k@110@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@76@02 $k@110@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 8
(assert (not (< $Perm.No $k@76@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14445
;  :arith-assert-lower      26548
;  :arith-assert-upper      21636
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12472
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2077
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94722
;  :mk-clause               87296
;  :num-allocs              30553591
;  :num-checks              782
;  :propagations            71083
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810965)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14445
;  :arith-assert-lower      26548
;  :arith-assert-upper      21636
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12472
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2077
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94722
;  :mk-clause               87296
;  :num-allocs              30553591
;  :num-checks              783
;  :propagations            71083
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2810978)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@76@02)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57331
;  :arith-assert-diseq      14445
;  :arith-assert-lower      26548
;  :arith-assert-upper      21636
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12472
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7326
;  :binary-propagations     22
;  :conflicts               2078
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              85115
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.23
;  :minimized-lits          5327
;  :mk-bool-var             94722
;  :mk-clause               87296
;  :num-allocs              30553591
;  :num-checks              784
;  :propagations            71083
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2811026)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@103@02))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@02))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) diz@31@02 globals@32@02))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 7
(push) ; 7
; [else-branch: 125 | min_advance__107@84@02 == -1]
(assert (= min_advance__107@84@02 (- 0 1)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 55 | !(First:(Second:($t@82@02))[2] != -1 && First:(Second:($t@82@02))[1] != -1 && First:(Second:($t@82@02))[0] != -1)]
(assert (not
  (and
    (and
      (not
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2)
          (- 0 1)))
      (not
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1)
          (- 0 1))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0)
        (- 0 1))))))
(pop) ; 6
; [eval] !(diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1 && diz.Main_process_state[2] != -1)
; [eval] diz.Main_process_state[0] != -1 && diz.Main_process_state[1] != -1 && diz.Main_process_state[2] != -1
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161223
;  :arith-add-rows          57505
;  :arith-assert-diseq      14445
;  :arith-assert-lower      26548
;  :arith-assert-upper      21636
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12472
;  :arith-fixed-eqs         16700
;  :arith-offset-eqs        17260
;  :arith-pivots            7360
;  :binary-propagations     22
;  :conflicts               2078
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              87213
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94722
;  :mk-clause               87296
;  :num-allocs              31198380
;  :num-checks              785
;  :propagations            71083
;  :quant-instantiations    20405
;  :restarts                2
;  :rlimit-count            2815595)
; [eval] -1
(push) ; 6
; [then-branch: 194 | First:(Second:($t@82@02))[0] != -1 | live]
; [else-branch: 194 | First:(Second:($t@82@02))[0] == -1 | live]
(push) ; 7
; [then-branch: 194 | First:(Second:($t@82@02))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      0)
    (- 0 1))))
; [eval] diz.Main_process_state[1] != -1
; [eval] diz.Main_process_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161226
;  :arith-add-rows          57505
;  :arith-assert-diseq      14447
;  :arith-assert-lower      26555
;  :arith-assert-upper      21639
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12474
;  :arith-fixed-eqs         16701
;  :arith-offset-eqs        17260
;  :arith-pivots            7360
;  :binary-propagations     22
;  :conflicts               2078
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              87213
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94725
;  :mk-clause               87305
;  :num-allocs              31198380
;  :num-checks              786
;  :propagations            71091
;  :quant-instantiations    20408
;  :restarts                2
;  :rlimit-count            2815852)
; [eval] -1
(push) ; 8
; [then-branch: 195 | First:(Second:($t@82@02))[1] != -1 | live]
; [else-branch: 195 | First:(Second:($t@82@02))[1] == -1 | live]
(push) ; 9
; [then-branch: 195 | First:(Second:($t@82@02))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      1)
    (- 0 1))))
; [eval] diz.Main_process_state[2] != -1
; [eval] diz.Main_process_state[2]
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161229
;  :arith-add-rows          57505
;  :arith-assert-diseq      14449
;  :arith-assert-lower      26562
;  :arith-assert-upper      21642
;  :arith-bound-prop        7982
;  :arith-conflicts         323
;  :arith-eq-adapter        12476
;  :arith-fixed-eqs         16702
;  :arith-offset-eqs        17260
;  :arith-pivots            7360
;  :binary-propagations     22
;  :conflicts               2078
;  :datatype-accessor-ax    1379
;  :datatype-constructor-ax 13357
;  :datatype-occurs-check   3877
;  :datatype-splits         9586
;  :decisions               23482
;  :del-clause              87213
;  :final-checks            962
;  :interface-eqs           436
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94732
;  :mk-clause               87319
;  :num-allocs              31198380
;  :num-checks              787
;  :propagations            71097
;  :quant-instantiations    20411
;  :restarts                2
;  :rlimit-count            2816105)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 195 | First:(Second:($t@82@02))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    1)
  (- 0 1)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 194 | First:(Second:($t@82@02))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    0)
  (- 0 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 6
(assert (not (and
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1)
        (- 0 1))))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161466
;  :arith-add-rows          57505
;  :arith-assert-diseq      14453
;  :arith-assert-lower      26586
;  :arith-assert-upper      21660
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12489
;  :arith-fixed-eqs         16709
;  :arith-offset-eqs        17260
;  :arith-pivots            7362
;  :binary-propagations     22
;  :conflicts               2078
;  :datatype-accessor-ax    1382
;  :datatype-constructor-ax 13405
;  :datatype-occurs-check   3893
;  :datatype-splits         9626
;  :decisions               23538
;  :del-clause              87311
;  :final-checks            966
;  :interface-eqs           437
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94812
;  :mk-clause               87394
;  :num-allocs              31198380
;  :num-checks              788
;  :propagations            71152
;  :quant-instantiations    20428
;  :restarts                2
;  :rlimit-count            2818521
;  :time                    0.00)
(push) ; 6
(assert (not (not
  (and
    (and
      (not
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2)
          (- 0 1)))
      (not
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1)
          (- 0 1))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0)
        (- 0 1)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161712
;  :arith-add-rows          57509
;  :arith-assert-diseq      14465
;  :arith-assert-lower      26632
;  :arith-assert-upper      21684
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12512
;  :arith-fixed-eqs         16718
;  :arith-offset-eqs        17260
;  :arith-pivots            7372
;  :binary-propagations     22
;  :conflicts               2080
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87396
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94922
;  :mk-clause               87479
;  :num-allocs              31198380
;  :num-checks              789
;  :propagations            71220
;  :quant-instantiations    20449
;  :restarts                2
;  :rlimit-count            2821199
;  :time                    0.00)
; [then-branch: 196 | !(First:(Second:($t@82@02))[2] != -1 && First:(Second:($t@82@02))[1] != -1 && First:(Second:($t@82@02))[0] != -1) | live]
; [else-branch: 196 | First:(Second:($t@82@02))[2] != -1 && First:(Second:($t@82@02))[1] != -1 && First:(Second:($t@82@02))[0] != -1 | live]
(push) ; 6
; [then-branch: 196 | !(First:(Second:($t@82@02))[2] != -1 && First:(Second:($t@82@02))[1] != -1 && First:(Second:($t@82@02))[0] != -1)]
(assert (not
  (and
    (and
      (not
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            2)
          (- 0 1)))
      (not
        (=
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            1)
          (- 0 1))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          0)
        (- 0 1))))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@111@02 Int)
(push) ; 7
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 8
; [then-branch: 197 | 0 <= i@111@02 | live]
; [else-branch: 197 | !(0 <= i@111@02) | live]
(push) ; 9
; [then-branch: 197 | 0 <= i@111@02]
(assert (<= 0 i@111@02))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 197 | !(0 <= i@111@02)]
(assert (not (<= 0 i@111@02)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 198 | i@111@02 < |First:(Second:($t@82@02))| && 0 <= i@111@02 | live]
; [else-branch: 198 | !(i@111@02 < |First:(Second:($t@82@02))| && 0 <= i@111@02) | live]
(push) ; 9
; [then-branch: 198 | i@111@02 < |First:(Second:($t@82@02))| && 0 <= i@111@02]
(assert (and
  (<
    i@111@02
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
  (<= 0 i@111@02)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@111@02 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161715
;  :arith-add-rows          57509
;  :arith-assert-diseq      14465
;  :arith-assert-lower      26633
;  :arith-assert-upper      21685
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12515
;  :arith-fixed-eqs         16718
;  :arith-offset-eqs        17260
;  :arith-pivots            7372
;  :binary-propagations     22
;  :conflicts               2080
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87396
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94931
;  :mk-clause               87497
;  :num-allocs              31198380
;  :num-checks              790
;  :propagations            71220
;  :quant-instantiations    20449
;  :restarts                2
;  :rlimit-count            2821518)
; [eval] -1
(push) ; 10
; [then-branch: 199 | First:(Second:($t@82@02))[i@111@02] == -1 | live]
; [else-branch: 199 | First:(Second:($t@82@02))[i@111@02] != -1 | live]
(push) ; 11
; [then-branch: 199 | First:(Second:($t@82@02))[i@111@02] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@111@02)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 199 | First:(Second:($t@82@02))[i@111@02] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      i@111@02)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 12
(assert (not (>= i@111@02 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14467
;  :arith-assert-lower      26640
;  :arith-assert-upper      21688
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12518
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7373
;  :binary-propagations     22
;  :conflicts               2080
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87396
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94946
;  :mk-clause               87508
;  :num-allocs              31198380
;  :num-checks              791
;  :propagations            71225
;  :quant-instantiations    20452
;  :restarts                2
;  :rlimit-count            2821824)
(push) ; 12
; [then-branch: 200 | 0 <= First:(Second:($t@82@02))[i@111@02] | live]
; [else-branch: 200 | !(0 <= First:(Second:($t@82@02))[i@111@02]) | live]
(push) ; 13
; [then-branch: 200 | 0 <= First:(Second:($t@82@02))[i@111@02]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@111@02)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@111@02 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14467
;  :arith-assert-lower      26640
;  :arith-assert-upper      21688
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12518
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7373
;  :binary-propagations     22
;  :conflicts               2080
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87396
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94946
;  :mk-clause               87508
;  :num-allocs              31198380
;  :num-checks              792
;  :propagations            71225
;  :quant-instantiations    20452
;  :restarts                2
;  :rlimit-count            2821918)
; [eval] |diz.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 200 | !(0 <= First:(Second:($t@82@02))[i@111@02])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
      i@111@02))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 198 | !(i@111@02 < |First:(Second:($t@82@02))| && 0 <= i@111@02)]
(assert (not
  (and
    (<
      i@111@02
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
    (<= 0 i@111@02))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i@111@02 Int)) (!
  (implies
    (and
      (<
        i@111@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
      (<= 0 i@111@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          i@111@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@111@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@111@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@111@02))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14468
;  :arith-assert-lower      26641
;  :arith-assert-upper      21689
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12519
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7374
;  :binary-propagations     22
;  :conflicts               2081
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94958
;  :mk-clause               87526
;  :num-allocs              31198380
;  :num-checks              793
;  :propagations            71227
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2822409)
(assert (forall ((i@111@02 Int)) (!
  (implies
    (and
      (<
        i@111@02
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))))
      (<= 0 i@111@02))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          i@111@02)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@111@02)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
            i@111@02)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
    i@111@02))
  :qid |prog.l<no position>|)))
(declare-const $k@112@02 $Perm)
(assert ($Perm.isReadVar $k@112@02 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@112@02 $Perm.No) (< $Perm.No $k@112@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26643
;  :arith-assert-upper      21690
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7374
;  :binary-propagations     22
;  :conflicts               2082
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94963
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              794
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2822933)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@72@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26643
;  :arith-assert-upper      21690
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7374
;  :binary-propagations     22
;  :conflicts               2082
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94963
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              795
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2822944)
(assert (< $k@112@02 $k@72@02))
(assert (<= $Perm.No (- $k@72@02 $k@112@02)))
(assert (<= (- $k@72@02 $k@112@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@72@02 $k@112@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder != null
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2083
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              796
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823158)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2084
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              797
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823206)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2085
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              798
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823254)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2086
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              799
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823302)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2087
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              800
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823350)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2088
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              801
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823398)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2089
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              802
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823446)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2090
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              803
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823494)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2091
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              804
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823542)
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14469
;  :arith-assert-lower      26645
;  :arith-assert-upper      21691
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12520
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2092
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94966
;  :mk-clause               87528
;  :num-allocs              31198380
;  :num-checks              805
;  :propagations            71228
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823590)
(declare-const $k@113@02 $Perm)
(assert ($Perm.isReadVar $k@113@02 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14470
;  :arith-assert-lower      26647
;  :arith-assert-upper      21692
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12521
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2093
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94970
;  :mk-clause               87530
;  :num-allocs              31198380
;  :num-checks              806
;  :propagations            71229
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823786)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@113@02 $Perm.No) (< $Perm.No $k@113@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14470
;  :arith-assert-lower      26647
;  :arith-assert-upper      21692
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12521
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2094
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94970
;  :mk-clause               87530
;  :num-allocs              31198380
;  :num-checks              807
;  :propagations            71229
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823836)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@73@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14470
;  :arith-assert-lower      26647
;  :arith-assert-upper      21692
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12521
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7375
;  :binary-propagations     22
;  :conflicts               2094
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94970
;  :mk-clause               87530
;  :num-allocs              31198380
;  :num-checks              808
;  :propagations            71229
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2823847)
(assert (< $k@113@02 $k@73@02))
(assert (<= $Perm.No (- $k@73@02 $k@113@02)))
(assert (<= (- $k@73@02 $k@113@02) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@73@02 $k@113@02))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))
      $Ref.null))))
; [eval] diz.Main_adder.Full_adder_m == diz
(push) ; 7
(assert (not (< $Perm.No $k@72@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14470
;  :arith-assert-lower      26649
;  :arith-assert-upper      21693
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12521
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7376
;  :binary-propagations     22
;  :conflicts               2095
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94973
;  :mk-clause               87530
;  :num-allocs              31198380
;  :num-checks              809
;  :propagations            71229
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824061)
(push) ; 7
(assert (not (< $Perm.No $k@73@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14470
;  :arith-assert-lower      26649
;  :arith-assert-upper      21693
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12521
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7376
;  :binary-propagations     22
;  :conflicts               2096
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94973
;  :mk-clause               87530
;  :num-allocs              31198380
;  :num-checks              810
;  :propagations            71229
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824109)
(declare-const $k@114@02 $Perm)
(assert ($Perm.isReadVar $k@114@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@114@02 $Perm.No) (< $Perm.No $k@114@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14471
;  :arith-assert-lower      26651
;  :arith-assert-upper      21694
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12522
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7376
;  :binary-propagations     22
;  :conflicts               2097
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94977
;  :mk-clause               87532
;  :num-allocs              31198380
;  :num-checks              811
;  :propagations            71230
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824307)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@74@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14471
;  :arith-assert-lower      26651
;  :arith-assert-upper      21694
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12522
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7376
;  :binary-propagations     22
;  :conflicts               2097
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94977
;  :mk-clause               87532
;  :num-allocs              31198380
;  :num-checks              812
;  :propagations            71230
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824318)
(assert (< $k@114@02 $k@74@02))
(assert (<= $Perm.No (- $k@74@02 $k@114@02)))
(assert (<= (- $k@74@02 $k@114@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@74@02 $k@114@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_prc != null
(push) ; 7
(assert (not (< $Perm.No $k@74@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14471
;  :arith-assert-lower      26653
;  :arith-assert-upper      21695
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12522
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2098
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94980
;  :mk-clause               87532
;  :num-allocs              31198380
;  :num-checks              813
;  :propagations            71230
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824532)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14471
;  :arith-assert-lower      26653
;  :arith-assert-upper      21695
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12522
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2098
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94980
;  :mk-clause               87532
;  :num-allocs              31198380
;  :num-checks              814
;  :propagations            71230
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824545)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@74@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14471
;  :arith-assert-lower      26653
;  :arith-assert-upper      21695
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12522
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2099
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94980
;  :mk-clause               87532
;  :num-allocs              31198380
;  :num-checks              815
;  :propagations            71230
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824593)
(declare-const $k@115@02 $Perm)
(assert ($Perm.isReadVar $k@115@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@115@02 $Perm.No) (< $Perm.No $k@115@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14472
;  :arith-assert-lower      26655
;  :arith-assert-upper      21696
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12523
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2100
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94984
;  :mk-clause               87534
;  :num-allocs              31198380
;  :num-checks              816
;  :propagations            71231
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824792)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@75@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14472
;  :arith-assert-lower      26655
;  :arith-assert-upper      21696
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12523
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2100
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94984
;  :mk-clause               87534
;  :num-allocs              31198380
;  :num-checks              817
;  :propagations            71231
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2824803)
(assert (< $k@115@02 $k@75@02))
(assert (<= $Perm.No (- $k@75@02 $k@115@02)))
(assert (<= (- $k@75@02 $k@115@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@75@02 $k@115@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_half_adder1 != null
(push) ; 7
(assert (not (< $Perm.No $k@75@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14472
;  :arith-assert-lower      26656
;  :arith-assert-upper      21698
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12523
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2101
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94987
;  :mk-clause               87534
;  :num-allocs              31198380
;  :num-checks              818
;  :propagations            71231
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2825011)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14472
;  :arith-assert-lower      26656
;  :arith-assert-upper      21698
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12523
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2101
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94987
;  :mk-clause               87534
;  :num-allocs              31198380
;  :num-checks              819
;  :propagations            71231
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2825024)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@75@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14472
;  :arith-assert-lower      26656
;  :arith-assert-upper      21698
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12523
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2102
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94987
;  :mk-clause               87534
;  :num-allocs              31198380
;  :num-checks              820
;  :propagations            71231
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2825072)
(declare-const $k@116@02 $Perm)
(assert ($Perm.isReadVar $k@116@02 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@116@02 $Perm.No) (< $Perm.No $k@116@02))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14473
;  :arith-assert-lower      26658
;  :arith-assert-upper      21699
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12524
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2103
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94991
;  :mk-clause               87536
;  :num-allocs              31198380
;  :num-checks              821
;  :propagations            71232
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2825271)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@76@02 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14473
;  :arith-assert-lower      26658
;  :arith-assert-upper      21699
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12524
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2103
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94991
;  :mk-clause               87536
;  :num-allocs              31198380
;  :num-checks              822
;  :propagations            71232
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2825282)
(assert (< $k@116@02 $k@76@02))
(assert (<= $Perm.No (- $k@76@02 $k@116@02)))
(assert (<= (- $k@76@02 $k@116@02) $Perm.Write))
(assert (implies (< $Perm.No (- $k@76@02 $k@116@02)) (not (= diz@31@02 $Ref.null))))
; [eval] diz.Main_adder_half_adder2 != null
(push) ; 7
(assert (not (< $Perm.No $k@76@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14473
;  :arith-assert-lower      26660
;  :arith-assert-upper      21700
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12524
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2104
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94994
;  :mk-clause               87536
;  :num-allocs              31198380
;  :num-checks              823
;  :propagations            71232
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2825490)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14473
;  :arith-assert-lower      26660
;  :arith-assert-upper      21700
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12524
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2104
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94994
;  :mk-clause               87536
;  :num-allocs              31198380
;  :num-checks              824
;  :propagations            71232
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2825503)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@76@02)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               161719
;  :arith-add-rows          57509
;  :arith-assert-diseq      14473
;  :arith-assert-lower      26660
;  :arith-assert-upper      21700
;  :arith-bound-prop        7986
;  :arith-conflicts         323
;  :arith-eq-adapter        12524
;  :arith-fixed-eqs         16719
;  :arith-offset-eqs        17260
;  :arith-pivots            7377
;  :binary-propagations     22
;  :conflicts               2105
;  :datatype-accessor-ax    1385
;  :datatype-constructor-ax 13453
;  :datatype-occurs-check   3909
;  :datatype-splits         9666
;  :decisions               23595
;  :del-clause              87425
;  :final-checks            972
;  :interface-eqs           440
;  :max-generation          14
;  :max-memory              7.23
;  :memory                  7.14
;  :minimized-lits          5327
;  :mk-bool-var             94994
;  :mk-clause               87536
;  :num-allocs              31198380
;  :num-checks              825
;  :propagations            71232
;  :quant-instantiations    20455
;  :restarts                2
;  :rlimit-count            2825551)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@82@02))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@02))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@02)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) diz@31@02 globals@32@02))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 6
(push) ; 6
; [else-branch: 196 | First:(Second:($t@82@02))[2] != -1 && First:(Second:($t@82@02))[1] != -1 && First:(Second:($t@82@02))[0] != -1]
(assert (and
  (and
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
          1)
        (- 0 1))))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@02)))
        0)
      (- 0 1)))))
(pop) ; 6
(pop) ; 5
; [eval] !true
; [then-branch: 201 | False | dead]
; [else-branch: 201 | True | live]
(push) ; 5
; [else-branch: 201 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
